name: 'Build and Push image'
description: 'Composite action to generate registry images'

inputs:
  registry:
    description: 'Image registry to use'
    required: true
    default: 'gcr.io/linen-analyst-344721'
  username:
    description: 'Username to the image registry'
    required: true
  password:
    description: 'Password for the image registry'
    required: true
  image:
    description: 'Docker image to build'
    required: true
  context:
    description: 'Context to docker build'
    required: true
    default: '.'
  file:
    description: 'Path to the docker file relative to context'
    required: true
  build-args:
    description: 'Build arguments for docker (key=value format)'
    required: false
  git-auth-token:
    description: 'The GitHub access token for accessing private repos'
    required: true

outputs:
  image-tag:
    description: 'Final image tag built and pushed'
    value: ${{ steps.set-tag.outputs.image-tag }}

runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
      with:
        images: ${{ inputs.registry }}/${{ inputs.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
          type=schedule,pattern=nightly
          type=sha
          type=sha,format=long

    - name: Validate and sanitize build arguments
      shell: bash
      run: |
        set -e
        ARGS="${{ inputs.build-args }}"

        # Comprehensive validation
        echo "Validating build arguments..."
        
        # Check for empty input
        if [[ -z "$ARGS" ]]; then
          echo "No build arguments provided"
          exit 0
        fi
        
        # Define security patterns to reject
        DANGEROUS_PATTERNS=(
          '\$\('          # Command substitution
          '`'             # Backticks  
          '\|\|'          # OR operator
          '&&'            # AND operator
          ';'             # Command separator
          '&'             # Background execution
          '>'             # Redirection
          '<'             # Input redirection
          'curl'          # HTTP client
          'wget'          # HTTP client
          'nc\|netcat'    # Network tools
          'bash'          # Shell execution
          'sh '           # Shell execution
          '/bin/'         # Binary execution
          'eval'          # Code evaluation
          'exec'          # Command execution
        )
        
        # Check each line
        while IFS= read -r line; do
          if [[ -n "$line" ]]; then
            # Check for dangerous patterns
            for pattern in "${DANGEROUS_PATTERNS[@]}"; do
              if echo "$line" | grep -qiE "$pattern"; then
                echo "Dangerous pattern detected: $pattern"
                echo "Line: $line"
                exit 1
              fi
            done
            
            # Validate key=value format
            if [[ ! "$line" =~ ^[A-Za-z_][A-Za-z0-9_]*=[A-Za-z0-9._/-]+$ ]]; then
              echo "Invalid format: $line"
              echo "Must be: KEY=value (alphanumeric only)"
              exit 1
            fi
          fi
        done <<< "$ARGS"
        
        echo "Build arguments validated successfully"

    - name: Set GIT_SHA
      shell: bash
      run: echo "GIT_SHA=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_ENV

    - name: Build and push registry Docker image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.file }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          ${{ inputs.build-args }}
          GIT_SHA=${{ env.GIT_SHA }}
        secrets: |
          git_auth_token=${{ inputs.git-auth-token }}
        cache-from: type=registry,ref=${{ inputs.registry }}/${{ inputs.image }}:latest
        cache-to: type=registry,ref=${{ inputs.registry }}/${{ inputs.image }}:latest,mode=max,enable=${{ github.event_name == 'merge_group' }}

    - name: Set output image tag
      id: set-tag
      shell: bash
      run: |
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
