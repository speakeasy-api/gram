name: Pull Request
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  REGISTRY: gcr.io/linen-analyst-344721 #gcr for speakeasy-common gcr registry
  DOCKER_REPOSITORY_OWNER: ${{github.repository_owner}}

jobs:
  changes:
    name: Tag branch changes
    runs-on: ubicloud-standard-4
    permissions:
      contents: "read"
      pull-requests: read
    outputs:
      server: ${{ steps.gates.outputs.server }}
      client: ${{ steps.gates.outputs.client }}
      functions: ${{ steps.gates.outputs.functions }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        name: Check for changed packages
        id: filter
        with:
          filters: .github/filters.yaml
      - id: gates
        name: Set outputs
        run: |
          if [[ "${{ steps.filter.outputs.server }}" == "true" || "${{ github.ref }}" ==  "refs/heads/main" ]]; then
            echo "server=true" >> $GITHUB_OUTPUT
            echo "Server jobs will run."
          else
            echo "Server jobs will be skipped."
          fi

          if [[ "${{ steps.filter.outputs.client }}" == "true" || "${{ github.ref }}" ==  "refs/heads/main" ]]; then
            echo "client=true" >> $GITHUB_OUTPUT
            echo "Client jobs will run."
          else
            echo "Client jobs will be skipped."
          fi

          if [[ "${{ steps.filter.outputs.functions }}" == "true" || "${{ github.ref }}" ==  "refs/heads/main" ]]; then
            echo "functions=true" >> $GITHUB_OUTPUT
            echo "Functions jobs will run."
          else
            echo "Functions jobs will be skipped."
          fi

  docker-build-server:
    runs-on: ubicloud-standard-4
    needs: changes
    env:
      GOMAXPROCS: 4
    steps:
      - name: Skip if no server changes exist
        if: ${{ needs.changes.outputs.server != 'true' }}
        run: echo "No server changes detected — skipping server-build-lint job."

      - name: Checkout
        if: ${{ needs.changes.outputs.server == 'true' }}
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0
      - id: "auth"
        if: ${{ needs.changes.outputs.server == 'true' }}
        name: "Authenticate to Google Cloud"
        uses: google-github-actions/auth@7c6bc770dae815cd3e89ee6cdf493a5fab2cc093 # v3.0.0
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/409661704476/locations/global/workloadIdentityPools/ga-pool/providers/github-oidc-provider"
          service_account: "speakeasy-registry-ga-ci@linen-analyst-344721.iam.gserviceaccount.com"
      - name: Login to GCR
        if: ${{ needs.changes.outputs.server == 'true' }}
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: gcr.io/linen-analyst-344721
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Build and Push Registry image to GCR
        id: build
        if: ${{ needs.changes.outputs.server == 'true' }}
        uses: ./.github/workflows/composite/build-push
        with:
          registry: ${{ env.REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
          image: ${{ env.DOCKER_REPOSITORY_OWNER }}/gram
          context: ./server
          file: server/Dockerfile
          git-auth-token: ${{ secrets.BOT_REPO_TOKEN }}
          build-args: |
            GIT_USERNAME=speakeasybot
      - name: Pull and Run Image
        if: ${{ needs.changes.outputs.server == 'true' }}
        run: |
          echo "Pulling image: ${{ steps.build.outputs.image-tag }}"
          docker pull ${{ steps.build.outputs.image-tag }}
          echo "Running image..."
          docker run --rm ${{ steps.build.outputs.image-tag }} version

  server-build-lint:
    runs-on: ubicloud-standard-4
    needs: changes
    env:
      GOMAXPROCS: 4
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: gram
          POSTGRES_PASSWORD: gram
          POSTGRES_DB: gram
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5439:5432
    steps:
      - name: Skip if no server changes exist
        if: ${{ needs.changes.outputs.server != 'true' }}
        run: echo "No server changes detected — skipping server-build-lint job."

      - name: Checkout
        if: ${{ needs.changes.outputs.server == 'true' }}
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Setup Mise
        if: ${{ needs.changes.outputs.server == 'true' }}
        uses: jdx/mise-action@156251fcc627ac4e26cb0f93dd47d1d4979abf24 # v3.3.0
        with:
          install: true
          cache: true
          env: false

      - name: Prepare GitHub Actions environment
        if: ${{ needs.changes.outputs.server == 'true' }}
        run: mise run github

      - name: Cache Go
        if: ${{ needs.changes.outputs.server == 'true' }}
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          key: ${{ env.GH_CACHE_GO_KEY }}
          restore-keys: |
            ${{ env.GH_CACHE_GO_KEY }}
            ${{ env.GH_CACHE_GO_KEY_PARTIAL }}
          path: |
            ${{ env.GOCACHE }}
            ${{ env.GOMODCACHE }}

      - name: Build
        if: ${{ needs.changes.outputs.server == 'true' }}
        run: mise run build:server --readonly

      - name: Lint with golangci-lint
        if: ${{ needs.changes.outputs.server == 'true' }}
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          install-mode: none
          working-directory: server

      - name: Install Go tools
        if: ${{ needs.changes.outputs.server == 'true' }}
        run: go install tool
        working-directory: server

        # TODO add speakeasy cli so the sdk can be generated
      - name: Run code generators
        if: ${{ needs.changes.outputs.server == 'true' }}
        run: mise run "gen:server"

      - name: Run "go mod tidy"
        if: ${{ needs.changes.outputs.server == 'true' }}
        run: mise run go:tidy

      - name: Check for dirty files
        if: ${{ needs.changes.outputs.server == 'true' }}
        run: mise run git:porcelain

  server-test:
    runs-on: ubicloud-standard-4
    needs: changes
    env:
      GOMAXPROCS: 4
    steps:
      - name: Skip if no server changes exist
        if: ${{ needs.changes.outputs.server != 'true' }}
        run: echo "No server changes detected — skipping server-test job."

      - name: Checkout
        if: ${{ needs.changes.outputs.server == 'true' }}
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Setup Mise
        if: ${{ needs.changes.outputs.server == 'true' }}
        uses: jdx/mise-action@156251fcc627ac4e26cb0f93dd47d1d4979abf24 # v3.3.0
        with:
          install: true
          cache: true
          env: false

      - name: Prepare GitHub Actions environment
        if: ${{ needs.changes.outputs.server == 'true' }}
        run: mise run github

      - name: Cache Go
        if: ${{ needs.changes.outputs.server == 'true' }}
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          key: ${{ env.GH_CACHE_GO_KEY }}
          restore-keys: |
            ${{ env.GH_CACHE_GO_KEY }}
            ${{ env.GH_CACHE_GO_KEY_PARTIAL }}
          path: |
            ${{ env.GOCACHE }}
            ${{ env.GOMODCACHE }}

      - name: Install Go deps
        if: ${{ needs.changes.outputs.server == 'true' }}
        run: mise run install:go

      - name: Test
        if: ${{ needs.changes.outputs.server == 'true' }}
        run: mise run test:server

  docker-build-client:
    runs-on: ubicloud-standard-4
    needs: changes
    env:
      GRAM_GIT_SHA: "${{ github.sha }}"
    steps:
      - name: Skip if no client changes exist
        if: ${{ needs.changes.outputs.client != 'true' }}
        run: echo "No client changes detected — skipping client-build job."

      - name: Checkout
        if: ${{ needs.changes.outputs.client == 'true' }}
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Setup Mise
        if: ${{ needs.changes.outputs.client == 'true' }}
        uses: jdx/mise-action@156251fcc627ac4e26cb0f93dd47d1d4979abf24 # v3.3.0
        with:
          install: true
          cache: true
          env: false

      - name: Prepare GitHub Actions environment
        if: ${{ needs.changes.outputs.client == 'true' }}
        run: mise run github

      - name: Cache PNPM
        if: ${{ needs.changes.outputs.client == 'true' }}
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          key: ${{ env.GH_CACHE_PNPM_KEY }}
          restore-keys: |
            ${{ env.GH_CACHE_PNPM_KEY }}
            ${{ env.GH_CACHE_PNPM_KEY_PARTIAL }}
          path: |
            ${{ env.PNPM_STORE_PATH }}

      - name: Install dependencies
        if: ${{ needs.changes.outputs.client == 'true' }}
        run: pnpm install --frozen-lockfile

      - name: Build
        if: ${{ needs.changes.outputs.client == 'true' }}
        env:
          NODE_ENV: production
        run: mise exec --env viteprod -- pnpm build

      - name: Upload source maps to DataDog
        if: ${{ needs.changes.outputs.client == 'true' }}
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
        run: mise run datadog:sourcemaps --git-sha "${{ github.sha }}"

      - id: "auth"
        if: needs.changes.outputs.client == 'true'
        name: "Authenticate to Google Cloud"
        uses: google-github-actions/auth@7c6bc770dae815cd3e89ee6cdf493a5fab2cc093 # v3.0.0
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/409661704476/locations/global/workloadIdentityPools/ga-pool/providers/github-oidc-provider"
          service_account: "speakeasy-registry-ga-ci@linen-analyst-344721.iam.gserviceaccount.com"
      - name: Login to GCR
        if: needs.changes.outputs.client == 'true'
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: gcr.io/linen-analyst-344721
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Build and Push Registry image to GCR
        id: build
        if: needs.changes.outputs.client == 'true'
        uses: ./.github/workflows/composite/build-push
        with:
          registry: ${{ env.REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
          image: ${{ env.DOCKER_REPOSITORY_OWNER }}/gram-dashboard
          context: ./client/dashboard
          file: client/dashboard/Dockerfile
          git-auth-token: ${{ secrets.BOT_REPO_TOKEN }}

      - name: Prune PNPM store
        if: ${{ needs.changes.outputs.client == 'true' && success() }}
        run: pnpm store prune

  client-build-lint:
    runs-on: ubicloud-standard-4
    needs: changes
    steps:
      - name: Skip if no client changes exist
        if: ${{ needs.changes.outputs.client != 'true' }}
        run: echo "No client changes detected — skipping client-lint-test job."

      - name: Checkout
        if: ${{ needs.changes.outputs.client == 'true' }}
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Setup Mise
        if: ${{ needs.changes.outputs.client == 'true' }}
        uses: jdx/mise-action@156251fcc627ac4e26cb0f93dd47d1d4979abf24 # v3.3.0
        with:
          install: true
          cache: true
          env: false

      - name: Prepare GitHub Actions environment
        if: ${{ needs.changes.outputs.client == 'true' }}
        run: mise run github

      - name: Cache PNPM
        if: ${{ needs.changes.outputs.client == 'true' }}
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          key: ${{ env.GH_CACHE_PNPM_KEY }}
          restore-keys: |
            ${{ env.GH_CACHE_PNPM_KEY }}
            ${{ env.GH_CACHE_PNPM_KEY_PARTIAL }}
          path: |
            ${{ env.PNPM_STORE_PATH }}

      - name: Install dependencies
        if: ${{ needs.changes.outputs.client == 'true' }}
        run: pnpm install --frozen-lockfile

      - name: Build
        if: ${{ needs.changes.outputs.client == 'true' }}
        env:
          NODE_ENV: production
        run: mise exec --env viteprod -- pnpm build

      - name: Lint
        if: ${{ needs.changes.outputs.client == 'true' }}
        run: pnpm lint
        working-directory: client/dashboard

      - name: Check for dirty files
        if: ${{ needs.changes.outputs.client == 'true' }}
        run: mise run git:porcelain

      - name: Prune PNPM store
        if: ${{ needs.changes.outputs.client == 'true' && success() }}
        run: pnpm store prune

  ts-sdk-build-lint:
    strategy:
      matrix:
        target: ["client/sdk"]
    runs-on: ubicloud-standard-4
    needs: changes
    steps:
      - name: Skip if no client changes exist
        if: ${{ needs.changes.outputs.client != 'true' }}
        run: echo "No client changes detected — skipping ts-sdk-build-lint."

      - name: Checkout
        if: ${{ needs.changes.outputs.client == 'true' }}
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Setup Mise
        if: ${{ needs.changes.outputs.client == 'true' }}
        uses: jdx/mise-action@156251fcc627ac4e26cb0f93dd47d1d4979abf24 # v3.3.0
        with:
          install: true
          cache: true
          env: false

      - name: Prepare GitHub Actions environment
        if: ${{ needs.changes.outputs.client == 'true' }}
        run: mise run github

      - name: Cache PNPM
        if: ${{ needs.changes.outputs.client == 'true' }}
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          key: ${{ env.GH_CACHE_PNPM_KEY }}
          restore-keys: |
            ${{ env.GH_CACHE_PNPM_KEY }}
            ${{ env.GH_CACHE_PNPM_KEY_PARTIAL }}
          path: |
            ${{ env.PNPM_STORE_PATH }}

      - name: Install dependencies
        if: ${{ needs.changes.outputs.client == 'true' }}
        run: pnpm install --frozen-lockfile

      - name: Build
        if: ${{ needs.changes.outputs.client == 'true' }}
        run: pnpm build
        working-directory: ${{ matrix.target }}

      - name: Lint
        if: ${{ needs.changes.outputs.client == 'true' }}
        run: pnpm lint
        working-directory: ${{ matrix.target }}

      - name: Prune PNPM store
        if: ${{ needs.changes.outputs.client == 'true' && success() }}
        run: pnpm store prune

      - name: Check for dirty files
        if: ${{ needs.changes.outputs.client == 'true' }}
        run: mise run git:porcelain

  functions-build-host:
    runs-on: ubicloud-standard-4
    needs: changes
    steps:
      - name: Skip if no functions changes exist
        if: ${{ needs.changes.outputs.functions != 'true' }}
        run: echo "No functions changes detected — skipping functions-build-bin."

      - name: Checkout
        if: ${{ needs.changes.outputs.functions == 'true' }}
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Setup Mise
        if: ${{ needs.changes.outputs.functions == 'true' }}
        uses: jdx/mise-action@156251fcc627ac4e26cb0f93dd47d1d4979abf24 # v3.3.0
        with:
          install: true
          cache: true
          env: false

      - name: Prepare GitHub Actions environment
        if: ${{ needs.changes.outputs.functions == 'true' }}
        run: mise run github

      - name: Cache Go
        if: ${{ needs.changes.outputs.functions == 'true' }}
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          key: ${{ env.GH_CACHE_GO_KEY }}
          restore-keys: |
            ${{ env.GH_CACHE_GO_KEY }}
            ${{ env.GH_CACHE_GO_KEY_PARTIAL }}
          path: |
            ${{ env.GOCACHE }}
            ${{ env.GOMODCACHE }}

      - name: Cache PNPM
        if: ${{ needs.changes.outputs.functions == 'true' }}
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          key: ${{ env.GH_CACHE_PNPM_KEY }}
          restore-keys: |
            ${{ env.GH_CACHE_PNPM_KEY }}
            ${{ env.GH_CACHE_PNPM_KEY_PARTIAL }}
          path: |
            ${{ env.PNPM_STORE_PATH }}

      - name: Install dependencies
        if: ${{ needs.changes.outputs.functions == 'true' }}
        run: pnpm install --frozen-lockfile

      - name: Test functions entrypoint
        working-directory: functions
        if: ${{ needs.changes.outputs.functions == 'true' }}
        run: pnpm test

      - name: Type check functions entrypoint
        working-directory: functions
        if: ${{ needs.changes.outputs.functions == 'true' }}
        run: pnpm check

      - name: Install Go tools
        if: ${{ needs.changes.outputs.functions == 'true' }}
        run: go install tool
        working-directory: functions

      - name: Lint Go server
        if: ${{ needs.changes.outputs.functions == 'true' }}
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          install-mode: none
          working-directory: functions

      - name: Test Go server
        if: ${{ needs.changes.outputs.functions == 'true' }}
        run: mise run test:functions

      - name: Build Gram Functions host
        if: ${{ needs.changes.outputs.functions == 'true' }}
        env:
          MELANGE_PRIVATE_KEY: ${{ secrets.MELANGE_PRIVATE_KEY }}
        run: |
          KEY_DIR=$(mktemp -d)
          KEY_FILE="$KEY_DIR/melange-signing-key.rsa"
          echo "$MELANGE_PRIVATE_KEY" > "$KEY_FILE"
          mise run build:functions-bin --melange-private-key "$KEY_FILE"
          rm -rf "$KEY_DIR"

      - name: Upload melange packages artifact
        if: ${{ needs.changes.outputs.functions == 'true' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: functions-packages
          path: functions/packages
          retention-days: 2

      - name: Run "go mod tidy"
        if: ${{ needs.changes.outputs.functions == 'true' }}
        run: mise run go:tidy

      - name: Check for dirty files
        if: ${{ needs.changes.outputs.functions == 'true' }}
        run: mise run git:porcelain

      - name: Prune PNPM store
        if: ${{ needs.changes.outputs.functions == 'true' && success() }}
        run: pnpm store prune

  functions-image:
    runs-on: ubicloud-standard-4
    needs: [changes, functions-build-host]
    strategy:
      matrix:
        runtime: ["nodejs22"]
    steps:
      - name: Skip if no functions changes exist
        if: ${{ needs.changes.outputs.functions != 'true' }}
        run: echo "No functions changes detected — skipping functions-image (${{ matrix.runtime }})."

      - name: Checkout
        if: ${{ needs.changes.outputs.functions == 'true' }}
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Setup Mise
        if: ${{ needs.changes.outputs.functions == 'true' }}
        uses: jdx/mise-action@156251fcc627ac4e26cb0f93dd47d1d4979abf24 # v3.3.0
        with:
          install: true
          cache: true
          env: false

      - name: Prepare GitHub Actions environment
        if: ${{ needs.changes.outputs.functions == 'true' }}
        run: mise run github

      - name: Cache PNPM
        if: ${{ needs.changes.outputs.functions == 'true' }}
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          key: ${{ env.GH_CACHE_PNPM_KEY }}
          restore-keys: |
            ${{ env.GH_CACHE_PNPM_KEY }}
            ${{ env.GH_CACHE_PNPM_KEY_PARTIAL }}
          path: |
            ${{ env.PNPM_STORE_PATH }}

      - name: Install dependencies
        if: ${{ needs.changes.outputs.functions == 'true' }}
        run: pnpm install --frozen-lockfile

      - name: Download melange packages artifact
        if: ${{ needs.changes.outputs.functions == 'true' }}
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: functions-packages
          path: functions/packages

      - name: Build apko image (${{ matrix.runtime }})
        id: apko
        if: ${{ needs.changes.outputs.functions == 'true' }}
        env:
          MELANGE_PUBLIC_KEY: ${{ vars.MELANGE_PUBLIC_KEY }}
        run: |
          KEY_DIR=$(mktemp -d)
          KEY_FILE="$KEY_DIR/melange-signing-key.rsa.pub"
          echo "$MELANGE_PUBLIC_KEY" > "$KEY_FILE"

          mise run build:functions-image \
            --melange-public-key "$KEY_FILE" \
            --apko-config ./images/${{ matrix.runtime }}-alpine3.22.yaml \
            --image "apko-${{ matrix.runtime }}:${{ github.sha }}" \
            --tarball-name ${{ matrix.runtime }} \
            --out oci/${{ matrix.runtime }}

      - name: Run safety checks
        if: ${{ needs.changes.outputs.functions == 'true' }}
        run: |
          mise run test:apko-functions \
            --image ${{ steps.apko.outputs.image }} \
            --tarball ${{ steps.apko.outputs.tarball }}

      - name: "[DEV] Create fly app"
        id: flyCreateDev
        if: ${{ needs.changes.outputs.functions == 'true' }}
        shell: bash
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN_DEV }}
          FLY_IMAGE: ${{ vars.FLY_IMAGE_DEV }}
        run: |
          mise run fly:init-runner \
            --org ${{ secrets.FLY_ORG_DEV }} \
            --image $FLY_IMAGE \
            --force

      - name: "[PROD] Create fly app"
        id: flyCreateProd
        if: ${{ needs.changes.outputs.functions == 'true' }}
        shell: bash
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN_PROD }}
          FLY_IMAGE: ${{ vars.FLY_IMAGE_PROD }}
        run: |
          mise run fly:init-runner \
            --org ${{ secrets.FLY_ORG_PROD }} \
            --image $FLY_IMAGE \
            --force

      - name: Set up Docker Buildx
        if: ${{ needs.changes.outputs.functions == 'true' }}
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Extract Docker metadata
        if: ${{ needs.changes.outputs.functions == 'true' }}
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            ${{ steps.flyCreateDev.outputs.flyAppRegistry }}
            ${{ steps.flyCreateProd.outputs.flyAppRegistry }}
          tags: |
            type=ref,event=branch,prefix=,suffix=-${{ matrix.runtime }}
            type=ref,event=tag,prefix=,suffix=-${{ matrix.runtime }}
            type=schedule,pattern=nightly,prefix=,suffix=-${{ matrix.runtime }}
            type=sha,prefix=,suffix=-${{ matrix.runtime }}
            type=sha,format=long,prefix=,suffix=-${{ matrix.runtime }}

      - name: Tag images
        if: ${{ needs.changes.outputs.functions == 'true' }}
        working-directory: functions
        run: |
          set -x

          echo "Loading image from tarball: ${{ steps.apko.outputs.tarball }}"
          docker image load -i ${{ steps.apko.outputs.tarball }}

          TAGS="${{ steps.meta.outputs.tags }}"
          for TAG in $TAGS; do
            docker tag "${{ steps.apko.outputs.image }}-amd64" "$TAG"
          done

      - name: "[DEV] Push images"
        if: ${{ needs.changes.outputs.functions == 'true' }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN_DEV }}
        run: |
          set -x
          fly auth docker
          docker push --all-tags "${{ steps.flyCreateDev.outputs.flyAppRegistry }}"

      - name: "[PROD] Push images"
        if: ${{ needs.changes.outputs.functions == 'true' }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN_PROD }}
        run: |
          set -x
          fly auth docker
          docker push --all-tags "${{ steps.flyCreateProd.outputs.flyAppRegistry }}"

      - name: Prune PNPM store
        if: ${{ needs.changes.outputs.functions == 'true' && success() }}
        run: pnpm store prune