package runner

import (
	"bufio"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"

	"github.com/speakeasy-api/gram/functions/internal/attr"
	"github.com/speakeasy-api/gram/functions/internal/ipc"
	"github.com/speakeasy-api/gram/functions/internal/o11y"
	"github.com/speakeasy-api/gram/functions/internal/svc"
)

var allowedHeaders = map[string]struct{}{
	"cache-control":           {},
	"content-disposition":     {},
	"content-encoding":        {},
	"content-language":        {},
	"content-length":          {},
	"content-location":        {},
	"content-md5":             {},
	"content-type":            {},
	"etag":                    {},
	"expires":                 {},
	"last-modified":           {},
	"retry-after":             {},
	"vary":                    {},
	"x-ratelimit-limit":       {},
	"x-ratelimit-remaining":   {},
	"x-ratelimit-reset-after": {},
	"x-ratelimit-reset":       {},
}

type CallToolPayload struct {
	ToolName    string            `json:"name"`
	Input       json.RawMessage   `json:"input"`
	Environment map[string]string `json:"environment,omitempty,omitzero"`
}

func (s *Service) callTool(ctx context.Context, payload CallToolPayload, w http.ResponseWriter) error {
	logger := s.logger
	reqCopy := payload
	reqCopy.Environment = nil
	reqArg, err := json.Marshal(reqCopy)
	if err != nil {
		return svc.NewPermanentError(
			fmt.Errorf("serialize tool call request: %w", err),
			http.StatusInternalServerError,
		)
	}

	if len(payload.Input) == 0 {
		return svc.NewPermanentError(
			fmt.Errorf("invalid request: missing input"),
			http.StatusBadRequest,
		)
	}

	fifoPath, cleanup, err := ipc.Mkfifo()
	if err != nil {
		return svc.Fault(
			fmt.Errorf("create pipe: %w", err),
			http.StatusInternalServerError,
		)
	}
	defer o11y.LogDefer(ctx, logger, func() error { return cleanup() })

	timeoutCtx, timeoutCancel := context.WithTimeout(ctx, 5*time.Minute)
	defer timeoutCancel()

	// #nosec G204 -- command and program are validated at service initialization (prepareProgram)
	// and are set to controlled values ("node" or "python"). The reqArg is JSON-marshaled data
	// from the request payload, and fifoPath is generated by our ipc.Mkfifo() function.
	cmd := exec.CommandContext(timeoutCtx, s.command, filepath.Base(s.program), fifoPath, string(reqArg))
	cmd.Dir = s.workDir
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.Env = make([]string, 0, len(payload.Environment))
	for key, value := range payload.Environment {
		cmd.Env = append(cmd.Env, fmt.Sprintf("%s=%s", key, value))
	}

	err = cmd.Start()
	if err != nil {
		return svc.NewPermanentError(
			fmt.Errorf("execute tool: %w", err),
			http.StatusInternalServerError,
		)
	}

	// Open the FIFO for reading in a separate goroutine to avoid blocking
	// indefinitely.
	// Using syscall.O_NONBLOCK is not a good idea because the sub-process
	// might not open the FIFO for writing by the time this process attempts
	// to read from the pipe. This can result in an io.UnexpectedEOF error.
	pipech := make(chan *os.File, 1)
	errch := make(chan error, 1)
	go func() {
		resultReader, err := os.OpenFile(filepath.Clean(fifoPath), os.O_RDONLY, os.ModeNamedPipe)
		if err != nil {
			errch <- err
			return
		}
		pipech <- resultReader
	}()

	var pipe *os.File
	select {
	case <-ctx.Done():
		return svc.NewTemporaryError(
			fmt.Errorf("timed out waiting for sub-process: %w", ctx.Err()),
			http.StatusRequestTimeout,
		)
	case err := <-errch:
		return svc.Fault(
			fmt.Errorf("open pipe (ro): %w", err),
			http.StatusInternalServerError,
		)
	case f := <-pipech:
		pipe = f
		defer o11y.LogDefer(ctx, logger, func() error { return pipe.Close() })
	}

	response, err := http.ReadResponse(bufio.NewReader(pipe), nil)
	if err != nil {
		return svc.NewPermanentError(
			fmt.Errorf("read response: %w", err),
			http.StatusInternalServerError,
		)
	}
	defer o11y.LogDefer(ctx, logger, func() error { return response.Body.Close() })

	ct := response.Header.Get("Content-Type")
	if strings.HasPrefix(ct, "application/vnd.fly.replay") {
		return svc.NewPermanentError(
			fmt.Errorf("function attempted fly replay"),
			http.StatusBadGateway,
		)
	}

	for key, values := range response.Header {
		if _, ok := allowedHeaders[strings.ToLower(key)]; !ok {
			continue
		}
		for _, value := range values {
			w.Header().Add(key, value)
		}
	}
	w.WriteHeader(response.StatusCode)
	if _, err := io.Copy(w, response.Body); err != nil {
		s.logger.ErrorContext(ctx, "failed to copy response body", attr.SlogError(err))
	}

	err = cmd.Wait()
	var exitErr *exec.ExitError
	switch {
	case errors.As(err, &exitErr):
		s.logger.ErrorContext(ctx, "sub-process exited with non-zero status", attr.SlogError(err), attr.SlogProcessExitCode(exitErr.ExitCode()))
	case err != nil:
		s.logger.ErrorContext(ctx, "sub-process failed", attr.SlogError(err))
	default:
		s.logger.InfoContext(ctx, "sub-process completed successfully")
	}

	return nil
}

func (s *Service) handleToolCall(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var payload CallToolPayload
	if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
		s.logger.ErrorContext(ctx, "failed to decode tool call request", attr.SlogError(err))

		msg := fmt.Sprintf("decode tool call request: %s", err.Error())
		http.Error(w, msg, http.StatusBadRequest)
		return
	}

	err := s.callTool(ctx, payload, w)
	if err != nil {
		s.handleError(ctx, err, "call tool", w)
		return
	}
}

func (s *Service) handleError(ctx context.Context, err error, operation string, w http.ResponseWriter) {
	var methodError *svc.MethodError
	switch {
	case errors.As(err, &methodError):
		s.logger.ErrorContext(ctx, operation, attr.SlogError(methodError), attr.SlogErrorID(methodError.ID))
		bs, err := json.Marshal(methodError)
		if err != nil {
			s.logger.ErrorContext(ctx, "failed to serialize method error", attr.SlogError(err))
			http.Error(w, methodError.Message, http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(methodError.Code())
		if _, err := w.Write(bs); err != nil {
			s.logger.ErrorContext(ctx, "failed to write method error response", attr.SlogError(err))
		}
	case err != nil:
		s.logger.ErrorContext(ctx, operation, attr.SlogError(err))
		http.Error(w, "unexpected server error", http.StatusInternalServerError)
	}
}
