---
import { Image } from "astro:assets";
import { LinkButton } from "@astrojs/starlight/components";

const { data } = Astro.locals.starlightRoute.entry;
const { title = data.title, tagline, image, actions = [] } = data.hero || {};

const imageAttrs = {
  loading: "eager" as const,
  decoding: "async" as const,
  width: 400,
  height: 400,
  alt: image?.alt || "",
};

let darkImage: ImageMetadata | undefined;
let lightImage: ImageMetadata | undefined;
let darkInvert = false;
let rawHtml: string | undefined;
if (image) {
  if ("file" in image) {
    darkImage = image.file;
    lightImage = image.file;
    darkInvert = true;
  } else if ("dark" in image) {
    darkImage = image.dark;
    lightImage = image.light;
  } else {
    rawHtml = image.html;
  }
}
---

<div
  class="grid items-center justify-items-center gap-4 pb-4 lg:grid-cols-[7fr_4fr]"
>
  {
    darkImage && (
      <Image
        src={darkImage}
        {...imageAttrs}
        class:list={[
          "lg:order-2",
          !!lightImage && "hidden dark:block",
          darkInvert && "invert",
        ]}
      />
    )
  }
  {
    lightImage && (
      <Image src={lightImage} {...imageAttrs} class="lg:order-2 dark:hidden" />
    )
  }
  {rawHtml && <div class="lg:order-2" set:html={rawHtml} />}
  <div class="flex flex-col gap-4">
    <div class="text-center lg:text-start">
      <h1
        id="_top"
        class="text-[clamp(var(--text-3xl),calc(0.25rem+5vw),var(--text-5xl))] leading-tight"
        data-page-title
        set:html={title}
      />
      {
        tagline && (
          <div
            class="text-[clamp(var(--text-base),calc(0.0625rem+2vw),var(--text-xl))]"
            set:html={tagline}
          />
        )
      }
    </div>
    {
      actions.length > 0 && (
        <div class="flex justify-center gap-4 lg:justify-start">
          {actions.map(
            ({
              attrs: { class: className, ...attrs } = {},
              icon,
              link: href,
              text,
              variant,
            }) => (
              <LinkButton
                {href}
                {variant}
                icon={icon?.name}
                class:list={[className]}
                {...attrs}
              >
                {text}
                {icon?.html && <Fragment set:html={icon.html} />}
              </LinkButton>
            ),
          )}
        </div>
      )
    }
  </div>
</div>
