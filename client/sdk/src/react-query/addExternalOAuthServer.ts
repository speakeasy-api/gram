/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { toolsetsAddExternalOAuthServer } from "../funcs/toolsetsAddExternalOAuthServer.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type AddExternalOAuthServerMutationVariables = {
  request: operations.AddExternalOAuthServerRequest;
  security?: operations.AddExternalOAuthServerSecurity | undefined;
  options?: RequestOptions;
};

export type AddExternalOAuthServerMutationData = components.Toolset;

/**
 * addExternalOAuthServer toolsets
 *
 * @remarks
 * Associate an external OAuth server with a toolset
 */
export function useAddExternalOAuthServerMutation(
  options?: MutationHookOptions<
    AddExternalOAuthServerMutationData,
    Error,
    AddExternalOAuthServerMutationVariables
  >,
): UseMutationResult<
  AddExternalOAuthServerMutationData,
  Error,
  AddExternalOAuthServerMutationVariables
> {
  const client = useGramContext();
  return useMutation({
    ...buildAddExternalOAuthServerMutation(client, options),
    ...options,
  });
}

export function mutationKeyAddExternalOAuthServer(): MutationKey {
  return ["@gram/client", "toolsets", "addExternalOAuthServer"];
}

export function buildAddExternalOAuthServerMutation(
  client$: GramCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: AddExternalOAuthServerMutationVariables,
  ) => Promise<AddExternalOAuthServerMutationData>;
} {
  return {
    mutationKey: mutationKeyAddExternalOAuthServer(),
    mutationFn: function addExternalOAuthServerMutationFn({
      request,
      security,
      options,
    }): Promise<AddExternalOAuthServerMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(toolsetsAddExternalOAuthServer(
        client$,
        request,
        security,
        mergedOptions,
      ));
    },
  };
}
