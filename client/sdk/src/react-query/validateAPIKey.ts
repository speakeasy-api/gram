/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { keysValidate } from "../funcs/keysValidate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ValidateAPIKeyQueryData = components.ValidateKeyResult;

/**
 * verifyKey keys
 *
 * @remarks
 * Verify an api key
 */
export function useValidateAPIKey(
  request?: operations.ValidateAPIKeyRequest | undefined,
  security?: operations.ValidateAPIKeySecurity | undefined,
  options?: QueryHookOptions<ValidateAPIKeyQueryData>,
): UseQueryResult<ValidateAPIKeyQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildValidateAPIKeyQuery(
      client,
      request,
      security,
      options,
    ),
    ...options,
  });
}

/**
 * verifyKey keys
 *
 * @remarks
 * Verify an api key
 */
export function useValidateAPIKeySuspense(
  request?: operations.ValidateAPIKeyRequest | undefined,
  security?: operations.ValidateAPIKeySecurity | undefined,
  options?: SuspenseQueryHookOptions<ValidateAPIKeyQueryData>,
): UseSuspenseQueryResult<ValidateAPIKeyQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildValidateAPIKeyQuery(
      client,
      request,
      security,
      options,
    ),
    ...options,
  });
}

export function prefetchValidateAPIKey(
  queryClient: QueryClient,
  client$: GramCore,
  request?: operations.ValidateAPIKeyRequest | undefined,
  security?: operations.ValidateAPIKeySecurity | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildValidateAPIKeyQuery(
      client$,
      request,
      security,
    ),
  });
}

export function setValidateAPIKeyData(
  client: QueryClient,
  queryKeyBase: [parameters: { gramKey?: string | undefined }],
  data: ValidateAPIKeyQueryData,
): ValidateAPIKeyQueryData | undefined {
  const key = queryKeyValidateAPIKey(...queryKeyBase);

  return client.setQueryData<ValidateAPIKeyQueryData>(key, data);
}

export function invalidateValidateAPIKey(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { gramKey?: string | undefined }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "keys", "validate", ...queryKeyBase],
  });
}

export function invalidateAllValidateAPIKey(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "keys", "validate"],
  });
}

export function buildValidateAPIKeyQuery(
  client$: GramCore,
  request?: operations.ValidateAPIKeyRequest | undefined,
  security?: operations.ValidateAPIKeySecurity | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ValidateAPIKeyQueryData>;
} {
  return {
    queryKey: queryKeyValidateAPIKey({ gramKey: request?.gramKey }),
    queryFn: async function validateAPIKeyQueryFn(
      ctx,
    ): Promise<ValidateAPIKeyQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(keysValidate(
        client$,
        request,
        security,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyValidateAPIKey(
  parameters: { gramKey?: string | undefined },
): QueryKey {
  return ["@gram/client", "keys", "validate", parameters];
}
