/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { mcpInstallPageSet } from "../funcs/mcpInstallPageSet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type McpInstallPageSetMutationVariables = {
  request: operations.SetInstallPageMetadataRequest;
  security?: operations.SetInstallPageMetadataSecurity | undefined;
  options?: RequestOptions;
};

export type McpInstallPageSetMutationData = components.MCPInstallPageMetadata;

/**
 * setInstallPageMetadata mcpInstallPage
 *
 * @remarks
 * Create or update the metadata that powers the MCP install page.
 */
export function useMcpInstallPageSetMutation(
  options?: MutationHookOptions<
    McpInstallPageSetMutationData,
    Error,
    McpInstallPageSetMutationVariables
  >,
): UseMutationResult<
  McpInstallPageSetMutationData,
  Error,
  McpInstallPageSetMutationVariables
> {
  const client = useGramContext();
  return useMutation({
    ...buildMcpInstallPageSetMutation(client, options),
    ...options,
  });
}

export function mutationKeyMcpInstallPageSet(): MutationKey {
  return ["@gram/client", "mcpInstallPage", "set"];
}

export function buildMcpInstallPageSetMutation(
  client$: GramCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: McpInstallPageSetMutationVariables,
  ) => Promise<McpInstallPageSetMutationData>;
} {
  return {
    mutationKey: mutationKeyMcpInstallPageSet(),
    mutationFn: function mcpInstallPageSetMutationFn({
      request,
      security,
      options,
    }): Promise<McpInstallPageSetMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(mcpInstallPageSet(
        client$,
        request,
        security,
        mergedOptions,
      ));
    },
  };
}
