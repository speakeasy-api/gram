/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { usageGetUsageTiers } from "../funcs/usageGetUsageTiers.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type GetUsageTiersQueryData = components.UsageTiers;

/**
 * getUsageTiers usage
 *
 * @remarks
 * Get the usage tiers
 */
export function useGetUsageTiers(
  options?: QueryHookOptions<GetUsageTiersQueryData>,
): UseQueryResult<GetUsageTiersQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildGetUsageTiersQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * getUsageTiers usage
 *
 * @remarks
 * Get the usage tiers
 */
export function useGetUsageTiersSuspense(
  options?: SuspenseQueryHookOptions<GetUsageTiersQueryData>,
): UseSuspenseQueryResult<GetUsageTiersQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildGetUsageTiersQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchGetUsageTiers(
  queryClient: QueryClient,
  client$: GramCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildGetUsageTiersQuery(
      client$,
    ),
  });
}

export function setGetUsageTiersData(
  client: QueryClient,
  data: GetUsageTiersQueryData,
): GetUsageTiersQueryData | undefined {
  const key = queryKeyGetUsageTiers();

  return client.setQueryData<GetUsageTiersQueryData>(key, data);
}

export function invalidateAllGetUsageTiers(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "usage", "getUsageTiers"],
  });
}

export function buildGetUsageTiersQuery(
  client$: GramCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<GetUsageTiersQueryData>;
} {
  return {
    queryKey: queryKeyGetUsageTiers(),
    queryFn: async function getUsageTiersQueryFn(
      ctx,
    ): Promise<GetUsageTiersQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(usageGetUsageTiers(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyGetUsageTiers(): QueryKey {
  return ["@gram/client", "usage", "getUsageTiers"];
}
