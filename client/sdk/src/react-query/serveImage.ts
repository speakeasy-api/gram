/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { assetsServeImage } from "../funcs/assetsServeImage.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ServeImageQueryData = operations.ServeImageResponse;

/**
 * serveImage assets
 *
 * @remarks
 * Serve an image from Gram.
 */
export function useServeImage(
  request: operations.ServeImageRequest,
  options?: QueryHookOptions<ServeImageQueryData>,
): UseQueryResult<ServeImageQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildServeImageQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * serveImage assets
 *
 * @remarks
 * Serve an image from Gram.
 */
export function useServeImageSuspense(
  request: operations.ServeImageRequest,
  options?: SuspenseQueryHookOptions<ServeImageQueryData>,
): UseSuspenseQueryResult<ServeImageQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildServeImageQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchServeImage(
  queryClient: QueryClient,
  client$: GramCore,
  request: operations.ServeImageRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildServeImageQuery(
      client$,
      request,
    ),
  });
}

export function setServeImageData(
  client: QueryClient,
  queryKeyBase: [parameters: { id: string }],
  data: ServeImageQueryData,
): ServeImageQueryData | undefined {
  const key = queryKeyServeImage(...queryKeyBase);

  return client.setQueryData<ServeImageQueryData>(key, data);
}

export function invalidateServeImage(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { id: string }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "assets", "serveImage", ...queryKeyBase],
  });
}

export function invalidateAllServeImage(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "assets", "serveImage"],
  });
}

export function buildServeImageQuery(
  client$: GramCore,
  request: operations.ServeImageRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ServeImageQueryData>;
} {
  return {
    queryKey: queryKeyServeImage({ id: request.id }),
    queryFn: async function serveImageQueryFn(
      ctx,
    ): Promise<ServeImageQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(assetsServeImage(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyServeImage(parameters: { id: string }): QueryKey {
  return ["@gram/client", "assets", "serveImage", parameters];
}
