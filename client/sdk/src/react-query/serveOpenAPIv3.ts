/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { assetsServeOpenAPIv3 } from "../funcs/assetsServeOpenAPIv3.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ServeOpenAPIv3QueryData = operations.ServeOpenAPIv3Response;

/**
 * serveOpenAPIv3 assets
 *
 * @remarks
 * Serve an OpenAPIv3 asset from Gram.
 */
export function useServeOpenAPIv3(
  request: operations.ServeOpenAPIv3Request,
  security?: operations.ServeOpenAPIv3Security | undefined,
  options?: QueryHookOptions<ServeOpenAPIv3QueryData>,
): UseQueryResult<ServeOpenAPIv3QueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildServeOpenAPIv3Query(
      client,
      request,
      security,
      options,
    ),
    ...options,
  });
}

/**
 * serveOpenAPIv3 assets
 *
 * @remarks
 * Serve an OpenAPIv3 asset from Gram.
 */
export function useServeOpenAPIv3Suspense(
  request: operations.ServeOpenAPIv3Request,
  security?: operations.ServeOpenAPIv3Security | undefined,
  options?: SuspenseQueryHookOptions<ServeOpenAPIv3QueryData>,
): UseSuspenseQueryResult<ServeOpenAPIv3QueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildServeOpenAPIv3Query(
      client,
      request,
      security,
      options,
    ),
    ...options,
  });
}

export function prefetchServeOpenAPIv3(
  queryClient: QueryClient,
  client$: GramCore,
  request: operations.ServeOpenAPIv3Request,
  security?: operations.ServeOpenAPIv3Security | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildServeOpenAPIv3Query(
      client$,
      request,
      security,
    ),
  });
}

export function setServeOpenAPIv3Data(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      id: string;
      projectId: string;
      gramKey?: string | undefined;
      gramSession?: string | undefined;
    },
  ],
  data: ServeOpenAPIv3QueryData,
): ServeOpenAPIv3QueryData | undefined {
  const key = queryKeyServeOpenAPIv3(...queryKeyBase);

  return client.setQueryData<ServeOpenAPIv3QueryData>(key, data);
}

export function invalidateServeOpenAPIv3(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      id: string;
      projectId: string;
      gramKey?: string | undefined;
      gramSession?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "assets", "serveOpenAPIv3", ...queryKeyBase],
  });
}

export function invalidateAllServeOpenAPIv3(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "assets", "serveOpenAPIv3"],
  });
}

export function buildServeOpenAPIv3Query(
  client$: GramCore,
  request: operations.ServeOpenAPIv3Request,
  security?: operations.ServeOpenAPIv3Security | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ServeOpenAPIv3QueryData>;
} {
  return {
    queryKey: queryKeyServeOpenAPIv3({
      id: request.id,
      projectId: request.projectId,
      gramKey: request.gramKey,
      gramSession: request.gramSession,
    }),
    queryFn: async function serveOpenAPIv3QueryFn(
      ctx,
    ): Promise<ServeOpenAPIv3QueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(assetsServeOpenAPIv3(
        client$,
        request,
        security,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyServeOpenAPIv3(
  parameters: {
    id: string;
    projectId: string;
    gramKey?: string | undefined;
    gramSession?: string | undefined;
  },
): QueryKey {
  return ["@gram/client", "assets", "serveOpenAPIv3", parameters];
}
