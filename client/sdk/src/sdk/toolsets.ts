/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { toolsetsAddExternalOAuthServer } from "../funcs/toolsetsAddExternalOAuthServer.js";
import { toolsetsCheckMCPSlugAvailability } from "../funcs/toolsetsCheckMCPSlugAvailability.js";
import { toolsetsCloneBySlug } from "../funcs/toolsetsCloneBySlug.js";
import { toolsetsCreate } from "../funcs/toolsetsCreate.js";
import { toolsetsDeleteBySlug } from "../funcs/toolsetsDeleteBySlug.js";
import { toolsetsGetBySlug } from "../funcs/toolsetsGetBySlug.js";
import { toolsetsList } from "../funcs/toolsetsList.js";
import { toolsetsRemoveOAuthServer } from "../funcs/toolsetsRemoveOAuthServer.js";
import { toolsetsUpdateBySlug } from "../funcs/toolsetsUpdateBySlug.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Toolsets extends ClientSDK {
  /**
   * addExternalOAuthServer toolsets
   *
   * @remarks
   * Associate an external OAuth server with a toolset
   */
  async addExternalOAuthServer(
    request: operations.AddExternalOAuthServerRequest,
    security?: operations.AddExternalOAuthServerSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.Toolset> {
    return unwrapAsync(toolsetsAddExternalOAuthServer(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * checkMCPSlugAvailability toolsets
   *
   * @remarks
   * Check if a MCP slug is available
   */
  async checkMCPSlugAvailability(
    request: operations.CheckMCPSlugAvailabilityRequest,
    security?: operations.CheckMCPSlugAvailabilitySecurity | undefined,
    options?: RequestOptions,
  ): Promise<boolean> {
    return unwrapAsync(toolsetsCheckMCPSlugAvailability(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * cloneToolset toolsets
   *
   * @remarks
   * Clone an existing toolset with a new name
   */
  async cloneBySlug(
    request: operations.CloneToolsetRequest,
    security?: operations.CloneToolsetSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.Toolset> {
    return unwrapAsync(toolsetsCloneBySlug(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * createToolset toolsets
   *
   * @remarks
   * Create a new toolset with associated tools
   */
  async create(
    request: operations.CreateToolsetRequest,
    security?: operations.CreateToolsetSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.Toolset> {
    return unwrapAsync(toolsetsCreate(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * deleteToolset toolsets
   *
   * @remarks
   * Delete a toolset by its ID
   */
  async deleteBySlug(
    request: operations.DeleteToolsetRequest,
    security?: operations.DeleteToolsetSecurity | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(toolsetsDeleteBySlug(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * getToolset toolsets
   *
   * @remarks
   * Get detailed information about a toolset including full HTTP tool definitions
   */
  async getBySlug(
    request: operations.GetToolsetRequest,
    security?: operations.GetToolsetSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.Toolset> {
    return unwrapAsync(toolsetsGetBySlug(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * listToolsets toolsets
   *
   * @remarks
   * List all toolsets for a project
   */
  async list(
    request?: operations.ListToolsetsRequest | undefined,
    security?: operations.ListToolsetsSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.ListToolsetsResult> {
    return unwrapAsync(toolsetsList(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * removeOAuthServer toolsets
   *
   * @remarks
   * Remove OAuth server association from a toolset
   */
  async removeOAuthServer(
    request: operations.RemoveOAuthServerRequest,
    security?: operations.RemoveOAuthServerSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.Toolset> {
    return unwrapAsync(toolsetsRemoveOAuthServer(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * updateToolset toolsets
   *
   * @remarks
   * Update a toolset's properties including name, description, and HTTP tools
   */
  async updateBySlug(
    request: operations.UpdateToolsetRequest,
    security?: operations.UpdateToolsetSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.Toolset> {
    return unwrapAsync(toolsetsUpdateBySlug(
      this,
      request,
      security,
      options,
    ));
  }
}
