/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { deploymentsActive } from "../funcs/deploymentsActive.js";
import { deploymentsCreate } from "../funcs/deploymentsCreate.js";
import { deploymentsEvolveDeployment } from "../funcs/deploymentsEvolveDeployment.js";
import { deploymentsGetById } from "../funcs/deploymentsGetById.js";
import { deploymentsLatest } from "../funcs/deploymentsLatest.js";
import { deploymentsList } from "../funcs/deploymentsList.js";
import { deploymentsLogs } from "../funcs/deploymentsLogs.js";
import { deploymentsRedeployDeployment } from "../funcs/deploymentsRedeployDeployment.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Deployments extends ClientSDK {
  /**
   * getActiveDeployment deployments
   *
   * @remarks
   * Get the active deployment for a project.
   */
  async active(
    request?: operations.GetActiveDeploymentRequest | undefined,
    security?: operations.GetActiveDeploymentSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.GetActiveDeploymentResult> {
    return unwrapAsync(deploymentsActive(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * createDeployment deployments
   *
   * @remarks
   * Create a deployment to load tool definitions.
   */
  async create(
    request: operations.CreateDeploymentRequest,
    security?: operations.CreateDeploymentSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.CreateDeploymentResult> {
    return unwrapAsync(deploymentsCreate(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * evolve deployments
   *
   * @remarks
   * Create a new deployment with additional or updated tool sources.
   */
  async evolveDeployment(
    request: operations.EvolveDeploymentRequest,
    security?: operations.EvolveDeploymentSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.EvolveResult> {
    return unwrapAsync(deploymentsEvolveDeployment(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * getDeployment deployments
   *
   * @remarks
   * Get a deployment by its ID.
   */
  async getById(
    request: operations.GetDeploymentRequest,
    security?: operations.GetDeploymentSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.GetDeploymentResult> {
    return unwrapAsync(deploymentsGetById(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * getLatestDeployment deployments
   *
   * @remarks
   * Get the latest deployment for a project.
   */
  async latest(
    request?: operations.GetLatestDeploymentRequest | undefined,
    security?: operations.GetLatestDeploymentSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.GetLatestDeploymentResult> {
    return unwrapAsync(deploymentsLatest(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * listDeployments deployments
   *
   * @remarks
   * List all deployments in descending order of creation.
   */
  async list(
    request?: operations.ListDeploymentsRequest | undefined,
    security?: operations.ListDeploymentsSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.ListDeploymentResult> {
    return unwrapAsync(deploymentsList(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * getDeploymentLogs deployments
   *
   * @remarks
   * Get logs for a deployment.
   */
  async logs(
    request: operations.GetDeploymentLogsRequest,
    security?: operations.GetDeploymentLogsSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.GetDeploymentLogsResult> {
    return unwrapAsync(deploymentsLogs(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * redeploy deployments
   *
   * @remarks
   * Redeploys an existing deployment.
   */
  async redeployDeployment(
    request: operations.RedeployDeploymentRequest,
    security?: operations.RedeployDeploymentSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.RedeployResult> {
    return unwrapAsync(deploymentsRedeployDeployment(
      this,
      request,
      security,
      options,
    ));
  }
}
