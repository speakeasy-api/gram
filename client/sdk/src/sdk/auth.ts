/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { authCallback } from "../funcs/authCallback.js";
import { authInfo } from "../funcs/authInfo.js";
import { authLogin } from "../funcs/authLogin.js";
import { authLogout } from "../funcs/authLogout.js";
import { authRegister } from "../funcs/authRegister.js";
import { authSwitchScopes } from "../funcs/authSwitchScopes.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Auth extends ClientSDK {
  /**
   * callback auth
   *
   * @remarks
   * Handles the authentication callback.
   */
  async callback(
    request: operations.AuthCallbackRequest,
    options?: RequestOptions,
  ): Promise<operations.AuthCallbackResponse | undefined> {
    return unwrapAsync(authCallback(
      this,
      request,
      options,
    ));
  }

  /**
   * info auth
   *
   * @remarks
   * Provides information about the current authentication status.
   */
  async info(
    request?: operations.SessionInfoRequest | undefined,
    security?: operations.SessionInfoSecurity | undefined,
    options?: RequestOptions,
  ): Promise<operations.SessionInfoResponse> {
    return unwrapAsync(authInfo(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * login auth
   *
   * @remarks
   * Proxies to auth login through speakeasy oidc.
   */
  async login(
    request?: operations.AuthLoginRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.AuthLoginResponse | undefined> {
    return unwrapAsync(authLogin(
      this,
      request,
      options,
    ));
  }

  /**
   * logout auth
   *
   * @remarks
   * Logs out the current user by clearing their session.
   */
  async logout(
    request?: operations.LogoutRequest | undefined,
    security?: operations.LogoutSecurity | undefined,
    options?: RequestOptions,
  ): Promise<operations.LogoutResponse | undefined> {
    return unwrapAsync(authLogout(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * register auth
   *
   * @remarks
   * Register a new org for a user with their session information.
   */
  async register(
    request: operations.RegisterRequest,
    security?: operations.RegisterSecurity | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(authRegister(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * switchScopes auth
   *
   * @remarks
   * Switches the authentication scope to a different organization.
   */
  async switchScopes(
    request?: operations.SwitchAuthScopesRequest | undefined,
    security?: operations.SwitchAuthScopesSecurity | undefined,
    options?: RequestOptions,
  ): Promise<operations.SwitchAuthScopesResponse | undefined> {
    return unwrapAsync(authSwitchScopes(
      this,
      request,
      security,
      options,
    ));
  }
}
