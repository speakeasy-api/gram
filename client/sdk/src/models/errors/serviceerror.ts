/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { GramError } from "./gramerror.js";

/**
 * unauthorized access
 */
export type ServiceErrorData = {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean;
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string;
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string;
  /**
   * Name is the name of this class of errors.
   */
  name: string;
  /**
   * Is the error temporary?
   */
  temporary: boolean;
  /**
   * Is the error a timeout?
   */
  timeout: boolean;
};

/**
 * unauthorized access
 */
export class ServiceError extends GramError {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean;
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string;
  /**
   * Is the error temporary?
   */
  temporary: boolean;
  /**
   * Is the error a timeout?
   */
  timeout: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceErrorData;

  constructor(
    err: ServiceErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.fault = err.fault;
    this.id = err.id;
    this.temporary = err.temporary;
    this.timeout = err.timeout;

    this.name = "ServiceError";
  }
}

/** @internal */
export const ServiceError$inboundSchema: z.ZodType<
  ServiceError,
  z.ZodTypeDef,
  unknown
> = z.object({
  fault: z.boolean(),
  id: z.string(),
  message: z.string(),
  name: z.string(),
  temporary: z.boolean(),
  timeout: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceError$Outbound = {
  fault: boolean;
  id: string;
  message: string;
  name: string;
  temporary: boolean;
  timeout: boolean;
};

/** @internal */
export const ServiceError$outboundSchema: z.ZodType<
  ServiceError$Outbound,
  z.ZodTypeDef,
  ServiceError
> = z.instanceof(ServiceError)
  .transform(v => v.data$)
  .pipe(z.object({
    fault: z.boolean(),
    id: z.string(),
    message: z.string(),
    name: z.string(),
    temporary: z.boolean(),
    timeout: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceError$ {
  /** @deprecated use `ServiceError$inboundSchema` instead. */
  export const inboundSchema = ServiceError$inboundSchema;
  /** @deprecated use `ServiceError$outboundSchema` instead. */
  export const outboundSchema = ServiceError$outboundSchema;
  /** @deprecated use `ServiceError$Outbound` instead. */
  export type Outbound = ServiceError$Outbound;
}
