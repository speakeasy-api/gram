/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServeOpenAPIv3Security = {
  apikeyHeaderGramKey?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type ServeOpenAPIv3Request = {
  /**
   * The ID of the asset to serve
   */
  id: string;
  /**
   * The procect ID that the asset belongs to
   */
  projectId: string;
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
};

export type ServeOpenAPIv3Response = {
  headers: { [k: string]: Array<string> };
  result: ReadableStream<Uint8Array>;
};

/** @internal */
export const ServeOpenAPIv3Security$inboundSchema: z.ZodType<
  ServeOpenAPIv3Security,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type ServeOpenAPIv3Security$Outbound = {
  "apikey_header_Gram-Key"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const ServeOpenAPIv3Security$outboundSchema: z.ZodType<
  ServeOpenAPIv3Security$Outbound,
  z.ZodTypeDef,
  ServeOpenAPIv3Security
> = z.object({
  apikeyHeaderGramKey: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServeOpenAPIv3Security$ {
  /** @deprecated use `ServeOpenAPIv3Security$inboundSchema` instead. */
  export const inboundSchema = ServeOpenAPIv3Security$inboundSchema;
  /** @deprecated use `ServeOpenAPIv3Security$outboundSchema` instead. */
  export const outboundSchema = ServeOpenAPIv3Security$outboundSchema;
  /** @deprecated use `ServeOpenAPIv3Security$Outbound` instead. */
  export type Outbound = ServeOpenAPIv3Security$Outbound;
}

export function serveOpenAPIv3SecurityToJSON(
  serveOpenAPIv3Security: ServeOpenAPIv3Security,
): string {
  return JSON.stringify(
    ServeOpenAPIv3Security$outboundSchema.parse(serveOpenAPIv3Security),
  );
}

export function serveOpenAPIv3SecurityFromJSON(
  jsonString: string,
): SafeParseResult<ServeOpenAPIv3Security, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServeOpenAPIv3Security$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServeOpenAPIv3Security' from JSON`,
  );
}

/** @internal */
export const ServeOpenAPIv3Request$inboundSchema: z.ZodType<
  ServeOpenAPIv3Request,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  project_id: z.string(),
  "Gram-Key": z.string().optional(),
  "Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "Gram-Key": "gramKey",
    "Gram-Session": "gramSession",
  });
});

/** @internal */
export type ServeOpenAPIv3Request$Outbound = {
  id: string;
  project_id: string;
  "Gram-Key"?: string | undefined;
  "Gram-Session"?: string | undefined;
};

/** @internal */
export const ServeOpenAPIv3Request$outboundSchema: z.ZodType<
  ServeOpenAPIv3Request$Outbound,
  z.ZodTypeDef,
  ServeOpenAPIv3Request
> = z.object({
  id: z.string(),
  projectId: z.string(),
  gramKey: z.string().optional(),
  gramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    gramKey: "Gram-Key",
    gramSession: "Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServeOpenAPIv3Request$ {
  /** @deprecated use `ServeOpenAPIv3Request$inboundSchema` instead. */
  export const inboundSchema = ServeOpenAPIv3Request$inboundSchema;
  /** @deprecated use `ServeOpenAPIv3Request$outboundSchema` instead. */
  export const outboundSchema = ServeOpenAPIv3Request$outboundSchema;
  /** @deprecated use `ServeOpenAPIv3Request$Outbound` instead. */
  export type Outbound = ServeOpenAPIv3Request$Outbound;
}

export function serveOpenAPIv3RequestToJSON(
  serveOpenAPIv3Request: ServeOpenAPIv3Request,
): string {
  return JSON.stringify(
    ServeOpenAPIv3Request$outboundSchema.parse(serveOpenAPIv3Request),
  );
}

export function serveOpenAPIv3RequestFromJSON(
  jsonString: string,
): SafeParseResult<ServeOpenAPIv3Request, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServeOpenAPIv3Request$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServeOpenAPIv3Request' from JSON`,
  );
}

/** @internal */
export const ServeOpenAPIv3Response$inboundSchema: z.ZodType<
  ServeOpenAPIv3Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.instanceof(ReadableStream<Uint8Array>),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ServeOpenAPIv3Response$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: ReadableStream<Uint8Array>;
};

/** @internal */
export const ServeOpenAPIv3Response$outboundSchema: z.ZodType<
  ServeOpenAPIv3Response$Outbound,
  z.ZodTypeDef,
  ServeOpenAPIv3Response
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.instanceof(ReadableStream<Uint8Array>),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServeOpenAPIv3Response$ {
  /** @deprecated use `ServeOpenAPIv3Response$inboundSchema` instead. */
  export const inboundSchema = ServeOpenAPIv3Response$inboundSchema;
  /** @deprecated use `ServeOpenAPIv3Response$outboundSchema` instead. */
  export const outboundSchema = ServeOpenAPIv3Response$outboundSchema;
  /** @deprecated use `ServeOpenAPIv3Response$Outbound` instead. */
  export type Outbound = ServeOpenAPIv3Response$Outbound;
}

export function serveOpenAPIv3ResponseToJSON(
  serveOpenAPIv3Response: ServeOpenAPIv3Response,
): string {
  return JSON.stringify(
    ServeOpenAPIv3Response$outboundSchema.parse(serveOpenAPIv3Response),
  );
}

export function serveOpenAPIv3ResponseFromJSON(
  jsonString: string,
): SafeParseResult<ServeOpenAPIv3Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServeOpenAPIv3Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServeOpenAPIv3Response' from JSON`,
  );
}
