/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTemplatesSecurityOption1 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type ListTemplatesSecurityOption2 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type ListTemplatesSecurity = {
  option1?: ListTemplatesSecurityOption1 | undefined;
  option2?: ListTemplatesSecurityOption2 | undefined;
};

export type ListTemplatesRequest = {
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const ListTemplatesSecurityOption1$inboundSchema: z.ZodType<
  ListTemplatesSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type ListTemplatesSecurityOption1$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const ListTemplatesSecurityOption1$outboundSchema: z.ZodType<
  ListTemplatesSecurityOption1$Outbound,
  z.ZodTypeDef,
  ListTemplatesSecurityOption1
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTemplatesSecurityOption1$ {
  /** @deprecated use `ListTemplatesSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = ListTemplatesSecurityOption1$inboundSchema;
  /** @deprecated use `ListTemplatesSecurityOption1$outboundSchema` instead. */
  export const outboundSchema = ListTemplatesSecurityOption1$outboundSchema;
  /** @deprecated use `ListTemplatesSecurityOption1$Outbound` instead. */
  export type Outbound = ListTemplatesSecurityOption1$Outbound;
}

export function listTemplatesSecurityOption1ToJSON(
  listTemplatesSecurityOption1: ListTemplatesSecurityOption1,
): string {
  return JSON.stringify(
    ListTemplatesSecurityOption1$outboundSchema.parse(
      listTemplatesSecurityOption1,
    ),
  );
}

export function listTemplatesSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<ListTemplatesSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTemplatesSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTemplatesSecurityOption1' from JSON`,
  );
}

/** @internal */
export const ListTemplatesSecurityOption2$inboundSchema: z.ZodType<
  ListTemplatesSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type ListTemplatesSecurityOption2$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const ListTemplatesSecurityOption2$outboundSchema: z.ZodType<
  ListTemplatesSecurityOption2$Outbound,
  z.ZodTypeDef,
  ListTemplatesSecurityOption2
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTemplatesSecurityOption2$ {
  /** @deprecated use `ListTemplatesSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = ListTemplatesSecurityOption2$inboundSchema;
  /** @deprecated use `ListTemplatesSecurityOption2$outboundSchema` instead. */
  export const outboundSchema = ListTemplatesSecurityOption2$outboundSchema;
  /** @deprecated use `ListTemplatesSecurityOption2$Outbound` instead. */
  export type Outbound = ListTemplatesSecurityOption2$Outbound;
}

export function listTemplatesSecurityOption2ToJSON(
  listTemplatesSecurityOption2: ListTemplatesSecurityOption2,
): string {
  return JSON.stringify(
    ListTemplatesSecurityOption2$outboundSchema.parse(
      listTemplatesSecurityOption2,
    ),
  );
}

export function listTemplatesSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<ListTemplatesSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTemplatesSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTemplatesSecurityOption2' from JSON`,
  );
}

/** @internal */
export const ListTemplatesSecurity$inboundSchema: z.ZodType<
  ListTemplatesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => ListTemplatesSecurityOption1$inboundSchema).optional(),
  Option2: z.lazy(() => ListTemplatesSecurityOption2$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type ListTemplatesSecurity$Outbound = {
  Option1?: ListTemplatesSecurityOption1$Outbound | undefined;
  Option2?: ListTemplatesSecurityOption2$Outbound | undefined;
};

/** @internal */
export const ListTemplatesSecurity$outboundSchema: z.ZodType<
  ListTemplatesSecurity$Outbound,
  z.ZodTypeDef,
  ListTemplatesSecurity
> = z.object({
  option1: z.lazy(() => ListTemplatesSecurityOption1$outboundSchema).optional(),
  option2: z.lazy(() => ListTemplatesSecurityOption2$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTemplatesSecurity$ {
  /** @deprecated use `ListTemplatesSecurity$inboundSchema` instead. */
  export const inboundSchema = ListTemplatesSecurity$inboundSchema;
  /** @deprecated use `ListTemplatesSecurity$outboundSchema` instead. */
  export const outboundSchema = ListTemplatesSecurity$outboundSchema;
  /** @deprecated use `ListTemplatesSecurity$Outbound` instead. */
  export type Outbound = ListTemplatesSecurity$Outbound;
}

export function listTemplatesSecurityToJSON(
  listTemplatesSecurity: ListTemplatesSecurity,
): string {
  return JSON.stringify(
    ListTemplatesSecurity$outboundSchema.parse(listTemplatesSecurity),
  );
}

export function listTemplatesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListTemplatesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTemplatesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTemplatesSecurity' from JSON`,
  );
}

/** @internal */
export const ListTemplatesRequest$inboundSchema: z.ZodType<
  ListTemplatesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Key": z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Key": "gramKey",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type ListTemplatesRequest$Outbound = {
  "Gram-Key"?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const ListTemplatesRequest$outboundSchema: z.ZodType<
  ListTemplatesRequest$Outbound,
  z.ZodTypeDef,
  ListTemplatesRequest
> = z.object({
  gramKey: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramKey: "Gram-Key",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTemplatesRequest$ {
  /** @deprecated use `ListTemplatesRequest$inboundSchema` instead. */
  export const inboundSchema = ListTemplatesRequest$inboundSchema;
  /** @deprecated use `ListTemplatesRequest$outboundSchema` instead. */
  export const outboundSchema = ListTemplatesRequest$outboundSchema;
  /** @deprecated use `ListTemplatesRequest$Outbound` instead. */
  export type Outbound = ListTemplatesRequest$Outbound;
}

export function listTemplatesRequestToJSON(
  listTemplatesRequest: ListTemplatesRequest,
): string {
  return JSON.stringify(
    ListTemplatesRequest$outboundSchema.parse(listTemplatesRequest),
  );
}

export function listTemplatesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTemplatesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTemplatesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTemplatesRequest' from JSON`,
  );
}
