/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RenderTemplateByIDSecurityOption1 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type RenderTemplateByIDSecurityOption2 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type RenderTemplateByIDSecurityOption3 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type RenderTemplateByIDSecurity = {
  option1?: RenderTemplateByIDSecurityOption1 | undefined;
  option2?: RenderTemplateByIDSecurityOption2 | undefined;
  option3?: RenderTemplateByIDSecurityOption3 | undefined;
};

export type RenderTemplateByIDRequest = {
  /**
   * The ID of the prompt template to render
   */
  id: string;
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  renderTemplateByIDRequestBody: components.RenderTemplateByIDRequestBody;
};

/** @internal */
export const RenderTemplateByIDSecurityOption1$inboundSchema: z.ZodType<
  RenderTemplateByIDSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type RenderTemplateByIDSecurityOption1$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const RenderTemplateByIDSecurityOption1$outboundSchema: z.ZodType<
  RenderTemplateByIDSecurityOption1$Outbound,
  z.ZodTypeDef,
  RenderTemplateByIDSecurityOption1
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenderTemplateByIDSecurityOption1$ {
  /** @deprecated use `RenderTemplateByIDSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = RenderTemplateByIDSecurityOption1$inboundSchema;
  /** @deprecated use `RenderTemplateByIDSecurityOption1$outboundSchema` instead. */
  export const outboundSchema =
    RenderTemplateByIDSecurityOption1$outboundSchema;
  /** @deprecated use `RenderTemplateByIDSecurityOption1$Outbound` instead. */
  export type Outbound = RenderTemplateByIDSecurityOption1$Outbound;
}

export function renderTemplateByIDSecurityOption1ToJSON(
  renderTemplateByIDSecurityOption1: RenderTemplateByIDSecurityOption1,
): string {
  return JSON.stringify(
    RenderTemplateByIDSecurityOption1$outboundSchema.parse(
      renderTemplateByIDSecurityOption1,
    ),
  );
}

export function renderTemplateByIDSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<RenderTemplateByIDSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenderTemplateByIDSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenderTemplateByIDSecurityOption1' from JSON`,
  );
}

/** @internal */
export const RenderTemplateByIDSecurityOption2$inboundSchema: z.ZodType<
  RenderTemplateByIDSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type RenderTemplateByIDSecurityOption2$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const RenderTemplateByIDSecurityOption2$outboundSchema: z.ZodType<
  RenderTemplateByIDSecurityOption2$Outbound,
  z.ZodTypeDef,
  RenderTemplateByIDSecurityOption2
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenderTemplateByIDSecurityOption2$ {
  /** @deprecated use `RenderTemplateByIDSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = RenderTemplateByIDSecurityOption2$inboundSchema;
  /** @deprecated use `RenderTemplateByIDSecurityOption2$outboundSchema` instead. */
  export const outboundSchema =
    RenderTemplateByIDSecurityOption2$outboundSchema;
  /** @deprecated use `RenderTemplateByIDSecurityOption2$Outbound` instead. */
  export type Outbound = RenderTemplateByIDSecurityOption2$Outbound;
}

export function renderTemplateByIDSecurityOption2ToJSON(
  renderTemplateByIDSecurityOption2: RenderTemplateByIDSecurityOption2,
): string {
  return JSON.stringify(
    RenderTemplateByIDSecurityOption2$outboundSchema.parse(
      renderTemplateByIDSecurityOption2,
    ),
  );
}

export function renderTemplateByIDSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<RenderTemplateByIDSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenderTemplateByIDSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenderTemplateByIDSecurityOption2' from JSON`,
  );
}

/** @internal */
export const RenderTemplateByIDSecurityOption3$inboundSchema: z.ZodType<
  RenderTemplateByIDSecurityOption3,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type RenderTemplateByIDSecurityOption3$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const RenderTemplateByIDSecurityOption3$outboundSchema: z.ZodType<
  RenderTemplateByIDSecurityOption3$Outbound,
  z.ZodTypeDef,
  RenderTemplateByIDSecurityOption3
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenderTemplateByIDSecurityOption3$ {
  /** @deprecated use `RenderTemplateByIDSecurityOption3$inboundSchema` instead. */
  export const inboundSchema = RenderTemplateByIDSecurityOption3$inboundSchema;
  /** @deprecated use `RenderTemplateByIDSecurityOption3$outboundSchema` instead. */
  export const outboundSchema =
    RenderTemplateByIDSecurityOption3$outboundSchema;
  /** @deprecated use `RenderTemplateByIDSecurityOption3$Outbound` instead. */
  export type Outbound = RenderTemplateByIDSecurityOption3$Outbound;
}

export function renderTemplateByIDSecurityOption3ToJSON(
  renderTemplateByIDSecurityOption3: RenderTemplateByIDSecurityOption3,
): string {
  return JSON.stringify(
    RenderTemplateByIDSecurityOption3$outboundSchema.parse(
      renderTemplateByIDSecurityOption3,
    ),
  );
}

export function renderTemplateByIDSecurityOption3FromJSON(
  jsonString: string,
): SafeParseResult<RenderTemplateByIDSecurityOption3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenderTemplateByIDSecurityOption3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenderTemplateByIDSecurityOption3' from JSON`,
  );
}

/** @internal */
export const RenderTemplateByIDSecurity$inboundSchema: z.ZodType<
  RenderTemplateByIDSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => RenderTemplateByIDSecurityOption1$inboundSchema)
    .optional(),
  Option2: z.lazy(() => RenderTemplateByIDSecurityOption2$inboundSchema)
    .optional(),
  Option3: z.lazy(() => RenderTemplateByIDSecurityOption3$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
    "Option3": "option3",
  });
});

/** @internal */
export type RenderTemplateByIDSecurity$Outbound = {
  Option1?: RenderTemplateByIDSecurityOption1$Outbound | undefined;
  Option2?: RenderTemplateByIDSecurityOption2$Outbound | undefined;
  Option3?: RenderTemplateByIDSecurityOption3$Outbound | undefined;
};

/** @internal */
export const RenderTemplateByIDSecurity$outboundSchema: z.ZodType<
  RenderTemplateByIDSecurity$Outbound,
  z.ZodTypeDef,
  RenderTemplateByIDSecurity
> = z.object({
  option1: z.lazy(() => RenderTemplateByIDSecurityOption1$outboundSchema)
    .optional(),
  option2: z.lazy(() => RenderTemplateByIDSecurityOption2$outboundSchema)
    .optional(),
  option3: z.lazy(() => RenderTemplateByIDSecurityOption3$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
    option3: "Option3",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenderTemplateByIDSecurity$ {
  /** @deprecated use `RenderTemplateByIDSecurity$inboundSchema` instead. */
  export const inboundSchema = RenderTemplateByIDSecurity$inboundSchema;
  /** @deprecated use `RenderTemplateByIDSecurity$outboundSchema` instead. */
  export const outboundSchema = RenderTemplateByIDSecurity$outboundSchema;
  /** @deprecated use `RenderTemplateByIDSecurity$Outbound` instead. */
  export type Outbound = RenderTemplateByIDSecurity$Outbound;
}

export function renderTemplateByIDSecurityToJSON(
  renderTemplateByIDSecurity: RenderTemplateByIDSecurity,
): string {
  return JSON.stringify(
    RenderTemplateByIDSecurity$outboundSchema.parse(renderTemplateByIDSecurity),
  );
}

export function renderTemplateByIDSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RenderTemplateByIDSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenderTemplateByIDSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenderTemplateByIDSecurity' from JSON`,
  );
}

/** @internal */
export const RenderTemplateByIDRequest$inboundSchema: z.ZodType<
  RenderTemplateByIDRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "Gram-Key": z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  RenderTemplateByIDRequestBody:
    components.RenderTemplateByIDRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Key": "gramKey",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "RenderTemplateByIDRequestBody": "renderTemplateByIDRequestBody",
  });
});

/** @internal */
export type RenderTemplateByIDRequest$Outbound = {
  id: string;
  "Gram-Key"?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  RenderTemplateByIDRequestBody:
    components.RenderTemplateByIDRequestBody$Outbound;
};

/** @internal */
export const RenderTemplateByIDRequest$outboundSchema: z.ZodType<
  RenderTemplateByIDRequest$Outbound,
  z.ZodTypeDef,
  RenderTemplateByIDRequest
> = z.object({
  id: z.string(),
  gramKey: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  renderTemplateByIDRequestBody:
    components.RenderTemplateByIDRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramKey: "Gram-Key",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    renderTemplateByIDRequestBody: "RenderTemplateByIDRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenderTemplateByIDRequest$ {
  /** @deprecated use `RenderTemplateByIDRequest$inboundSchema` instead. */
  export const inboundSchema = RenderTemplateByIDRequest$inboundSchema;
  /** @deprecated use `RenderTemplateByIDRequest$outboundSchema` instead. */
  export const outboundSchema = RenderTemplateByIDRequest$outboundSchema;
  /** @deprecated use `RenderTemplateByIDRequest$Outbound` instead. */
  export type Outbound = RenderTemplateByIDRequest$Outbound;
}

export function renderTemplateByIDRequestToJSON(
  renderTemplateByIDRequest: RenderTemplateByIDRequest,
): string {
  return JSON.stringify(
    RenderTemplateByIDRequest$outboundSchema.parse(renderTemplateByIDRequest),
  );
}

export function renderTemplateByIDRequestFromJSON(
  jsonString: string,
): SafeParseResult<RenderTemplateByIDRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenderTemplateByIDRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenderTemplateByIDRequest' from JSON`,
  );
}
