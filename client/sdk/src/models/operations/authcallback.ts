/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AuthCallbackRequest = {
  /**
   * The auth code for authentication from the speakeasy system
   */
  code: string;
};

export type AuthCallbackResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const AuthCallbackRequest$inboundSchema: z.ZodType<
  AuthCallbackRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
});

/** @internal */
export type AuthCallbackRequest$Outbound = {
  code: string;
};

/** @internal */
export const AuthCallbackRequest$outboundSchema: z.ZodType<
  AuthCallbackRequest$Outbound,
  z.ZodTypeDef,
  AuthCallbackRequest
> = z.object({
  code: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthCallbackRequest$ {
  /** @deprecated use `AuthCallbackRequest$inboundSchema` instead. */
  export const inboundSchema = AuthCallbackRequest$inboundSchema;
  /** @deprecated use `AuthCallbackRequest$outboundSchema` instead. */
  export const outboundSchema = AuthCallbackRequest$outboundSchema;
  /** @deprecated use `AuthCallbackRequest$Outbound` instead. */
  export type Outbound = AuthCallbackRequest$Outbound;
}

export function authCallbackRequestToJSON(
  authCallbackRequest: AuthCallbackRequest,
): string {
  return JSON.stringify(
    AuthCallbackRequest$outboundSchema.parse(authCallbackRequest),
  );
}

export function authCallbackRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthCallbackRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthCallbackRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthCallbackRequest' from JSON`,
  );
}

/** @internal */
export const AuthCallbackResponse$inboundSchema: z.ZodType<
  AuthCallbackResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type AuthCallbackResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const AuthCallbackResponse$outboundSchema: z.ZodType<
  AuthCallbackResponse$Outbound,
  z.ZodTypeDef,
  AuthCallbackResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthCallbackResponse$ {
  /** @deprecated use `AuthCallbackResponse$inboundSchema` instead. */
  export const inboundSchema = AuthCallbackResponse$inboundSchema;
  /** @deprecated use `AuthCallbackResponse$outboundSchema` instead. */
  export const outboundSchema = AuthCallbackResponse$outboundSchema;
  /** @deprecated use `AuthCallbackResponse$Outbound` instead. */
  export type Outbound = AuthCallbackResponse$Outbound;
}

export function authCallbackResponseToJSON(
  authCallbackResponse: AuthCallbackResponse,
): string {
  return JSON.stringify(
    AuthCallbackResponse$outboundSchema.parse(authCallbackResponse),
  );
}

export function authCallbackResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthCallbackResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthCallbackResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthCallbackResponse' from JSON`,
  );
}
