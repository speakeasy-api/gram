/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAssetsSecurityOption1 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type ListAssetsSecurityOption2 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type ListAssetsSecurity = {
  option1?: ListAssetsSecurityOption1 | undefined;
  option2?: ListAssetsSecurityOption2 | undefined;
};

export type ListAssetsRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  /**
   * API Key header
   */
  gramKey?: string | undefined;
};

/** @internal */
export const ListAssetsSecurityOption1$inboundSchema: z.ZodType<
  ListAssetsSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type ListAssetsSecurityOption1$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const ListAssetsSecurityOption1$outboundSchema: z.ZodType<
  ListAssetsSecurityOption1$Outbound,
  z.ZodTypeDef,
  ListAssetsSecurityOption1
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAssetsSecurityOption1$ {
  /** @deprecated use `ListAssetsSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = ListAssetsSecurityOption1$inboundSchema;
  /** @deprecated use `ListAssetsSecurityOption1$outboundSchema` instead. */
  export const outboundSchema = ListAssetsSecurityOption1$outboundSchema;
  /** @deprecated use `ListAssetsSecurityOption1$Outbound` instead. */
  export type Outbound = ListAssetsSecurityOption1$Outbound;
}

export function listAssetsSecurityOption1ToJSON(
  listAssetsSecurityOption1: ListAssetsSecurityOption1,
): string {
  return JSON.stringify(
    ListAssetsSecurityOption1$outboundSchema.parse(listAssetsSecurityOption1),
  );
}

export function listAssetsSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<ListAssetsSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAssetsSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAssetsSecurityOption1' from JSON`,
  );
}

/** @internal */
export const ListAssetsSecurityOption2$inboundSchema: z.ZodType<
  ListAssetsSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type ListAssetsSecurityOption2$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const ListAssetsSecurityOption2$outboundSchema: z.ZodType<
  ListAssetsSecurityOption2$Outbound,
  z.ZodTypeDef,
  ListAssetsSecurityOption2
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAssetsSecurityOption2$ {
  /** @deprecated use `ListAssetsSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = ListAssetsSecurityOption2$inboundSchema;
  /** @deprecated use `ListAssetsSecurityOption2$outboundSchema` instead. */
  export const outboundSchema = ListAssetsSecurityOption2$outboundSchema;
  /** @deprecated use `ListAssetsSecurityOption2$Outbound` instead. */
  export type Outbound = ListAssetsSecurityOption2$Outbound;
}

export function listAssetsSecurityOption2ToJSON(
  listAssetsSecurityOption2: ListAssetsSecurityOption2,
): string {
  return JSON.stringify(
    ListAssetsSecurityOption2$outboundSchema.parse(listAssetsSecurityOption2),
  );
}

export function listAssetsSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<ListAssetsSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAssetsSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAssetsSecurityOption2' from JSON`,
  );
}

/** @internal */
export const ListAssetsSecurity$inboundSchema: z.ZodType<
  ListAssetsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => ListAssetsSecurityOption1$inboundSchema).optional(),
  Option2: z.lazy(() => ListAssetsSecurityOption2$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type ListAssetsSecurity$Outbound = {
  Option1?: ListAssetsSecurityOption1$Outbound | undefined;
  Option2?: ListAssetsSecurityOption2$Outbound | undefined;
};

/** @internal */
export const ListAssetsSecurity$outboundSchema: z.ZodType<
  ListAssetsSecurity$Outbound,
  z.ZodTypeDef,
  ListAssetsSecurity
> = z.object({
  option1: z.lazy(() => ListAssetsSecurityOption1$outboundSchema).optional(),
  option2: z.lazy(() => ListAssetsSecurityOption2$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAssetsSecurity$ {
  /** @deprecated use `ListAssetsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListAssetsSecurity$inboundSchema;
  /** @deprecated use `ListAssetsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListAssetsSecurity$outboundSchema;
  /** @deprecated use `ListAssetsSecurity$Outbound` instead. */
  export type Outbound = ListAssetsSecurity$Outbound;
}

export function listAssetsSecurityToJSON(
  listAssetsSecurity: ListAssetsSecurity,
): string {
  return JSON.stringify(
    ListAssetsSecurity$outboundSchema.parse(listAssetsSecurity),
  );
}

export function listAssetsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListAssetsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAssetsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAssetsSecurity' from JSON`,
  );
}

/** @internal */
export const ListAssetsRequest$inboundSchema: z.ZodType<
  ListAssetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  "Gram-Key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "Gram-Key": "gramKey",
  });
});

/** @internal */
export type ListAssetsRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  "Gram-Key"?: string | undefined;
};

/** @internal */
export const ListAssetsRequest$outboundSchema: z.ZodType<
  ListAssetsRequest$Outbound,
  z.ZodTypeDef,
  ListAssetsRequest
> = z.object({
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  gramKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    gramKey: "Gram-Key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAssetsRequest$ {
  /** @deprecated use `ListAssetsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAssetsRequest$inboundSchema;
  /** @deprecated use `ListAssetsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAssetsRequest$outboundSchema;
  /** @deprecated use `ListAssetsRequest$Outbound` instead. */
  export type Outbound = ListAssetsRequest$Outbound;
}

export function listAssetsRequestToJSON(
  listAssetsRequest: ListAssetsRequest,
): string {
  return JSON.stringify(
    ListAssetsRequest$outboundSchema.parse(listAssetsRequest),
  );
}

export function listAssetsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAssetsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAssetsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAssetsRequest' from JSON`,
  );
}
