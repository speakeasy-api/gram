/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetInstanceSecurityOption1 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type GetInstanceSecurityOption2 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type GetInstanceSecurity = {
  option1?: GetInstanceSecurityOption1 | undefined;
  option2?: GetInstanceSecurityOption2 | undefined;
};

export type GetInstanceRequest = {
  /**
   * The slug of the toolset to load
   */
  toolsetSlug: string;
  /**
   * The slug of the environment to load
   */
  environmentSlug?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  /**
   * API Key header
   */
  gramKey?: string | undefined;
};

/** @internal */
export const GetInstanceSecurityOption1$inboundSchema: z.ZodType<
  GetInstanceSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type GetInstanceSecurityOption1$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const GetInstanceSecurityOption1$outboundSchema: z.ZodType<
  GetInstanceSecurityOption1$Outbound,
  z.ZodTypeDef,
  GetInstanceSecurityOption1
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstanceSecurityOption1$ {
  /** @deprecated use `GetInstanceSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = GetInstanceSecurityOption1$inboundSchema;
  /** @deprecated use `GetInstanceSecurityOption1$outboundSchema` instead. */
  export const outboundSchema = GetInstanceSecurityOption1$outboundSchema;
  /** @deprecated use `GetInstanceSecurityOption1$Outbound` instead. */
  export type Outbound = GetInstanceSecurityOption1$Outbound;
}

export function getInstanceSecurityOption1ToJSON(
  getInstanceSecurityOption1: GetInstanceSecurityOption1,
): string {
  return JSON.stringify(
    GetInstanceSecurityOption1$outboundSchema.parse(getInstanceSecurityOption1),
  );
}

export function getInstanceSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<GetInstanceSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstanceSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstanceSecurityOption1' from JSON`,
  );
}

/** @internal */
export const GetInstanceSecurityOption2$inboundSchema: z.ZodType<
  GetInstanceSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type GetInstanceSecurityOption2$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const GetInstanceSecurityOption2$outboundSchema: z.ZodType<
  GetInstanceSecurityOption2$Outbound,
  z.ZodTypeDef,
  GetInstanceSecurityOption2
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstanceSecurityOption2$ {
  /** @deprecated use `GetInstanceSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = GetInstanceSecurityOption2$inboundSchema;
  /** @deprecated use `GetInstanceSecurityOption2$outboundSchema` instead. */
  export const outboundSchema = GetInstanceSecurityOption2$outboundSchema;
  /** @deprecated use `GetInstanceSecurityOption2$Outbound` instead. */
  export type Outbound = GetInstanceSecurityOption2$Outbound;
}

export function getInstanceSecurityOption2ToJSON(
  getInstanceSecurityOption2: GetInstanceSecurityOption2,
): string {
  return JSON.stringify(
    GetInstanceSecurityOption2$outboundSchema.parse(getInstanceSecurityOption2),
  );
}

export function getInstanceSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<GetInstanceSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstanceSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstanceSecurityOption2' from JSON`,
  );
}

/** @internal */
export const GetInstanceSecurity$inboundSchema: z.ZodType<
  GetInstanceSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => GetInstanceSecurityOption1$inboundSchema).optional(),
  Option2: z.lazy(() => GetInstanceSecurityOption2$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type GetInstanceSecurity$Outbound = {
  Option1?: GetInstanceSecurityOption1$Outbound | undefined;
  Option2?: GetInstanceSecurityOption2$Outbound | undefined;
};

/** @internal */
export const GetInstanceSecurity$outboundSchema: z.ZodType<
  GetInstanceSecurity$Outbound,
  z.ZodTypeDef,
  GetInstanceSecurity
> = z.object({
  option1: z.lazy(() => GetInstanceSecurityOption1$outboundSchema).optional(),
  option2: z.lazy(() => GetInstanceSecurityOption2$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstanceSecurity$ {
  /** @deprecated use `GetInstanceSecurity$inboundSchema` instead. */
  export const inboundSchema = GetInstanceSecurity$inboundSchema;
  /** @deprecated use `GetInstanceSecurity$outboundSchema` instead. */
  export const outboundSchema = GetInstanceSecurity$outboundSchema;
  /** @deprecated use `GetInstanceSecurity$Outbound` instead. */
  export type Outbound = GetInstanceSecurity$Outbound;
}

export function getInstanceSecurityToJSON(
  getInstanceSecurity: GetInstanceSecurity,
): string {
  return JSON.stringify(
    GetInstanceSecurity$outboundSchema.parse(getInstanceSecurity),
  );
}

export function getInstanceSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetInstanceSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstanceSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstanceSecurity' from JSON`,
  );
}

/** @internal */
export const GetInstanceRequest$inboundSchema: z.ZodType<
  GetInstanceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  toolset_slug: z.string(),
  environment_slug: z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  "Gram-Key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "toolset_slug": "toolsetSlug",
    "environment_slug": "environmentSlug",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "Gram-Key": "gramKey",
  });
});

/** @internal */
export type GetInstanceRequest$Outbound = {
  toolset_slug: string;
  environment_slug?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  "Gram-Key"?: string | undefined;
};

/** @internal */
export const GetInstanceRequest$outboundSchema: z.ZodType<
  GetInstanceRequest$Outbound,
  z.ZodTypeDef,
  GetInstanceRequest
> = z.object({
  toolsetSlug: z.string(),
  environmentSlug: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  gramKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolsetSlug: "toolset_slug",
    environmentSlug: "environment_slug",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    gramKey: "Gram-Key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstanceRequest$ {
  /** @deprecated use `GetInstanceRequest$inboundSchema` instead. */
  export const inboundSchema = GetInstanceRequest$inboundSchema;
  /** @deprecated use `GetInstanceRequest$outboundSchema` instead. */
  export const outboundSchema = GetInstanceRequest$outboundSchema;
  /** @deprecated use `GetInstanceRequest$Outbound` instead. */
  export type Outbound = GetInstanceRequest$Outbound;
}

export function getInstanceRequestToJSON(
  getInstanceRequest: GetInstanceRequest,
): string {
  return JSON.stringify(
    GetInstanceRequest$outboundSchema.parse(getInstanceRequest),
  );
}

export function getInstanceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInstanceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstanceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstanceRequest' from JSON`,
  );
}
