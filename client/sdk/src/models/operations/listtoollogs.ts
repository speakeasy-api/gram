/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListToolLogsSecurityOption1 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type ListToolLogsSecurityOption2 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type ListToolLogsSecurity = {
  option1?: ListToolLogsSecurityOption1 | undefined;
  option2?: ListToolLogsSecurityOption2 | undefined;
};

/**
 * Pagination direction
 */
export const Direction = {
  Next: "next",
  Prev: "prev",
} as const;
/**
 * Pagination direction
 */
export type Direction = ClosedEnum<typeof Direction>;

/**
 * Sort order
 */
export const Sort = {
  Asc: "ASC",
  Desc: "DESC",
} as const;
/**
 * Sort order
 */
export type Sort = ClosedEnum<typeof Sort>;

export type ListToolLogsRequest = {
  /**
   * Tool ID
   */
  toolId?: string | undefined;
  /**
   * Start timestamp
   */
  tsStart?: Date | undefined;
  /**
   * End timestamp
   */
  tsEnd?: Date | undefined;
  /**
   * Cursor for pagination
   */
  cursor?: string | undefined;
  /**
   * Number of items per page (1-100)
   */
  perPage?: number | undefined;
  /**
   * Pagination direction
   */
  direction?: Direction | undefined;
  /**
   * Sort order
   */
  sort?: Sort | undefined;
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const ListToolLogsSecurityOption1$inboundSchema: z.ZodType<
  ListToolLogsSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type ListToolLogsSecurityOption1$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const ListToolLogsSecurityOption1$outboundSchema: z.ZodType<
  ListToolLogsSecurityOption1$Outbound,
  z.ZodTypeDef,
  ListToolLogsSecurityOption1
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListToolLogsSecurityOption1$ {
  /** @deprecated use `ListToolLogsSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = ListToolLogsSecurityOption1$inboundSchema;
  /** @deprecated use `ListToolLogsSecurityOption1$outboundSchema` instead. */
  export const outboundSchema = ListToolLogsSecurityOption1$outboundSchema;
  /** @deprecated use `ListToolLogsSecurityOption1$Outbound` instead. */
  export type Outbound = ListToolLogsSecurityOption1$Outbound;
}

export function listToolLogsSecurityOption1ToJSON(
  listToolLogsSecurityOption1: ListToolLogsSecurityOption1,
): string {
  return JSON.stringify(
    ListToolLogsSecurityOption1$outboundSchema.parse(
      listToolLogsSecurityOption1,
    ),
  );
}

export function listToolLogsSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<ListToolLogsSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListToolLogsSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListToolLogsSecurityOption1' from JSON`,
  );
}

/** @internal */
export const ListToolLogsSecurityOption2$inboundSchema: z.ZodType<
  ListToolLogsSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type ListToolLogsSecurityOption2$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const ListToolLogsSecurityOption2$outboundSchema: z.ZodType<
  ListToolLogsSecurityOption2$Outbound,
  z.ZodTypeDef,
  ListToolLogsSecurityOption2
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListToolLogsSecurityOption2$ {
  /** @deprecated use `ListToolLogsSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = ListToolLogsSecurityOption2$inboundSchema;
  /** @deprecated use `ListToolLogsSecurityOption2$outboundSchema` instead. */
  export const outboundSchema = ListToolLogsSecurityOption2$outboundSchema;
  /** @deprecated use `ListToolLogsSecurityOption2$Outbound` instead. */
  export type Outbound = ListToolLogsSecurityOption2$Outbound;
}

export function listToolLogsSecurityOption2ToJSON(
  listToolLogsSecurityOption2: ListToolLogsSecurityOption2,
): string {
  return JSON.stringify(
    ListToolLogsSecurityOption2$outboundSchema.parse(
      listToolLogsSecurityOption2,
    ),
  );
}

export function listToolLogsSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<ListToolLogsSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListToolLogsSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListToolLogsSecurityOption2' from JSON`,
  );
}

/** @internal */
export const ListToolLogsSecurity$inboundSchema: z.ZodType<
  ListToolLogsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => ListToolLogsSecurityOption1$inboundSchema).optional(),
  Option2: z.lazy(() => ListToolLogsSecurityOption2$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type ListToolLogsSecurity$Outbound = {
  Option1?: ListToolLogsSecurityOption1$Outbound | undefined;
  Option2?: ListToolLogsSecurityOption2$Outbound | undefined;
};

/** @internal */
export const ListToolLogsSecurity$outboundSchema: z.ZodType<
  ListToolLogsSecurity$Outbound,
  z.ZodTypeDef,
  ListToolLogsSecurity
> = z.object({
  option1: z.lazy(() => ListToolLogsSecurityOption1$outboundSchema).optional(),
  option2: z.lazy(() => ListToolLogsSecurityOption2$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListToolLogsSecurity$ {
  /** @deprecated use `ListToolLogsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListToolLogsSecurity$inboundSchema;
  /** @deprecated use `ListToolLogsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListToolLogsSecurity$outboundSchema;
  /** @deprecated use `ListToolLogsSecurity$Outbound` instead. */
  export type Outbound = ListToolLogsSecurity$Outbound;
}

export function listToolLogsSecurityToJSON(
  listToolLogsSecurity: ListToolLogsSecurity,
): string {
  return JSON.stringify(
    ListToolLogsSecurity$outboundSchema.parse(listToolLogsSecurity),
  );
}

export function listToolLogsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListToolLogsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListToolLogsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListToolLogsSecurity' from JSON`,
  );
}

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const Sort$inboundSchema: z.ZodNativeEnum<typeof Sort> = z.nativeEnum(
  Sort,
);

/** @internal */
export const Sort$outboundSchema: z.ZodNativeEnum<typeof Sort> =
  Sort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sort$ {
  /** @deprecated use `Sort$inboundSchema` instead. */
  export const inboundSchema = Sort$inboundSchema;
  /** @deprecated use `Sort$outboundSchema` instead. */
  export const outboundSchema = Sort$outboundSchema;
}

/** @internal */
export const ListToolLogsRequest$inboundSchema: z.ZodType<
  ListToolLogsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tool_id: z.string().optional(),
  ts_start: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  ts_end: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  cursor: z.string().optional(),
  per_page: z.number().int().default(20),
  direction: Direction$inboundSchema.default("next"),
  sort: Sort$inboundSchema.default("DESC"),
  "Gram-Key": z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_id": "toolId",
    "ts_start": "tsStart",
    "ts_end": "tsEnd",
    "per_page": "perPage",
    "Gram-Key": "gramKey",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type ListToolLogsRequest$Outbound = {
  tool_id?: string | undefined;
  ts_start?: string | undefined;
  ts_end?: string | undefined;
  cursor?: string | undefined;
  per_page: number;
  direction: string;
  sort: string;
  "Gram-Key"?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const ListToolLogsRequest$outboundSchema: z.ZodType<
  ListToolLogsRequest$Outbound,
  z.ZodTypeDef,
  ListToolLogsRequest
> = z.object({
  toolId: z.string().optional(),
  tsStart: z.date().transform(v => v.toISOString()).optional(),
  tsEnd: z.date().transform(v => v.toISOString()).optional(),
  cursor: z.string().optional(),
  perPage: z.number().int().default(20),
  direction: Direction$outboundSchema.default("next"),
  sort: Sort$outboundSchema.default("DESC"),
  gramKey: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolId: "tool_id",
    tsStart: "ts_start",
    tsEnd: "ts_end",
    perPage: "per_page",
    gramKey: "Gram-Key",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListToolLogsRequest$ {
  /** @deprecated use `ListToolLogsRequest$inboundSchema` instead. */
  export const inboundSchema = ListToolLogsRequest$inboundSchema;
  /** @deprecated use `ListToolLogsRequest$outboundSchema` instead. */
  export const outboundSchema = ListToolLogsRequest$outboundSchema;
  /** @deprecated use `ListToolLogsRequest$Outbound` instead. */
  export type Outbound = ListToolLogsRequest$Outbound;
}

export function listToolLogsRequestToJSON(
  listToolLogsRequest: ListToolLogsRequest,
): string {
  return JSON.stringify(
    ListToolLogsRequest$outboundSchema.parse(listToolLogsRequest),
  );
}

export function listToolLogsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListToolLogsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListToolLogsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListToolLogsRequest' from JSON`,
  );
}
