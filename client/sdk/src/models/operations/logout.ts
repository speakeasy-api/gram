/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LogoutSecurity = {
  sessionHeaderGramSession?: string | undefined;
};

export type LogoutRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
};

export type LogoutResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const LogoutSecurity$inboundSchema: z.ZodType<
  LogoutSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type LogoutSecurity$Outbound = {
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const LogoutSecurity$outboundSchema: z.ZodType<
  LogoutSecurity$Outbound,
  z.ZodTypeDef,
  LogoutSecurity
> = z.object({
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogoutSecurity$ {
  /** @deprecated use `LogoutSecurity$inboundSchema` instead. */
  export const inboundSchema = LogoutSecurity$inboundSchema;
  /** @deprecated use `LogoutSecurity$outboundSchema` instead. */
  export const outboundSchema = LogoutSecurity$outboundSchema;
  /** @deprecated use `LogoutSecurity$Outbound` instead. */
  export type Outbound = LogoutSecurity$Outbound;
}

export function logoutSecurityToJSON(logoutSecurity: LogoutSecurity): string {
  return JSON.stringify(LogoutSecurity$outboundSchema.parse(logoutSecurity));
}

export function logoutSecurityFromJSON(
  jsonString: string,
): SafeParseResult<LogoutSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogoutSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogoutSecurity' from JSON`,
  );
}

/** @internal */
export const LogoutRequest$inboundSchema: z.ZodType<
  LogoutRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
  });
});

/** @internal */
export type LogoutRequest$Outbound = {
  "Gram-Session"?: string | undefined;
};

/** @internal */
export const LogoutRequest$outboundSchema: z.ZodType<
  LogoutRequest$Outbound,
  z.ZodTypeDef,
  LogoutRequest
> = z.object({
  gramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogoutRequest$ {
  /** @deprecated use `LogoutRequest$inboundSchema` instead. */
  export const inboundSchema = LogoutRequest$inboundSchema;
  /** @deprecated use `LogoutRequest$outboundSchema` instead. */
  export const outboundSchema = LogoutRequest$outboundSchema;
  /** @deprecated use `LogoutRequest$Outbound` instead. */
  export type Outbound = LogoutRequest$Outbound;
}

export function logoutRequestToJSON(logoutRequest: LogoutRequest): string {
  return JSON.stringify(LogoutRequest$outboundSchema.parse(logoutRequest));
}

export function logoutRequestFromJSON(
  jsonString: string,
): SafeParseResult<LogoutRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogoutRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogoutRequest' from JSON`,
  );
}

/** @internal */
export const LogoutResponse$inboundSchema: z.ZodType<
  LogoutResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type LogoutResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const LogoutResponse$outboundSchema: z.ZodType<
  LogoutResponse$Outbound,
  z.ZodTypeDef,
  LogoutResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogoutResponse$ {
  /** @deprecated use `LogoutResponse$inboundSchema` instead. */
  export const inboundSchema = LogoutResponse$inboundSchema;
  /** @deprecated use `LogoutResponse$outboundSchema` instead. */
  export const outboundSchema = LogoutResponse$outboundSchema;
  /** @deprecated use `LogoutResponse$Outbound` instead. */
  export type Outbound = LogoutResponse$Outbound;
}

export function logoutResponseToJSON(logoutResponse: LogoutResponse): string {
  return JSON.stringify(LogoutResponse$outboundSchema.parse(logoutResponse));
}

export function logoutResponseFromJSON(
  jsonString: string,
): SafeParseResult<LogoutResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogoutResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogoutResponse' from JSON`,
  );
}
