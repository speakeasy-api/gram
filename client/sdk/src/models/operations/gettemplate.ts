/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTemplateSecurityOption1 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type GetTemplateSecurityOption2 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type GetTemplateSecurityOption3 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type GetTemplateSecurity = {
  option1?: GetTemplateSecurityOption1 | undefined;
  option2?: GetTemplateSecurityOption2 | undefined;
  option3?: GetTemplateSecurityOption3 | undefined;
};

export type GetTemplateRequest = {
  /**
   * The ID of the prompt template
   */
  id?: string | undefined;
  /**
   * The name of the prompt template
   */
  name?: string | undefined;
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const GetTemplateSecurityOption1$inboundSchema: z.ZodType<
  GetTemplateSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type GetTemplateSecurityOption1$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const GetTemplateSecurityOption1$outboundSchema: z.ZodType<
  GetTemplateSecurityOption1$Outbound,
  z.ZodTypeDef,
  GetTemplateSecurityOption1
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTemplateSecurityOption1$ {
  /** @deprecated use `GetTemplateSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = GetTemplateSecurityOption1$inboundSchema;
  /** @deprecated use `GetTemplateSecurityOption1$outboundSchema` instead. */
  export const outboundSchema = GetTemplateSecurityOption1$outboundSchema;
  /** @deprecated use `GetTemplateSecurityOption1$Outbound` instead. */
  export type Outbound = GetTemplateSecurityOption1$Outbound;
}

export function getTemplateSecurityOption1ToJSON(
  getTemplateSecurityOption1: GetTemplateSecurityOption1,
): string {
  return JSON.stringify(
    GetTemplateSecurityOption1$outboundSchema.parse(getTemplateSecurityOption1),
  );
}

export function getTemplateSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<GetTemplateSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTemplateSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTemplateSecurityOption1' from JSON`,
  );
}

/** @internal */
export const GetTemplateSecurityOption2$inboundSchema: z.ZodType<
  GetTemplateSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type GetTemplateSecurityOption2$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const GetTemplateSecurityOption2$outboundSchema: z.ZodType<
  GetTemplateSecurityOption2$Outbound,
  z.ZodTypeDef,
  GetTemplateSecurityOption2
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTemplateSecurityOption2$ {
  /** @deprecated use `GetTemplateSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = GetTemplateSecurityOption2$inboundSchema;
  /** @deprecated use `GetTemplateSecurityOption2$outboundSchema` instead. */
  export const outboundSchema = GetTemplateSecurityOption2$outboundSchema;
  /** @deprecated use `GetTemplateSecurityOption2$Outbound` instead. */
  export type Outbound = GetTemplateSecurityOption2$Outbound;
}

export function getTemplateSecurityOption2ToJSON(
  getTemplateSecurityOption2: GetTemplateSecurityOption2,
): string {
  return JSON.stringify(
    GetTemplateSecurityOption2$outboundSchema.parse(getTemplateSecurityOption2),
  );
}

export function getTemplateSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<GetTemplateSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTemplateSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTemplateSecurityOption2' from JSON`,
  );
}

/** @internal */
export const GetTemplateSecurityOption3$inboundSchema: z.ZodType<
  GetTemplateSecurityOption3,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type GetTemplateSecurityOption3$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const GetTemplateSecurityOption3$outboundSchema: z.ZodType<
  GetTemplateSecurityOption3$Outbound,
  z.ZodTypeDef,
  GetTemplateSecurityOption3
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTemplateSecurityOption3$ {
  /** @deprecated use `GetTemplateSecurityOption3$inboundSchema` instead. */
  export const inboundSchema = GetTemplateSecurityOption3$inboundSchema;
  /** @deprecated use `GetTemplateSecurityOption3$outboundSchema` instead. */
  export const outboundSchema = GetTemplateSecurityOption3$outboundSchema;
  /** @deprecated use `GetTemplateSecurityOption3$Outbound` instead. */
  export type Outbound = GetTemplateSecurityOption3$Outbound;
}

export function getTemplateSecurityOption3ToJSON(
  getTemplateSecurityOption3: GetTemplateSecurityOption3,
): string {
  return JSON.stringify(
    GetTemplateSecurityOption3$outboundSchema.parse(getTemplateSecurityOption3),
  );
}

export function getTemplateSecurityOption3FromJSON(
  jsonString: string,
): SafeParseResult<GetTemplateSecurityOption3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTemplateSecurityOption3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTemplateSecurityOption3' from JSON`,
  );
}

/** @internal */
export const GetTemplateSecurity$inboundSchema: z.ZodType<
  GetTemplateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => GetTemplateSecurityOption1$inboundSchema).optional(),
  Option2: z.lazy(() => GetTemplateSecurityOption2$inboundSchema).optional(),
  Option3: z.lazy(() => GetTemplateSecurityOption3$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
    "Option3": "option3",
  });
});

/** @internal */
export type GetTemplateSecurity$Outbound = {
  Option1?: GetTemplateSecurityOption1$Outbound | undefined;
  Option2?: GetTemplateSecurityOption2$Outbound | undefined;
  Option3?: GetTemplateSecurityOption3$Outbound | undefined;
};

/** @internal */
export const GetTemplateSecurity$outboundSchema: z.ZodType<
  GetTemplateSecurity$Outbound,
  z.ZodTypeDef,
  GetTemplateSecurity
> = z.object({
  option1: z.lazy(() => GetTemplateSecurityOption1$outboundSchema).optional(),
  option2: z.lazy(() => GetTemplateSecurityOption2$outboundSchema).optional(),
  option3: z.lazy(() => GetTemplateSecurityOption3$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
    option3: "Option3",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTemplateSecurity$ {
  /** @deprecated use `GetTemplateSecurity$inboundSchema` instead. */
  export const inboundSchema = GetTemplateSecurity$inboundSchema;
  /** @deprecated use `GetTemplateSecurity$outboundSchema` instead. */
  export const outboundSchema = GetTemplateSecurity$outboundSchema;
  /** @deprecated use `GetTemplateSecurity$Outbound` instead. */
  export type Outbound = GetTemplateSecurity$Outbound;
}

export function getTemplateSecurityToJSON(
  getTemplateSecurity: GetTemplateSecurity,
): string {
  return JSON.stringify(
    GetTemplateSecurity$outboundSchema.parse(getTemplateSecurity),
  );
}

export function getTemplateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetTemplateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTemplateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTemplateSecurity' from JSON`,
  );
}

/** @internal */
export const GetTemplateRequest$inboundSchema: z.ZodType<
  GetTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  "Gram-Key": z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Key": "gramKey",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type GetTemplateRequest$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  "Gram-Key"?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const GetTemplateRequest$outboundSchema: z.ZodType<
  GetTemplateRequest$Outbound,
  z.ZodTypeDef,
  GetTemplateRequest
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  gramKey: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramKey: "Gram-Key",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTemplateRequest$ {
  /** @deprecated use `GetTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = GetTemplateRequest$inboundSchema;
  /** @deprecated use `GetTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = GetTemplateRequest$outboundSchema;
  /** @deprecated use `GetTemplateRequest$Outbound` instead. */
  export type Outbound = GetTemplateRequest$Outbound;
}

export function getTemplateRequestToJSON(
  getTemplateRequest: GetTemplateRequest,
): string {
  return JSON.stringify(
    GetTemplateRequest$outboundSchema.parse(getTemplateRequest),
  );
}

export function getTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTemplateRequest' from JSON`,
  );
}
