/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteGlobalVariationSecurityOption1 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type DeleteGlobalVariationSecurityOption2 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type DeleteGlobalVariationSecurity = {
  option1?: DeleteGlobalVariationSecurityOption1 | undefined;
  option2?: DeleteGlobalVariationSecurityOption2 | undefined;
};

export type DeleteGlobalVariationRequest = {
  /**
   * The ID of the variation to delete
   */
  variationId: string;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const DeleteGlobalVariationSecurityOption1$inboundSchema: z.ZodType<
  DeleteGlobalVariationSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type DeleteGlobalVariationSecurityOption1$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const DeleteGlobalVariationSecurityOption1$outboundSchema: z.ZodType<
  DeleteGlobalVariationSecurityOption1$Outbound,
  z.ZodTypeDef,
  DeleteGlobalVariationSecurityOption1
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteGlobalVariationSecurityOption1$ {
  /** @deprecated use `DeleteGlobalVariationSecurityOption1$inboundSchema` instead. */
  export const inboundSchema =
    DeleteGlobalVariationSecurityOption1$inboundSchema;
  /** @deprecated use `DeleteGlobalVariationSecurityOption1$outboundSchema` instead. */
  export const outboundSchema =
    DeleteGlobalVariationSecurityOption1$outboundSchema;
  /** @deprecated use `DeleteGlobalVariationSecurityOption1$Outbound` instead. */
  export type Outbound = DeleteGlobalVariationSecurityOption1$Outbound;
}

export function deleteGlobalVariationSecurityOption1ToJSON(
  deleteGlobalVariationSecurityOption1: DeleteGlobalVariationSecurityOption1,
): string {
  return JSON.stringify(
    DeleteGlobalVariationSecurityOption1$outboundSchema.parse(
      deleteGlobalVariationSecurityOption1,
    ),
  );
}

export function deleteGlobalVariationSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<DeleteGlobalVariationSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteGlobalVariationSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteGlobalVariationSecurityOption1' from JSON`,
  );
}

/** @internal */
export const DeleteGlobalVariationSecurityOption2$inboundSchema: z.ZodType<
  DeleteGlobalVariationSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type DeleteGlobalVariationSecurityOption2$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const DeleteGlobalVariationSecurityOption2$outboundSchema: z.ZodType<
  DeleteGlobalVariationSecurityOption2$Outbound,
  z.ZodTypeDef,
  DeleteGlobalVariationSecurityOption2
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteGlobalVariationSecurityOption2$ {
  /** @deprecated use `DeleteGlobalVariationSecurityOption2$inboundSchema` instead. */
  export const inboundSchema =
    DeleteGlobalVariationSecurityOption2$inboundSchema;
  /** @deprecated use `DeleteGlobalVariationSecurityOption2$outboundSchema` instead. */
  export const outboundSchema =
    DeleteGlobalVariationSecurityOption2$outboundSchema;
  /** @deprecated use `DeleteGlobalVariationSecurityOption2$Outbound` instead. */
  export type Outbound = DeleteGlobalVariationSecurityOption2$Outbound;
}

export function deleteGlobalVariationSecurityOption2ToJSON(
  deleteGlobalVariationSecurityOption2: DeleteGlobalVariationSecurityOption2,
): string {
  return JSON.stringify(
    DeleteGlobalVariationSecurityOption2$outboundSchema.parse(
      deleteGlobalVariationSecurityOption2,
    ),
  );
}

export function deleteGlobalVariationSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<DeleteGlobalVariationSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteGlobalVariationSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteGlobalVariationSecurityOption2' from JSON`,
  );
}

/** @internal */
export const DeleteGlobalVariationSecurity$inboundSchema: z.ZodType<
  DeleteGlobalVariationSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => DeleteGlobalVariationSecurityOption1$inboundSchema)
    .optional(),
  Option2: z.lazy(() => DeleteGlobalVariationSecurityOption2$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type DeleteGlobalVariationSecurity$Outbound = {
  Option1?: DeleteGlobalVariationSecurityOption1$Outbound | undefined;
  Option2?: DeleteGlobalVariationSecurityOption2$Outbound | undefined;
};

/** @internal */
export const DeleteGlobalVariationSecurity$outboundSchema: z.ZodType<
  DeleteGlobalVariationSecurity$Outbound,
  z.ZodTypeDef,
  DeleteGlobalVariationSecurity
> = z.object({
  option1: z.lazy(() => DeleteGlobalVariationSecurityOption1$outboundSchema)
    .optional(),
  option2: z.lazy(() => DeleteGlobalVariationSecurityOption2$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteGlobalVariationSecurity$ {
  /** @deprecated use `DeleteGlobalVariationSecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteGlobalVariationSecurity$inboundSchema;
  /** @deprecated use `DeleteGlobalVariationSecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteGlobalVariationSecurity$outboundSchema;
  /** @deprecated use `DeleteGlobalVariationSecurity$Outbound` instead. */
  export type Outbound = DeleteGlobalVariationSecurity$Outbound;
}

export function deleteGlobalVariationSecurityToJSON(
  deleteGlobalVariationSecurity: DeleteGlobalVariationSecurity,
): string {
  return JSON.stringify(
    DeleteGlobalVariationSecurity$outboundSchema.parse(
      deleteGlobalVariationSecurity,
    ),
  );
}

export function deleteGlobalVariationSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteGlobalVariationSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteGlobalVariationSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteGlobalVariationSecurity' from JSON`,
  );
}

/** @internal */
export const DeleteGlobalVariationRequest$inboundSchema: z.ZodType<
  DeleteGlobalVariationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  variation_id: z.string(),
  "Gram-Session": z.string().optional(),
  "Gram-Key": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "variation_id": "variationId",
    "Gram-Session": "gramSession",
    "Gram-Key": "gramKey",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type DeleteGlobalVariationRequest$Outbound = {
  variation_id: string;
  "Gram-Session"?: string | undefined;
  "Gram-Key"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const DeleteGlobalVariationRequest$outboundSchema: z.ZodType<
  DeleteGlobalVariationRequest$Outbound,
  z.ZodTypeDef,
  DeleteGlobalVariationRequest
> = z.object({
  variationId: z.string(),
  gramSession: z.string().optional(),
  gramKey: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    variationId: "variation_id",
    gramSession: "Gram-Session",
    gramKey: "Gram-Key",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteGlobalVariationRequest$ {
  /** @deprecated use `DeleteGlobalVariationRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteGlobalVariationRequest$inboundSchema;
  /** @deprecated use `DeleteGlobalVariationRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteGlobalVariationRequest$outboundSchema;
  /** @deprecated use `DeleteGlobalVariationRequest$Outbound` instead. */
  export type Outbound = DeleteGlobalVariationRequest$Outbound;
}

export function deleteGlobalVariationRequestToJSON(
  deleteGlobalVariationRequest: DeleteGlobalVariationRequest,
): string {
  return JSON.stringify(
    DeleteGlobalVariationRequest$outboundSchema.parse(
      deleteGlobalVariationRequest,
    ),
  );
}

export function deleteGlobalVariationRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteGlobalVariationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteGlobalVariationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteGlobalVariationRequest' from JSON`,
  );
}
