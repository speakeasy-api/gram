/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListIntegrationsSecurity = {
  projectSlugHeaderGramProject?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type ListIntegrationsRequest = {
  /**
   * Keywords to filter integrations by
   */
  keywords?: Array<string> | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const ListIntegrationsSecurity$inboundSchema: z.ZodType<
  ListIntegrationsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type ListIntegrationsSecurity$Outbound = {
  "project_slug_header_Gram-Project"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const ListIntegrationsSecurity$outboundSchema: z.ZodType<
  ListIntegrationsSecurity$Outbound,
  z.ZodTypeDef,
  ListIntegrationsSecurity
> = z.object({
  projectSlugHeaderGramProject: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsSecurity$ {
  /** @deprecated use `ListIntegrationsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsSecurity$inboundSchema;
  /** @deprecated use `ListIntegrationsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsSecurity$outboundSchema;
  /** @deprecated use `ListIntegrationsSecurity$Outbound` instead. */
  export type Outbound = ListIntegrationsSecurity$Outbound;
}

export function listIntegrationsSecurityToJSON(
  listIntegrationsSecurity: ListIntegrationsSecurity,
): string {
  return JSON.stringify(
    ListIntegrationsSecurity$outboundSchema.parse(listIntegrationsSecurity),
  );
}

export function listIntegrationsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsSecurity' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsRequest$inboundSchema: z.ZodType<
  ListIntegrationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  keywords: z.array(z.string()).optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type ListIntegrationsRequest$Outbound = {
  keywords?: Array<string> | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const ListIntegrationsRequest$outboundSchema: z.ZodType<
  ListIntegrationsRequest$Outbound,
  z.ZodTypeDef,
  ListIntegrationsRequest
> = z.object({
  keywords: z.array(z.string()).optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsRequest$ {
  /** @deprecated use `ListIntegrationsRequest$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsRequest$inboundSchema;
  /** @deprecated use `ListIntegrationsRequest$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsRequest$outboundSchema;
  /** @deprecated use `ListIntegrationsRequest$Outbound` instead. */
  export type Outbound = ListIntegrationsRequest$Outbound;
}

export function listIntegrationsRequestToJSON(
  listIntegrationsRequest: ListIntegrationsRequest,
): string {
  return JSON.stringify(
    ListIntegrationsRequest$outboundSchema.parse(listIntegrationsRequest),
  );
}

export function listIntegrationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsRequest' from JSON`,
  );
}
