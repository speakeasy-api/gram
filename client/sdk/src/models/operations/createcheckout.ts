/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateCheckoutSecurity = {
  projectSlugHeaderGramProject?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type CreateCheckoutRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const CreateCheckoutSecurity$inboundSchema: z.ZodType<
  CreateCheckoutSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type CreateCheckoutSecurity$Outbound = {
  "project_slug_header_Gram-Project"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const CreateCheckoutSecurity$outboundSchema: z.ZodType<
  CreateCheckoutSecurity$Outbound,
  z.ZodTypeDef,
  CreateCheckoutSecurity
> = z.object({
  projectSlugHeaderGramProject: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCheckoutSecurity$ {
  /** @deprecated use `CreateCheckoutSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateCheckoutSecurity$inboundSchema;
  /** @deprecated use `CreateCheckoutSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateCheckoutSecurity$outboundSchema;
  /** @deprecated use `CreateCheckoutSecurity$Outbound` instead. */
  export type Outbound = CreateCheckoutSecurity$Outbound;
}

export function createCheckoutSecurityToJSON(
  createCheckoutSecurity: CreateCheckoutSecurity,
): string {
  return JSON.stringify(
    CreateCheckoutSecurity$outboundSchema.parse(createCheckoutSecurity),
  );
}

export function createCheckoutSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateCheckoutSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCheckoutSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCheckoutSecurity' from JSON`,
  );
}

/** @internal */
export const CreateCheckoutRequest$inboundSchema: z.ZodType<
  CreateCheckoutRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type CreateCheckoutRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const CreateCheckoutRequest$outboundSchema: z.ZodType<
  CreateCheckoutRequest$Outbound,
  z.ZodTypeDef,
  CreateCheckoutRequest
> = z.object({
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCheckoutRequest$ {
  /** @deprecated use `CreateCheckoutRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCheckoutRequest$inboundSchema;
  /** @deprecated use `CreateCheckoutRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCheckoutRequest$outboundSchema;
  /** @deprecated use `CreateCheckoutRequest$Outbound` instead. */
  export type Outbound = CreateCheckoutRequest$Outbound;
}

export function createCheckoutRequestToJSON(
  createCheckoutRequest: CreateCheckoutRequest,
): string {
  return JSON.stringify(
    CreateCheckoutRequest$outboundSchema.parse(createCheckoutRequest),
  );
}

export function createCheckoutRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCheckoutRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCheckoutRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCheckoutRequest' from JSON`,
  );
}
