/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadFunctionsSecurityOption1 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type UploadFunctionsSecurityOption2 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type UploadFunctionsSecurity = {
  option1?: UploadFunctionsSecurityOption1 | undefined;
  option2?: UploadFunctionsSecurityOption2 | undefined;
};

export type UploadFunctionsRequest = {
  contentLength: number;
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
};

/** @internal */
export const UploadFunctionsSecurityOption1$inboundSchema: z.ZodType<
  UploadFunctionsSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type UploadFunctionsSecurityOption1$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const UploadFunctionsSecurityOption1$outboundSchema: z.ZodType<
  UploadFunctionsSecurityOption1$Outbound,
  z.ZodTypeDef,
  UploadFunctionsSecurityOption1
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadFunctionsSecurityOption1$ {
  /** @deprecated use `UploadFunctionsSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = UploadFunctionsSecurityOption1$inboundSchema;
  /** @deprecated use `UploadFunctionsSecurityOption1$outboundSchema` instead. */
  export const outboundSchema = UploadFunctionsSecurityOption1$outboundSchema;
  /** @deprecated use `UploadFunctionsSecurityOption1$Outbound` instead. */
  export type Outbound = UploadFunctionsSecurityOption1$Outbound;
}

export function uploadFunctionsSecurityOption1ToJSON(
  uploadFunctionsSecurityOption1: UploadFunctionsSecurityOption1,
): string {
  return JSON.stringify(
    UploadFunctionsSecurityOption1$outboundSchema.parse(
      uploadFunctionsSecurityOption1,
    ),
  );
}

export function uploadFunctionsSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<UploadFunctionsSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadFunctionsSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadFunctionsSecurityOption1' from JSON`,
  );
}

/** @internal */
export const UploadFunctionsSecurityOption2$inboundSchema: z.ZodType<
  UploadFunctionsSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type UploadFunctionsSecurityOption2$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const UploadFunctionsSecurityOption2$outboundSchema: z.ZodType<
  UploadFunctionsSecurityOption2$Outbound,
  z.ZodTypeDef,
  UploadFunctionsSecurityOption2
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadFunctionsSecurityOption2$ {
  /** @deprecated use `UploadFunctionsSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = UploadFunctionsSecurityOption2$inboundSchema;
  /** @deprecated use `UploadFunctionsSecurityOption2$outboundSchema` instead. */
  export const outboundSchema = UploadFunctionsSecurityOption2$outboundSchema;
  /** @deprecated use `UploadFunctionsSecurityOption2$Outbound` instead. */
  export type Outbound = UploadFunctionsSecurityOption2$Outbound;
}

export function uploadFunctionsSecurityOption2ToJSON(
  uploadFunctionsSecurityOption2: UploadFunctionsSecurityOption2,
): string {
  return JSON.stringify(
    UploadFunctionsSecurityOption2$outboundSchema.parse(
      uploadFunctionsSecurityOption2,
    ),
  );
}

export function uploadFunctionsSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<UploadFunctionsSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadFunctionsSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadFunctionsSecurityOption2' from JSON`,
  );
}

/** @internal */
export const UploadFunctionsSecurity$inboundSchema: z.ZodType<
  UploadFunctionsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => UploadFunctionsSecurityOption1$inboundSchema)
    .optional(),
  Option2: z.lazy(() => UploadFunctionsSecurityOption2$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type UploadFunctionsSecurity$Outbound = {
  Option1?: UploadFunctionsSecurityOption1$Outbound | undefined;
  Option2?: UploadFunctionsSecurityOption2$Outbound | undefined;
};

/** @internal */
export const UploadFunctionsSecurity$outboundSchema: z.ZodType<
  UploadFunctionsSecurity$Outbound,
  z.ZodTypeDef,
  UploadFunctionsSecurity
> = z.object({
  option1: z.lazy(() => UploadFunctionsSecurityOption1$outboundSchema)
    .optional(),
  option2: z.lazy(() => UploadFunctionsSecurityOption2$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadFunctionsSecurity$ {
  /** @deprecated use `UploadFunctionsSecurity$inboundSchema` instead. */
  export const inboundSchema = UploadFunctionsSecurity$inboundSchema;
  /** @deprecated use `UploadFunctionsSecurity$outboundSchema` instead. */
  export const outboundSchema = UploadFunctionsSecurity$outboundSchema;
  /** @deprecated use `UploadFunctionsSecurity$Outbound` instead. */
  export type Outbound = UploadFunctionsSecurity$Outbound;
}

export function uploadFunctionsSecurityToJSON(
  uploadFunctionsSecurity: UploadFunctionsSecurity,
): string {
  return JSON.stringify(
    UploadFunctionsSecurity$outboundSchema.parse(uploadFunctionsSecurity),
  );
}

export function uploadFunctionsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UploadFunctionsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadFunctionsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadFunctionsSecurity' from JSON`,
  );
}

/** @internal */
export const UploadFunctionsRequest$inboundSchema: z.ZodType<
  UploadFunctionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Content-Length": z.number().int(),
  "Gram-Key": z.string().optional(),
  "Gram-Project": z.string().optional(),
  "Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Content-Length": "contentLength",
    "Gram-Key": "gramKey",
    "Gram-Project": "gramProject",
    "Gram-Session": "gramSession",
  });
});

/** @internal */
export type UploadFunctionsRequest$Outbound = {
  "Content-Length": number;
  "Gram-Key"?: string | undefined;
  "Gram-Project"?: string | undefined;
  "Gram-Session"?: string | undefined;
};

/** @internal */
export const UploadFunctionsRequest$outboundSchema: z.ZodType<
  UploadFunctionsRequest$Outbound,
  z.ZodTypeDef,
  UploadFunctionsRequest
> = z.object({
  contentLength: z.number().int(),
  gramKey: z.string().optional(),
  gramProject: z.string().optional(),
  gramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    contentLength: "Content-Length",
    gramKey: "Gram-Key",
    gramProject: "Gram-Project",
    gramSession: "Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadFunctionsRequest$ {
  /** @deprecated use `UploadFunctionsRequest$inboundSchema` instead. */
  export const inboundSchema = UploadFunctionsRequest$inboundSchema;
  /** @deprecated use `UploadFunctionsRequest$outboundSchema` instead. */
  export const outboundSchema = UploadFunctionsRequest$outboundSchema;
  /** @deprecated use `UploadFunctionsRequest$Outbound` instead. */
  export type Outbound = UploadFunctionsRequest$Outbound;
}

export function uploadFunctionsRequestToJSON(
  uploadFunctionsRequest: UploadFunctionsRequest,
): string {
  return JSON.stringify(
    UploadFunctionsRequest$outboundSchema.parse(uploadFunctionsRequest),
  );
}

export function uploadFunctionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadFunctionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadFunctionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadFunctionsRequest' from JSON`,
  );
}
