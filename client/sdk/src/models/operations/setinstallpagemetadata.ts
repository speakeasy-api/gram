/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SetInstallPageMetadataSecurity = {
  projectSlugHeaderGramProject?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type SetInstallPageMetadataRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  setInstallPageMetadataRequestBody:
    components.SetInstallPageMetadataRequestBody;
};

/** @internal */
export const SetInstallPageMetadataSecurity$inboundSchema: z.ZodType<
  SetInstallPageMetadataSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type SetInstallPageMetadataSecurity$Outbound = {
  "project_slug_header_Gram-Project"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const SetInstallPageMetadataSecurity$outboundSchema: z.ZodType<
  SetInstallPageMetadataSecurity$Outbound,
  z.ZodTypeDef,
  SetInstallPageMetadataSecurity
> = z.object({
  projectSlugHeaderGramProject: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetInstallPageMetadataSecurity$ {
  /** @deprecated use `SetInstallPageMetadataSecurity$inboundSchema` instead. */
  export const inboundSchema = SetInstallPageMetadataSecurity$inboundSchema;
  /** @deprecated use `SetInstallPageMetadataSecurity$outboundSchema` instead. */
  export const outboundSchema = SetInstallPageMetadataSecurity$outboundSchema;
  /** @deprecated use `SetInstallPageMetadataSecurity$Outbound` instead. */
  export type Outbound = SetInstallPageMetadataSecurity$Outbound;
}

export function setInstallPageMetadataSecurityToJSON(
  setInstallPageMetadataSecurity: SetInstallPageMetadataSecurity,
): string {
  return JSON.stringify(
    SetInstallPageMetadataSecurity$outboundSchema.parse(
      setInstallPageMetadataSecurity,
    ),
  );
}

export function setInstallPageMetadataSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SetInstallPageMetadataSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetInstallPageMetadataSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetInstallPageMetadataSecurity' from JSON`,
  );
}

/** @internal */
export const SetInstallPageMetadataRequest$inboundSchema: z.ZodType<
  SetInstallPageMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  SetInstallPageMetadataRequestBody:
    components.SetInstallPageMetadataRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "SetInstallPageMetadataRequestBody": "setInstallPageMetadataRequestBody",
  });
});

/** @internal */
export type SetInstallPageMetadataRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  SetInstallPageMetadataRequestBody:
    components.SetInstallPageMetadataRequestBody$Outbound;
};

/** @internal */
export const SetInstallPageMetadataRequest$outboundSchema: z.ZodType<
  SetInstallPageMetadataRequest$Outbound,
  z.ZodTypeDef,
  SetInstallPageMetadataRequest
> = z.object({
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  setInstallPageMetadataRequestBody:
    components.SetInstallPageMetadataRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    setInstallPageMetadataRequestBody: "SetInstallPageMetadataRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetInstallPageMetadataRequest$ {
  /** @deprecated use `SetInstallPageMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = SetInstallPageMetadataRequest$inboundSchema;
  /** @deprecated use `SetInstallPageMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = SetInstallPageMetadataRequest$outboundSchema;
  /** @deprecated use `SetInstallPageMetadataRequest$Outbound` instead. */
  export type Outbound = SetInstallPageMetadataRequest$Outbound;
}

export function setInstallPageMetadataRequestToJSON(
  setInstallPageMetadataRequest: SetInstallPageMetadataRequest,
): string {
  return JSON.stringify(
    SetInstallPageMetadataRequest$outboundSchema.parse(
      setInstallPageMetadataRequest,
    ),
  );
}

export function setInstallPageMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<SetInstallPageMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetInstallPageMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetInstallPageMetadataRequest' from JSON`,
  );
}
