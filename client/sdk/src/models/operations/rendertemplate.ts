/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RenderTemplateSecurityOption1 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type RenderTemplateSecurityOption2 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type RenderTemplateSecurityOption3 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type RenderTemplateSecurity = {
  option1?: RenderTemplateSecurityOption1 | undefined;
  option2?: RenderTemplateSecurityOption2 | undefined;
  option3?: RenderTemplateSecurityOption3 | undefined;
};

export type RenderTemplateRequest = {
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  renderTemplateRequestBody: components.RenderTemplateRequestBody;
};

/** @internal */
export const RenderTemplateSecurityOption1$inboundSchema: z.ZodType<
  RenderTemplateSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type RenderTemplateSecurityOption1$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const RenderTemplateSecurityOption1$outboundSchema: z.ZodType<
  RenderTemplateSecurityOption1$Outbound,
  z.ZodTypeDef,
  RenderTemplateSecurityOption1
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenderTemplateSecurityOption1$ {
  /** @deprecated use `RenderTemplateSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = RenderTemplateSecurityOption1$inboundSchema;
  /** @deprecated use `RenderTemplateSecurityOption1$outboundSchema` instead. */
  export const outboundSchema = RenderTemplateSecurityOption1$outboundSchema;
  /** @deprecated use `RenderTemplateSecurityOption1$Outbound` instead. */
  export type Outbound = RenderTemplateSecurityOption1$Outbound;
}

export function renderTemplateSecurityOption1ToJSON(
  renderTemplateSecurityOption1: RenderTemplateSecurityOption1,
): string {
  return JSON.stringify(
    RenderTemplateSecurityOption1$outboundSchema.parse(
      renderTemplateSecurityOption1,
    ),
  );
}

export function renderTemplateSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<RenderTemplateSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenderTemplateSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenderTemplateSecurityOption1' from JSON`,
  );
}

/** @internal */
export const RenderTemplateSecurityOption2$inboundSchema: z.ZodType<
  RenderTemplateSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type RenderTemplateSecurityOption2$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const RenderTemplateSecurityOption2$outboundSchema: z.ZodType<
  RenderTemplateSecurityOption2$Outbound,
  z.ZodTypeDef,
  RenderTemplateSecurityOption2
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenderTemplateSecurityOption2$ {
  /** @deprecated use `RenderTemplateSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = RenderTemplateSecurityOption2$inboundSchema;
  /** @deprecated use `RenderTemplateSecurityOption2$outboundSchema` instead. */
  export const outboundSchema = RenderTemplateSecurityOption2$outboundSchema;
  /** @deprecated use `RenderTemplateSecurityOption2$Outbound` instead. */
  export type Outbound = RenderTemplateSecurityOption2$Outbound;
}

export function renderTemplateSecurityOption2ToJSON(
  renderTemplateSecurityOption2: RenderTemplateSecurityOption2,
): string {
  return JSON.stringify(
    RenderTemplateSecurityOption2$outboundSchema.parse(
      renderTemplateSecurityOption2,
    ),
  );
}

export function renderTemplateSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<RenderTemplateSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenderTemplateSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenderTemplateSecurityOption2' from JSON`,
  );
}

/** @internal */
export const RenderTemplateSecurityOption3$inboundSchema: z.ZodType<
  RenderTemplateSecurityOption3,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type RenderTemplateSecurityOption3$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const RenderTemplateSecurityOption3$outboundSchema: z.ZodType<
  RenderTemplateSecurityOption3$Outbound,
  z.ZodTypeDef,
  RenderTemplateSecurityOption3
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenderTemplateSecurityOption3$ {
  /** @deprecated use `RenderTemplateSecurityOption3$inboundSchema` instead. */
  export const inboundSchema = RenderTemplateSecurityOption3$inboundSchema;
  /** @deprecated use `RenderTemplateSecurityOption3$outboundSchema` instead. */
  export const outboundSchema = RenderTemplateSecurityOption3$outboundSchema;
  /** @deprecated use `RenderTemplateSecurityOption3$Outbound` instead. */
  export type Outbound = RenderTemplateSecurityOption3$Outbound;
}

export function renderTemplateSecurityOption3ToJSON(
  renderTemplateSecurityOption3: RenderTemplateSecurityOption3,
): string {
  return JSON.stringify(
    RenderTemplateSecurityOption3$outboundSchema.parse(
      renderTemplateSecurityOption3,
    ),
  );
}

export function renderTemplateSecurityOption3FromJSON(
  jsonString: string,
): SafeParseResult<RenderTemplateSecurityOption3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenderTemplateSecurityOption3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenderTemplateSecurityOption3' from JSON`,
  );
}

/** @internal */
export const RenderTemplateSecurity$inboundSchema: z.ZodType<
  RenderTemplateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => RenderTemplateSecurityOption1$inboundSchema).optional(),
  Option2: z.lazy(() => RenderTemplateSecurityOption2$inboundSchema).optional(),
  Option3: z.lazy(() => RenderTemplateSecurityOption3$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
    "Option3": "option3",
  });
});

/** @internal */
export type RenderTemplateSecurity$Outbound = {
  Option1?: RenderTemplateSecurityOption1$Outbound | undefined;
  Option2?: RenderTemplateSecurityOption2$Outbound | undefined;
  Option3?: RenderTemplateSecurityOption3$Outbound | undefined;
};

/** @internal */
export const RenderTemplateSecurity$outboundSchema: z.ZodType<
  RenderTemplateSecurity$Outbound,
  z.ZodTypeDef,
  RenderTemplateSecurity
> = z.object({
  option1: z.lazy(() => RenderTemplateSecurityOption1$outboundSchema)
    .optional(),
  option2: z.lazy(() => RenderTemplateSecurityOption2$outboundSchema)
    .optional(),
  option3: z.lazy(() => RenderTemplateSecurityOption3$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
    option3: "Option3",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenderTemplateSecurity$ {
  /** @deprecated use `RenderTemplateSecurity$inboundSchema` instead. */
  export const inboundSchema = RenderTemplateSecurity$inboundSchema;
  /** @deprecated use `RenderTemplateSecurity$outboundSchema` instead. */
  export const outboundSchema = RenderTemplateSecurity$outboundSchema;
  /** @deprecated use `RenderTemplateSecurity$Outbound` instead. */
  export type Outbound = RenderTemplateSecurity$Outbound;
}

export function renderTemplateSecurityToJSON(
  renderTemplateSecurity: RenderTemplateSecurity,
): string {
  return JSON.stringify(
    RenderTemplateSecurity$outboundSchema.parse(renderTemplateSecurity),
  );
}

export function renderTemplateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RenderTemplateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenderTemplateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenderTemplateSecurity' from JSON`,
  );
}

/** @internal */
export const RenderTemplateRequest$inboundSchema: z.ZodType<
  RenderTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Key": z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  RenderTemplateRequestBody: components.RenderTemplateRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Key": "gramKey",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "RenderTemplateRequestBody": "renderTemplateRequestBody",
  });
});

/** @internal */
export type RenderTemplateRequest$Outbound = {
  "Gram-Key"?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  RenderTemplateRequestBody: components.RenderTemplateRequestBody$Outbound;
};

/** @internal */
export const RenderTemplateRequest$outboundSchema: z.ZodType<
  RenderTemplateRequest$Outbound,
  z.ZodTypeDef,
  RenderTemplateRequest
> = z.object({
  gramKey: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  renderTemplateRequestBody:
    components.RenderTemplateRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramKey: "Gram-Key",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    renderTemplateRequestBody: "RenderTemplateRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenderTemplateRequest$ {
  /** @deprecated use `RenderTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = RenderTemplateRequest$inboundSchema;
  /** @deprecated use `RenderTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = RenderTemplateRequest$outboundSchema;
  /** @deprecated use `RenderTemplateRequest$Outbound` instead. */
  export type Outbound = RenderTemplateRequest$Outbound;
}

export function renderTemplateRequestToJSON(
  renderTemplateRequest: RenderTemplateRequest,
): string {
  return JSON.stringify(
    RenderTemplateRequest$outboundSchema.parse(renderTemplateRequest),
  );
}

export function renderTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<RenderTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenderTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenderTemplateRequest' from JSON`,
  );
}
