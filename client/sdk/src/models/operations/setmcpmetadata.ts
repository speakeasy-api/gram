/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SetMcpMetadataSecurity = {
  projectSlugHeaderGramProject?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type SetMcpMetadataRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  setMcpMetadataRequestBody: components.SetMcpMetadataRequestBody;
};

/** @internal */
export const SetMcpMetadataSecurity$inboundSchema: z.ZodType<
  SetMcpMetadataSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type SetMcpMetadataSecurity$Outbound = {
  "project_slug_header_Gram-Project"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const SetMcpMetadataSecurity$outboundSchema: z.ZodType<
  SetMcpMetadataSecurity$Outbound,
  z.ZodTypeDef,
  SetMcpMetadataSecurity
> = z.object({
  projectSlugHeaderGramProject: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetMcpMetadataSecurity$ {
  /** @deprecated use `SetMcpMetadataSecurity$inboundSchema` instead. */
  export const inboundSchema = SetMcpMetadataSecurity$inboundSchema;
  /** @deprecated use `SetMcpMetadataSecurity$outboundSchema` instead. */
  export const outboundSchema = SetMcpMetadataSecurity$outboundSchema;
  /** @deprecated use `SetMcpMetadataSecurity$Outbound` instead. */
  export type Outbound = SetMcpMetadataSecurity$Outbound;
}

export function setMcpMetadataSecurityToJSON(
  setMcpMetadataSecurity: SetMcpMetadataSecurity,
): string {
  return JSON.stringify(
    SetMcpMetadataSecurity$outboundSchema.parse(setMcpMetadataSecurity),
  );
}

export function setMcpMetadataSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SetMcpMetadataSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetMcpMetadataSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetMcpMetadataSecurity' from JSON`,
  );
}

/** @internal */
export const SetMcpMetadataRequest$inboundSchema: z.ZodType<
  SetMcpMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  SetMcpMetadataRequestBody: components.SetMcpMetadataRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "SetMcpMetadataRequestBody": "setMcpMetadataRequestBody",
  });
});

/** @internal */
export type SetMcpMetadataRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  SetMcpMetadataRequestBody: components.SetMcpMetadataRequestBody$Outbound;
};

/** @internal */
export const SetMcpMetadataRequest$outboundSchema: z.ZodType<
  SetMcpMetadataRequest$Outbound,
  z.ZodTypeDef,
  SetMcpMetadataRequest
> = z.object({
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  setMcpMetadataRequestBody:
    components.SetMcpMetadataRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    setMcpMetadataRequestBody: "SetMcpMetadataRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetMcpMetadataRequest$ {
  /** @deprecated use `SetMcpMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = SetMcpMetadataRequest$inboundSchema;
  /** @deprecated use `SetMcpMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = SetMcpMetadataRequest$outboundSchema;
  /** @deprecated use `SetMcpMetadataRequest$Outbound` instead. */
  export type Outbound = SetMcpMetadataRequest$Outbound;
}

export function setMcpMetadataRequestToJSON(
  setMcpMetadataRequest: SetMcpMetadataRequest,
): string {
  return JSON.stringify(
    SetMcpMetadataRequest$outboundSchema.parse(setMcpMetadataRequest),
  );
}

export function setMcpMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<SetMcpMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetMcpMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetMcpMetadataRequest' from JSON`,
  );
}
