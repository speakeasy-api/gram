/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RegisterSecurity = {
  sessionHeaderGramSession?: string | undefined;
};

export type RegisterRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  registerRequestBody: components.RegisterRequestBody;
};

/** @internal */
export const RegisterSecurity$inboundSchema: z.ZodType<
  RegisterSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type RegisterSecurity$Outbound = {
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const RegisterSecurity$outboundSchema: z.ZodType<
  RegisterSecurity$Outbound,
  z.ZodTypeDef,
  RegisterSecurity
> = z.object({
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterSecurity$ {
  /** @deprecated use `RegisterSecurity$inboundSchema` instead. */
  export const inboundSchema = RegisterSecurity$inboundSchema;
  /** @deprecated use `RegisterSecurity$outboundSchema` instead. */
  export const outboundSchema = RegisterSecurity$outboundSchema;
  /** @deprecated use `RegisterSecurity$Outbound` instead. */
  export type Outbound = RegisterSecurity$Outbound;
}

export function registerSecurityToJSON(
  registerSecurity: RegisterSecurity,
): string {
  return JSON.stringify(
    RegisterSecurity$outboundSchema.parse(registerSecurity),
  );
}

export function registerSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RegisterSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegisterSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegisterSecurity' from JSON`,
  );
}

/** @internal */
export const RegisterRequest$inboundSchema: z.ZodType<
  RegisterRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  RegisterRequestBody: components.RegisterRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "RegisterRequestBody": "registerRequestBody",
  });
});

/** @internal */
export type RegisterRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  RegisterRequestBody: components.RegisterRequestBody$Outbound;
};

/** @internal */
export const RegisterRequest$outboundSchema: z.ZodType<
  RegisterRequest$Outbound,
  z.ZodTypeDef,
  RegisterRequest
> = z.object({
  gramSession: z.string().optional(),
  registerRequestBody: components.RegisterRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    registerRequestBody: "RegisterRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterRequest$ {
  /** @deprecated use `RegisterRequest$inboundSchema` instead. */
  export const inboundSchema = RegisterRequest$inboundSchema;
  /** @deprecated use `RegisterRequest$outboundSchema` instead. */
  export const outboundSchema = RegisterRequest$outboundSchema;
  /** @deprecated use `RegisterRequest$Outbound` instead. */
  export type Outbound = RegisterRequest$Outbound;
}

export function registerRequestToJSON(
  registerRequest: RegisterRequest,
): string {
  return JSON.stringify(RegisterRequest$outboundSchema.parse(registerRequest));
}

export function registerRequestFromJSON(
  jsonString: string,
): SafeParseResult<RegisterRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegisterRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegisterRequest' from JSON`,
  );
}
