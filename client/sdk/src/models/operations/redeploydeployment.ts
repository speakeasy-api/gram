/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RedeployDeploymentSecurityOption1 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type RedeployDeploymentSecurityOption2 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type RedeployDeploymentSecurity = {
  option1?: RedeployDeploymentSecurityOption1 | undefined;
  option2?: RedeployDeploymentSecurityOption2 | undefined;
};

export type RedeployDeploymentRequest = {
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  redeployRequestBody: components.RedeployRequestBody;
};

/** @internal */
export const RedeployDeploymentSecurityOption1$inboundSchema: z.ZodType<
  RedeployDeploymentSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type RedeployDeploymentSecurityOption1$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const RedeployDeploymentSecurityOption1$outboundSchema: z.ZodType<
  RedeployDeploymentSecurityOption1$Outbound,
  z.ZodTypeDef,
  RedeployDeploymentSecurityOption1
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedeployDeploymentSecurityOption1$ {
  /** @deprecated use `RedeployDeploymentSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = RedeployDeploymentSecurityOption1$inboundSchema;
  /** @deprecated use `RedeployDeploymentSecurityOption1$outboundSchema` instead. */
  export const outboundSchema =
    RedeployDeploymentSecurityOption1$outboundSchema;
  /** @deprecated use `RedeployDeploymentSecurityOption1$Outbound` instead. */
  export type Outbound = RedeployDeploymentSecurityOption1$Outbound;
}

export function redeployDeploymentSecurityOption1ToJSON(
  redeployDeploymentSecurityOption1: RedeployDeploymentSecurityOption1,
): string {
  return JSON.stringify(
    RedeployDeploymentSecurityOption1$outboundSchema.parse(
      redeployDeploymentSecurityOption1,
    ),
  );
}

export function redeployDeploymentSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<RedeployDeploymentSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedeployDeploymentSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedeployDeploymentSecurityOption1' from JSON`,
  );
}

/** @internal */
export const RedeployDeploymentSecurityOption2$inboundSchema: z.ZodType<
  RedeployDeploymentSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type RedeployDeploymentSecurityOption2$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const RedeployDeploymentSecurityOption2$outboundSchema: z.ZodType<
  RedeployDeploymentSecurityOption2$Outbound,
  z.ZodTypeDef,
  RedeployDeploymentSecurityOption2
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedeployDeploymentSecurityOption2$ {
  /** @deprecated use `RedeployDeploymentSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = RedeployDeploymentSecurityOption2$inboundSchema;
  /** @deprecated use `RedeployDeploymentSecurityOption2$outboundSchema` instead. */
  export const outboundSchema =
    RedeployDeploymentSecurityOption2$outboundSchema;
  /** @deprecated use `RedeployDeploymentSecurityOption2$Outbound` instead. */
  export type Outbound = RedeployDeploymentSecurityOption2$Outbound;
}

export function redeployDeploymentSecurityOption2ToJSON(
  redeployDeploymentSecurityOption2: RedeployDeploymentSecurityOption2,
): string {
  return JSON.stringify(
    RedeployDeploymentSecurityOption2$outboundSchema.parse(
      redeployDeploymentSecurityOption2,
    ),
  );
}

export function redeployDeploymentSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<RedeployDeploymentSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedeployDeploymentSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedeployDeploymentSecurityOption2' from JSON`,
  );
}

/** @internal */
export const RedeployDeploymentSecurity$inboundSchema: z.ZodType<
  RedeployDeploymentSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => RedeployDeploymentSecurityOption1$inboundSchema)
    .optional(),
  Option2: z.lazy(() => RedeployDeploymentSecurityOption2$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type RedeployDeploymentSecurity$Outbound = {
  Option1?: RedeployDeploymentSecurityOption1$Outbound | undefined;
  Option2?: RedeployDeploymentSecurityOption2$Outbound | undefined;
};

/** @internal */
export const RedeployDeploymentSecurity$outboundSchema: z.ZodType<
  RedeployDeploymentSecurity$Outbound,
  z.ZodTypeDef,
  RedeployDeploymentSecurity
> = z.object({
  option1: z.lazy(() => RedeployDeploymentSecurityOption1$outboundSchema)
    .optional(),
  option2: z.lazy(() => RedeployDeploymentSecurityOption2$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedeployDeploymentSecurity$ {
  /** @deprecated use `RedeployDeploymentSecurity$inboundSchema` instead. */
  export const inboundSchema = RedeployDeploymentSecurity$inboundSchema;
  /** @deprecated use `RedeployDeploymentSecurity$outboundSchema` instead. */
  export const outboundSchema = RedeployDeploymentSecurity$outboundSchema;
  /** @deprecated use `RedeployDeploymentSecurity$Outbound` instead. */
  export type Outbound = RedeployDeploymentSecurity$Outbound;
}

export function redeployDeploymentSecurityToJSON(
  redeployDeploymentSecurity: RedeployDeploymentSecurity,
): string {
  return JSON.stringify(
    RedeployDeploymentSecurity$outboundSchema.parse(redeployDeploymentSecurity),
  );
}

export function redeployDeploymentSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RedeployDeploymentSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedeployDeploymentSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedeployDeploymentSecurity' from JSON`,
  );
}

/** @internal */
export const RedeployDeploymentRequest$inboundSchema: z.ZodType<
  RedeployDeploymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Key": z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  RedeployRequestBody: components.RedeployRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Key": "gramKey",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "RedeployRequestBody": "redeployRequestBody",
  });
});

/** @internal */
export type RedeployDeploymentRequest$Outbound = {
  "Gram-Key"?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  RedeployRequestBody: components.RedeployRequestBody$Outbound;
};

/** @internal */
export const RedeployDeploymentRequest$outboundSchema: z.ZodType<
  RedeployDeploymentRequest$Outbound,
  z.ZodTypeDef,
  RedeployDeploymentRequest
> = z.object({
  gramKey: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  redeployRequestBody: components.RedeployRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramKey: "Gram-Key",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    redeployRequestBody: "RedeployRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedeployDeploymentRequest$ {
  /** @deprecated use `RedeployDeploymentRequest$inboundSchema` instead. */
  export const inboundSchema = RedeployDeploymentRequest$inboundSchema;
  /** @deprecated use `RedeployDeploymentRequest$outboundSchema` instead. */
  export const outboundSchema = RedeployDeploymentRequest$outboundSchema;
  /** @deprecated use `RedeployDeploymentRequest$Outbound` instead. */
  export type Outbound = RedeployDeploymentRequest$Outbound;
}

export function redeployDeploymentRequestToJSON(
  redeployDeploymentRequest: RedeployDeploymentRequest,
): string {
  return JSON.stringify(
    RedeployDeploymentRequest$outboundSchema.parse(redeployDeploymentRequest),
  );
}

export function redeployDeploymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedeployDeploymentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedeployDeploymentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedeployDeploymentRequest' from JSON`,
  );
}
