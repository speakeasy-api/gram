/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpsertGlobalVariationSecurityOption1 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type UpsertGlobalVariationSecurityOption2 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type UpsertGlobalVariationSecurity = {
  option1?: UpsertGlobalVariationSecurityOption1 | undefined;
  option2?: UpsertGlobalVariationSecurityOption2 | undefined;
};

export type UpsertGlobalVariationRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  upsertGlobalToolVariationForm: components.UpsertGlobalToolVariationForm;
};

/** @internal */
export const UpsertGlobalVariationSecurityOption1$inboundSchema: z.ZodType<
  UpsertGlobalVariationSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type UpsertGlobalVariationSecurityOption1$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const UpsertGlobalVariationSecurityOption1$outboundSchema: z.ZodType<
  UpsertGlobalVariationSecurityOption1$Outbound,
  z.ZodTypeDef,
  UpsertGlobalVariationSecurityOption1
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertGlobalVariationSecurityOption1$ {
  /** @deprecated use `UpsertGlobalVariationSecurityOption1$inboundSchema` instead. */
  export const inboundSchema =
    UpsertGlobalVariationSecurityOption1$inboundSchema;
  /** @deprecated use `UpsertGlobalVariationSecurityOption1$outboundSchema` instead. */
  export const outboundSchema =
    UpsertGlobalVariationSecurityOption1$outboundSchema;
  /** @deprecated use `UpsertGlobalVariationSecurityOption1$Outbound` instead. */
  export type Outbound = UpsertGlobalVariationSecurityOption1$Outbound;
}

export function upsertGlobalVariationSecurityOption1ToJSON(
  upsertGlobalVariationSecurityOption1: UpsertGlobalVariationSecurityOption1,
): string {
  return JSON.stringify(
    UpsertGlobalVariationSecurityOption1$outboundSchema.parse(
      upsertGlobalVariationSecurityOption1,
    ),
  );
}

export function upsertGlobalVariationSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<UpsertGlobalVariationSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpsertGlobalVariationSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertGlobalVariationSecurityOption1' from JSON`,
  );
}

/** @internal */
export const UpsertGlobalVariationSecurityOption2$inboundSchema: z.ZodType<
  UpsertGlobalVariationSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type UpsertGlobalVariationSecurityOption2$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const UpsertGlobalVariationSecurityOption2$outboundSchema: z.ZodType<
  UpsertGlobalVariationSecurityOption2$Outbound,
  z.ZodTypeDef,
  UpsertGlobalVariationSecurityOption2
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertGlobalVariationSecurityOption2$ {
  /** @deprecated use `UpsertGlobalVariationSecurityOption2$inboundSchema` instead. */
  export const inboundSchema =
    UpsertGlobalVariationSecurityOption2$inboundSchema;
  /** @deprecated use `UpsertGlobalVariationSecurityOption2$outboundSchema` instead. */
  export const outboundSchema =
    UpsertGlobalVariationSecurityOption2$outboundSchema;
  /** @deprecated use `UpsertGlobalVariationSecurityOption2$Outbound` instead. */
  export type Outbound = UpsertGlobalVariationSecurityOption2$Outbound;
}

export function upsertGlobalVariationSecurityOption2ToJSON(
  upsertGlobalVariationSecurityOption2: UpsertGlobalVariationSecurityOption2,
): string {
  return JSON.stringify(
    UpsertGlobalVariationSecurityOption2$outboundSchema.parse(
      upsertGlobalVariationSecurityOption2,
    ),
  );
}

export function upsertGlobalVariationSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<UpsertGlobalVariationSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpsertGlobalVariationSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertGlobalVariationSecurityOption2' from JSON`,
  );
}

/** @internal */
export const UpsertGlobalVariationSecurity$inboundSchema: z.ZodType<
  UpsertGlobalVariationSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => UpsertGlobalVariationSecurityOption1$inboundSchema)
    .optional(),
  Option2: z.lazy(() => UpsertGlobalVariationSecurityOption2$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type UpsertGlobalVariationSecurity$Outbound = {
  Option1?: UpsertGlobalVariationSecurityOption1$Outbound | undefined;
  Option2?: UpsertGlobalVariationSecurityOption2$Outbound | undefined;
};

/** @internal */
export const UpsertGlobalVariationSecurity$outboundSchema: z.ZodType<
  UpsertGlobalVariationSecurity$Outbound,
  z.ZodTypeDef,
  UpsertGlobalVariationSecurity
> = z.object({
  option1: z.lazy(() => UpsertGlobalVariationSecurityOption1$outboundSchema)
    .optional(),
  option2: z.lazy(() => UpsertGlobalVariationSecurityOption2$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertGlobalVariationSecurity$ {
  /** @deprecated use `UpsertGlobalVariationSecurity$inboundSchema` instead. */
  export const inboundSchema = UpsertGlobalVariationSecurity$inboundSchema;
  /** @deprecated use `UpsertGlobalVariationSecurity$outboundSchema` instead. */
  export const outboundSchema = UpsertGlobalVariationSecurity$outboundSchema;
  /** @deprecated use `UpsertGlobalVariationSecurity$Outbound` instead. */
  export type Outbound = UpsertGlobalVariationSecurity$Outbound;
}

export function upsertGlobalVariationSecurityToJSON(
  upsertGlobalVariationSecurity: UpsertGlobalVariationSecurity,
): string {
  return JSON.stringify(
    UpsertGlobalVariationSecurity$outboundSchema.parse(
      upsertGlobalVariationSecurity,
    ),
  );
}

export function upsertGlobalVariationSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpsertGlobalVariationSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertGlobalVariationSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertGlobalVariationSecurity' from JSON`,
  );
}

/** @internal */
export const UpsertGlobalVariationRequest$inboundSchema: z.ZodType<
  UpsertGlobalVariationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  "Gram-Key": z.string().optional(),
  "Gram-Project": z.string().optional(),
  UpsertGlobalToolVariationForm:
    components.UpsertGlobalToolVariationForm$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Key": "gramKey",
    "Gram-Project": "gramProject",
    "UpsertGlobalToolVariationForm": "upsertGlobalToolVariationForm",
  });
});

/** @internal */
export type UpsertGlobalVariationRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  "Gram-Key"?: string | undefined;
  "Gram-Project"?: string | undefined;
  UpsertGlobalToolVariationForm:
    components.UpsertGlobalToolVariationForm$Outbound;
};

/** @internal */
export const UpsertGlobalVariationRequest$outboundSchema: z.ZodType<
  UpsertGlobalVariationRequest$Outbound,
  z.ZodTypeDef,
  UpsertGlobalVariationRequest
> = z.object({
  gramSession: z.string().optional(),
  gramKey: z.string().optional(),
  gramProject: z.string().optional(),
  upsertGlobalToolVariationForm:
    components.UpsertGlobalToolVariationForm$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramKey: "Gram-Key",
    gramProject: "Gram-Project",
    upsertGlobalToolVariationForm: "UpsertGlobalToolVariationForm",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertGlobalVariationRequest$ {
  /** @deprecated use `UpsertGlobalVariationRequest$inboundSchema` instead. */
  export const inboundSchema = UpsertGlobalVariationRequest$inboundSchema;
  /** @deprecated use `UpsertGlobalVariationRequest$outboundSchema` instead. */
  export const outboundSchema = UpsertGlobalVariationRequest$outboundSchema;
  /** @deprecated use `UpsertGlobalVariationRequest$Outbound` instead. */
  export type Outbound = UpsertGlobalVariationRequest$Outbound;
}

export function upsertGlobalVariationRequestToJSON(
  upsertGlobalVariationRequest: UpsertGlobalVariationRequest,
): string {
  return JSON.stringify(
    UpsertGlobalVariationRequest$outboundSchema.parse(
      upsertGlobalVariationRequest,
    ),
  );
}

export function upsertGlobalVariationRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpsertGlobalVariationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertGlobalVariationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertGlobalVariationRequest' from JSON`,
  );
}
