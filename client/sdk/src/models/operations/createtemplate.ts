/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTemplateSecurityOption1 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type CreateTemplateSecurityOption2 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type CreateTemplateSecurity = {
  option1?: CreateTemplateSecurityOption1 | undefined;
  option2?: CreateTemplateSecurityOption2 | undefined;
};

export type CreateTemplateRequest = {
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  createPromptTemplateForm: components.CreatePromptTemplateForm;
};

/** @internal */
export const CreateTemplateSecurityOption1$inboundSchema: z.ZodType<
  CreateTemplateSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type CreateTemplateSecurityOption1$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const CreateTemplateSecurityOption1$outboundSchema: z.ZodType<
  CreateTemplateSecurityOption1$Outbound,
  z.ZodTypeDef,
  CreateTemplateSecurityOption1
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTemplateSecurityOption1$ {
  /** @deprecated use `CreateTemplateSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = CreateTemplateSecurityOption1$inboundSchema;
  /** @deprecated use `CreateTemplateSecurityOption1$outboundSchema` instead. */
  export const outboundSchema = CreateTemplateSecurityOption1$outboundSchema;
  /** @deprecated use `CreateTemplateSecurityOption1$Outbound` instead. */
  export type Outbound = CreateTemplateSecurityOption1$Outbound;
}

export function createTemplateSecurityOption1ToJSON(
  createTemplateSecurityOption1: CreateTemplateSecurityOption1,
): string {
  return JSON.stringify(
    CreateTemplateSecurityOption1$outboundSchema.parse(
      createTemplateSecurityOption1,
    ),
  );
}

export function createTemplateSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<CreateTemplateSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTemplateSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTemplateSecurityOption1' from JSON`,
  );
}

/** @internal */
export const CreateTemplateSecurityOption2$inboundSchema: z.ZodType<
  CreateTemplateSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type CreateTemplateSecurityOption2$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const CreateTemplateSecurityOption2$outboundSchema: z.ZodType<
  CreateTemplateSecurityOption2$Outbound,
  z.ZodTypeDef,
  CreateTemplateSecurityOption2
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTemplateSecurityOption2$ {
  /** @deprecated use `CreateTemplateSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = CreateTemplateSecurityOption2$inboundSchema;
  /** @deprecated use `CreateTemplateSecurityOption2$outboundSchema` instead. */
  export const outboundSchema = CreateTemplateSecurityOption2$outboundSchema;
  /** @deprecated use `CreateTemplateSecurityOption2$Outbound` instead. */
  export type Outbound = CreateTemplateSecurityOption2$Outbound;
}

export function createTemplateSecurityOption2ToJSON(
  createTemplateSecurityOption2: CreateTemplateSecurityOption2,
): string {
  return JSON.stringify(
    CreateTemplateSecurityOption2$outboundSchema.parse(
      createTemplateSecurityOption2,
    ),
  );
}

export function createTemplateSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<CreateTemplateSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTemplateSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTemplateSecurityOption2' from JSON`,
  );
}

/** @internal */
export const CreateTemplateSecurity$inboundSchema: z.ZodType<
  CreateTemplateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => CreateTemplateSecurityOption1$inboundSchema).optional(),
  Option2: z.lazy(() => CreateTemplateSecurityOption2$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type CreateTemplateSecurity$Outbound = {
  Option1?: CreateTemplateSecurityOption1$Outbound | undefined;
  Option2?: CreateTemplateSecurityOption2$Outbound | undefined;
};

/** @internal */
export const CreateTemplateSecurity$outboundSchema: z.ZodType<
  CreateTemplateSecurity$Outbound,
  z.ZodTypeDef,
  CreateTemplateSecurity
> = z.object({
  option1: z.lazy(() => CreateTemplateSecurityOption1$outboundSchema)
    .optional(),
  option2: z.lazy(() => CreateTemplateSecurityOption2$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTemplateSecurity$ {
  /** @deprecated use `CreateTemplateSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateTemplateSecurity$inboundSchema;
  /** @deprecated use `CreateTemplateSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateTemplateSecurity$outboundSchema;
  /** @deprecated use `CreateTemplateSecurity$Outbound` instead. */
  export type Outbound = CreateTemplateSecurity$Outbound;
}

export function createTemplateSecurityToJSON(
  createTemplateSecurity: CreateTemplateSecurity,
): string {
  return JSON.stringify(
    CreateTemplateSecurity$outboundSchema.parse(createTemplateSecurity),
  );
}

export function createTemplateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateTemplateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTemplateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTemplateSecurity' from JSON`,
  );
}

/** @internal */
export const CreateTemplateRequest$inboundSchema: z.ZodType<
  CreateTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Key": z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  CreatePromptTemplateForm: components.CreatePromptTemplateForm$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Key": "gramKey",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "CreatePromptTemplateForm": "createPromptTemplateForm",
  });
});

/** @internal */
export type CreateTemplateRequest$Outbound = {
  "Gram-Key"?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  CreatePromptTemplateForm: components.CreatePromptTemplateForm$Outbound;
};

/** @internal */
export const CreateTemplateRequest$outboundSchema: z.ZodType<
  CreateTemplateRequest$Outbound,
  z.ZodTypeDef,
  CreateTemplateRequest
> = z.object({
  gramKey: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  createPromptTemplateForm: components.CreatePromptTemplateForm$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramKey: "Gram-Key",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    createPromptTemplateForm: "CreatePromptTemplateForm",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTemplateRequest$ {
  /** @deprecated use `CreateTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTemplateRequest$inboundSchema;
  /** @deprecated use `CreateTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTemplateRequest$outboundSchema;
  /** @deprecated use `CreateTemplateRequest$Outbound` instead. */
  export type Outbound = CreateTemplateRequest$Outbound;
}

export function createTemplateRequestToJSON(
  createTemplateRequest: CreateTemplateRequest,
): string {
  return JSON.stringify(
    CreateTemplateRequest$outboundSchema.parse(createTemplateRequest),
  );
}

export function createTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTemplateRequest' from JSON`,
  );
}
