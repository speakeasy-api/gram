/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDeploymentLogsSecurityOption1 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type GetDeploymentLogsSecurityOption2 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type GetDeploymentLogsSecurity = {
  option1?: GetDeploymentLogsSecurityOption1 | undefined;
  option2?: GetDeploymentLogsSecurityOption2 | undefined;
};

export type GetDeploymentLogsRequest = {
  /**
   * The ID of the deployment
   */
  deploymentId: string;
  /**
   * The cursor to fetch results from
   */
  cursor?: string | undefined;
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const GetDeploymentLogsSecurityOption1$inboundSchema: z.ZodType<
  GetDeploymentLogsSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type GetDeploymentLogsSecurityOption1$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const GetDeploymentLogsSecurityOption1$outboundSchema: z.ZodType<
  GetDeploymentLogsSecurityOption1$Outbound,
  z.ZodTypeDef,
  GetDeploymentLogsSecurityOption1
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentLogsSecurityOption1$ {
  /** @deprecated use `GetDeploymentLogsSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentLogsSecurityOption1$inboundSchema;
  /** @deprecated use `GetDeploymentLogsSecurityOption1$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentLogsSecurityOption1$outboundSchema;
  /** @deprecated use `GetDeploymentLogsSecurityOption1$Outbound` instead. */
  export type Outbound = GetDeploymentLogsSecurityOption1$Outbound;
}

export function getDeploymentLogsSecurityOption1ToJSON(
  getDeploymentLogsSecurityOption1: GetDeploymentLogsSecurityOption1,
): string {
  return JSON.stringify(
    GetDeploymentLogsSecurityOption1$outboundSchema.parse(
      getDeploymentLogsSecurityOption1,
    ),
  );
}

export function getDeploymentLogsSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentLogsSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentLogsSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentLogsSecurityOption1' from JSON`,
  );
}

/** @internal */
export const GetDeploymentLogsSecurityOption2$inboundSchema: z.ZodType<
  GetDeploymentLogsSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type GetDeploymentLogsSecurityOption2$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const GetDeploymentLogsSecurityOption2$outboundSchema: z.ZodType<
  GetDeploymentLogsSecurityOption2$Outbound,
  z.ZodTypeDef,
  GetDeploymentLogsSecurityOption2
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentLogsSecurityOption2$ {
  /** @deprecated use `GetDeploymentLogsSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentLogsSecurityOption2$inboundSchema;
  /** @deprecated use `GetDeploymentLogsSecurityOption2$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentLogsSecurityOption2$outboundSchema;
  /** @deprecated use `GetDeploymentLogsSecurityOption2$Outbound` instead. */
  export type Outbound = GetDeploymentLogsSecurityOption2$Outbound;
}

export function getDeploymentLogsSecurityOption2ToJSON(
  getDeploymentLogsSecurityOption2: GetDeploymentLogsSecurityOption2,
): string {
  return JSON.stringify(
    GetDeploymentLogsSecurityOption2$outboundSchema.parse(
      getDeploymentLogsSecurityOption2,
    ),
  );
}

export function getDeploymentLogsSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentLogsSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentLogsSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentLogsSecurityOption2' from JSON`,
  );
}

/** @internal */
export const GetDeploymentLogsSecurity$inboundSchema: z.ZodType<
  GetDeploymentLogsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => GetDeploymentLogsSecurityOption1$inboundSchema)
    .optional(),
  Option2: z.lazy(() => GetDeploymentLogsSecurityOption2$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type GetDeploymentLogsSecurity$Outbound = {
  Option1?: GetDeploymentLogsSecurityOption1$Outbound | undefined;
  Option2?: GetDeploymentLogsSecurityOption2$Outbound | undefined;
};

/** @internal */
export const GetDeploymentLogsSecurity$outboundSchema: z.ZodType<
  GetDeploymentLogsSecurity$Outbound,
  z.ZodTypeDef,
  GetDeploymentLogsSecurity
> = z.object({
  option1: z.lazy(() => GetDeploymentLogsSecurityOption1$outboundSchema)
    .optional(),
  option2: z.lazy(() => GetDeploymentLogsSecurityOption2$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentLogsSecurity$ {
  /** @deprecated use `GetDeploymentLogsSecurity$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentLogsSecurity$inboundSchema;
  /** @deprecated use `GetDeploymentLogsSecurity$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentLogsSecurity$outboundSchema;
  /** @deprecated use `GetDeploymentLogsSecurity$Outbound` instead. */
  export type Outbound = GetDeploymentLogsSecurity$Outbound;
}

export function getDeploymentLogsSecurityToJSON(
  getDeploymentLogsSecurity: GetDeploymentLogsSecurity,
): string {
  return JSON.stringify(
    GetDeploymentLogsSecurity$outboundSchema.parse(getDeploymentLogsSecurity),
  );
}

export function getDeploymentLogsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentLogsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentLogsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentLogsSecurity' from JSON`,
  );
}

/** @internal */
export const GetDeploymentLogsRequest$inboundSchema: z.ZodType<
  GetDeploymentLogsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  deployment_id: z.string(),
  cursor: z.string().optional(),
  "Gram-Key": z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "deployment_id": "deploymentId",
    "Gram-Key": "gramKey",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type GetDeploymentLogsRequest$Outbound = {
  deployment_id: string;
  cursor?: string | undefined;
  "Gram-Key"?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const GetDeploymentLogsRequest$outboundSchema: z.ZodType<
  GetDeploymentLogsRequest$Outbound,
  z.ZodTypeDef,
  GetDeploymentLogsRequest
> = z.object({
  deploymentId: z.string(),
  cursor: z.string().optional(),
  gramKey: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    deploymentId: "deployment_id",
    gramKey: "Gram-Key",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentLogsRequest$ {
  /** @deprecated use `GetDeploymentLogsRequest$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentLogsRequest$inboundSchema;
  /** @deprecated use `GetDeploymentLogsRequest$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentLogsRequest$outboundSchema;
  /** @deprecated use `GetDeploymentLogsRequest$Outbound` instead. */
  export type Outbound = GetDeploymentLogsRequest$Outbound;
}

export function getDeploymentLogsRequestToJSON(
  getDeploymentLogsRequest: GetDeploymentLogsRequest,
): string {
  return JSON.stringify(
    GetDeploymentLogsRequest$outboundSchema.parse(getDeploymentLogsRequest),
  );
}

export function getDeploymentLogsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentLogsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentLogsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentLogsRequest' from JSON`,
  );
}
