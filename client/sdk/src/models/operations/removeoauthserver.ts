/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveOAuthServerSecurity = {
  projectSlugHeaderGramProject?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type RemoveOAuthServerRequest = {
  /**
   * The slug of the toolset
   */
  slug: string;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const RemoveOAuthServerSecurity$inboundSchema: z.ZodType<
  RemoveOAuthServerSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type RemoveOAuthServerSecurity$Outbound = {
  "project_slug_header_Gram-Project"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const RemoveOAuthServerSecurity$outboundSchema: z.ZodType<
  RemoveOAuthServerSecurity$Outbound,
  z.ZodTypeDef,
  RemoveOAuthServerSecurity
> = z.object({
  projectSlugHeaderGramProject: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveOAuthServerSecurity$ {
  /** @deprecated use `RemoveOAuthServerSecurity$inboundSchema` instead. */
  export const inboundSchema = RemoveOAuthServerSecurity$inboundSchema;
  /** @deprecated use `RemoveOAuthServerSecurity$outboundSchema` instead. */
  export const outboundSchema = RemoveOAuthServerSecurity$outboundSchema;
  /** @deprecated use `RemoveOAuthServerSecurity$Outbound` instead. */
  export type Outbound = RemoveOAuthServerSecurity$Outbound;
}

export function removeOAuthServerSecurityToJSON(
  removeOAuthServerSecurity: RemoveOAuthServerSecurity,
): string {
  return JSON.stringify(
    RemoveOAuthServerSecurity$outboundSchema.parse(removeOAuthServerSecurity),
  );
}

export function removeOAuthServerSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RemoveOAuthServerSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveOAuthServerSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveOAuthServerSecurity' from JSON`,
  );
}

/** @internal */
export const RemoveOAuthServerRequest$inboundSchema: z.ZodType<
  RemoveOAuthServerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type RemoveOAuthServerRequest$Outbound = {
  slug: string;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const RemoveOAuthServerRequest$outboundSchema: z.ZodType<
  RemoveOAuthServerRequest$Outbound,
  z.ZodTypeDef,
  RemoveOAuthServerRequest
> = z.object({
  slug: z.string(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveOAuthServerRequest$ {
  /** @deprecated use `RemoveOAuthServerRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveOAuthServerRequest$inboundSchema;
  /** @deprecated use `RemoveOAuthServerRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveOAuthServerRequest$outboundSchema;
  /** @deprecated use `RemoveOAuthServerRequest$Outbound` instead. */
  export type Outbound = RemoveOAuthServerRequest$Outbound;
}

export function removeOAuthServerRequestToJSON(
  removeOAuthServerRequest: RemoveOAuthServerRequest,
): string {
  return JSON.stringify(
    RemoveOAuthServerRequest$outboundSchema.parse(removeOAuthServerRequest),
  );
}

export function removeOAuthServerRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveOAuthServerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveOAuthServerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveOAuthServerRequest' from JSON`,
  );
}
