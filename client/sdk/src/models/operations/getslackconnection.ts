/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSlackConnectionSecurity = {
  projectSlugHeaderGramProject?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type GetSlackConnectionRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const GetSlackConnectionSecurity$inboundSchema: z.ZodType<
  GetSlackConnectionSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type GetSlackConnectionSecurity$Outbound = {
  "project_slug_header_Gram-Project"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const GetSlackConnectionSecurity$outboundSchema: z.ZodType<
  GetSlackConnectionSecurity$Outbound,
  z.ZodTypeDef,
  GetSlackConnectionSecurity
> = z.object({
  projectSlugHeaderGramProject: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSlackConnectionSecurity$ {
  /** @deprecated use `GetSlackConnectionSecurity$inboundSchema` instead. */
  export const inboundSchema = GetSlackConnectionSecurity$inboundSchema;
  /** @deprecated use `GetSlackConnectionSecurity$outboundSchema` instead. */
  export const outboundSchema = GetSlackConnectionSecurity$outboundSchema;
  /** @deprecated use `GetSlackConnectionSecurity$Outbound` instead. */
  export type Outbound = GetSlackConnectionSecurity$Outbound;
}

export function getSlackConnectionSecurityToJSON(
  getSlackConnectionSecurity: GetSlackConnectionSecurity,
): string {
  return JSON.stringify(
    GetSlackConnectionSecurity$outboundSchema.parse(getSlackConnectionSecurity),
  );
}

export function getSlackConnectionSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetSlackConnectionSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSlackConnectionSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSlackConnectionSecurity' from JSON`,
  );
}

/** @internal */
export const GetSlackConnectionRequest$inboundSchema: z.ZodType<
  GetSlackConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type GetSlackConnectionRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const GetSlackConnectionRequest$outboundSchema: z.ZodType<
  GetSlackConnectionRequest$Outbound,
  z.ZodTypeDef,
  GetSlackConnectionRequest
> = z.object({
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSlackConnectionRequest$ {
  /** @deprecated use `GetSlackConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = GetSlackConnectionRequest$inboundSchema;
  /** @deprecated use `GetSlackConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = GetSlackConnectionRequest$outboundSchema;
  /** @deprecated use `GetSlackConnectionRequest$Outbound` instead. */
  export type Outbound = GetSlackConnectionRequest$Outbound;
}

export function getSlackConnectionRequestToJSON(
  getSlackConnectionRequest: GetSlackConnectionRequest,
): string {
  return JSON.stringify(
    GetSlackConnectionRequest$outboundSchema.parse(getSlackConnectionRequest),
  );
}

export function getSlackConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSlackConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSlackConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSlackConnectionRequest' from JSON`,
  );
}
