/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListResourcesSecurity = {
  projectSlugHeaderGramProject?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type ListResourcesRequest = {
  /**
   * The cursor to fetch results from
   */
  cursor?: string | undefined;
  /**
   * The number of resources to return per page
   */
  limit?: number | undefined;
  /**
   * The deployment ID. If unset, latest deployment will be used.
   */
  deploymentId?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const ListResourcesSecurity$inboundSchema: z.ZodType<
  ListResourcesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type ListResourcesSecurity$Outbound = {
  "project_slug_header_Gram-Project"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const ListResourcesSecurity$outboundSchema: z.ZodType<
  ListResourcesSecurity$Outbound,
  z.ZodTypeDef,
  ListResourcesSecurity
> = z.object({
  projectSlugHeaderGramProject: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourcesSecurity$ {
  /** @deprecated use `ListResourcesSecurity$inboundSchema` instead. */
  export const inboundSchema = ListResourcesSecurity$inboundSchema;
  /** @deprecated use `ListResourcesSecurity$outboundSchema` instead. */
  export const outboundSchema = ListResourcesSecurity$outboundSchema;
  /** @deprecated use `ListResourcesSecurity$Outbound` instead. */
  export type Outbound = ListResourcesSecurity$Outbound;
}

export function listResourcesSecurityToJSON(
  listResourcesSecurity: ListResourcesSecurity,
): string {
  return JSON.stringify(
    ListResourcesSecurity$outboundSchema.parse(listResourcesSecurity),
  );
}

export function listResourcesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListResourcesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourcesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourcesSecurity' from JSON`,
  );
}

/** @internal */
export const ListResourcesRequest$inboundSchema: z.ZodType<
  ListResourcesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  limit: z.number().int().optional(),
  deployment_id: z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "deployment_id": "deploymentId",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type ListResourcesRequest$Outbound = {
  cursor?: string | undefined;
  limit?: number | undefined;
  deployment_id?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const ListResourcesRequest$outboundSchema: z.ZodType<
  ListResourcesRequest$Outbound,
  z.ZodTypeDef,
  ListResourcesRequest
> = z.object({
  cursor: z.string().optional(),
  limit: z.number().int().optional(),
  deploymentId: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    deploymentId: "deployment_id",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourcesRequest$ {
  /** @deprecated use `ListResourcesRequest$inboundSchema` instead. */
  export const inboundSchema = ListResourcesRequest$inboundSchema;
  /** @deprecated use `ListResourcesRequest$outboundSchema` instead. */
  export const outboundSchema = ListResourcesRequest$outboundSchema;
  /** @deprecated use `ListResourcesRequest$Outbound` instead. */
  export type Outbound = ListResourcesRequest$Outbound;
}

export function listResourcesRequestToJSON(
  listResourcesRequest: ListResourcesRequest,
): string {
  return JSON.stringify(
    ListResourcesRequest$outboundSchema.parse(listResourcesRequest),
  );
}

export function listResourcesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListResourcesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourcesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourcesRequest' from JSON`,
  );
}
