/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMcpMetadataSecurity = {
  projectSlugHeaderGramProject?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type GetMcpMetadataRequest = {
  /**
   * The slug of the toolset associated with this install page metadata
   */
  toolsetSlug: string;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const GetMcpMetadataSecurity$inboundSchema: z.ZodType<
  GetMcpMetadataSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type GetMcpMetadataSecurity$Outbound = {
  "project_slug_header_Gram-Project"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const GetMcpMetadataSecurity$outboundSchema: z.ZodType<
  GetMcpMetadataSecurity$Outbound,
  z.ZodTypeDef,
  GetMcpMetadataSecurity
> = z.object({
  projectSlugHeaderGramProject: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMcpMetadataSecurity$ {
  /** @deprecated use `GetMcpMetadataSecurity$inboundSchema` instead. */
  export const inboundSchema = GetMcpMetadataSecurity$inboundSchema;
  /** @deprecated use `GetMcpMetadataSecurity$outboundSchema` instead. */
  export const outboundSchema = GetMcpMetadataSecurity$outboundSchema;
  /** @deprecated use `GetMcpMetadataSecurity$Outbound` instead. */
  export type Outbound = GetMcpMetadataSecurity$Outbound;
}

export function getMcpMetadataSecurityToJSON(
  getMcpMetadataSecurity: GetMcpMetadataSecurity,
): string {
  return JSON.stringify(
    GetMcpMetadataSecurity$outboundSchema.parse(getMcpMetadataSecurity),
  );
}

export function getMcpMetadataSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetMcpMetadataSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMcpMetadataSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMcpMetadataSecurity' from JSON`,
  );
}

/** @internal */
export const GetMcpMetadataRequest$inboundSchema: z.ZodType<
  GetMcpMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  toolset_slug: z.string(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "toolset_slug": "toolsetSlug",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type GetMcpMetadataRequest$Outbound = {
  toolset_slug: string;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const GetMcpMetadataRequest$outboundSchema: z.ZodType<
  GetMcpMetadataRequest$Outbound,
  z.ZodTypeDef,
  GetMcpMetadataRequest
> = z.object({
  toolsetSlug: z.string(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolsetSlug: "toolset_slug",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMcpMetadataRequest$ {
  /** @deprecated use `GetMcpMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = GetMcpMetadataRequest$inboundSchema;
  /** @deprecated use `GetMcpMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = GetMcpMetadataRequest$outboundSchema;
  /** @deprecated use `GetMcpMetadataRequest$Outbound` instead. */
  export type Outbound = GetMcpMetadataRequest$Outbound;
}

export function getMcpMetadataRequestToJSON(
  getMcpMetadataRequest: GetMcpMetadataRequest,
): string {
  return JSON.stringify(
    GetMcpMetadataRequest$outboundSchema.parse(getMcpMetadataRequest),
  );
}

export function getMcpMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMcpMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMcpMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMcpMetadataRequest' from JSON`,
  );
}
