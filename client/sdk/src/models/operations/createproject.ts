/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateProjectSecurity = {
  apikeyHeaderGramKey?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type CreateProjectRequest = {
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  createProjectRequestBody: components.CreateProjectRequestBody;
};

/** @internal */
export const CreateProjectSecurity$inboundSchema: z.ZodType<
  CreateProjectSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type CreateProjectSecurity$Outbound = {
  "apikey_header_Gram-Key"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const CreateProjectSecurity$outboundSchema: z.ZodType<
  CreateProjectSecurity$Outbound,
  z.ZodTypeDef,
  CreateProjectSecurity
> = z.object({
  apikeyHeaderGramKey: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectSecurity$ {
  /** @deprecated use `CreateProjectSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateProjectSecurity$inboundSchema;
  /** @deprecated use `CreateProjectSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateProjectSecurity$outboundSchema;
  /** @deprecated use `CreateProjectSecurity$Outbound` instead. */
  export type Outbound = CreateProjectSecurity$Outbound;
}

export function createProjectSecurityToJSON(
  createProjectSecurity: CreateProjectSecurity,
): string {
  return JSON.stringify(
    CreateProjectSecurity$outboundSchema.parse(createProjectSecurity),
  );
}

export function createProjectSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectSecurity' from JSON`,
  );
}

/** @internal */
export const CreateProjectRequest$inboundSchema: z.ZodType<
  CreateProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Key": z.string().optional(),
  "Gram-Session": z.string().optional(),
  CreateProjectRequestBody: components.CreateProjectRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Key": "gramKey",
    "Gram-Session": "gramSession",
    "CreateProjectRequestBody": "createProjectRequestBody",
  });
});

/** @internal */
export type CreateProjectRequest$Outbound = {
  "Gram-Key"?: string | undefined;
  "Gram-Session"?: string | undefined;
  CreateProjectRequestBody: components.CreateProjectRequestBody$Outbound;
};

/** @internal */
export const CreateProjectRequest$outboundSchema: z.ZodType<
  CreateProjectRequest$Outbound,
  z.ZodTypeDef,
  CreateProjectRequest
> = z.object({
  gramKey: z.string().optional(),
  gramSession: z.string().optional(),
  createProjectRequestBody: components.CreateProjectRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramKey: "Gram-Key",
    gramSession: "Gram-Session",
    createProjectRequestBody: "CreateProjectRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRequest$ {
  /** @deprecated use `CreateProjectRequest$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRequest$inboundSchema;
  /** @deprecated use `CreateProjectRequest$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRequest$outboundSchema;
  /** @deprecated use `CreateProjectRequest$Outbound` instead. */
  export type Outbound = CreateProjectRequest$Outbound;
}

export function createProjectRequestToJSON(
  createProjectRequest: CreateProjectRequest,
): string {
  return JSON.stringify(
    CreateProjectRequest$outboundSchema.parse(createProjectRequest),
  );
}

export function createProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectRequest' from JSON`,
  );
}
