/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SessionInfoSecurity = {
  sessionHeaderGramSession?: string | undefined;
};

export type SessionInfoRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
};

export type SessionInfoResponse = {
  headers: { [k: string]: Array<string> };
  result: components.InfoResponseBody;
};

/** @internal */
export const SessionInfoSecurity$inboundSchema: z.ZodType<
  SessionInfoSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type SessionInfoSecurity$Outbound = {
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const SessionInfoSecurity$outboundSchema: z.ZodType<
  SessionInfoSecurity$Outbound,
  z.ZodTypeDef,
  SessionInfoSecurity
> = z.object({
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionInfoSecurity$ {
  /** @deprecated use `SessionInfoSecurity$inboundSchema` instead. */
  export const inboundSchema = SessionInfoSecurity$inboundSchema;
  /** @deprecated use `SessionInfoSecurity$outboundSchema` instead. */
  export const outboundSchema = SessionInfoSecurity$outboundSchema;
  /** @deprecated use `SessionInfoSecurity$Outbound` instead. */
  export type Outbound = SessionInfoSecurity$Outbound;
}

export function sessionInfoSecurityToJSON(
  sessionInfoSecurity: SessionInfoSecurity,
): string {
  return JSON.stringify(
    SessionInfoSecurity$outboundSchema.parse(sessionInfoSecurity),
  );
}

export function sessionInfoSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SessionInfoSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionInfoSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionInfoSecurity' from JSON`,
  );
}

/** @internal */
export const SessionInfoRequest$inboundSchema: z.ZodType<
  SessionInfoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
  });
});

/** @internal */
export type SessionInfoRequest$Outbound = {
  "Gram-Session"?: string | undefined;
};

/** @internal */
export const SessionInfoRequest$outboundSchema: z.ZodType<
  SessionInfoRequest$Outbound,
  z.ZodTypeDef,
  SessionInfoRequest
> = z.object({
  gramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionInfoRequest$ {
  /** @deprecated use `SessionInfoRequest$inboundSchema` instead. */
  export const inboundSchema = SessionInfoRequest$inboundSchema;
  /** @deprecated use `SessionInfoRequest$outboundSchema` instead. */
  export const outboundSchema = SessionInfoRequest$outboundSchema;
  /** @deprecated use `SessionInfoRequest$Outbound` instead. */
  export type Outbound = SessionInfoRequest$Outbound;
}

export function sessionInfoRequestToJSON(
  sessionInfoRequest: SessionInfoRequest,
): string {
  return JSON.stringify(
    SessionInfoRequest$outboundSchema.parse(sessionInfoRequest),
  );
}

export function sessionInfoRequestFromJSON(
  jsonString: string,
): SafeParseResult<SessionInfoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionInfoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionInfoRequest' from JSON`,
  );
}

/** @internal */
export const SessionInfoResponse$inboundSchema: z.ZodType<
  SessionInfoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.InfoResponseBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type SessionInfoResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.InfoResponseBody$Outbound;
};

/** @internal */
export const SessionInfoResponse$outboundSchema: z.ZodType<
  SessionInfoResponse$Outbound,
  z.ZodTypeDef,
  SessionInfoResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.InfoResponseBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionInfoResponse$ {
  /** @deprecated use `SessionInfoResponse$inboundSchema` instead. */
  export const inboundSchema = SessionInfoResponse$inboundSchema;
  /** @deprecated use `SessionInfoResponse$outboundSchema` instead. */
  export const outboundSchema = SessionInfoResponse$outboundSchema;
  /** @deprecated use `SessionInfoResponse$Outbound` instead. */
  export type Outbound = SessionInfoResponse$Outbound;
}

export function sessionInfoResponseToJSON(
  sessionInfoResponse: SessionInfoResponse,
): string {
  return JSON.stringify(
    SessionInfoResponse$outboundSchema.parse(sessionInfoResponse),
  );
}

export function sessionInfoResponseFromJSON(
  jsonString: string,
): SafeParseResult<SessionInfoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionInfoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionInfoResponse' from JSON`,
  );
}
