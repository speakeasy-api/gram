/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SlackLoginSecurity = {
  projectSlugQueryProjectSlug?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type SlackLoginRequest = {
  projectSlug: string;
  /**
   * The dashboard location to return too
   */
  returnUrl?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
};

export type SlackLoginResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const SlackLoginSecurity$inboundSchema: z.ZodType<
  SlackLoginSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_slug_query_project_slug: z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_query_project_slug": "projectSlugQueryProjectSlug",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type SlackLoginSecurity$Outbound = {
  project_slug_query_project_slug?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const SlackLoginSecurity$outboundSchema: z.ZodType<
  SlackLoginSecurity$Outbound,
  z.ZodTypeDef,
  SlackLoginSecurity
> = z.object({
  projectSlugQueryProjectSlug: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugQueryProjectSlug: "project_slug_query_project_slug",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SlackLoginSecurity$ {
  /** @deprecated use `SlackLoginSecurity$inboundSchema` instead. */
  export const inboundSchema = SlackLoginSecurity$inboundSchema;
  /** @deprecated use `SlackLoginSecurity$outboundSchema` instead. */
  export const outboundSchema = SlackLoginSecurity$outboundSchema;
  /** @deprecated use `SlackLoginSecurity$Outbound` instead. */
  export type Outbound = SlackLoginSecurity$Outbound;
}

export function slackLoginSecurityToJSON(
  slackLoginSecurity: SlackLoginSecurity,
): string {
  return JSON.stringify(
    SlackLoginSecurity$outboundSchema.parse(slackLoginSecurity),
  );
}

export function slackLoginSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SlackLoginSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SlackLoginSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SlackLoginSecurity' from JSON`,
  );
}

/** @internal */
export const SlackLoginRequest$inboundSchema: z.ZodType<
  SlackLoginRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_slug: z.string(),
  return_url: z.string().optional(),
  "Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug": "projectSlug",
    "return_url": "returnUrl",
    "Gram-Session": "gramSession",
  });
});

/** @internal */
export type SlackLoginRequest$Outbound = {
  project_slug: string;
  return_url?: string | undefined;
  "Gram-Session"?: string | undefined;
};

/** @internal */
export const SlackLoginRequest$outboundSchema: z.ZodType<
  SlackLoginRequest$Outbound,
  z.ZodTypeDef,
  SlackLoginRequest
> = z.object({
  projectSlug: z.string(),
  returnUrl: z.string().optional(),
  gramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlug: "project_slug",
    returnUrl: "return_url",
    gramSession: "Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SlackLoginRequest$ {
  /** @deprecated use `SlackLoginRequest$inboundSchema` instead. */
  export const inboundSchema = SlackLoginRequest$inboundSchema;
  /** @deprecated use `SlackLoginRequest$outboundSchema` instead. */
  export const outboundSchema = SlackLoginRequest$outboundSchema;
  /** @deprecated use `SlackLoginRequest$Outbound` instead. */
  export type Outbound = SlackLoginRequest$Outbound;
}

export function slackLoginRequestToJSON(
  slackLoginRequest: SlackLoginRequest,
): string {
  return JSON.stringify(
    SlackLoginRequest$outboundSchema.parse(slackLoginRequest),
  );
}

export function slackLoginRequestFromJSON(
  jsonString: string,
): SafeParseResult<SlackLoginRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SlackLoginRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SlackLoginRequest' from JSON`,
  );
}

/** @internal */
export const SlackLoginResponse$inboundSchema: z.ZodType<
  SlackLoginResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type SlackLoginResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const SlackLoginResponse$outboundSchema: z.ZodType<
  SlackLoginResponse$Outbound,
  z.ZodTypeDef,
  SlackLoginResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SlackLoginResponse$ {
  /** @deprecated use `SlackLoginResponse$inboundSchema` instead. */
  export const inboundSchema = SlackLoginResponse$inboundSchema;
  /** @deprecated use `SlackLoginResponse$outboundSchema` instead. */
  export const outboundSchema = SlackLoginResponse$outboundSchema;
  /** @deprecated use `SlackLoginResponse$Outbound` instead. */
  export type Outbound = SlackLoginResponse$Outbound;
}

export function slackLoginResponseToJSON(
  slackLoginResponse: SlackLoginResponse,
): string {
  return JSON.stringify(
    SlackLoginResponse$outboundSchema.parse(slackLoginResponse),
  );
}

export function slackLoginResponseFromJSON(
  jsonString: string,
): SafeParseResult<SlackLoginResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SlackLoginResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SlackLoginResponse' from JSON`,
  );
}
