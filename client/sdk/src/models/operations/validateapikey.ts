/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ValidateAPIKeySecurity = {
  apikeyHeaderGramKey?: string | undefined;
};

export type ValidateAPIKeyRequest = {
  /**
   * API Key header
   */
  gramKey?: string | undefined;
};

/** @internal */
export const ValidateAPIKeySecurity$inboundSchema: z.ZodType<
  ValidateAPIKeySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
  });
});

/** @internal */
export type ValidateAPIKeySecurity$Outbound = {
  "apikey_header_Gram-Key"?: string | undefined;
};

/** @internal */
export const ValidateAPIKeySecurity$outboundSchema: z.ZodType<
  ValidateAPIKeySecurity$Outbound,
  z.ZodTypeDef,
  ValidateAPIKeySecurity
> = z.object({
  apikeyHeaderGramKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidateAPIKeySecurity$ {
  /** @deprecated use `ValidateAPIKeySecurity$inboundSchema` instead. */
  export const inboundSchema = ValidateAPIKeySecurity$inboundSchema;
  /** @deprecated use `ValidateAPIKeySecurity$outboundSchema` instead. */
  export const outboundSchema = ValidateAPIKeySecurity$outboundSchema;
  /** @deprecated use `ValidateAPIKeySecurity$Outbound` instead. */
  export type Outbound = ValidateAPIKeySecurity$Outbound;
}

export function validateAPIKeySecurityToJSON(
  validateAPIKeySecurity: ValidateAPIKeySecurity,
): string {
  return JSON.stringify(
    ValidateAPIKeySecurity$outboundSchema.parse(validateAPIKeySecurity),
  );
}

export function validateAPIKeySecurityFromJSON(
  jsonString: string,
): SafeParseResult<ValidateAPIKeySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidateAPIKeySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidateAPIKeySecurity' from JSON`,
  );
}

/** @internal */
export const ValidateAPIKeyRequest$inboundSchema: z.ZodType<
  ValidateAPIKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Key": "gramKey",
  });
});

/** @internal */
export type ValidateAPIKeyRequest$Outbound = {
  "Gram-Key"?: string | undefined;
};

/** @internal */
export const ValidateAPIKeyRequest$outboundSchema: z.ZodType<
  ValidateAPIKeyRequest$Outbound,
  z.ZodTypeDef,
  ValidateAPIKeyRequest
> = z.object({
  gramKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramKey: "Gram-Key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidateAPIKeyRequest$ {
  /** @deprecated use `ValidateAPIKeyRequest$inboundSchema` instead. */
  export const inboundSchema = ValidateAPIKeyRequest$inboundSchema;
  /** @deprecated use `ValidateAPIKeyRequest$outboundSchema` instead. */
  export const outboundSchema = ValidateAPIKeyRequest$outboundSchema;
  /** @deprecated use `ValidateAPIKeyRequest$Outbound` instead. */
  export type Outbound = ValidateAPIKeyRequest$Outbound;
}

export function validateAPIKeyRequestToJSON(
  validateAPIKeyRequest: ValidateAPIKeyRequest,
): string {
  return JSON.stringify(
    ValidateAPIKeyRequest$outboundSchema.parse(validateAPIKeyRequest),
  );
}

export function validateAPIKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<ValidateAPIKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidateAPIKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidateAPIKeyRequest' from JSON`,
  );
}
