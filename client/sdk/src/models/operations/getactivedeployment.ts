/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetActiveDeploymentSecurityOption1 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type GetActiveDeploymentSecurityOption2 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type GetActiveDeploymentSecurity = {
  option1?: GetActiveDeploymentSecurityOption1 | undefined;
  option2?: GetActiveDeploymentSecurityOption2 | undefined;
};

export type GetActiveDeploymentRequest = {
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const GetActiveDeploymentSecurityOption1$inboundSchema: z.ZodType<
  GetActiveDeploymentSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type GetActiveDeploymentSecurityOption1$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const GetActiveDeploymentSecurityOption1$outboundSchema: z.ZodType<
  GetActiveDeploymentSecurityOption1$Outbound,
  z.ZodTypeDef,
  GetActiveDeploymentSecurityOption1
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActiveDeploymentSecurityOption1$ {
  /** @deprecated use `GetActiveDeploymentSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = GetActiveDeploymentSecurityOption1$inboundSchema;
  /** @deprecated use `GetActiveDeploymentSecurityOption1$outboundSchema` instead. */
  export const outboundSchema =
    GetActiveDeploymentSecurityOption1$outboundSchema;
  /** @deprecated use `GetActiveDeploymentSecurityOption1$Outbound` instead. */
  export type Outbound = GetActiveDeploymentSecurityOption1$Outbound;
}

export function getActiveDeploymentSecurityOption1ToJSON(
  getActiveDeploymentSecurityOption1: GetActiveDeploymentSecurityOption1,
): string {
  return JSON.stringify(
    GetActiveDeploymentSecurityOption1$outboundSchema.parse(
      getActiveDeploymentSecurityOption1,
    ),
  );
}

export function getActiveDeploymentSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<GetActiveDeploymentSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetActiveDeploymentSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActiveDeploymentSecurityOption1' from JSON`,
  );
}

/** @internal */
export const GetActiveDeploymentSecurityOption2$inboundSchema: z.ZodType<
  GetActiveDeploymentSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type GetActiveDeploymentSecurityOption2$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const GetActiveDeploymentSecurityOption2$outboundSchema: z.ZodType<
  GetActiveDeploymentSecurityOption2$Outbound,
  z.ZodTypeDef,
  GetActiveDeploymentSecurityOption2
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActiveDeploymentSecurityOption2$ {
  /** @deprecated use `GetActiveDeploymentSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = GetActiveDeploymentSecurityOption2$inboundSchema;
  /** @deprecated use `GetActiveDeploymentSecurityOption2$outboundSchema` instead. */
  export const outboundSchema =
    GetActiveDeploymentSecurityOption2$outboundSchema;
  /** @deprecated use `GetActiveDeploymentSecurityOption2$Outbound` instead. */
  export type Outbound = GetActiveDeploymentSecurityOption2$Outbound;
}

export function getActiveDeploymentSecurityOption2ToJSON(
  getActiveDeploymentSecurityOption2: GetActiveDeploymentSecurityOption2,
): string {
  return JSON.stringify(
    GetActiveDeploymentSecurityOption2$outboundSchema.parse(
      getActiveDeploymentSecurityOption2,
    ),
  );
}

export function getActiveDeploymentSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<GetActiveDeploymentSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetActiveDeploymentSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActiveDeploymentSecurityOption2' from JSON`,
  );
}

/** @internal */
export const GetActiveDeploymentSecurity$inboundSchema: z.ZodType<
  GetActiveDeploymentSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => GetActiveDeploymentSecurityOption1$inboundSchema)
    .optional(),
  Option2: z.lazy(() => GetActiveDeploymentSecurityOption2$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type GetActiveDeploymentSecurity$Outbound = {
  Option1?: GetActiveDeploymentSecurityOption1$Outbound | undefined;
  Option2?: GetActiveDeploymentSecurityOption2$Outbound | undefined;
};

/** @internal */
export const GetActiveDeploymentSecurity$outboundSchema: z.ZodType<
  GetActiveDeploymentSecurity$Outbound,
  z.ZodTypeDef,
  GetActiveDeploymentSecurity
> = z.object({
  option1: z.lazy(() => GetActiveDeploymentSecurityOption1$outboundSchema)
    .optional(),
  option2: z.lazy(() => GetActiveDeploymentSecurityOption2$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActiveDeploymentSecurity$ {
  /** @deprecated use `GetActiveDeploymentSecurity$inboundSchema` instead. */
  export const inboundSchema = GetActiveDeploymentSecurity$inboundSchema;
  /** @deprecated use `GetActiveDeploymentSecurity$outboundSchema` instead. */
  export const outboundSchema = GetActiveDeploymentSecurity$outboundSchema;
  /** @deprecated use `GetActiveDeploymentSecurity$Outbound` instead. */
  export type Outbound = GetActiveDeploymentSecurity$Outbound;
}

export function getActiveDeploymentSecurityToJSON(
  getActiveDeploymentSecurity: GetActiveDeploymentSecurity,
): string {
  return JSON.stringify(
    GetActiveDeploymentSecurity$outboundSchema.parse(
      getActiveDeploymentSecurity,
    ),
  );
}

export function getActiveDeploymentSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetActiveDeploymentSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetActiveDeploymentSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActiveDeploymentSecurity' from JSON`,
  );
}

/** @internal */
export const GetActiveDeploymentRequest$inboundSchema: z.ZodType<
  GetActiveDeploymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Key": z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Key": "gramKey",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type GetActiveDeploymentRequest$Outbound = {
  "Gram-Key"?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const GetActiveDeploymentRequest$outboundSchema: z.ZodType<
  GetActiveDeploymentRequest$Outbound,
  z.ZodTypeDef,
  GetActiveDeploymentRequest
> = z.object({
  gramKey: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramKey: "Gram-Key",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActiveDeploymentRequest$ {
  /** @deprecated use `GetActiveDeploymentRequest$inboundSchema` instead. */
  export const inboundSchema = GetActiveDeploymentRequest$inboundSchema;
  /** @deprecated use `GetActiveDeploymentRequest$outboundSchema` instead. */
  export const outboundSchema = GetActiveDeploymentRequest$outboundSchema;
  /** @deprecated use `GetActiveDeploymentRequest$Outbound` instead. */
  export type Outbound = GetActiveDeploymentRequest$Outbound;
}

export function getActiveDeploymentRequestToJSON(
  getActiveDeploymentRequest: GetActiveDeploymentRequest,
): string {
  return JSON.stringify(
    GetActiveDeploymentRequest$outboundSchema.parse(getActiveDeploymentRequest),
  );
}

export function getActiveDeploymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetActiveDeploymentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetActiveDeploymentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActiveDeploymentRequest' from JSON`,
  );
}
