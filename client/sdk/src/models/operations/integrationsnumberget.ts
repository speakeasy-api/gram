/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IntegrationsNumberGetSecurity = {
  projectSlugHeaderGramProject?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type IntegrationsNumberGetRequest = {
  /**
   * The ID of the integration to get (refers to a package id).
   */
  id?: string | undefined;
  /**
   * The name of the integration to get (refers to a package name).
   */
  name?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const IntegrationsNumberGetSecurity$inboundSchema: z.ZodType<
  IntegrationsNumberGetSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type IntegrationsNumberGetSecurity$Outbound = {
  "project_slug_header_Gram-Project"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const IntegrationsNumberGetSecurity$outboundSchema: z.ZodType<
  IntegrationsNumberGetSecurity$Outbound,
  z.ZodTypeDef,
  IntegrationsNumberGetSecurity
> = z.object({
  projectSlugHeaderGramProject: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsNumberGetSecurity$ {
  /** @deprecated use `IntegrationsNumberGetSecurity$inboundSchema` instead. */
  export const inboundSchema = IntegrationsNumberGetSecurity$inboundSchema;
  /** @deprecated use `IntegrationsNumberGetSecurity$outboundSchema` instead. */
  export const outboundSchema = IntegrationsNumberGetSecurity$outboundSchema;
  /** @deprecated use `IntegrationsNumberGetSecurity$Outbound` instead. */
  export type Outbound = IntegrationsNumberGetSecurity$Outbound;
}

export function integrationsNumberGetSecurityToJSON(
  integrationsNumberGetSecurity: IntegrationsNumberGetSecurity,
): string {
  return JSON.stringify(
    IntegrationsNumberGetSecurity$outboundSchema.parse(
      integrationsNumberGetSecurity,
    ),
  );
}

export function integrationsNumberGetSecurityFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationsNumberGetSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationsNumberGetSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationsNumberGetSecurity' from JSON`,
  );
}

/** @internal */
export const IntegrationsNumberGetRequest$inboundSchema: z.ZodType<
  IntegrationsNumberGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type IntegrationsNumberGetRequest$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const IntegrationsNumberGetRequest$outboundSchema: z.ZodType<
  IntegrationsNumberGetRequest$Outbound,
  z.ZodTypeDef,
  IntegrationsNumberGetRequest
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsNumberGetRequest$ {
  /** @deprecated use `IntegrationsNumberGetRequest$inboundSchema` instead. */
  export const inboundSchema = IntegrationsNumberGetRequest$inboundSchema;
  /** @deprecated use `IntegrationsNumberGetRequest$outboundSchema` instead. */
  export const outboundSchema = IntegrationsNumberGetRequest$outboundSchema;
  /** @deprecated use `IntegrationsNumberGetRequest$Outbound` instead. */
  export type Outbound = IntegrationsNumberGetRequest$Outbound;
}

export function integrationsNumberGetRequestToJSON(
  integrationsNumberGetRequest: IntegrationsNumberGetRequest,
): string {
  return JSON.stringify(
    IntegrationsNumberGetRequest$outboundSchema.parse(
      integrationsNumberGetRequest,
    ),
  );
}

export function integrationsNumberGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationsNumberGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationsNumberGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationsNumberGetRequest' from JSON`,
  );
}
