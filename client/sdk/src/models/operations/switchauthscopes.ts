/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SwitchAuthScopesSecurity = {
  sessionHeaderGramSession?: string | undefined;
};

export type SwitchAuthScopesRequest = {
  /**
   * The organization slug to switch scopes
   */
  organizationId?: string | undefined;
  /**
   * The project id to switch scopes too
   */
  projectId?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
};

export type SwitchAuthScopesResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const SwitchAuthScopesSecurity$inboundSchema: z.ZodType<
  SwitchAuthScopesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type SwitchAuthScopesSecurity$Outbound = {
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const SwitchAuthScopesSecurity$outboundSchema: z.ZodType<
  SwitchAuthScopesSecurity$Outbound,
  z.ZodTypeDef,
  SwitchAuthScopesSecurity
> = z.object({
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SwitchAuthScopesSecurity$ {
  /** @deprecated use `SwitchAuthScopesSecurity$inboundSchema` instead. */
  export const inboundSchema = SwitchAuthScopesSecurity$inboundSchema;
  /** @deprecated use `SwitchAuthScopesSecurity$outboundSchema` instead. */
  export const outboundSchema = SwitchAuthScopesSecurity$outboundSchema;
  /** @deprecated use `SwitchAuthScopesSecurity$Outbound` instead. */
  export type Outbound = SwitchAuthScopesSecurity$Outbound;
}

export function switchAuthScopesSecurityToJSON(
  switchAuthScopesSecurity: SwitchAuthScopesSecurity,
): string {
  return JSON.stringify(
    SwitchAuthScopesSecurity$outboundSchema.parse(switchAuthScopesSecurity),
  );
}

export function switchAuthScopesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SwitchAuthScopesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SwitchAuthScopesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SwitchAuthScopesSecurity' from JSON`,
  );
}

/** @internal */
export const SwitchAuthScopesRequest$inboundSchema: z.ZodType<
  SwitchAuthScopesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
  project_id: z.string().optional(),
  "Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "project_id": "projectId",
    "Gram-Session": "gramSession",
  });
});

/** @internal */
export type SwitchAuthScopesRequest$Outbound = {
  organization_id?: string | undefined;
  project_id?: string | undefined;
  "Gram-Session"?: string | undefined;
};

/** @internal */
export const SwitchAuthScopesRequest$outboundSchema: z.ZodType<
  SwitchAuthScopesRequest$Outbound,
  z.ZodTypeDef,
  SwitchAuthScopesRequest
> = z.object({
  organizationId: z.string().optional(),
  projectId: z.string().optional(),
  gramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    projectId: "project_id",
    gramSession: "Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SwitchAuthScopesRequest$ {
  /** @deprecated use `SwitchAuthScopesRequest$inboundSchema` instead. */
  export const inboundSchema = SwitchAuthScopesRequest$inboundSchema;
  /** @deprecated use `SwitchAuthScopesRequest$outboundSchema` instead. */
  export const outboundSchema = SwitchAuthScopesRequest$outboundSchema;
  /** @deprecated use `SwitchAuthScopesRequest$Outbound` instead. */
  export type Outbound = SwitchAuthScopesRequest$Outbound;
}

export function switchAuthScopesRequestToJSON(
  switchAuthScopesRequest: SwitchAuthScopesRequest,
): string {
  return JSON.stringify(
    SwitchAuthScopesRequest$outboundSchema.parse(switchAuthScopesRequest),
  );
}

export function switchAuthScopesRequestFromJSON(
  jsonString: string,
): SafeParseResult<SwitchAuthScopesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SwitchAuthScopesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SwitchAuthScopesRequest' from JSON`,
  );
}

/** @internal */
export const SwitchAuthScopesResponse$inboundSchema: z.ZodType<
  SwitchAuthScopesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type SwitchAuthScopesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const SwitchAuthScopesResponse$outboundSchema: z.ZodType<
  SwitchAuthScopesResponse$Outbound,
  z.ZodTypeDef,
  SwitchAuthScopesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SwitchAuthScopesResponse$ {
  /** @deprecated use `SwitchAuthScopesResponse$inboundSchema` instead. */
  export const inboundSchema = SwitchAuthScopesResponse$inboundSchema;
  /** @deprecated use `SwitchAuthScopesResponse$outboundSchema` instead. */
  export const outboundSchema = SwitchAuthScopesResponse$outboundSchema;
  /** @deprecated use `SwitchAuthScopesResponse$Outbound` instead. */
  export type Outbound = SwitchAuthScopesResponse$Outbound;
}

export function switchAuthScopesResponseToJSON(
  switchAuthScopesResponse: SwitchAuthScopesResponse,
): string {
  return JSON.stringify(
    SwitchAuthScopesResponse$outboundSchema.parse(switchAuthScopesResponse),
  );
}

export function switchAuthScopesResponseFromJSON(
  jsonString: string,
): SafeParseResult<SwitchAuthScopesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SwitchAuthScopesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SwitchAuthScopesResponse' from JSON`,
  );
}
