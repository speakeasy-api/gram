/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SetProjectLogoSecurityOption1 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type SetProjectLogoSecurityOption2 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type SetProjectLogoSecurity = {
  option1?: SetProjectLogoSecurityOption1 | undefined;
  option2?: SetProjectLogoSecurityOption2 | undefined;
};

export type SetProjectLogoRequest = {
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  setProjectLogoForm: components.SetProjectLogoForm;
};

/** @internal */
export const SetProjectLogoSecurityOption1$inboundSchema: z.ZodType<
  SetProjectLogoSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type SetProjectLogoSecurityOption1$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const SetProjectLogoSecurityOption1$outboundSchema: z.ZodType<
  SetProjectLogoSecurityOption1$Outbound,
  z.ZodTypeDef,
  SetProjectLogoSecurityOption1
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetProjectLogoSecurityOption1$ {
  /** @deprecated use `SetProjectLogoSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = SetProjectLogoSecurityOption1$inboundSchema;
  /** @deprecated use `SetProjectLogoSecurityOption1$outboundSchema` instead. */
  export const outboundSchema = SetProjectLogoSecurityOption1$outboundSchema;
  /** @deprecated use `SetProjectLogoSecurityOption1$Outbound` instead. */
  export type Outbound = SetProjectLogoSecurityOption1$Outbound;
}

export function setProjectLogoSecurityOption1ToJSON(
  setProjectLogoSecurityOption1: SetProjectLogoSecurityOption1,
): string {
  return JSON.stringify(
    SetProjectLogoSecurityOption1$outboundSchema.parse(
      setProjectLogoSecurityOption1,
    ),
  );
}

export function setProjectLogoSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<SetProjectLogoSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetProjectLogoSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetProjectLogoSecurityOption1' from JSON`,
  );
}

/** @internal */
export const SetProjectLogoSecurityOption2$inboundSchema: z.ZodType<
  SetProjectLogoSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type SetProjectLogoSecurityOption2$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const SetProjectLogoSecurityOption2$outboundSchema: z.ZodType<
  SetProjectLogoSecurityOption2$Outbound,
  z.ZodTypeDef,
  SetProjectLogoSecurityOption2
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetProjectLogoSecurityOption2$ {
  /** @deprecated use `SetProjectLogoSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = SetProjectLogoSecurityOption2$inboundSchema;
  /** @deprecated use `SetProjectLogoSecurityOption2$outboundSchema` instead. */
  export const outboundSchema = SetProjectLogoSecurityOption2$outboundSchema;
  /** @deprecated use `SetProjectLogoSecurityOption2$Outbound` instead. */
  export type Outbound = SetProjectLogoSecurityOption2$Outbound;
}

export function setProjectLogoSecurityOption2ToJSON(
  setProjectLogoSecurityOption2: SetProjectLogoSecurityOption2,
): string {
  return JSON.stringify(
    SetProjectLogoSecurityOption2$outboundSchema.parse(
      setProjectLogoSecurityOption2,
    ),
  );
}

export function setProjectLogoSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<SetProjectLogoSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetProjectLogoSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetProjectLogoSecurityOption2' from JSON`,
  );
}

/** @internal */
export const SetProjectLogoSecurity$inboundSchema: z.ZodType<
  SetProjectLogoSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => SetProjectLogoSecurityOption1$inboundSchema).optional(),
  Option2: z.lazy(() => SetProjectLogoSecurityOption2$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type SetProjectLogoSecurity$Outbound = {
  Option1?: SetProjectLogoSecurityOption1$Outbound | undefined;
  Option2?: SetProjectLogoSecurityOption2$Outbound | undefined;
};

/** @internal */
export const SetProjectLogoSecurity$outboundSchema: z.ZodType<
  SetProjectLogoSecurity$Outbound,
  z.ZodTypeDef,
  SetProjectLogoSecurity
> = z.object({
  option1: z.lazy(() => SetProjectLogoSecurityOption1$outboundSchema)
    .optional(),
  option2: z.lazy(() => SetProjectLogoSecurityOption2$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetProjectLogoSecurity$ {
  /** @deprecated use `SetProjectLogoSecurity$inboundSchema` instead. */
  export const inboundSchema = SetProjectLogoSecurity$inboundSchema;
  /** @deprecated use `SetProjectLogoSecurity$outboundSchema` instead. */
  export const outboundSchema = SetProjectLogoSecurity$outboundSchema;
  /** @deprecated use `SetProjectLogoSecurity$Outbound` instead. */
  export type Outbound = SetProjectLogoSecurity$Outbound;
}

export function setProjectLogoSecurityToJSON(
  setProjectLogoSecurity: SetProjectLogoSecurity,
): string {
  return JSON.stringify(
    SetProjectLogoSecurity$outboundSchema.parse(setProjectLogoSecurity),
  );
}

export function setProjectLogoSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SetProjectLogoSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetProjectLogoSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetProjectLogoSecurity' from JSON`,
  );
}

/** @internal */
export const SetProjectLogoRequest$inboundSchema: z.ZodType<
  SetProjectLogoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Key": z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  SetProjectLogoForm: components.SetProjectLogoForm$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Key": "gramKey",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "SetProjectLogoForm": "setProjectLogoForm",
  });
});

/** @internal */
export type SetProjectLogoRequest$Outbound = {
  "Gram-Key"?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  SetProjectLogoForm: components.SetProjectLogoForm$Outbound;
};

/** @internal */
export const SetProjectLogoRequest$outboundSchema: z.ZodType<
  SetProjectLogoRequest$Outbound,
  z.ZodTypeDef,
  SetProjectLogoRequest
> = z.object({
  gramKey: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  setProjectLogoForm: components.SetProjectLogoForm$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramKey: "Gram-Key",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    setProjectLogoForm: "SetProjectLogoForm",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetProjectLogoRequest$ {
  /** @deprecated use `SetProjectLogoRequest$inboundSchema` instead. */
  export const inboundSchema = SetProjectLogoRequest$inboundSchema;
  /** @deprecated use `SetProjectLogoRequest$outboundSchema` instead. */
  export const outboundSchema = SetProjectLogoRequest$outboundSchema;
  /** @deprecated use `SetProjectLogoRequest$Outbound` instead. */
  export type Outbound = SetProjectLogoRequest$Outbound;
}

export function setProjectLogoRequestToJSON(
  setProjectLogoRequest: SetProjectLogoRequest,
): string {
  return JSON.stringify(
    SetProjectLogoRequest$outboundSchema.parse(setProjectLogoRequest),
  );
}

export function setProjectLogoRequestFromJSON(
  jsonString: string,
): SafeParseResult<SetProjectLogoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetProjectLogoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetProjectLogoRequest' from JSON`,
  );
}
