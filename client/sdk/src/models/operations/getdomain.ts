/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDomainSecurity = {
  projectSlugHeaderGramProject?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type GetDomainRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const GetDomainSecurity$inboundSchema: z.ZodType<
  GetDomainSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type GetDomainSecurity$Outbound = {
  "project_slug_header_Gram-Project"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const GetDomainSecurity$outboundSchema: z.ZodType<
  GetDomainSecurity$Outbound,
  z.ZodTypeDef,
  GetDomainSecurity
> = z.object({
  projectSlugHeaderGramProject: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDomainSecurity$ {
  /** @deprecated use `GetDomainSecurity$inboundSchema` instead. */
  export const inboundSchema = GetDomainSecurity$inboundSchema;
  /** @deprecated use `GetDomainSecurity$outboundSchema` instead. */
  export const outboundSchema = GetDomainSecurity$outboundSchema;
  /** @deprecated use `GetDomainSecurity$Outbound` instead. */
  export type Outbound = GetDomainSecurity$Outbound;
}

export function getDomainSecurityToJSON(
  getDomainSecurity: GetDomainSecurity,
): string {
  return JSON.stringify(
    GetDomainSecurity$outboundSchema.parse(getDomainSecurity),
  );
}

export function getDomainSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetDomainSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDomainSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDomainSecurity' from JSON`,
  );
}

/** @internal */
export const GetDomainRequest$inboundSchema: z.ZodType<
  GetDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type GetDomainRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const GetDomainRequest$outboundSchema: z.ZodType<
  GetDomainRequest$Outbound,
  z.ZodTypeDef,
  GetDomainRequest
> = z.object({
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDomainRequest$ {
  /** @deprecated use `GetDomainRequest$inboundSchema` instead. */
  export const inboundSchema = GetDomainRequest$inboundSchema;
  /** @deprecated use `GetDomainRequest$outboundSchema` instead. */
  export const outboundSchema = GetDomainRequest$outboundSchema;
  /** @deprecated use `GetDomainRequest$Outbound` instead. */
  export type Outbound = GetDomainRequest$Outbound;
}

export function getDomainRequestToJSON(
  getDomainRequest: GetDomainRequest,
): string {
  return JSON.stringify(
    GetDomainRequest$outboundSchema.parse(getDomainRequest),
  );
}

export function getDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDomainRequest' from JSON`,
  );
}
