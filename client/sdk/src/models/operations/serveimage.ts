/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServeImageSecurity = {
  apikeyHeaderGramKey?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type ServeImageRequest = {
  /**
   * The ID of the asset to serve
   */
  id: string;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * API Key header
   */
  gramKey?: string | undefined;
};

export type ServeImageResponse = {
  headers: { [k: string]: Array<string> };
  result: ReadableStream<Uint8Array>;
};

/** @internal */
export const ServeImageSecurity$inboundSchema: z.ZodType<
  ServeImageSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type ServeImageSecurity$Outbound = {
  "apikey_header_Gram-Key"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const ServeImageSecurity$outboundSchema: z.ZodType<
  ServeImageSecurity$Outbound,
  z.ZodTypeDef,
  ServeImageSecurity
> = z.object({
  apikeyHeaderGramKey: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServeImageSecurity$ {
  /** @deprecated use `ServeImageSecurity$inboundSchema` instead. */
  export const inboundSchema = ServeImageSecurity$inboundSchema;
  /** @deprecated use `ServeImageSecurity$outboundSchema` instead. */
  export const outboundSchema = ServeImageSecurity$outboundSchema;
  /** @deprecated use `ServeImageSecurity$Outbound` instead. */
  export type Outbound = ServeImageSecurity$Outbound;
}

export function serveImageSecurityToJSON(
  serveImageSecurity: ServeImageSecurity,
): string {
  return JSON.stringify(
    ServeImageSecurity$outboundSchema.parse(serveImageSecurity),
  );
}

export function serveImageSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ServeImageSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServeImageSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServeImageSecurity' from JSON`,
  );
}

/** @internal */
export const ServeImageRequest$inboundSchema: z.ZodType<
  ServeImageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "Gram-Session": z.string().optional(),
  "Gram-Key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Key": "gramKey",
  });
});

/** @internal */
export type ServeImageRequest$Outbound = {
  id: string;
  "Gram-Session"?: string | undefined;
  "Gram-Key"?: string | undefined;
};

/** @internal */
export const ServeImageRequest$outboundSchema: z.ZodType<
  ServeImageRequest$Outbound,
  z.ZodTypeDef,
  ServeImageRequest
> = z.object({
  id: z.string(),
  gramSession: z.string().optional(),
  gramKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramKey: "Gram-Key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServeImageRequest$ {
  /** @deprecated use `ServeImageRequest$inboundSchema` instead. */
  export const inboundSchema = ServeImageRequest$inboundSchema;
  /** @deprecated use `ServeImageRequest$outboundSchema` instead. */
  export const outboundSchema = ServeImageRequest$outboundSchema;
  /** @deprecated use `ServeImageRequest$Outbound` instead. */
  export type Outbound = ServeImageRequest$Outbound;
}

export function serveImageRequestToJSON(
  serveImageRequest: ServeImageRequest,
): string {
  return JSON.stringify(
    ServeImageRequest$outboundSchema.parse(serveImageRequest),
  );
}

export function serveImageRequestFromJSON(
  jsonString: string,
): SafeParseResult<ServeImageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServeImageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServeImageRequest' from JSON`,
  );
}

/** @internal */
export const ServeImageResponse$inboundSchema: z.ZodType<
  ServeImageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.instanceof(ReadableStream<Uint8Array>),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ServeImageResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: ReadableStream<Uint8Array>;
};

/** @internal */
export const ServeImageResponse$outboundSchema: z.ZodType<
  ServeImageResponse$Outbound,
  z.ZodTypeDef,
  ServeImageResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.instanceof(ReadableStream<Uint8Array>),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServeImageResponse$ {
  /** @deprecated use `ServeImageResponse$inboundSchema` instead. */
  export const inboundSchema = ServeImageResponse$inboundSchema;
  /** @deprecated use `ServeImageResponse$outboundSchema` instead. */
  export const outboundSchema = ServeImageResponse$outboundSchema;
  /** @deprecated use `ServeImageResponse$Outbound` instead. */
  export type Outbound = ServeImageResponse$Outbound;
}

export function serveImageResponseToJSON(
  serveImageResponse: ServeImageResponse,
): string {
  return JSON.stringify(
    ServeImageResponse$outboundSchema.parse(serveImageResponse),
  );
}

export function serveImageResponseFromJSON(
  jsonString: string,
): SafeParseResult<ServeImageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServeImageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServeImageResponse' from JSON`,
  );
}
