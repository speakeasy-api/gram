/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RegisterDomainSecurity = {
  projectSlugHeaderGramProject?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type RegisterDomainRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  createDomainRequestBody: components.CreateDomainRequestBody;
};

/** @internal */
export const RegisterDomainSecurity$inboundSchema: z.ZodType<
  RegisterDomainSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type RegisterDomainSecurity$Outbound = {
  "project_slug_header_Gram-Project"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const RegisterDomainSecurity$outboundSchema: z.ZodType<
  RegisterDomainSecurity$Outbound,
  z.ZodTypeDef,
  RegisterDomainSecurity
> = z.object({
  projectSlugHeaderGramProject: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterDomainSecurity$ {
  /** @deprecated use `RegisterDomainSecurity$inboundSchema` instead. */
  export const inboundSchema = RegisterDomainSecurity$inboundSchema;
  /** @deprecated use `RegisterDomainSecurity$outboundSchema` instead. */
  export const outboundSchema = RegisterDomainSecurity$outboundSchema;
  /** @deprecated use `RegisterDomainSecurity$Outbound` instead. */
  export type Outbound = RegisterDomainSecurity$Outbound;
}

export function registerDomainSecurityToJSON(
  registerDomainSecurity: RegisterDomainSecurity,
): string {
  return JSON.stringify(
    RegisterDomainSecurity$outboundSchema.parse(registerDomainSecurity),
  );
}

export function registerDomainSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RegisterDomainSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegisterDomainSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegisterDomainSecurity' from JSON`,
  );
}

/** @internal */
export const RegisterDomainRequest$inboundSchema: z.ZodType<
  RegisterDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  CreateDomainRequestBody: components.CreateDomainRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "CreateDomainRequestBody": "createDomainRequestBody",
  });
});

/** @internal */
export type RegisterDomainRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  CreateDomainRequestBody: components.CreateDomainRequestBody$Outbound;
};

/** @internal */
export const RegisterDomainRequest$outboundSchema: z.ZodType<
  RegisterDomainRequest$Outbound,
  z.ZodTypeDef,
  RegisterDomainRequest
> = z.object({
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  createDomainRequestBody: components.CreateDomainRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    createDomainRequestBody: "CreateDomainRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterDomainRequest$ {
  /** @deprecated use `RegisterDomainRequest$inboundSchema` instead. */
  export const inboundSchema = RegisterDomainRequest$inboundSchema;
  /** @deprecated use `RegisterDomainRequest$outboundSchema` instead. */
  export const outboundSchema = RegisterDomainRequest$outboundSchema;
  /** @deprecated use `RegisterDomainRequest$Outbound` instead. */
  export type Outbound = RegisterDomainRequest$Outbound;
}

export function registerDomainRequestToJSON(
  registerDomainRequest: RegisterDomainRequest,
): string {
  return JSON.stringify(
    RegisterDomainRequest$outboundSchema.parse(registerDomainRequest),
  );
}

export function registerDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<RegisterDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegisterDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegisterDomainRequest' from JSON`,
  );
}
