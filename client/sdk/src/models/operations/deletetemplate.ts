/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteTemplateSecurityOption1 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type DeleteTemplateSecurityOption2 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type DeleteTemplateSecurity = {
  option1?: DeleteTemplateSecurityOption1 | undefined;
  option2?: DeleteTemplateSecurityOption2 | undefined;
};

export type DeleteTemplateRequest = {
  /**
   * The ID of the prompt template
   */
  id?: string | undefined;
  /**
   * The name of the prompt template
   */
  name?: string | undefined;
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const DeleteTemplateSecurityOption1$inboundSchema: z.ZodType<
  DeleteTemplateSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type DeleteTemplateSecurityOption1$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const DeleteTemplateSecurityOption1$outboundSchema: z.ZodType<
  DeleteTemplateSecurityOption1$Outbound,
  z.ZodTypeDef,
  DeleteTemplateSecurityOption1
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTemplateSecurityOption1$ {
  /** @deprecated use `DeleteTemplateSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = DeleteTemplateSecurityOption1$inboundSchema;
  /** @deprecated use `DeleteTemplateSecurityOption1$outboundSchema` instead. */
  export const outboundSchema = DeleteTemplateSecurityOption1$outboundSchema;
  /** @deprecated use `DeleteTemplateSecurityOption1$Outbound` instead. */
  export type Outbound = DeleteTemplateSecurityOption1$Outbound;
}

export function deleteTemplateSecurityOption1ToJSON(
  deleteTemplateSecurityOption1: DeleteTemplateSecurityOption1,
): string {
  return JSON.stringify(
    DeleteTemplateSecurityOption1$outboundSchema.parse(
      deleteTemplateSecurityOption1,
    ),
  );
}

export function deleteTemplateSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<DeleteTemplateSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTemplateSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTemplateSecurityOption1' from JSON`,
  );
}

/** @internal */
export const DeleteTemplateSecurityOption2$inboundSchema: z.ZodType<
  DeleteTemplateSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type DeleteTemplateSecurityOption2$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const DeleteTemplateSecurityOption2$outboundSchema: z.ZodType<
  DeleteTemplateSecurityOption2$Outbound,
  z.ZodTypeDef,
  DeleteTemplateSecurityOption2
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTemplateSecurityOption2$ {
  /** @deprecated use `DeleteTemplateSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = DeleteTemplateSecurityOption2$inboundSchema;
  /** @deprecated use `DeleteTemplateSecurityOption2$outboundSchema` instead. */
  export const outboundSchema = DeleteTemplateSecurityOption2$outboundSchema;
  /** @deprecated use `DeleteTemplateSecurityOption2$Outbound` instead. */
  export type Outbound = DeleteTemplateSecurityOption2$Outbound;
}

export function deleteTemplateSecurityOption2ToJSON(
  deleteTemplateSecurityOption2: DeleteTemplateSecurityOption2,
): string {
  return JSON.stringify(
    DeleteTemplateSecurityOption2$outboundSchema.parse(
      deleteTemplateSecurityOption2,
    ),
  );
}

export function deleteTemplateSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<DeleteTemplateSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTemplateSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTemplateSecurityOption2' from JSON`,
  );
}

/** @internal */
export const DeleteTemplateSecurity$inboundSchema: z.ZodType<
  DeleteTemplateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => DeleteTemplateSecurityOption1$inboundSchema).optional(),
  Option2: z.lazy(() => DeleteTemplateSecurityOption2$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type DeleteTemplateSecurity$Outbound = {
  Option1?: DeleteTemplateSecurityOption1$Outbound | undefined;
  Option2?: DeleteTemplateSecurityOption2$Outbound | undefined;
};

/** @internal */
export const DeleteTemplateSecurity$outboundSchema: z.ZodType<
  DeleteTemplateSecurity$Outbound,
  z.ZodTypeDef,
  DeleteTemplateSecurity
> = z.object({
  option1: z.lazy(() => DeleteTemplateSecurityOption1$outboundSchema)
    .optional(),
  option2: z.lazy(() => DeleteTemplateSecurityOption2$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTemplateSecurity$ {
  /** @deprecated use `DeleteTemplateSecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteTemplateSecurity$inboundSchema;
  /** @deprecated use `DeleteTemplateSecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteTemplateSecurity$outboundSchema;
  /** @deprecated use `DeleteTemplateSecurity$Outbound` instead. */
  export type Outbound = DeleteTemplateSecurity$Outbound;
}

export function deleteTemplateSecurityToJSON(
  deleteTemplateSecurity: DeleteTemplateSecurity,
): string {
  return JSON.stringify(
    DeleteTemplateSecurity$outboundSchema.parse(deleteTemplateSecurity),
  );
}

export function deleteTemplateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTemplateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTemplateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTemplateSecurity' from JSON`,
  );
}

/** @internal */
export const DeleteTemplateRequest$inboundSchema: z.ZodType<
  DeleteTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  "Gram-Key": z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Key": "gramKey",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type DeleteTemplateRequest$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  "Gram-Key"?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const DeleteTemplateRequest$outboundSchema: z.ZodType<
  DeleteTemplateRequest$Outbound,
  z.ZodTypeDef,
  DeleteTemplateRequest
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  gramKey: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramKey: "Gram-Key",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTemplateRequest$ {
  /** @deprecated use `DeleteTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTemplateRequest$inboundSchema;
  /** @deprecated use `DeleteTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTemplateRequest$outboundSchema;
  /** @deprecated use `DeleteTemplateRequest$Outbound` instead. */
  export type Outbound = DeleteTemplateRequest$Outbound;
}

export function deleteTemplateRequestToJSON(
  deleteTemplateRequest: DeleteTemplateRequest,
): string {
  return JSON.stringify(
    DeleteTemplateRequest$outboundSchema.parse(deleteTemplateRequest),
  );
}

export function deleteTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTemplateRequest' from JSON`,
  );
}
