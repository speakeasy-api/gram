/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTemplateSecurityOption1 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type UpdateTemplateSecurityOption2 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type UpdateTemplateSecurity = {
  option1?: UpdateTemplateSecurityOption1 | undefined;
  option2?: UpdateTemplateSecurityOption2 | undefined;
};

export type UpdateTemplateRequest = {
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  updatePromptTemplateForm: components.UpdatePromptTemplateForm;
};

/** @internal */
export const UpdateTemplateSecurityOption1$inboundSchema: z.ZodType<
  UpdateTemplateSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type UpdateTemplateSecurityOption1$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const UpdateTemplateSecurityOption1$outboundSchema: z.ZodType<
  UpdateTemplateSecurityOption1$Outbound,
  z.ZodTypeDef,
  UpdateTemplateSecurityOption1
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTemplateSecurityOption1$ {
  /** @deprecated use `UpdateTemplateSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = UpdateTemplateSecurityOption1$inboundSchema;
  /** @deprecated use `UpdateTemplateSecurityOption1$outboundSchema` instead. */
  export const outboundSchema = UpdateTemplateSecurityOption1$outboundSchema;
  /** @deprecated use `UpdateTemplateSecurityOption1$Outbound` instead. */
  export type Outbound = UpdateTemplateSecurityOption1$Outbound;
}

export function updateTemplateSecurityOption1ToJSON(
  updateTemplateSecurityOption1: UpdateTemplateSecurityOption1,
): string {
  return JSON.stringify(
    UpdateTemplateSecurityOption1$outboundSchema.parse(
      updateTemplateSecurityOption1,
    ),
  );
}

export function updateTemplateSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateTemplateSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTemplateSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTemplateSecurityOption1' from JSON`,
  );
}

/** @internal */
export const UpdateTemplateSecurityOption2$inboundSchema: z.ZodType<
  UpdateTemplateSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type UpdateTemplateSecurityOption2$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const UpdateTemplateSecurityOption2$outboundSchema: z.ZodType<
  UpdateTemplateSecurityOption2$Outbound,
  z.ZodTypeDef,
  UpdateTemplateSecurityOption2
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTemplateSecurityOption2$ {
  /** @deprecated use `UpdateTemplateSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = UpdateTemplateSecurityOption2$inboundSchema;
  /** @deprecated use `UpdateTemplateSecurityOption2$outboundSchema` instead. */
  export const outboundSchema = UpdateTemplateSecurityOption2$outboundSchema;
  /** @deprecated use `UpdateTemplateSecurityOption2$Outbound` instead. */
  export type Outbound = UpdateTemplateSecurityOption2$Outbound;
}

export function updateTemplateSecurityOption2ToJSON(
  updateTemplateSecurityOption2: UpdateTemplateSecurityOption2,
): string {
  return JSON.stringify(
    UpdateTemplateSecurityOption2$outboundSchema.parse(
      updateTemplateSecurityOption2,
    ),
  );
}

export function updateTemplateSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateTemplateSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTemplateSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTemplateSecurityOption2' from JSON`,
  );
}

/** @internal */
export const UpdateTemplateSecurity$inboundSchema: z.ZodType<
  UpdateTemplateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => UpdateTemplateSecurityOption1$inboundSchema).optional(),
  Option2: z.lazy(() => UpdateTemplateSecurityOption2$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type UpdateTemplateSecurity$Outbound = {
  Option1?: UpdateTemplateSecurityOption1$Outbound | undefined;
  Option2?: UpdateTemplateSecurityOption2$Outbound | undefined;
};

/** @internal */
export const UpdateTemplateSecurity$outboundSchema: z.ZodType<
  UpdateTemplateSecurity$Outbound,
  z.ZodTypeDef,
  UpdateTemplateSecurity
> = z.object({
  option1: z.lazy(() => UpdateTemplateSecurityOption1$outboundSchema)
    .optional(),
  option2: z.lazy(() => UpdateTemplateSecurityOption2$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTemplateSecurity$ {
  /** @deprecated use `UpdateTemplateSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateTemplateSecurity$inboundSchema;
  /** @deprecated use `UpdateTemplateSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateTemplateSecurity$outboundSchema;
  /** @deprecated use `UpdateTemplateSecurity$Outbound` instead. */
  export type Outbound = UpdateTemplateSecurity$Outbound;
}

export function updateTemplateSecurityToJSON(
  updateTemplateSecurity: UpdateTemplateSecurity,
): string {
  return JSON.stringify(
    UpdateTemplateSecurity$outboundSchema.parse(updateTemplateSecurity),
  );
}

export function updateTemplateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTemplateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTemplateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTemplateSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateTemplateRequest$inboundSchema: z.ZodType<
  UpdateTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Key": z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  UpdatePromptTemplateForm: components.UpdatePromptTemplateForm$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Key": "gramKey",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "UpdatePromptTemplateForm": "updatePromptTemplateForm",
  });
});

/** @internal */
export type UpdateTemplateRequest$Outbound = {
  "Gram-Key"?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  UpdatePromptTemplateForm: components.UpdatePromptTemplateForm$Outbound;
};

/** @internal */
export const UpdateTemplateRequest$outboundSchema: z.ZodType<
  UpdateTemplateRequest$Outbound,
  z.ZodTypeDef,
  UpdateTemplateRequest
> = z.object({
  gramKey: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  updatePromptTemplateForm: components.UpdatePromptTemplateForm$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramKey: "Gram-Key",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    updatePromptTemplateForm: "UpdatePromptTemplateForm",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTemplateRequest$ {
  /** @deprecated use `UpdateTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTemplateRequest$inboundSchema;
  /** @deprecated use `UpdateTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTemplateRequest$outboundSchema;
  /** @deprecated use `UpdateTemplateRequest$Outbound` instead. */
  export type Outbound = UpdateTemplateRequest$Outbound;
}

export function updateTemplateRequestToJSON(
  updateTemplateRequest: UpdateTemplateRequest,
): string {
  return JSON.stringify(
    UpdateTemplateRequest$outboundSchema.parse(updateTemplateRequest),
  );
}

export function updateTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTemplateRequest' from JSON`,
  );
}
