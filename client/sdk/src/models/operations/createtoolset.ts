/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateToolsetSecurity = {
  projectSlugHeaderGramProject?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type CreateToolsetRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  createToolsetRequestBody: components.CreateToolsetRequestBody;
};

/** @internal */
export const CreateToolsetSecurity$inboundSchema: z.ZodType<
  CreateToolsetSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type CreateToolsetSecurity$Outbound = {
  "project_slug_header_Gram-Project"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const CreateToolsetSecurity$outboundSchema: z.ZodType<
  CreateToolsetSecurity$Outbound,
  z.ZodTypeDef,
  CreateToolsetSecurity
> = z.object({
  projectSlugHeaderGramProject: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateToolsetSecurity$ {
  /** @deprecated use `CreateToolsetSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateToolsetSecurity$inboundSchema;
  /** @deprecated use `CreateToolsetSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateToolsetSecurity$outboundSchema;
  /** @deprecated use `CreateToolsetSecurity$Outbound` instead. */
  export type Outbound = CreateToolsetSecurity$Outbound;
}

export function createToolsetSecurityToJSON(
  createToolsetSecurity: CreateToolsetSecurity,
): string {
  return JSON.stringify(
    CreateToolsetSecurity$outboundSchema.parse(createToolsetSecurity),
  );
}

export function createToolsetSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateToolsetSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateToolsetSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateToolsetSecurity' from JSON`,
  );
}

/** @internal */
export const CreateToolsetRequest$inboundSchema: z.ZodType<
  CreateToolsetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  CreateToolsetRequestBody: components.CreateToolsetRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "CreateToolsetRequestBody": "createToolsetRequestBody",
  });
});

/** @internal */
export type CreateToolsetRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  CreateToolsetRequestBody: components.CreateToolsetRequestBody$Outbound;
};

/** @internal */
export const CreateToolsetRequest$outboundSchema: z.ZodType<
  CreateToolsetRequest$Outbound,
  z.ZodTypeDef,
  CreateToolsetRequest
> = z.object({
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  createToolsetRequestBody: components.CreateToolsetRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    createToolsetRequestBody: "CreateToolsetRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateToolsetRequest$ {
  /** @deprecated use `CreateToolsetRequest$inboundSchema` instead. */
  export const inboundSchema = CreateToolsetRequest$inboundSchema;
  /** @deprecated use `CreateToolsetRequest$outboundSchema` instead. */
  export const outboundSchema = CreateToolsetRequest$outboundSchema;
  /** @deprecated use `CreateToolsetRequest$Outbound` instead. */
  export type Outbound = CreateToolsetRequest$Outbound;
}

export function createToolsetRequestToJSON(
  createToolsetRequest: CreateToolsetRequest,
): string {
  return JSON.stringify(
    CreateToolsetRequest$outboundSchema.parse(createToolsetRequest),
  );
}

export function createToolsetRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateToolsetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateToolsetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateToolsetRequest' from JSON`,
  );
}
