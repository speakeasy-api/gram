/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListGlobalVariationsSecurityOption1 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type ListGlobalVariationsSecurityOption2 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type ListGlobalVariationsSecurity = {
  option1?: ListGlobalVariationsSecurityOption1 | undefined;
  option2?: ListGlobalVariationsSecurityOption2 | undefined;
};

export type ListGlobalVariationsRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const ListGlobalVariationsSecurityOption1$inboundSchema: z.ZodType<
  ListGlobalVariationsSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type ListGlobalVariationsSecurityOption1$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const ListGlobalVariationsSecurityOption1$outboundSchema: z.ZodType<
  ListGlobalVariationsSecurityOption1$Outbound,
  z.ZodTypeDef,
  ListGlobalVariationsSecurityOption1
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListGlobalVariationsSecurityOption1$ {
  /** @deprecated use `ListGlobalVariationsSecurityOption1$inboundSchema` instead. */
  export const inboundSchema =
    ListGlobalVariationsSecurityOption1$inboundSchema;
  /** @deprecated use `ListGlobalVariationsSecurityOption1$outboundSchema` instead. */
  export const outboundSchema =
    ListGlobalVariationsSecurityOption1$outboundSchema;
  /** @deprecated use `ListGlobalVariationsSecurityOption1$Outbound` instead. */
  export type Outbound = ListGlobalVariationsSecurityOption1$Outbound;
}

export function listGlobalVariationsSecurityOption1ToJSON(
  listGlobalVariationsSecurityOption1: ListGlobalVariationsSecurityOption1,
): string {
  return JSON.stringify(
    ListGlobalVariationsSecurityOption1$outboundSchema.parse(
      listGlobalVariationsSecurityOption1,
    ),
  );
}

export function listGlobalVariationsSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<ListGlobalVariationsSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListGlobalVariationsSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListGlobalVariationsSecurityOption1' from JSON`,
  );
}

/** @internal */
export const ListGlobalVariationsSecurityOption2$inboundSchema: z.ZodType<
  ListGlobalVariationsSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type ListGlobalVariationsSecurityOption2$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const ListGlobalVariationsSecurityOption2$outboundSchema: z.ZodType<
  ListGlobalVariationsSecurityOption2$Outbound,
  z.ZodTypeDef,
  ListGlobalVariationsSecurityOption2
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListGlobalVariationsSecurityOption2$ {
  /** @deprecated use `ListGlobalVariationsSecurityOption2$inboundSchema` instead. */
  export const inboundSchema =
    ListGlobalVariationsSecurityOption2$inboundSchema;
  /** @deprecated use `ListGlobalVariationsSecurityOption2$outboundSchema` instead. */
  export const outboundSchema =
    ListGlobalVariationsSecurityOption2$outboundSchema;
  /** @deprecated use `ListGlobalVariationsSecurityOption2$Outbound` instead. */
  export type Outbound = ListGlobalVariationsSecurityOption2$Outbound;
}

export function listGlobalVariationsSecurityOption2ToJSON(
  listGlobalVariationsSecurityOption2: ListGlobalVariationsSecurityOption2,
): string {
  return JSON.stringify(
    ListGlobalVariationsSecurityOption2$outboundSchema.parse(
      listGlobalVariationsSecurityOption2,
    ),
  );
}

export function listGlobalVariationsSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<ListGlobalVariationsSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListGlobalVariationsSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListGlobalVariationsSecurityOption2' from JSON`,
  );
}

/** @internal */
export const ListGlobalVariationsSecurity$inboundSchema: z.ZodType<
  ListGlobalVariationsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => ListGlobalVariationsSecurityOption1$inboundSchema)
    .optional(),
  Option2: z.lazy(() => ListGlobalVariationsSecurityOption2$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type ListGlobalVariationsSecurity$Outbound = {
  Option1?: ListGlobalVariationsSecurityOption1$Outbound | undefined;
  Option2?: ListGlobalVariationsSecurityOption2$Outbound | undefined;
};

/** @internal */
export const ListGlobalVariationsSecurity$outboundSchema: z.ZodType<
  ListGlobalVariationsSecurity$Outbound,
  z.ZodTypeDef,
  ListGlobalVariationsSecurity
> = z.object({
  option1: z.lazy(() => ListGlobalVariationsSecurityOption1$outboundSchema)
    .optional(),
  option2: z.lazy(() => ListGlobalVariationsSecurityOption2$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListGlobalVariationsSecurity$ {
  /** @deprecated use `ListGlobalVariationsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListGlobalVariationsSecurity$inboundSchema;
  /** @deprecated use `ListGlobalVariationsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListGlobalVariationsSecurity$outboundSchema;
  /** @deprecated use `ListGlobalVariationsSecurity$Outbound` instead. */
  export type Outbound = ListGlobalVariationsSecurity$Outbound;
}

export function listGlobalVariationsSecurityToJSON(
  listGlobalVariationsSecurity: ListGlobalVariationsSecurity,
): string {
  return JSON.stringify(
    ListGlobalVariationsSecurity$outboundSchema.parse(
      listGlobalVariationsSecurity,
    ),
  );
}

export function listGlobalVariationsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListGlobalVariationsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListGlobalVariationsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListGlobalVariationsSecurity' from JSON`,
  );
}

/** @internal */
export const ListGlobalVariationsRequest$inboundSchema: z.ZodType<
  ListGlobalVariationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  "Gram-Key": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Key": "gramKey",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type ListGlobalVariationsRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  "Gram-Key"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const ListGlobalVariationsRequest$outboundSchema: z.ZodType<
  ListGlobalVariationsRequest$Outbound,
  z.ZodTypeDef,
  ListGlobalVariationsRequest
> = z.object({
  gramSession: z.string().optional(),
  gramKey: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramKey: "Gram-Key",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListGlobalVariationsRequest$ {
  /** @deprecated use `ListGlobalVariationsRequest$inboundSchema` instead. */
  export const inboundSchema = ListGlobalVariationsRequest$inboundSchema;
  /** @deprecated use `ListGlobalVariationsRequest$outboundSchema` instead. */
  export const outboundSchema = ListGlobalVariationsRequest$outboundSchema;
  /** @deprecated use `ListGlobalVariationsRequest$Outbound` instead. */
  export type Outbound = ListGlobalVariationsRequest$Outbound;
}

export function listGlobalVariationsRequestToJSON(
  listGlobalVariationsRequest: ListGlobalVariationsRequest,
): string {
  return JSON.stringify(
    ListGlobalVariationsRequest$outboundSchema.parse(
      listGlobalVariationsRequest,
    ),
  );
}

export function listGlobalVariationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListGlobalVariationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListGlobalVariationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListGlobalVariationsRequest' from JSON`,
  );
}
