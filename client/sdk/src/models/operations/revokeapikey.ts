/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RevokeAPIKeySecurity = {
  sessionHeaderGramSession?: string | undefined;
};

export type RevokeAPIKeyRequest = {
  /**
   * The ID of the key to revoke
   */
  id: string;
  /**
   * Session header
   */
  gramSession?: string | undefined;
};

/** @internal */
export const RevokeAPIKeySecurity$inboundSchema: z.ZodType<
  RevokeAPIKeySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type RevokeAPIKeySecurity$Outbound = {
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const RevokeAPIKeySecurity$outboundSchema: z.ZodType<
  RevokeAPIKeySecurity$Outbound,
  z.ZodTypeDef,
  RevokeAPIKeySecurity
> = z.object({
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevokeAPIKeySecurity$ {
  /** @deprecated use `RevokeAPIKeySecurity$inboundSchema` instead. */
  export const inboundSchema = RevokeAPIKeySecurity$inboundSchema;
  /** @deprecated use `RevokeAPIKeySecurity$outboundSchema` instead. */
  export const outboundSchema = RevokeAPIKeySecurity$outboundSchema;
  /** @deprecated use `RevokeAPIKeySecurity$Outbound` instead. */
  export type Outbound = RevokeAPIKeySecurity$Outbound;
}

export function revokeAPIKeySecurityToJSON(
  revokeAPIKeySecurity: RevokeAPIKeySecurity,
): string {
  return JSON.stringify(
    RevokeAPIKeySecurity$outboundSchema.parse(revokeAPIKeySecurity),
  );
}

export function revokeAPIKeySecurityFromJSON(
  jsonString: string,
): SafeParseResult<RevokeAPIKeySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RevokeAPIKeySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevokeAPIKeySecurity' from JSON`,
  );
}

/** @internal */
export const RevokeAPIKeyRequest$inboundSchema: z.ZodType<
  RevokeAPIKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
  });
});

/** @internal */
export type RevokeAPIKeyRequest$Outbound = {
  id: string;
  "Gram-Session"?: string | undefined;
};

/** @internal */
export const RevokeAPIKeyRequest$outboundSchema: z.ZodType<
  RevokeAPIKeyRequest$Outbound,
  z.ZodTypeDef,
  RevokeAPIKeyRequest
> = z.object({
  id: z.string(),
  gramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevokeAPIKeyRequest$ {
  /** @deprecated use `RevokeAPIKeyRequest$inboundSchema` instead. */
  export const inboundSchema = RevokeAPIKeyRequest$inboundSchema;
  /** @deprecated use `RevokeAPIKeyRequest$outboundSchema` instead. */
  export const outboundSchema = RevokeAPIKeyRequest$outboundSchema;
  /** @deprecated use `RevokeAPIKeyRequest$Outbound` instead. */
  export type Outbound = RevokeAPIKeyRequest$Outbound;
}

export function revokeAPIKeyRequestToJSON(
  revokeAPIKeyRequest: RevokeAPIKeyRequest,
): string {
  return JSON.stringify(
    RevokeAPIKeyRequest$outboundSchema.parse(revokeAPIKeyRequest),
  );
}

export function revokeAPIKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<RevokeAPIKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RevokeAPIKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevokeAPIKeyRequest' from JSON`,
  );
}
