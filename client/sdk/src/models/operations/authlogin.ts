/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AuthLoginRequest = {
  /**
   * Optional URL to redirect to after successful authentication
   */
  redirect?: string | undefined;
};

export type AuthLoginResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const AuthLoginRequest$inboundSchema: z.ZodType<
  AuthLoginRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  redirect: z.string().optional(),
});

/** @internal */
export type AuthLoginRequest$Outbound = {
  redirect?: string | undefined;
};

/** @internal */
export const AuthLoginRequest$outboundSchema: z.ZodType<
  AuthLoginRequest$Outbound,
  z.ZodTypeDef,
  AuthLoginRequest
> = z.object({
  redirect: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthLoginRequest$ {
  /** @deprecated use `AuthLoginRequest$inboundSchema` instead. */
  export const inboundSchema = AuthLoginRequest$inboundSchema;
  /** @deprecated use `AuthLoginRequest$outboundSchema` instead. */
  export const outboundSchema = AuthLoginRequest$outboundSchema;
  /** @deprecated use `AuthLoginRequest$Outbound` instead. */
  export type Outbound = AuthLoginRequest$Outbound;
}

export function authLoginRequestToJSON(
  authLoginRequest: AuthLoginRequest,
): string {
  return JSON.stringify(
    AuthLoginRequest$outboundSchema.parse(authLoginRequest),
  );
}

export function authLoginRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthLoginRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthLoginRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthLoginRequest' from JSON`,
  );
}

/** @internal */
export const AuthLoginResponse$inboundSchema: z.ZodType<
  AuthLoginResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type AuthLoginResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const AuthLoginResponse$outboundSchema: z.ZodType<
  AuthLoginResponse$Outbound,
  z.ZodTypeDef,
  AuthLoginResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthLoginResponse$ {
  /** @deprecated use `AuthLoginResponse$inboundSchema` instead. */
  export const inboundSchema = AuthLoginResponse$inboundSchema;
  /** @deprecated use `AuthLoginResponse$outboundSchema` instead. */
  export const outboundSchema = AuthLoginResponse$outboundSchema;
  /** @deprecated use `AuthLoginResponse$Outbound` instead. */
  export type Outbound = AuthLoginResponse$Outbound;
}

export function authLoginResponseToJSON(
  authLoginResponse: AuthLoginResponse,
): string {
  return JSON.stringify(
    AuthLoginResponse$outboundSchema.parse(authLoginResponse),
  );
}

export function authLoginResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthLoginResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthLoginResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthLoginResponse' from JSON`,
  );
}
