/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetInstallPageMetadataSecurity = {
  projectSlugHeaderGramProject?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type GetInstallPageMetadataRequest = {
  /**
   * The toolset associated with this install page metadata
   */
  toolsetId: string;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const GetInstallPageMetadataSecurity$inboundSchema: z.ZodType<
  GetInstallPageMetadataSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type GetInstallPageMetadataSecurity$Outbound = {
  "project_slug_header_Gram-Project"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const GetInstallPageMetadataSecurity$outboundSchema: z.ZodType<
  GetInstallPageMetadataSecurity$Outbound,
  z.ZodTypeDef,
  GetInstallPageMetadataSecurity
> = z.object({
  projectSlugHeaderGramProject: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallPageMetadataSecurity$ {
  /** @deprecated use `GetInstallPageMetadataSecurity$inboundSchema` instead. */
  export const inboundSchema = GetInstallPageMetadataSecurity$inboundSchema;
  /** @deprecated use `GetInstallPageMetadataSecurity$outboundSchema` instead. */
  export const outboundSchema = GetInstallPageMetadataSecurity$outboundSchema;
  /** @deprecated use `GetInstallPageMetadataSecurity$Outbound` instead. */
  export type Outbound = GetInstallPageMetadataSecurity$Outbound;
}

export function getInstallPageMetadataSecurityToJSON(
  getInstallPageMetadataSecurity: GetInstallPageMetadataSecurity,
): string {
  return JSON.stringify(
    GetInstallPageMetadataSecurity$outboundSchema.parse(
      getInstallPageMetadataSecurity,
    ),
  );
}

export function getInstallPageMetadataSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallPageMetadataSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstallPageMetadataSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallPageMetadataSecurity' from JSON`,
  );
}

/** @internal */
export const GetInstallPageMetadataRequest$inboundSchema: z.ZodType<
  GetInstallPageMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  toolset_id: z.string(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "toolset_id": "toolsetId",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type GetInstallPageMetadataRequest$Outbound = {
  toolset_id: string;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const GetInstallPageMetadataRequest$outboundSchema: z.ZodType<
  GetInstallPageMetadataRequest$Outbound,
  z.ZodTypeDef,
  GetInstallPageMetadataRequest
> = z.object({
  toolsetId: z.string(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolsetId: "toolset_id",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallPageMetadataRequest$ {
  /** @deprecated use `GetInstallPageMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = GetInstallPageMetadataRequest$inboundSchema;
  /** @deprecated use `GetInstallPageMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = GetInstallPageMetadataRequest$outboundSchema;
  /** @deprecated use `GetInstallPageMetadataRequest$Outbound` instead. */
  export type Outbound = GetInstallPageMetadataRequest$Outbound;
}

export function getInstallPageMetadataRequestToJSON(
  getInstallPageMetadataRequest: GetInstallPageMetadataRequest,
): string {
  return JSON.stringify(
    GetInstallPageMetadataRequest$outboundSchema.parse(
      getInstallPageMetadataRequest,
    ),
  );
}

export function getInstallPageMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallPageMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstallPageMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallPageMetadataRequest' from JSON`,
  );
}
