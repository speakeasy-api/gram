/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddExternalOAuthServerSecurity = {
  projectSlugHeaderGramProject?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type AddExternalOAuthServerRequest = {
  /**
   * The slug of the toolset to update
   */
  slug: string;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  addExternalOAuthServerRequestBody:
    components.AddExternalOAuthServerRequestBody;
};

/** @internal */
export const AddExternalOAuthServerSecurity$inboundSchema: z.ZodType<
  AddExternalOAuthServerSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type AddExternalOAuthServerSecurity$Outbound = {
  "project_slug_header_Gram-Project"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const AddExternalOAuthServerSecurity$outboundSchema: z.ZodType<
  AddExternalOAuthServerSecurity$Outbound,
  z.ZodTypeDef,
  AddExternalOAuthServerSecurity
> = z.object({
  projectSlugHeaderGramProject: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddExternalOAuthServerSecurity$ {
  /** @deprecated use `AddExternalOAuthServerSecurity$inboundSchema` instead. */
  export const inboundSchema = AddExternalOAuthServerSecurity$inboundSchema;
  /** @deprecated use `AddExternalOAuthServerSecurity$outboundSchema` instead. */
  export const outboundSchema = AddExternalOAuthServerSecurity$outboundSchema;
  /** @deprecated use `AddExternalOAuthServerSecurity$Outbound` instead. */
  export type Outbound = AddExternalOAuthServerSecurity$Outbound;
}

export function addExternalOAuthServerSecurityToJSON(
  addExternalOAuthServerSecurity: AddExternalOAuthServerSecurity,
): string {
  return JSON.stringify(
    AddExternalOAuthServerSecurity$outboundSchema.parse(
      addExternalOAuthServerSecurity,
    ),
  );
}

export function addExternalOAuthServerSecurityFromJSON(
  jsonString: string,
): SafeParseResult<AddExternalOAuthServerSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddExternalOAuthServerSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddExternalOAuthServerSecurity' from JSON`,
  );
}

/** @internal */
export const AddExternalOAuthServerRequest$inboundSchema: z.ZodType<
  AddExternalOAuthServerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  AddExternalOAuthServerRequestBody:
    components.AddExternalOAuthServerRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "AddExternalOAuthServerRequestBody": "addExternalOAuthServerRequestBody",
  });
});

/** @internal */
export type AddExternalOAuthServerRequest$Outbound = {
  slug: string;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  AddExternalOAuthServerRequestBody:
    components.AddExternalOAuthServerRequestBody$Outbound;
};

/** @internal */
export const AddExternalOAuthServerRequest$outboundSchema: z.ZodType<
  AddExternalOAuthServerRequest$Outbound,
  z.ZodTypeDef,
  AddExternalOAuthServerRequest
> = z.object({
  slug: z.string(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  addExternalOAuthServerRequestBody:
    components.AddExternalOAuthServerRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    addExternalOAuthServerRequestBody: "AddExternalOAuthServerRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddExternalOAuthServerRequest$ {
  /** @deprecated use `AddExternalOAuthServerRequest$inboundSchema` instead. */
  export const inboundSchema = AddExternalOAuthServerRequest$inboundSchema;
  /** @deprecated use `AddExternalOAuthServerRequest$outboundSchema` instead. */
  export const outboundSchema = AddExternalOAuthServerRequest$outboundSchema;
  /** @deprecated use `AddExternalOAuthServerRequest$Outbound` instead. */
  export type Outbound = AddExternalOAuthServerRequest$Outbound;
}

export function addExternalOAuthServerRequestToJSON(
  addExternalOAuthServerRequest: AddExternalOAuthServerRequest,
): string {
  return JSON.stringify(
    AddExternalOAuthServerRequest$outboundSchema.parse(
      addExternalOAuthServerRequest,
    ),
  );
}

export function addExternalOAuthServerRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddExternalOAuthServerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddExternalOAuthServerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddExternalOAuthServerRequest' from JSON`,
  );
}
