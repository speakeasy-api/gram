/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPackagesSecurityOption1 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type ListPackagesSecurityOption2 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type ListPackagesSecurity = {
  option1?: ListPackagesSecurityOption1 | undefined;
  option2?: ListPackagesSecurityOption2 | undefined;
};

export type ListPackagesRequest = {
  /**
   * API Key header
   */
  gramKey?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const ListPackagesSecurityOption1$inboundSchema: z.ZodType<
  ListPackagesSecurityOption1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "apikey_header_Gram-Key": z.string(),
  "project_slug_header_Gram-Project": z.string(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Gram-Key": "apikeyHeaderGramKey",
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
  });
});

/** @internal */
export type ListPackagesSecurityOption1$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const ListPackagesSecurityOption1$outboundSchema: z.ZodType<
  ListPackagesSecurityOption1$Outbound,
  z.ZodTypeDef,
  ListPackagesSecurityOption1
> = z.object({
  apikeyHeaderGramKey: z.string(),
  projectSlugHeaderGramProject: z.string(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderGramKey: "apikey_header_Gram-Key",
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPackagesSecurityOption1$ {
  /** @deprecated use `ListPackagesSecurityOption1$inboundSchema` instead. */
  export const inboundSchema = ListPackagesSecurityOption1$inboundSchema;
  /** @deprecated use `ListPackagesSecurityOption1$outboundSchema` instead. */
  export const outboundSchema = ListPackagesSecurityOption1$outboundSchema;
  /** @deprecated use `ListPackagesSecurityOption1$Outbound` instead. */
  export type Outbound = ListPackagesSecurityOption1$Outbound;
}

export function listPackagesSecurityOption1ToJSON(
  listPackagesSecurityOption1: ListPackagesSecurityOption1,
): string {
  return JSON.stringify(
    ListPackagesSecurityOption1$outboundSchema.parse(
      listPackagesSecurityOption1,
    ),
  );
}

export function listPackagesSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<ListPackagesSecurityOption1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPackagesSecurityOption1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPackagesSecurityOption1' from JSON`,
  );
}

/** @internal */
export const ListPackagesSecurityOption2$inboundSchema: z.ZodType<
  ListPackagesSecurityOption2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string(),
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type ListPackagesSecurityOption2$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const ListPackagesSecurityOption2$outboundSchema: z.ZodType<
  ListPackagesSecurityOption2$Outbound,
  z.ZodTypeDef,
  ListPackagesSecurityOption2
> = z.object({
  projectSlugHeaderGramProject: z.string(),
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPackagesSecurityOption2$ {
  /** @deprecated use `ListPackagesSecurityOption2$inboundSchema` instead. */
  export const inboundSchema = ListPackagesSecurityOption2$inboundSchema;
  /** @deprecated use `ListPackagesSecurityOption2$outboundSchema` instead. */
  export const outboundSchema = ListPackagesSecurityOption2$outboundSchema;
  /** @deprecated use `ListPackagesSecurityOption2$Outbound` instead. */
  export type Outbound = ListPackagesSecurityOption2$Outbound;
}

export function listPackagesSecurityOption2ToJSON(
  listPackagesSecurityOption2: ListPackagesSecurityOption2,
): string {
  return JSON.stringify(
    ListPackagesSecurityOption2$outboundSchema.parse(
      listPackagesSecurityOption2,
    ),
  );
}

export function listPackagesSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<ListPackagesSecurityOption2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPackagesSecurityOption2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPackagesSecurityOption2' from JSON`,
  );
}

/** @internal */
export const ListPackagesSecurity$inboundSchema: z.ZodType<
  ListPackagesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() => ListPackagesSecurityOption1$inboundSchema).optional(),
  Option2: z.lazy(() => ListPackagesSecurityOption2$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type ListPackagesSecurity$Outbound = {
  Option1?: ListPackagesSecurityOption1$Outbound | undefined;
  Option2?: ListPackagesSecurityOption2$Outbound | undefined;
};

/** @internal */
export const ListPackagesSecurity$outboundSchema: z.ZodType<
  ListPackagesSecurity$Outbound,
  z.ZodTypeDef,
  ListPackagesSecurity
> = z.object({
  option1: z.lazy(() => ListPackagesSecurityOption1$outboundSchema).optional(),
  option2: z.lazy(() => ListPackagesSecurityOption2$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPackagesSecurity$ {
  /** @deprecated use `ListPackagesSecurity$inboundSchema` instead. */
  export const inboundSchema = ListPackagesSecurity$inboundSchema;
  /** @deprecated use `ListPackagesSecurity$outboundSchema` instead. */
  export const outboundSchema = ListPackagesSecurity$outboundSchema;
  /** @deprecated use `ListPackagesSecurity$Outbound` instead. */
  export type Outbound = ListPackagesSecurity$Outbound;
}

export function listPackagesSecurityToJSON(
  listPackagesSecurity: ListPackagesSecurity,
): string {
  return JSON.stringify(
    ListPackagesSecurity$outboundSchema.parse(listPackagesSecurity),
  );
}

export function listPackagesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListPackagesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPackagesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPackagesSecurity' from JSON`,
  );
}

/** @internal */
export const ListPackagesRequest$inboundSchema: z.ZodType<
  ListPackagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Key": z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Key": "gramKey",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type ListPackagesRequest$Outbound = {
  "Gram-Key"?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const ListPackagesRequest$outboundSchema: z.ZodType<
  ListPackagesRequest$Outbound,
  z.ZodTypeDef,
  ListPackagesRequest
> = z.object({
  gramKey: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramKey: "Gram-Key",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPackagesRequest$ {
  /** @deprecated use `ListPackagesRequest$inboundSchema` instead. */
  export const inboundSchema = ListPackagesRequest$inboundSchema;
  /** @deprecated use `ListPackagesRequest$outboundSchema` instead. */
  export const outboundSchema = ListPackagesRequest$outboundSchema;
  /** @deprecated use `ListPackagesRequest$Outbound` instead. */
  export type Outbound = ListPackagesRequest$Outbound;
}

export function listPackagesRequestToJSON(
  listPackagesRequest: ListPackagesRequest,
): string {
  return JSON.stringify(
    ListPackagesRequest$outboundSchema.parse(listPackagesRequest),
  );
}

export function listPackagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPackagesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPackagesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPackagesRequest' from JSON`,
  );
}
