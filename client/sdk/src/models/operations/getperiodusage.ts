/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPeriodUsageSecurity = {
  projectSlugHeaderGramProject?: string | undefined;
  sessionHeaderGramSession?: string | undefined;
};

export type GetPeriodUsageRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const GetPeriodUsageSecurity$inboundSchema: z.ZodType<
  GetPeriodUsageSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "project_slug_header_Gram-Project": z.string().optional(),
  "session_header_Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type GetPeriodUsageSecurity$Outbound = {
  "project_slug_header_Gram-Project"?: string | undefined;
  "session_header_Gram-Session"?: string | undefined;
};

/** @internal */
export const GetPeriodUsageSecurity$outboundSchema: z.ZodType<
  GetPeriodUsageSecurity$Outbound,
  z.ZodTypeDef,
  GetPeriodUsageSecurity
> = z.object({
  projectSlugHeaderGramProject: z.string().optional(),
  sessionHeaderGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPeriodUsageSecurity$ {
  /** @deprecated use `GetPeriodUsageSecurity$inboundSchema` instead. */
  export const inboundSchema = GetPeriodUsageSecurity$inboundSchema;
  /** @deprecated use `GetPeriodUsageSecurity$outboundSchema` instead. */
  export const outboundSchema = GetPeriodUsageSecurity$outboundSchema;
  /** @deprecated use `GetPeriodUsageSecurity$Outbound` instead. */
  export type Outbound = GetPeriodUsageSecurity$Outbound;
}

export function getPeriodUsageSecurityToJSON(
  getPeriodUsageSecurity: GetPeriodUsageSecurity,
): string {
  return JSON.stringify(
    GetPeriodUsageSecurity$outboundSchema.parse(getPeriodUsageSecurity),
  );
}

export function getPeriodUsageSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetPeriodUsageSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPeriodUsageSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPeriodUsageSecurity' from JSON`,
  );
}

/** @internal */
export const GetPeriodUsageRequest$inboundSchema: z.ZodType<
  GetPeriodUsageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type GetPeriodUsageRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const GetPeriodUsageRequest$outboundSchema: z.ZodType<
  GetPeriodUsageRequest$Outbound,
  z.ZodTypeDef,
  GetPeriodUsageRequest
> = z.object({
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPeriodUsageRequest$ {
  /** @deprecated use `GetPeriodUsageRequest$inboundSchema` instead. */
  export const inboundSchema = GetPeriodUsageRequest$inboundSchema;
  /** @deprecated use `GetPeriodUsageRequest$outboundSchema` instead. */
  export const outboundSchema = GetPeriodUsageRequest$outboundSchema;
  /** @deprecated use `GetPeriodUsageRequest$Outbound` instead. */
  export type Outbound = GetPeriodUsageRequest$Outbound;
}

export function getPeriodUsageRequestToJSON(
  getPeriodUsageRequest: GetPeriodUsageRequest,
): string {
  return JSON.stringify(
    GetPeriodUsageRequest$outboundSchema.parse(getPeriodUsageRequest),
  );
}

export function getPeriodUsageRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPeriodUsageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPeriodUsageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPeriodUsageRequest' from JSON`,
  );
}
