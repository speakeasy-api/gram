/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AddDeploymentPackageForm,
  AddDeploymentPackageForm$inboundSchema,
  AddDeploymentPackageForm$Outbound,
  AddDeploymentPackageForm$outboundSchema,
} from "./adddeploymentpackageform.js";
import {
  AddFunctionsForm,
  AddFunctionsForm$inboundSchema,
  AddFunctionsForm$Outbound,
  AddFunctionsForm$outboundSchema,
} from "./addfunctionsform.js";
import {
  AddOpenAPIv3DeploymentAssetForm,
  AddOpenAPIv3DeploymentAssetForm$inboundSchema,
  AddOpenAPIv3DeploymentAssetForm$Outbound,
  AddOpenAPIv3DeploymentAssetForm$outboundSchema,
} from "./addopenapiv3deploymentassetform.js";

export type CreateDeploymentRequestBody = {
  /**
   * The external ID to refer to the deployment. This can be a git commit hash for example.
   */
  externalId?: string | undefined;
  /**
   * The upstream URL a deployment can refer to. This can be a github url to a commit hash or pull request.
   */
  externalUrl?: string | undefined;
  functions?: Array<AddFunctionsForm> | undefined;
  /**
   * The github pull request that resulted in the deployment.
   */
  githubPr?: string | undefined;
  /**
   * The github repository in the form of "owner/repo".
   */
  githubRepo?: string | undefined;
  /**
   * The commit hash that triggered the deployment.
   */
  githubSha?: string | undefined;
  openapiv3Assets?: Array<AddOpenAPIv3DeploymentAssetForm> | undefined;
  packages?: Array<AddDeploymentPackageForm> | undefined;
};

/** @internal */
export const CreateDeploymentRequestBody$inboundSchema: z.ZodType<
  CreateDeploymentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string().optional(),
  external_url: z.string().optional(),
  functions: z.array(AddFunctionsForm$inboundSchema).optional(),
  github_pr: z.string().optional(),
  github_repo: z.string().optional(),
  github_sha: z.string().optional(),
  openapiv3_assets: z.array(AddOpenAPIv3DeploymentAssetForm$inboundSchema)
    .optional(),
  packages: z.array(AddDeploymentPackageForm$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "external_url": "externalUrl",
    "github_pr": "githubPr",
    "github_repo": "githubRepo",
    "github_sha": "githubSha",
    "openapiv3_assets": "openapiv3Assets",
  });
});

/** @internal */
export type CreateDeploymentRequestBody$Outbound = {
  external_id?: string | undefined;
  external_url?: string | undefined;
  functions?: Array<AddFunctionsForm$Outbound> | undefined;
  github_pr?: string | undefined;
  github_repo?: string | undefined;
  github_sha?: string | undefined;
  openapiv3_assets?:
    | Array<AddOpenAPIv3DeploymentAssetForm$Outbound>
    | undefined;
  packages?: Array<AddDeploymentPackageForm$Outbound> | undefined;
};

/** @internal */
export const CreateDeploymentRequestBody$outboundSchema: z.ZodType<
  CreateDeploymentRequestBody$Outbound,
  z.ZodTypeDef,
  CreateDeploymentRequestBody
> = z.object({
  externalId: z.string().optional(),
  externalUrl: z.string().optional(),
  functions: z.array(AddFunctionsForm$outboundSchema).optional(),
  githubPr: z.string().optional(),
  githubRepo: z.string().optional(),
  githubSha: z.string().optional(),
  openapiv3Assets: z.array(AddOpenAPIv3DeploymentAssetForm$outboundSchema)
    .optional(),
  packages: z.array(AddDeploymentPackageForm$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    externalUrl: "external_url",
    githubPr: "github_pr",
    githubRepo: "github_repo",
    githubSha: "github_sha",
    openapiv3Assets: "openapiv3_assets",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDeploymentRequestBody$ {
  /** @deprecated use `CreateDeploymentRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateDeploymentRequestBody$inboundSchema;
  /** @deprecated use `CreateDeploymentRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateDeploymentRequestBody$outboundSchema;
  /** @deprecated use `CreateDeploymentRequestBody$Outbound` instead. */
  export type Outbound = CreateDeploymentRequestBody$Outbound;
}

export function createDeploymentRequestBodyToJSON(
  createDeploymentRequestBody: CreateDeploymentRequestBody,
): string {
  return JSON.stringify(
    CreateDeploymentRequestBody$outboundSchema.parse(
      createDeploymentRequestBody,
    ),
  );
}

export function createDeploymentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateDeploymentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDeploymentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDeploymentRequestBody' from JSON`,
  );
}
