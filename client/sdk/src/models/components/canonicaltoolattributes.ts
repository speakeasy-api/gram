/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The original details of a tool
 */
export type CanonicalToolAttributes = {
  /**
   * Confirmation mode for the tool
   */
  confirm?: string | undefined;
  /**
   * Prompt for the confirmation
   */
  confirmPrompt?: string | undefined;
  /**
   * Description of the tool
   */
  description: string;
  /**
   * The name of the tool
   */
  name: string;
  /**
   * Summarizer for the tool
   */
  summarizer?: string | undefined;
  /**
   * The ID of the variation that was applied to the tool
   */
  variationId: string;
};

/** @internal */
export const CanonicalToolAttributes$inboundSchema: z.ZodType<
  CanonicalToolAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  confirm: z.string().optional(),
  confirm_prompt: z.string().optional(),
  description: z.string(),
  name: z.string(),
  summarizer: z.string().optional(),
  variation_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "confirm_prompt": "confirmPrompt",
    "variation_id": "variationId",
  });
});

/** @internal */
export type CanonicalToolAttributes$Outbound = {
  confirm?: string | undefined;
  confirm_prompt?: string | undefined;
  description: string;
  name: string;
  summarizer?: string | undefined;
  variation_id: string;
};

/** @internal */
export const CanonicalToolAttributes$outboundSchema: z.ZodType<
  CanonicalToolAttributes$Outbound,
  z.ZodTypeDef,
  CanonicalToolAttributes
> = z.object({
  confirm: z.string().optional(),
  confirmPrompt: z.string().optional(),
  description: z.string(),
  name: z.string(),
  summarizer: z.string().optional(),
  variationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    confirmPrompt: "confirm_prompt",
    variationId: "variation_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CanonicalToolAttributes$ {
  /** @deprecated use `CanonicalToolAttributes$inboundSchema` instead. */
  export const inboundSchema = CanonicalToolAttributes$inboundSchema;
  /** @deprecated use `CanonicalToolAttributes$outboundSchema` instead. */
  export const outboundSchema = CanonicalToolAttributes$outboundSchema;
  /** @deprecated use `CanonicalToolAttributes$Outbound` instead. */
  export type Outbound = CanonicalToolAttributes$Outbound;
}

export function canonicalToolAttributesToJSON(
  canonicalToolAttributes: CanonicalToolAttributes,
): string {
  return JSON.stringify(
    CanonicalToolAttributes$outboundSchema.parse(canonicalToolAttributes),
  );
}

export function canonicalToolAttributesFromJSON(
  jsonString: string,
): SafeParseResult<CanonicalToolAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CanonicalToolAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CanonicalToolAttributes' from JSON`,
  );
}
