/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Environment,
  Environment$inboundSchema,
  Environment$Outbound,
  Environment$outboundSchema,
} from "./environment.js";

/**
 * Result type for listing environments
 */
export type ListEnvironmentsResult = {
  environments: Array<Environment>;
};

/** @internal */
export const ListEnvironmentsResult$inboundSchema: z.ZodType<
  ListEnvironmentsResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.array(Environment$inboundSchema),
});

/** @internal */
export type ListEnvironmentsResult$Outbound = {
  environments: Array<Environment$Outbound>;
};

/** @internal */
export const ListEnvironmentsResult$outboundSchema: z.ZodType<
  ListEnvironmentsResult$Outbound,
  z.ZodTypeDef,
  ListEnvironmentsResult
> = z.object({
  environments: z.array(Environment$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEnvironmentsResult$ {
  /** @deprecated use `ListEnvironmentsResult$inboundSchema` instead. */
  export const inboundSchema = ListEnvironmentsResult$inboundSchema;
  /** @deprecated use `ListEnvironmentsResult$outboundSchema` instead. */
  export const outboundSchema = ListEnvironmentsResult$outboundSchema;
  /** @deprecated use `ListEnvironmentsResult$Outbound` instead. */
  export type Outbound = ListEnvironmentsResult$Outbound;
}

export function listEnvironmentsResultToJSON(
  listEnvironmentsResult: ListEnvironmentsResult,
): string {
  return JSON.stringify(
    ListEnvironmentsResult$outboundSchema.parse(listEnvironmentsResult),
  );
}

export function listEnvironmentsResultFromJSON(
  jsonString: string,
): SafeParseResult<ListEnvironmentsResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEnvironmentsResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEnvironmentsResult' from JSON`,
  );
}
