/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HTTPToolDefinition,
  HTTPToolDefinition$inboundSchema,
  HTTPToolDefinition$Outbound,
  HTTPToolDefinition$outboundSchema,
} from "./httptooldefinition.js";
import {
  PromptTemplate,
  PromptTemplate$inboundSchema,
  PromptTemplate$Outbound,
  PromptTemplate$outboundSchema,
} from "./prompttemplate.js";

export type ListToolsResult = {
  /**
   * The list of HTTP tools
   */
  httpTools: Array<HTTPToolDefinition>;
  /**
   * The cursor to fetch results from
   */
  nextCursor?: string | undefined;
  /**
   * The list of prompt templates
   */
  promptTemplates: Array<PromptTemplate>;
};

/** @internal */
export const ListToolsResult$inboundSchema: z.ZodType<
  ListToolsResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  http_tools: z.array(HTTPToolDefinition$inboundSchema),
  next_cursor: z.string().optional(),
  prompt_templates: z.array(PromptTemplate$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "http_tools": "httpTools",
    "next_cursor": "nextCursor",
    "prompt_templates": "promptTemplates",
  });
});

/** @internal */
export type ListToolsResult$Outbound = {
  http_tools: Array<HTTPToolDefinition$Outbound>;
  next_cursor?: string | undefined;
  prompt_templates: Array<PromptTemplate$Outbound>;
};

/** @internal */
export const ListToolsResult$outboundSchema: z.ZodType<
  ListToolsResult$Outbound,
  z.ZodTypeDef,
  ListToolsResult
> = z.object({
  httpTools: z.array(HTTPToolDefinition$outboundSchema),
  nextCursor: z.string().optional(),
  promptTemplates: z.array(PromptTemplate$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    httpTools: "http_tools",
    nextCursor: "next_cursor",
    promptTemplates: "prompt_templates",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListToolsResult$ {
  /** @deprecated use `ListToolsResult$inboundSchema` instead. */
  export const inboundSchema = ListToolsResult$inboundSchema;
  /** @deprecated use `ListToolsResult$outboundSchema` instead. */
  export const outboundSchema = ListToolsResult$outboundSchema;
  /** @deprecated use `ListToolsResult$Outbound` instead. */
  export type Outbound = ListToolsResult$Outbound;
}

export function listToolsResultToJSON(
  listToolsResult: ListToolsResult,
): string {
  return JSON.stringify(ListToolsResult$outboundSchema.parse(listToolsResult));
}

export function listToolsResultFromJSON(
  jsonString: string,
): SafeParseResult<ListToolsResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListToolsResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListToolsResult' from JSON`,
  );
}
