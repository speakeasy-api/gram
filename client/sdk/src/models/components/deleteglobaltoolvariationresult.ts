/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteGlobalToolVariationResult = {
  /**
   * The ID of the variation that was deleted
   */
  variationId: string;
};

/** @internal */
export const DeleteGlobalToolVariationResult$inboundSchema: z.ZodType<
  DeleteGlobalToolVariationResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  variation_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "variation_id": "variationId",
  });
});

/** @internal */
export type DeleteGlobalToolVariationResult$Outbound = {
  variation_id: string;
};

/** @internal */
export const DeleteGlobalToolVariationResult$outboundSchema: z.ZodType<
  DeleteGlobalToolVariationResult$Outbound,
  z.ZodTypeDef,
  DeleteGlobalToolVariationResult
> = z.object({
  variationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    variationId: "variation_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteGlobalToolVariationResult$ {
  /** @deprecated use `DeleteGlobalToolVariationResult$inboundSchema` instead. */
  export const inboundSchema = DeleteGlobalToolVariationResult$inboundSchema;
  /** @deprecated use `DeleteGlobalToolVariationResult$outboundSchema` instead. */
  export const outboundSchema = DeleteGlobalToolVariationResult$outboundSchema;
  /** @deprecated use `DeleteGlobalToolVariationResult$Outbound` instead. */
  export type Outbound = DeleteGlobalToolVariationResult$Outbound;
}

export function deleteGlobalToolVariationResultToJSON(
  deleteGlobalToolVariationResult: DeleteGlobalToolVariationResult,
): string {
  return JSON.stringify(
    DeleteGlobalToolVariationResult$outboundSchema.parse(
      deleteGlobalToolVariationResult,
    ),
  );
}

export function deleteGlobalToolVariationResultFromJSON(
  jsonString: string,
): SafeParseResult<DeleteGlobalToolVariationResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteGlobalToolVariationResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteGlobalToolVariationResult' from JSON`,
  );
}
