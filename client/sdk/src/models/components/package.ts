/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Package = {
  /**
   * The creation date of the package
   */
  createdAt: Date;
  /**
   * The deletion date of the package
   */
  deletedAt?: Date | undefined;
  /**
   * The description of the package. This contains HTML content.
   */
  description?: string | undefined;
  /**
   * The unsanitized, user-supplied description of the package. Limited markdown syntax is supported.
   */
  descriptionRaw?: string | undefined;
  /**
   * The ID of the package
   */
  id: string;
  /**
   * The asset ID of the image to show for this package
   */
  imageAssetId?: string | undefined;
  /**
   * The keywords of the package
   */
  keywords?: Array<string> | undefined;
  /**
   * The latest version of the package
   */
  latestVersion?: string | undefined;
  /**
   * The name of the package
   */
  name: string;
  /**
   * The ID of the organization that owns the package
   */
  organizationId: string;
  /**
   * The ID of the project that owns the package
   */
  projectId: string;
  /**
   * The summary of the package
   */
  summary?: string | undefined;
  /**
   * The title of the package
   */
  title?: string | undefined;
  /**
   * The last update date of the package
   */
  updatedAt: Date;
  /**
   * External URL for the package owner
   */
  url?: string | undefined;
};

/** @internal */
export const Package$inboundSchema: z.ZodType<Package, z.ZodTypeDef, unknown> =
  z.object({
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    deleted_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    description: z.string().optional(),
    description_raw: z.string().optional(),
    id: z.string(),
    image_asset_id: z.string().optional(),
    keywords: z.array(z.string()).optional(),
    latest_version: z.string().optional(),
    name: z.string(),
    organization_id: z.string(),
    project_id: z.string(),
    summary: z.string().optional(),
    title: z.string().optional(),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    url: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "deleted_at": "deletedAt",
      "description_raw": "descriptionRaw",
      "image_asset_id": "imageAssetId",
      "latest_version": "latestVersion",
      "organization_id": "organizationId",
      "project_id": "projectId",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Package$Outbound = {
  created_at: string;
  deleted_at?: string | undefined;
  description?: string | undefined;
  description_raw?: string | undefined;
  id: string;
  image_asset_id?: string | undefined;
  keywords?: Array<string> | undefined;
  latest_version?: string | undefined;
  name: string;
  organization_id: string;
  project_id: string;
  summary?: string | undefined;
  title?: string | undefined;
  updated_at: string;
  url?: string | undefined;
};

/** @internal */
export const Package$outboundSchema: z.ZodType<
  Package$Outbound,
  z.ZodTypeDef,
  Package
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
  description: z.string().optional(),
  descriptionRaw: z.string().optional(),
  id: z.string(),
  imageAssetId: z.string().optional(),
  keywords: z.array(z.string()).optional(),
  latestVersion: z.string().optional(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
  summary: z.string().optional(),
  title: z.string().optional(),
  updatedAt: z.date().transform(v => v.toISOString()),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    deletedAt: "deleted_at",
    descriptionRaw: "description_raw",
    imageAssetId: "image_asset_id",
    latestVersion: "latest_version",
    organizationId: "organization_id",
    projectId: "project_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Package$ {
  /** @deprecated use `Package$inboundSchema` instead. */
  export const inboundSchema = Package$inboundSchema;
  /** @deprecated use `Package$outboundSchema` instead. */
  export const outboundSchema = Package$outboundSchema;
  /** @deprecated use `Package$Outbound` instead. */
  export type Outbound = Package$Outbound;
}

export function packageToJSON(value: Package): string {
  return JSON.stringify(Package$outboundSchema.parse(value));
}

export function packageFromJSON(
  jsonString: string,
): SafeParseResult<Package, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Package$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Package' from JSON`,
  );
}
