/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Response filter metadata for the tool
 */
export type ResponseFilter = {
  /**
   * Content types to filter for
   */
  contentTypes: Array<string>;
  /**
   * Status codes to filter for
   */
  statusCodes: Array<string>;
  /**
   * Response filter type for the tool
   */
  type: string;
};

/** @internal */
export const ResponseFilter$inboundSchema: z.ZodType<
  ResponseFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  content_types: z.array(z.string()),
  status_codes: z.array(z.string()),
  type: z.string(),
}).transform((v) => {
  return remap$(v, {
    "content_types": "contentTypes",
    "status_codes": "statusCodes",
  });
});

/** @internal */
export type ResponseFilter$Outbound = {
  content_types: Array<string>;
  status_codes: Array<string>;
  type: string;
};

/** @internal */
export const ResponseFilter$outboundSchema: z.ZodType<
  ResponseFilter$Outbound,
  z.ZodTypeDef,
  ResponseFilter
> = z.object({
  contentTypes: z.array(z.string()),
  statusCodes: z.array(z.string()),
  type: z.string(),
}).transform((v) => {
  return remap$(v, {
    contentTypes: "content_types",
    statusCodes: "status_codes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFilter$ {
  /** @deprecated use `ResponseFilter$inboundSchema` instead. */
  export const inboundSchema = ResponseFilter$inboundSchema;
  /** @deprecated use `ResponseFilter$outboundSchema` instead. */
  export const outboundSchema = ResponseFilter$outboundSchema;
  /** @deprecated use `ResponseFilter$Outbound` instead. */
  export type Outbound = ResponseFilter$Outbound;
}

export function responseFilterToJSON(responseFilter: ResponseFilter): string {
  return JSON.stringify(ResponseFilter$outboundSchema.parse(responseFilter));
}

export function responseFilterFromJSON(
  jsonString: string,
): SafeParseResult<ResponseFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFilter' from JSON`,
  );
}
