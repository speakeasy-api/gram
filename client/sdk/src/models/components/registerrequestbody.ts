/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RegisterRequestBody = {
  /**
   * The name of the org to register
   */
  orgName: string;
};

/** @internal */
export const RegisterRequestBody$inboundSchema: z.ZodType<
  RegisterRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "org_name": "orgName",
  });
});

/** @internal */
export type RegisterRequestBody$Outbound = {
  org_name: string;
};

/** @internal */
export const RegisterRequestBody$outboundSchema: z.ZodType<
  RegisterRequestBody$Outbound,
  z.ZodTypeDef,
  RegisterRequestBody
> = z.object({
  orgName: z.string(),
}).transform((v) => {
  return remap$(v, {
    orgName: "org_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterRequestBody$ {
  /** @deprecated use `RegisterRequestBody$inboundSchema` instead. */
  export const inboundSchema = RegisterRequestBody$inboundSchema;
  /** @deprecated use `RegisterRequestBody$outboundSchema` instead. */
  export const outboundSchema = RegisterRequestBody$outboundSchema;
  /** @deprecated use `RegisterRequestBody$Outbound` instead. */
  export type Outbound = RegisterRequestBody$Outbound;
}

export function registerRequestBodyToJSON(
  registerRequestBody: RegisterRequestBody,
): string {
  return JSON.stringify(
    RegisterRequestBody$outboundSchema.parse(registerRequestBody),
  );
}

export function registerRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RegisterRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegisterRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegisterRequestBody' from JSON`,
  );
}
