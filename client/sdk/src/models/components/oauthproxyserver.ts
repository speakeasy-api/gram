/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OAuthProxyProvider,
  OAuthProxyProvider$inboundSchema,
  OAuthProxyProvider$Outbound,
  OAuthProxyProvider$outboundSchema,
} from "./oauthproxyprovider.js";

export type OAuthProxyServer = {
  /**
   * When the OAuth proxy server was created.
   */
  createdAt: Date;
  /**
   * The ID of the OAuth proxy server
   */
  id: string;
  /**
   * The OAuth proxy providers for this server
   */
  oauthProxyProviders?: Array<OAuthProxyProvider> | undefined;
  /**
   * The project ID this OAuth proxy server belongs to
   */
  projectId: string;
  /**
   * A short url-friendly label that uniquely identifies a resource.
   */
  slug: string;
  /**
   * When the OAuth proxy server was last updated.
   */
  updatedAt: Date;
};

/** @internal */
export const OAuthProxyServer$inboundSchema: z.ZodType<
  OAuthProxyServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  id: z.string(),
  oauth_proxy_providers: z.array(OAuthProxyProvider$inboundSchema).optional(),
  project_id: z.string(),
  slug: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "oauth_proxy_providers": "oauthProxyProviders",
    "project_id": "projectId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type OAuthProxyServer$Outbound = {
  created_at: string;
  id: string;
  oauth_proxy_providers?: Array<OAuthProxyProvider$Outbound> | undefined;
  project_id: string;
  slug: string;
  updated_at: string;
};

/** @internal */
export const OAuthProxyServer$outboundSchema: z.ZodType<
  OAuthProxyServer$Outbound,
  z.ZodTypeDef,
  OAuthProxyServer
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  id: z.string(),
  oauthProxyProviders: z.array(OAuthProxyProvider$outboundSchema).optional(),
  projectId: z.string(),
  slug: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    oauthProxyProviders: "oauth_proxy_providers",
    projectId: "project_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OAuthProxyServer$ {
  /** @deprecated use `OAuthProxyServer$inboundSchema` instead. */
  export const inboundSchema = OAuthProxyServer$inboundSchema;
  /** @deprecated use `OAuthProxyServer$outboundSchema` instead. */
  export const outboundSchema = OAuthProxyServer$outboundSchema;
  /** @deprecated use `OAuthProxyServer$Outbound` instead. */
  export type Outbound = OAuthProxyServer$Outbound;
}

export function oAuthProxyServerToJSON(
  oAuthProxyServer: OAuthProxyServer,
): string {
  return JSON.stringify(
    OAuthProxyServer$outboundSchema.parse(oAuthProxyServer),
  );
}

export function oAuthProxyServerFromJSON(
  jsonString: string,
): SafeParseResult<OAuthProxyServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OAuthProxyServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OAuthProxyServer' from JSON`,
  );
}
