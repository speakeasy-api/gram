/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServerVariable = {
  /**
   * Description of the server variable
   */
  description: string;
  /**
   * The environment variables
   */
  envVariables: Array<string>;
};

/** @internal */
export const ServerVariable$inboundSchema: z.ZodType<
  ServerVariable,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string(),
  env_variables: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "env_variables": "envVariables",
  });
});

/** @internal */
export type ServerVariable$Outbound = {
  description: string;
  env_variables: Array<string>;
};

/** @internal */
export const ServerVariable$outboundSchema: z.ZodType<
  ServerVariable$Outbound,
  z.ZodTypeDef,
  ServerVariable
> = z.object({
  description: z.string(),
  envVariables: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    envVariables: "env_variables",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerVariable$ {
  /** @deprecated use `ServerVariable$inboundSchema` instead. */
  export const inboundSchema = ServerVariable$inboundSchema;
  /** @deprecated use `ServerVariable$outboundSchema` instead. */
  export const outboundSchema = ServerVariable$outboundSchema;
  /** @deprecated use `ServerVariable$Outbound` instead. */
  export type Outbound = ServerVariable$Outbound;
}

export function serverVariableToJSON(serverVariable: ServerVariable): string {
  return JSON.stringify(ServerVariable$outboundSchema.parse(serverVariable));
}

export function serverVariableFromJSON(
  jsonString: string,
): SafeParseResult<ServerVariable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerVariable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerVariable' from JSON`,
  );
}
