/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeploymentFunctions = {
  /**
   * The ID of the uploaded asset.
   */
  assetId: string;
  /**
   * The ID of the deployment asset.
   */
  id: string;
  /**
   * The name to give the document as it will be displayed in UIs.
   */
  name: string;
  /**
   * The runtime to use when executing functions.
   */
  runtime: string;
  /**
   * A short url-friendly label that uniquely identifies a resource.
   */
  slug: string;
};

/** @internal */
export const DeploymentFunctions$inboundSchema: z.ZodType<
  DeploymentFunctions,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset_id: z.string(),
  id: z.string(),
  name: z.string(),
  runtime: z.string(),
  slug: z.string(),
}).transform((v) => {
  return remap$(v, {
    "asset_id": "assetId",
  });
});

/** @internal */
export type DeploymentFunctions$Outbound = {
  asset_id: string;
  id: string;
  name: string;
  runtime: string;
  slug: string;
};

/** @internal */
export const DeploymentFunctions$outboundSchema: z.ZodType<
  DeploymentFunctions$Outbound,
  z.ZodTypeDef,
  DeploymentFunctions
> = z.object({
  assetId: z.string(),
  id: z.string(),
  name: z.string(),
  runtime: z.string(),
  slug: z.string(),
}).transform((v) => {
  return remap$(v, {
    assetId: "asset_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentFunctions$ {
  /** @deprecated use `DeploymentFunctions$inboundSchema` instead. */
  export const inboundSchema = DeploymentFunctions$inboundSchema;
  /** @deprecated use `DeploymentFunctions$outboundSchema` instead. */
  export const outboundSchema = DeploymentFunctions$outboundSchema;
  /** @deprecated use `DeploymentFunctions$Outbound` instead. */
  export type Outbound = DeploymentFunctions$Outbound;
}

export function deploymentFunctionsToJSON(
  deploymentFunctions: DeploymentFunctions,
): string {
  return JSON.stringify(
    DeploymentFunctions$outboundSchema.parse(deploymentFunctions),
  );
}

export function deploymentFunctionsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentFunctions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentFunctions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentFunctions' from JSON`,
  );
}
