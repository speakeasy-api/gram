/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PromptTemplateEntry = {
  /**
   * The ID of the prompt template
   */
  id: string;
  /**
   * The kind of the prompt template
   */
  kind?: string | undefined;
  /**
   * A short url-friendly label that uniquely identifies a resource.
   */
  name: string;
};

/** @internal */
export const PromptTemplateEntry$inboundSchema: z.ZodType<
  PromptTemplateEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  kind: z.string().optional(),
  name: z.string(),
});

/** @internal */
export type PromptTemplateEntry$Outbound = {
  id: string;
  kind?: string | undefined;
  name: string;
};

/** @internal */
export const PromptTemplateEntry$outboundSchema: z.ZodType<
  PromptTemplateEntry$Outbound,
  z.ZodTypeDef,
  PromptTemplateEntry
> = z.object({
  id: z.string(),
  kind: z.string().optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PromptTemplateEntry$ {
  /** @deprecated use `PromptTemplateEntry$inboundSchema` instead. */
  export const inboundSchema = PromptTemplateEntry$inboundSchema;
  /** @deprecated use `PromptTemplateEntry$outboundSchema` instead. */
  export const outboundSchema = PromptTemplateEntry$outboundSchema;
  /** @deprecated use `PromptTemplateEntry$Outbound` instead. */
  export type Outbound = PromptTemplateEntry$Outbound;
}

export function promptTemplateEntryToJSON(
  promptTemplateEntry: PromptTemplateEntry,
): string {
  return JSON.stringify(
    PromptTemplateEntry$outboundSchema.parse(promptTemplateEntry),
  );
}

export function promptTemplateEntryFromJSON(
  jsonString: string,
): SafeParseResult<PromptTemplateEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PromptTemplateEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PromptTemplateEntry' from JSON`,
  );
}
