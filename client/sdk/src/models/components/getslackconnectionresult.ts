/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSlackConnectionResult = {
  /**
   * When the toolset was created.
   */
  createdAt: Date;
  /**
   * The default toolset slug for this Slack connection
   */
  defaultToolsetSlug: string;
  /**
   * The ID of the connected Slack team
   */
  slackTeamId: string;
  /**
   * The name of the connected Slack team
   */
  slackTeamName: string;
  /**
   * When the toolset was last updated.
   */
  updatedAt: Date;
};

/** @internal */
export const GetSlackConnectionResult$inboundSchema: z.ZodType<
  GetSlackConnectionResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  default_toolset_slug: z.string(),
  slack_team_id: z.string(),
  slack_team_name: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "default_toolset_slug": "defaultToolsetSlug",
    "slack_team_id": "slackTeamId",
    "slack_team_name": "slackTeamName",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetSlackConnectionResult$Outbound = {
  created_at: string;
  default_toolset_slug: string;
  slack_team_id: string;
  slack_team_name: string;
  updated_at: string;
};

/** @internal */
export const GetSlackConnectionResult$outboundSchema: z.ZodType<
  GetSlackConnectionResult$Outbound,
  z.ZodTypeDef,
  GetSlackConnectionResult
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  defaultToolsetSlug: z.string(),
  slackTeamId: z.string(),
  slackTeamName: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    defaultToolsetSlug: "default_toolset_slug",
    slackTeamId: "slack_team_id",
    slackTeamName: "slack_team_name",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSlackConnectionResult$ {
  /** @deprecated use `GetSlackConnectionResult$inboundSchema` instead. */
  export const inboundSchema = GetSlackConnectionResult$inboundSchema;
  /** @deprecated use `GetSlackConnectionResult$outboundSchema` instead. */
  export const outboundSchema = GetSlackConnectionResult$outboundSchema;
  /** @deprecated use `GetSlackConnectionResult$Outbound` instead. */
  export type Outbound = GetSlackConnectionResult$Outbound;
}

export function getSlackConnectionResultToJSON(
  getSlackConnectionResult: GetSlackConnectionResult,
): string {
  return JSON.stringify(
    GetSlackConnectionResult$outboundSchema.parse(getSlackConnectionResult),
  );
}

export function getSlackConnectionResultFromJSON(
  jsonString: string,
): SafeParseResult<GetSlackConnectionResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSlackConnectionResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSlackConnectionResult' from JSON`,
  );
}
