/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateProjectRequestBody = {
  /**
   * The name of the project
   */
  name: string;
  /**
   * The ID of the organization to create the project in
   */
  organizationId: string;
};

/** @internal */
export const CreateProjectRequestBody$inboundSchema: z.ZodType<
  CreateProjectRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  organization_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type CreateProjectRequestBody$Outbound = {
  name: string;
  organization_id: string;
};

/** @internal */
export const CreateProjectRequestBody$outboundSchema: z.ZodType<
  CreateProjectRequestBody$Outbound,
  z.ZodTypeDef,
  CreateProjectRequestBody
> = z.object({
  name: z.string(),
  organizationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRequestBody$ {
  /** @deprecated use `CreateProjectRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRequestBody$inboundSchema;
  /** @deprecated use `CreateProjectRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRequestBody$outboundSchema;
  /** @deprecated use `CreateProjectRequestBody$Outbound` instead. */
  export type Outbound = CreateProjectRequestBody$Outbound;
}

export function createProjectRequestBodyToJSON(
  createProjectRequestBody: CreateProjectRequestBody,
): string {
  return JSON.stringify(
    CreateProjectRequestBody$outboundSchema.parse(createProjectRequestBody),
  );
}

export function createProjectRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectRequestBody' from JSON`,
  );
}
