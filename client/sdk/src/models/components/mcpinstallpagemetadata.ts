/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Metadata used to configure the MCP install page.
 */
export type MCPInstallPageMetadata = {
  /**
   * When the metadata entry was created
   */
  createdAt: Date;
  /**
   * A link to external documentation for the MCP install page
   */
  externalDocumentationUrl?: string | undefined;
  /**
   * The ID of the metadata record
   */
  id: string;
  /**
   * The asset ID for the MCP install page logo
   */
  logoAssetId?: string | undefined;
  /**
   * The toolset associated with this install page metadata
   */
  toolsetId: string;
  /**
   * When the metadata entry was last updated
   */
  updatedAt: Date;
};

/** @internal */
export const MCPInstallPageMetadata$inboundSchema: z.ZodType<
  MCPInstallPageMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  external_documentation_url: z.string().optional(),
  id: z.string(),
  logo_asset_id: z.string().optional(),
  toolset_id: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "external_documentation_url": "externalDocumentationUrl",
    "logo_asset_id": "logoAssetId",
    "toolset_id": "toolsetId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type MCPInstallPageMetadata$Outbound = {
  created_at: string;
  external_documentation_url?: string | undefined;
  id: string;
  logo_asset_id?: string | undefined;
  toolset_id: string;
  updated_at: string;
};

/** @internal */
export const MCPInstallPageMetadata$outboundSchema: z.ZodType<
  MCPInstallPageMetadata$Outbound,
  z.ZodTypeDef,
  MCPInstallPageMetadata
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  externalDocumentationUrl: z.string().optional(),
  id: z.string(),
  logoAssetId: z.string().optional(),
  toolsetId: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    externalDocumentationUrl: "external_documentation_url",
    logoAssetId: "logo_asset_id",
    toolsetId: "toolset_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MCPInstallPageMetadata$ {
  /** @deprecated use `MCPInstallPageMetadata$inboundSchema` instead. */
  export const inboundSchema = MCPInstallPageMetadata$inboundSchema;
  /** @deprecated use `MCPInstallPageMetadata$outboundSchema` instead. */
  export const outboundSchema = MCPInstallPageMetadata$outboundSchema;
  /** @deprecated use `MCPInstallPageMetadata$Outbound` instead. */
  export type Outbound = MCPInstallPageMetadata$Outbound;
}

export function mcpInstallPageMetadataToJSON(
  mcpInstallPageMetadata: MCPInstallPageMetadata,
): string {
  return JSON.stringify(
    MCPInstallPageMetadata$outboundSchema.parse(mcpInstallPageMetadata),
  );
}

export function mcpInstallPageMetadataFromJSON(
  jsonString: string,
): SafeParseResult<MCPInstallPageMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MCPInstallPageMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MCPInstallPageMetadata' from JSON`,
  );
}
