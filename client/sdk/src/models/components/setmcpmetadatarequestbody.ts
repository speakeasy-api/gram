/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SetMcpMetadataRequestBody = {
  /**
   * A link to external documentation for the MCP install page
   */
  externalDocumentationUrl?: string | undefined;
  /**
   * The asset ID for the MCP install page logo
   */
  logoAssetId?: string | undefined;
  /**
   * The slug of the toolset associated with this install page metadata
   */
  toolsetSlug: string;
};

/** @internal */
export const SetMcpMetadataRequestBody$inboundSchema: z.ZodType<
  SetMcpMetadataRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_documentation_url: z.string().optional(),
  logo_asset_id: z.string().optional(),
  toolset_slug: z.string(),
}).transform((v) => {
  return remap$(v, {
    "external_documentation_url": "externalDocumentationUrl",
    "logo_asset_id": "logoAssetId",
    "toolset_slug": "toolsetSlug",
  });
});

/** @internal */
export type SetMcpMetadataRequestBody$Outbound = {
  external_documentation_url?: string | undefined;
  logo_asset_id?: string | undefined;
  toolset_slug: string;
};

/** @internal */
export const SetMcpMetadataRequestBody$outboundSchema: z.ZodType<
  SetMcpMetadataRequestBody$Outbound,
  z.ZodTypeDef,
  SetMcpMetadataRequestBody
> = z.object({
  externalDocumentationUrl: z.string().optional(),
  logoAssetId: z.string().optional(),
  toolsetSlug: z.string(),
}).transform((v) => {
  return remap$(v, {
    externalDocumentationUrl: "external_documentation_url",
    logoAssetId: "logo_asset_id",
    toolsetSlug: "toolset_slug",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetMcpMetadataRequestBody$ {
  /** @deprecated use `SetMcpMetadataRequestBody$inboundSchema` instead. */
  export const inboundSchema = SetMcpMetadataRequestBody$inboundSchema;
  /** @deprecated use `SetMcpMetadataRequestBody$outboundSchema` instead. */
  export const outboundSchema = SetMcpMetadataRequestBody$outboundSchema;
  /** @deprecated use `SetMcpMetadataRequestBody$Outbound` instead. */
  export type Outbound = SetMcpMetadataRequestBody$Outbound;
}

export function setMcpMetadataRequestBodyToJSON(
  setMcpMetadataRequestBody: SetMcpMetadataRequestBody,
): string {
  return JSON.stringify(
    SetMcpMetadataRequestBody$outboundSchema.parse(setMcpMetadataRequestBody),
  );
}

export function setMcpMetadataRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SetMcpMetadataRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetMcpMetadataRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetMcpMetadataRequestBody' from JSON`,
  );
}
