/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateToolsetRequestBody = {
  /**
   * The ID of the custom domain to use for the toolset
   */
  customDomainId?: string | undefined;
  /**
   * The slug of the environment to use as the default for the toolset
   */
  defaultEnvironmentSlug?: string | undefined;
  /**
   * The new description of the toolset
   */
  description?: string | undefined;
  /**
   * List of HTTP tool names to include
   */
  httpToolNames?: Array<string> | undefined;
  /**
   * Whether the toolset is enabled for MCP
   */
  mcpEnabled?: boolean | undefined;
  /**
   * Whether the toolset is public in MCP
   */
  mcpIsPublic?: boolean | undefined;
  /**
   * The slug of the MCP to use for the toolset
   */
  mcpSlug?: string | undefined;
  /**
   * The new name of the toolset
   */
  name?: string | undefined;
  /**
   * List of prompt template names to include
   */
  promptTemplateNames?: Array<string> | undefined;
};

/** @internal */
export const UpdateToolsetRequestBody$inboundSchema: z.ZodType<
  UpdateToolsetRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  custom_domain_id: z.string().optional(),
  default_environment_slug: z.string().optional(),
  description: z.string().optional(),
  http_tool_names: z.array(z.string()).optional(),
  mcp_enabled: z.boolean().optional(),
  mcp_is_public: z.boolean().optional(),
  mcp_slug: z.string().optional(),
  name: z.string().optional(),
  prompt_template_names: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_domain_id": "customDomainId",
    "default_environment_slug": "defaultEnvironmentSlug",
    "http_tool_names": "httpToolNames",
    "mcp_enabled": "mcpEnabled",
    "mcp_is_public": "mcpIsPublic",
    "mcp_slug": "mcpSlug",
    "prompt_template_names": "promptTemplateNames",
  });
});

/** @internal */
export type UpdateToolsetRequestBody$Outbound = {
  custom_domain_id?: string | undefined;
  default_environment_slug?: string | undefined;
  description?: string | undefined;
  http_tool_names?: Array<string> | undefined;
  mcp_enabled?: boolean | undefined;
  mcp_is_public?: boolean | undefined;
  mcp_slug?: string | undefined;
  name?: string | undefined;
  prompt_template_names?: Array<string> | undefined;
};

/** @internal */
export const UpdateToolsetRequestBody$outboundSchema: z.ZodType<
  UpdateToolsetRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateToolsetRequestBody
> = z.object({
  customDomainId: z.string().optional(),
  defaultEnvironmentSlug: z.string().optional(),
  description: z.string().optional(),
  httpToolNames: z.array(z.string()).optional(),
  mcpEnabled: z.boolean().optional(),
  mcpIsPublic: z.boolean().optional(),
  mcpSlug: z.string().optional(),
  name: z.string().optional(),
  promptTemplateNames: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    customDomainId: "custom_domain_id",
    defaultEnvironmentSlug: "default_environment_slug",
    httpToolNames: "http_tool_names",
    mcpEnabled: "mcp_enabled",
    mcpIsPublic: "mcp_is_public",
    mcpSlug: "mcp_slug",
    promptTemplateNames: "prompt_template_names",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolsetRequestBody$ {
  /** @deprecated use `UpdateToolsetRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateToolsetRequestBody$inboundSchema;
  /** @deprecated use `UpdateToolsetRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateToolsetRequestBody$outboundSchema;
  /** @deprecated use `UpdateToolsetRequestBody$Outbound` instead. */
  export type Outbound = UpdateToolsetRequestBody$Outbound;
}

export function updateToolsetRequestBodyToJSON(
  updateToolsetRequestBody: UpdateToolsetRequestBody,
): string {
  return JSON.stringify(
    UpdateToolsetRequestBody$outboundSchema.parse(updateToolsetRequestBody),
  );
}

export function updateToolsetRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolsetRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolsetRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolsetRequestBody' from JSON`,
  );
}
