/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Integration,
  Integration$inboundSchema,
  Integration$Outbound,
  Integration$outboundSchema,
} from "./integration.js";

export type GetIntegrationResult = {
  integration?: Integration | undefined;
};

/** @internal */
export const GetIntegrationResult$inboundSchema: z.ZodType<
  GetIntegrationResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  integration: Integration$inboundSchema.optional(),
});

/** @internal */
export type GetIntegrationResult$Outbound = {
  integration?: Integration$Outbound | undefined;
};

/** @internal */
export const GetIntegrationResult$outboundSchema: z.ZodType<
  GetIntegrationResult$Outbound,
  z.ZodTypeDef,
  GetIntegrationResult
> = z.object({
  integration: Integration$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationResult$ {
  /** @deprecated use `GetIntegrationResult$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationResult$inboundSchema;
  /** @deprecated use `GetIntegrationResult$outboundSchema` instead. */
  export const outboundSchema = GetIntegrationResult$outboundSchema;
  /** @deprecated use `GetIntegrationResult$Outbound` instead. */
  export type Outbound = GetIntegrationResult$Outbound;
}

export function getIntegrationResultToJSON(
  getIntegrationResult: GetIntegrationResult,
): string {
  return JSON.stringify(
    GetIntegrationResult$outboundSchema.parse(getIntegrationResult),
  );
}

export function getIntegrationResultFromJSON(
  jsonString: string,
): SafeParseResult<GetIntegrationResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIntegrationResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIntegrationResult' from JSON`,
  );
}
