/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ExternalOAuthServerForm = {
  /**
   * The metadata for the external OAuth server
   */
  metadata?: any | undefined;
  /**
   * A short url-friendly label that uniquely identifies a resource.
   */
  slug: string;
};

/** @internal */
export const ExternalOAuthServerForm$inboundSchema: z.ZodType<
  ExternalOAuthServerForm,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.any().optional(),
  slug: z.string(),
});

/** @internal */
export type ExternalOAuthServerForm$Outbound = {
  metadata?: any | undefined;
  slug: string;
};

/** @internal */
export const ExternalOAuthServerForm$outboundSchema: z.ZodType<
  ExternalOAuthServerForm$Outbound,
  z.ZodTypeDef,
  ExternalOAuthServerForm
> = z.object({
  metadata: z.any().optional(),
  slug: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalOAuthServerForm$ {
  /** @deprecated use `ExternalOAuthServerForm$inboundSchema` instead. */
  export const inboundSchema = ExternalOAuthServerForm$inboundSchema;
  /** @deprecated use `ExternalOAuthServerForm$outboundSchema` instead. */
  export const outboundSchema = ExternalOAuthServerForm$outboundSchema;
  /** @deprecated use `ExternalOAuthServerForm$Outbound` instead. */
  export type Outbound = ExternalOAuthServerForm$Outbound;
}

export function externalOAuthServerFormToJSON(
  externalOAuthServerForm: ExternalOAuthServerForm,
): string {
  return JSON.stringify(
    ExternalOAuthServerForm$outboundSchema.parse(externalOAuthServerForm),
  );
}

export function externalOAuthServerFormFromJSON(
  jsonString: string,
): SafeParseResult<ExternalOAuthServerForm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalOAuthServerForm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalOAuthServerForm' from JSON`,
  );
}
