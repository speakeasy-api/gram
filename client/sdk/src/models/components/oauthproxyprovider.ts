/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OAuthProxyProvider = {
  /**
   * The authorization endpoint URL
   */
  authorizationEndpoint: string;
  /**
   * When the OAuth proxy provider was created.
   */
  createdAt: Date;
  /**
   * The grant types supported by this provider
   */
  grantTypesSupported?: Array<string> | undefined;
  /**
   * The ID of the OAuth proxy provider
   */
  id: string;
  /**
   * The OAuth scopes supported by this provider
   */
  scopesSupported?: Array<string> | undefined;
  /**
   * A short url-friendly label that uniquely identifies a resource.
   */
  slug: string;
  /**
   * The token endpoint URL
   */
  tokenEndpoint: string;
  /**
   * The token endpoint auth methods supported by this provider
   */
  tokenEndpointAuthMethodsSupported?: Array<string> | undefined;
  /**
   * When the OAuth proxy provider was last updated.
   */
  updatedAt: Date;
};

/** @internal */
export const OAuthProxyProvider$inboundSchema: z.ZodType<
  OAuthProxyProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  authorization_endpoint: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  grant_types_supported: z.array(z.string()).optional(),
  id: z.string(),
  scopes_supported: z.array(z.string()).optional(),
  slug: z.string(),
  token_endpoint: z.string(),
  token_endpoint_auth_methods_supported: z.array(z.string()).optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "authorization_endpoint": "authorizationEndpoint",
    "created_at": "createdAt",
    "grant_types_supported": "grantTypesSupported",
    "scopes_supported": "scopesSupported",
    "token_endpoint": "tokenEndpoint",
    "token_endpoint_auth_methods_supported":
      "tokenEndpointAuthMethodsSupported",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type OAuthProxyProvider$Outbound = {
  authorization_endpoint: string;
  created_at: string;
  grant_types_supported?: Array<string> | undefined;
  id: string;
  scopes_supported?: Array<string> | undefined;
  slug: string;
  token_endpoint: string;
  token_endpoint_auth_methods_supported?: Array<string> | undefined;
  updated_at: string;
};

/** @internal */
export const OAuthProxyProvider$outboundSchema: z.ZodType<
  OAuthProxyProvider$Outbound,
  z.ZodTypeDef,
  OAuthProxyProvider
> = z.object({
  authorizationEndpoint: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  grantTypesSupported: z.array(z.string()).optional(),
  id: z.string(),
  scopesSupported: z.array(z.string()).optional(),
  slug: z.string(),
  tokenEndpoint: z.string(),
  tokenEndpointAuthMethodsSupported: z.array(z.string()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    authorizationEndpoint: "authorization_endpoint",
    createdAt: "created_at",
    grantTypesSupported: "grant_types_supported",
    scopesSupported: "scopes_supported",
    tokenEndpoint: "token_endpoint",
    tokenEndpointAuthMethodsSupported: "token_endpoint_auth_methods_supported",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OAuthProxyProvider$ {
  /** @deprecated use `OAuthProxyProvider$inboundSchema` instead. */
  export const inboundSchema = OAuthProxyProvider$inboundSchema;
  /** @deprecated use `OAuthProxyProvider$outboundSchema` instead. */
  export const outboundSchema = OAuthProxyProvider$outboundSchema;
  /** @deprecated use `OAuthProxyProvider$Outbound` instead. */
  export type Outbound = OAuthProxyProvider$Outbound;
}

export function oAuthProxyProviderToJSON(
  oAuthProxyProvider: OAuthProxyProvider,
): string {
  return JSON.stringify(
    OAuthProxyProvider$outboundSchema.parse(oAuthProxyProvider),
  );
}

export function oAuthProxyProviderFromJSON(
  jsonString: string,
): SafeParseResult<OAuthProxyProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OAuthProxyProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OAuthProxyProvider' from JSON`,
  );
}
