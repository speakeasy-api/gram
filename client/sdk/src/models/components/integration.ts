/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IntegrationVersion,
  IntegrationVersion$inboundSchema,
  IntegrationVersion$Outbound,
  IntegrationVersion$outboundSchema,
} from "./integrationversion.js";

export type Integration = {
  packageDescription?: string | undefined;
  packageDescriptionRaw?: string | undefined;
  packageId: string;
  packageImageAssetId?: string | undefined;
  packageKeywords?: Array<string> | undefined;
  packageName: string;
  packageSummary: string;
  packageTitle: string;
  packageUrl?: string | undefined;
  toolNames: Array<string>;
  /**
   * The latest version of the integration
   */
  version: string;
  versionCreatedAt: Date;
  versions?: Array<IntegrationVersion> | undefined;
};

/** @internal */
export const Integration$inboundSchema: z.ZodType<
  Integration,
  z.ZodTypeDef,
  unknown
> = z.object({
  package_description: z.string().optional(),
  package_description_raw: z.string().optional(),
  package_id: z.string(),
  package_image_asset_id: z.string().optional(),
  package_keywords: z.array(z.string()).optional(),
  package_name: z.string(),
  package_summary: z.string(),
  package_title: z.string(),
  package_url: z.string().optional(),
  tool_names: z.array(z.string()),
  version: z.string(),
  version_created_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  versions: z.array(IntegrationVersion$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "package_description": "packageDescription",
    "package_description_raw": "packageDescriptionRaw",
    "package_id": "packageId",
    "package_image_asset_id": "packageImageAssetId",
    "package_keywords": "packageKeywords",
    "package_name": "packageName",
    "package_summary": "packageSummary",
    "package_title": "packageTitle",
    "package_url": "packageUrl",
    "tool_names": "toolNames",
    "version_created_at": "versionCreatedAt",
  });
});

/** @internal */
export type Integration$Outbound = {
  package_description?: string | undefined;
  package_description_raw?: string | undefined;
  package_id: string;
  package_image_asset_id?: string | undefined;
  package_keywords?: Array<string> | undefined;
  package_name: string;
  package_summary: string;
  package_title: string;
  package_url?: string | undefined;
  tool_names: Array<string>;
  version: string;
  version_created_at: string;
  versions?: Array<IntegrationVersion$Outbound> | undefined;
};

/** @internal */
export const Integration$outboundSchema: z.ZodType<
  Integration$Outbound,
  z.ZodTypeDef,
  Integration
> = z.object({
  packageDescription: z.string().optional(),
  packageDescriptionRaw: z.string().optional(),
  packageId: z.string(),
  packageImageAssetId: z.string().optional(),
  packageKeywords: z.array(z.string()).optional(),
  packageName: z.string(),
  packageSummary: z.string(),
  packageTitle: z.string(),
  packageUrl: z.string().optional(),
  toolNames: z.array(z.string()),
  version: z.string(),
  versionCreatedAt: z.date().transform(v => v.toISOString()),
  versions: z.array(IntegrationVersion$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    packageDescription: "package_description",
    packageDescriptionRaw: "package_description_raw",
    packageId: "package_id",
    packageImageAssetId: "package_image_asset_id",
    packageKeywords: "package_keywords",
    packageName: "package_name",
    packageSummary: "package_summary",
    packageTitle: "package_title",
    packageUrl: "package_url",
    toolNames: "tool_names",
    versionCreatedAt: "version_created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Integration$ {
  /** @deprecated use `Integration$inboundSchema` instead. */
  export const inboundSchema = Integration$inboundSchema;
  /** @deprecated use `Integration$outboundSchema` instead. */
  export const outboundSchema = Integration$outboundSchema;
  /** @deprecated use `Integration$Outbound` instead. */
  export type Outbound = Integration$Outbound;
}

export function integrationToJSON(integration: Integration): string {
  return JSON.stringify(Integration$outboundSchema.parse(integration));
}

export function integrationFromJSON(
  jsonString: string,
): SafeParseResult<Integration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Integration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Integration' from JSON`,
  );
}
