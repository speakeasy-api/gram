/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotModified = {
  location: string;
};

/** @internal */
export const NotModified$inboundSchema: z.ZodType<
  NotModified,
  z.ZodTypeDef,
  unknown
> = z.object({
  location: z.string(),
});

/** @internal */
export type NotModified$Outbound = {
  location: string;
};

/** @internal */
export const NotModified$outboundSchema: z.ZodType<
  NotModified$Outbound,
  z.ZodTypeDef,
  NotModified
> = z.object({
  location: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotModified$ {
  /** @deprecated use `NotModified$inboundSchema` instead. */
  export const inboundSchema = NotModified$inboundSchema;
  /** @deprecated use `NotModified$outboundSchema` instead. */
  export const outboundSchema = NotModified$outboundSchema;
  /** @deprecated use `NotModified$Outbound` instead. */
  export type Outbound = NotModified$Outbound;
}

export function notModifiedToJSON(notModified: NotModified): string {
  return JSON.stringify(NotModified$outboundSchema.parse(notModified));
}

export function notModifiedFromJSON(
  jsonString: string,
): SafeParseResult<NotModified, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotModified$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotModified' from JSON`,
  );
}
