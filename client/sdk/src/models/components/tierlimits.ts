/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TierLimits = {
  /**
   * Add-on items bullets of the tier (optional)
   */
  addOnBullets?: Array<string> | undefined;
  /**
   * The base price for the tier
   */
  basePrice: number;
  /**
   * Key feature bullets of the tier
   */
  featureBullets: Array<string>;
  /**
   * Included items bullets of the tier
   */
  includedBullets: Array<string>;
  /**
   * The number of credits included in the tier for playground and other dashboard activities
   */
  includedCredits: number;
  /**
   * The number of servers included in the tier
   */
  includedServers: number;
  /**
   * The number of tool calls included in the tier
   */
  includedToolCalls: number;
  /**
   * The price per additional credit
   */
  pricePerAdditionalCredit: number;
  /**
   * The price per additional server
   */
  pricePerAdditionalServer: number;
  /**
   * The price per additional tool call
   */
  pricePerAdditionalToolCall: number;
};

/** @internal */
export const TierLimits$inboundSchema: z.ZodType<
  TierLimits,
  z.ZodTypeDef,
  unknown
> = z.object({
  add_on_bullets: z.array(z.string()).optional(),
  base_price: z.number(),
  feature_bullets: z.array(z.string()),
  included_bullets: z.array(z.string()),
  included_credits: z.number().int(),
  included_servers: z.number().int(),
  included_tool_calls: z.number().int(),
  price_per_additional_credit: z.number(),
  price_per_additional_server: z.number(),
  price_per_additional_tool_call: z.number(),
}).transform((v) => {
  return remap$(v, {
    "add_on_bullets": "addOnBullets",
    "base_price": "basePrice",
    "feature_bullets": "featureBullets",
    "included_bullets": "includedBullets",
    "included_credits": "includedCredits",
    "included_servers": "includedServers",
    "included_tool_calls": "includedToolCalls",
    "price_per_additional_credit": "pricePerAdditionalCredit",
    "price_per_additional_server": "pricePerAdditionalServer",
    "price_per_additional_tool_call": "pricePerAdditionalToolCall",
  });
});

/** @internal */
export type TierLimits$Outbound = {
  add_on_bullets?: Array<string> | undefined;
  base_price: number;
  feature_bullets: Array<string>;
  included_bullets: Array<string>;
  included_credits: number;
  included_servers: number;
  included_tool_calls: number;
  price_per_additional_credit: number;
  price_per_additional_server: number;
  price_per_additional_tool_call: number;
};

/** @internal */
export const TierLimits$outboundSchema: z.ZodType<
  TierLimits$Outbound,
  z.ZodTypeDef,
  TierLimits
> = z.object({
  addOnBullets: z.array(z.string()).optional(),
  basePrice: z.number(),
  featureBullets: z.array(z.string()),
  includedBullets: z.array(z.string()),
  includedCredits: z.number().int(),
  includedServers: z.number().int(),
  includedToolCalls: z.number().int(),
  pricePerAdditionalCredit: z.number(),
  pricePerAdditionalServer: z.number(),
  pricePerAdditionalToolCall: z.number(),
}).transform((v) => {
  return remap$(v, {
    addOnBullets: "add_on_bullets",
    basePrice: "base_price",
    featureBullets: "feature_bullets",
    includedBullets: "included_bullets",
    includedCredits: "included_credits",
    includedServers: "included_servers",
    includedToolCalls: "included_tool_calls",
    pricePerAdditionalCredit: "price_per_additional_credit",
    pricePerAdditionalServer: "price_per_additional_server",
    pricePerAdditionalToolCall: "price_per_additional_tool_call",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TierLimits$ {
  /** @deprecated use `TierLimits$inboundSchema` instead. */
  export const inboundSchema = TierLimits$inboundSchema;
  /** @deprecated use `TierLimits$outboundSchema` instead. */
  export const outboundSchema = TierLimits$outboundSchema;
  /** @deprecated use `TierLimits$Outbound` instead. */
  export type Outbound = TierLimits$Outbound;
}

export function tierLimitsToJSON(tierLimits: TierLimits): string {
  return JSON.stringify(TierLimits$outboundSchema.parse(tierLimits));
}

export function tierLimitsFromJSON(
  jsonString: string,
): SafeParseResult<TierLimits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TierLimits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TierLimits' from JSON`,
  );
}
