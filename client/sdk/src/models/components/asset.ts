/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Kind = {
  Openapiv3: "openapiv3",
  Image: "image",
  Functions: "functions",
  Unknown: "unknown",
} as const;
export type Kind = ClosedEnum<typeof Kind>;

export type Asset = {
  /**
   * The content length of the asset
   */
  contentLength: number;
  /**
   * The content type of the asset
   */
  contentType: string;
  /**
   * The creation date of the asset.
   */
  createdAt: Date;
  /**
   * The ID of the asset
   */
  id: string;
  kind: Kind;
  /**
   * The SHA256 hash of the asset
   */
  sha256: string;
  /**
   * The last update date of the asset.
   */
  updatedAt: Date;
};

/** @internal */
export const Kind$inboundSchema: z.ZodNativeEnum<typeof Kind> = z.nativeEnum(
  Kind,
);

/** @internal */
export const Kind$outboundSchema: z.ZodNativeEnum<typeof Kind> =
  Kind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Kind$ {
  /** @deprecated use `Kind$inboundSchema` instead. */
  export const inboundSchema = Kind$inboundSchema;
  /** @deprecated use `Kind$outboundSchema` instead. */
  export const outboundSchema = Kind$outboundSchema;
}

/** @internal */
export const Asset$inboundSchema: z.ZodType<Asset, z.ZodTypeDef, unknown> = z
  .object({
    content_length: z.number().int(),
    content_type: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    id: z.string(),
    kind: Kind$inboundSchema,
    sha256: z.string(),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
  }).transform((v) => {
    return remap$(v, {
      "content_length": "contentLength",
      "content_type": "contentType",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Asset$Outbound = {
  content_length: number;
  content_type: string;
  created_at: string;
  id: string;
  kind: string;
  sha256: string;
  updated_at: string;
};

/** @internal */
export const Asset$outboundSchema: z.ZodType<
  Asset$Outbound,
  z.ZodTypeDef,
  Asset
> = z.object({
  contentLength: z.number().int(),
  contentType: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  id: z.string(),
  kind: Kind$outboundSchema,
  sha256: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    contentLength: "content_length",
    contentType: "content_type",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Asset$ {
  /** @deprecated use `Asset$inboundSchema` instead. */
  export const inboundSchema = Asset$inboundSchema;
  /** @deprecated use `Asset$outboundSchema` instead. */
  export const outboundSchema = Asset$outboundSchema;
  /** @deprecated use `Asset$Outbound` instead. */
  export type Outbound = Asset$Outbound;
}

export function assetToJSON(asset: Asset): string {
  return JSON.stringify(Asset$outboundSchema.parse(asset));
}

export function assetFromJSON(
  jsonString: string,
): SafeParseResult<Asset, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Asset$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Asset' from JSON`,
  );
}
