/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DeploymentSummary,
  DeploymentSummary$inboundSchema,
  DeploymentSummary$Outbound,
  DeploymentSummary$outboundSchema,
} from "./deploymentsummary.js";

export type ListDeploymentResult = {
  /**
   * A list of deployments
   */
  items: Array<DeploymentSummary>;
  /**
   * The cursor to fetch results from
   */
  nextCursor?: string | undefined;
};

/** @internal */
export const ListDeploymentResult$inboundSchema: z.ZodType<
  ListDeploymentResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(DeploymentSummary$inboundSchema),
  next_cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListDeploymentResult$Outbound = {
  items: Array<DeploymentSummary$Outbound>;
  next_cursor?: string | undefined;
};

/** @internal */
export const ListDeploymentResult$outboundSchema: z.ZodType<
  ListDeploymentResult$Outbound,
  z.ZodTypeDef,
  ListDeploymentResult
> = z.object({
  items: z.array(DeploymentSummary$outboundSchema),
  nextCursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDeploymentResult$ {
  /** @deprecated use `ListDeploymentResult$inboundSchema` instead. */
  export const inboundSchema = ListDeploymentResult$inboundSchema;
  /** @deprecated use `ListDeploymentResult$outboundSchema` instead. */
  export const outboundSchema = ListDeploymentResult$outboundSchema;
  /** @deprecated use `ListDeploymentResult$Outbound` instead. */
  export type Outbound = ListDeploymentResult$Outbound;
}

export function listDeploymentResultToJSON(
  listDeploymentResult: ListDeploymentResult,
): string {
  return JSON.stringify(
    ListDeploymentResult$outboundSchema.parse(listDeploymentResult),
  );
}

export function listDeploymentResultFromJSON(
  jsonString: string,
): SafeParseResult<ListDeploymentResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDeploymentResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDeploymentResult' from JSON`,
  );
}
