/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ExternalOAuthServer,
  ExternalOAuthServer$inboundSchema,
  ExternalOAuthServer$Outbound,
  ExternalOAuthServer$outboundSchema,
} from "./externaloauthserver.js";
import {
  HTTPToolDefinition,
  HTTPToolDefinition$inboundSchema,
  HTTPToolDefinition$Outbound,
  HTTPToolDefinition$outboundSchema,
} from "./httptooldefinition.js";
import {
  OAuthProxyServer,
  OAuthProxyServer$inboundSchema,
  OAuthProxyServer$Outbound,
  OAuthProxyServer$outboundSchema,
} from "./oauthproxyserver.js";
import {
  PromptTemplate,
  PromptTemplate$inboundSchema,
  PromptTemplate$Outbound,
  PromptTemplate$outboundSchema,
} from "./prompttemplate.js";
import {
  SecurityVariable,
  SecurityVariable$inboundSchema,
  SecurityVariable$Outbound,
  SecurityVariable$outboundSchema,
} from "./securityvariable.js";
import {
  ServerVariable,
  ServerVariable$inboundSchema,
  ServerVariable$Outbound,
  ServerVariable$outboundSchema,
} from "./servervariable.js";

export type Toolset = {
  /**
   * The account type of the organization
   */
  accountType: string;
  /**
   * When the toolset was created.
   */
  createdAt: Date;
  /**
   * The ID of the custom domain to use for the toolset
   */
  customDomainId?: string | undefined;
  /**
   * A short url-friendly label that uniquely identifies a resource.
   */
  defaultEnvironmentSlug?: string | undefined;
  /**
   * Description of the toolset
   */
  description?: string | undefined;
  externalOauthServer?: ExternalOAuthServer | undefined;
  /**
   * The HTTP tools in this toolset
   */
  httpTools: Array<HTTPToolDefinition>;
  /**
   * The ID of the toolset
   */
  id: string;
  /**
   * Whether the toolset is enabled for MCP
   */
  mcpEnabled?: boolean | undefined;
  /**
   * Whether the toolset is public in MCP
   */
  mcpIsPublic?: boolean | undefined;
  /**
   * A short url-friendly label that uniquely identifies a resource.
   */
  mcpSlug?: string | undefined;
  /**
   * The name of the toolset
   */
  name: string;
  oauthProxyServer?: OAuthProxyServer | undefined;
  /**
   * The organization ID this toolset belongs to
   */
  organizationId: string;
  /**
   * The project ID this toolset belongs to
   */
  projectId: string;
  /**
   * The prompt templates in this toolset
   */
  promptTemplates: Array<PromptTemplate>;
  /**
   * The security variables that are relevant to the toolset
   */
  securityVariables?: Array<SecurityVariable> | undefined;
  /**
   * The server variables that are relevant to the toolset
   */
  serverVariables?: Array<ServerVariable> | undefined;
  /**
   * A short url-friendly label that uniquely identifies a resource.
   */
  slug: string;
  /**
   * The tool URNs in this toolset
   */
  toolUrns: Array<string>;
  /**
   * When the toolset was last updated.
   */
  updatedAt: Date;
};

/** @internal */
export const Toolset$inboundSchema: z.ZodType<Toolset, z.ZodTypeDef, unknown> =
  z.object({
    account_type: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    custom_domain_id: z.string().optional(),
    default_environment_slug: z.string().optional(),
    description: z.string().optional(),
    external_oauth_server: ExternalOAuthServer$inboundSchema.optional(),
    http_tools: z.array(HTTPToolDefinition$inboundSchema),
    id: z.string(),
    mcp_enabled: z.boolean().optional(),
    mcp_is_public: z.boolean().optional(),
    mcp_slug: z.string().optional(),
    name: z.string(),
    oauth_proxy_server: OAuthProxyServer$inboundSchema.optional(),
    organization_id: z.string(),
    project_id: z.string(),
    prompt_templates: z.array(PromptTemplate$inboundSchema),
    security_variables: z.array(SecurityVariable$inboundSchema).optional(),
    server_variables: z.array(ServerVariable$inboundSchema).optional(),
    slug: z.string(),
    tool_urns: z.array(z.string()),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
  }).transform((v) => {
    return remap$(v, {
      "account_type": "accountType",
      "created_at": "createdAt",
      "custom_domain_id": "customDomainId",
      "default_environment_slug": "defaultEnvironmentSlug",
      "external_oauth_server": "externalOauthServer",
      "http_tools": "httpTools",
      "mcp_enabled": "mcpEnabled",
      "mcp_is_public": "mcpIsPublic",
      "mcp_slug": "mcpSlug",
      "oauth_proxy_server": "oauthProxyServer",
      "organization_id": "organizationId",
      "project_id": "projectId",
      "prompt_templates": "promptTemplates",
      "security_variables": "securityVariables",
      "server_variables": "serverVariables",
      "tool_urns": "toolUrns",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Toolset$Outbound = {
  account_type: string;
  created_at: string;
  custom_domain_id?: string | undefined;
  default_environment_slug?: string | undefined;
  description?: string | undefined;
  external_oauth_server?: ExternalOAuthServer$Outbound | undefined;
  http_tools: Array<HTTPToolDefinition$Outbound>;
  id: string;
  mcp_enabled?: boolean | undefined;
  mcp_is_public?: boolean | undefined;
  mcp_slug?: string | undefined;
  name: string;
  oauth_proxy_server?: OAuthProxyServer$Outbound | undefined;
  organization_id: string;
  project_id: string;
  prompt_templates: Array<PromptTemplate$Outbound>;
  security_variables?: Array<SecurityVariable$Outbound> | undefined;
  server_variables?: Array<ServerVariable$Outbound> | undefined;
  slug: string;
  tool_urns: Array<string>;
  updated_at: string;
};

/** @internal */
export const Toolset$outboundSchema: z.ZodType<
  Toolset$Outbound,
  z.ZodTypeDef,
  Toolset
> = z.object({
  accountType: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  customDomainId: z.string().optional(),
  defaultEnvironmentSlug: z.string().optional(),
  description: z.string().optional(),
  externalOauthServer: ExternalOAuthServer$outboundSchema.optional(),
  httpTools: z.array(HTTPToolDefinition$outboundSchema),
  id: z.string(),
  mcpEnabled: z.boolean().optional(),
  mcpIsPublic: z.boolean().optional(),
  mcpSlug: z.string().optional(),
  name: z.string(),
  oauthProxyServer: OAuthProxyServer$outboundSchema.optional(),
  organizationId: z.string(),
  projectId: z.string(),
  promptTemplates: z.array(PromptTemplate$outboundSchema),
  securityVariables: z.array(SecurityVariable$outboundSchema).optional(),
  serverVariables: z.array(ServerVariable$outboundSchema).optional(),
  slug: z.string(),
  toolUrns: z.array(z.string()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    accountType: "account_type",
    createdAt: "created_at",
    customDomainId: "custom_domain_id",
    defaultEnvironmentSlug: "default_environment_slug",
    externalOauthServer: "external_oauth_server",
    httpTools: "http_tools",
    mcpEnabled: "mcp_enabled",
    mcpIsPublic: "mcp_is_public",
    mcpSlug: "mcp_slug",
    oauthProxyServer: "oauth_proxy_server",
    organizationId: "organization_id",
    projectId: "project_id",
    promptTemplates: "prompt_templates",
    securityVariables: "security_variables",
    serverVariables: "server_variables",
    toolUrns: "tool_urns",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Toolset$ {
  /** @deprecated use `Toolset$inboundSchema` instead. */
  export const inboundSchema = Toolset$inboundSchema;
  /** @deprecated use `Toolset$outboundSchema` instead. */
  export const outboundSchema = Toolset$outboundSchema;
  /** @deprecated use `Toolset$Outbound` instead. */
  export type Outbound = Toolset$Outbound;
}

export function toolsetToJSON(toolset: Toolset): string {
  return JSON.stringify(Toolset$outboundSchema.parse(toolset));
}

export function toolsetFromJSON(
  jsonString: string,
): SafeParseResult<Toolset, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Toolset$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Toolset' from JSON`,
  );
}
