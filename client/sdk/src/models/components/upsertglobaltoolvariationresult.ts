/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ToolVariation,
  ToolVariation$inboundSchema,
  ToolVariation$Outbound,
  ToolVariation$outboundSchema,
} from "./toolvariation.js";

export type UpsertGlobalToolVariationResult = {
  variation: ToolVariation;
};

/** @internal */
export const UpsertGlobalToolVariationResult$inboundSchema: z.ZodType<
  UpsertGlobalToolVariationResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  variation: ToolVariation$inboundSchema,
});

/** @internal */
export type UpsertGlobalToolVariationResult$Outbound = {
  variation: ToolVariation$Outbound;
};

/** @internal */
export const UpsertGlobalToolVariationResult$outboundSchema: z.ZodType<
  UpsertGlobalToolVariationResult$Outbound,
  z.ZodTypeDef,
  UpsertGlobalToolVariationResult
> = z.object({
  variation: ToolVariation$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertGlobalToolVariationResult$ {
  /** @deprecated use `UpsertGlobalToolVariationResult$inboundSchema` instead. */
  export const inboundSchema = UpsertGlobalToolVariationResult$inboundSchema;
  /** @deprecated use `UpsertGlobalToolVariationResult$outboundSchema` instead. */
  export const outboundSchema = UpsertGlobalToolVariationResult$outboundSchema;
  /** @deprecated use `UpsertGlobalToolVariationResult$Outbound` instead. */
  export type Outbound = UpsertGlobalToolVariationResult$Outbound;
}

export function upsertGlobalToolVariationResultToJSON(
  upsertGlobalToolVariationResult: UpsertGlobalToolVariationResult,
): string {
  return JSON.stringify(
    UpsertGlobalToolVariationResult$outboundSchema.parse(
      upsertGlobalToolVariationResult,
    ),
  );
}

export function upsertGlobalToolVariationResultFromJSON(
  jsonString: string,
): SafeParseResult<UpsertGlobalToolVariationResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertGlobalToolVariationResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertGlobalToolVariationResult' from JSON`,
  );
}
