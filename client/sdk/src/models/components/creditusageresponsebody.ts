/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreditUsageResponseBody = {
  /**
   * The number of credits remaining
   */
  creditsUsed: number;
  /**
   * The number of monthly credits
   */
  monthlyCredits: number;
};

/** @internal */
export const CreditUsageResponseBody$inboundSchema: z.ZodType<
  CreditUsageResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  credits_used: z.number(),
  monthly_credits: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "credits_used": "creditsUsed",
    "monthly_credits": "monthlyCredits",
  });
});

/** @internal */
export type CreditUsageResponseBody$Outbound = {
  credits_used: number;
  monthly_credits: number;
};

/** @internal */
export const CreditUsageResponseBody$outboundSchema: z.ZodType<
  CreditUsageResponseBody$Outbound,
  z.ZodTypeDef,
  CreditUsageResponseBody
> = z.object({
  creditsUsed: z.number(),
  monthlyCredits: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    creditsUsed: "credits_used",
    monthlyCredits: "monthly_credits",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreditUsageResponseBody$ {
  /** @deprecated use `CreditUsageResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreditUsageResponseBody$inboundSchema;
  /** @deprecated use `CreditUsageResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreditUsageResponseBody$outboundSchema;
  /** @deprecated use `CreditUsageResponseBody$Outbound` instead. */
  export type Outbound = CreditUsageResponseBody$Outbound;
}

export function creditUsageResponseBodyToJSON(
  creditUsageResponseBody: CreditUsageResponseBody,
): string {
  return JSON.stringify(
    CreditUsageResponseBody$outboundSchema.parse(creditUsageResponseBody),
  );
}

export function creditUsageResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreditUsageResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreditUsageResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreditUsageResponseBody' from JSON`,
  );
}
