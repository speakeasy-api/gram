/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Package,
  Package$inboundSchema,
  Package$Outbound,
  Package$outboundSchema,
} from "./package.js";
import {
  PackageVersion,
  PackageVersion$inboundSchema,
  PackageVersion$Outbound,
  PackageVersion$outboundSchema,
} from "./packageversion.js";

export type ListVersionsResult = {
  package: Package;
  versions: Array<PackageVersion>;
};

/** @internal */
export const ListVersionsResult$inboundSchema: z.ZodType<
  ListVersionsResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  package: Package$inboundSchema,
  versions: z.array(PackageVersion$inboundSchema),
});

/** @internal */
export type ListVersionsResult$Outbound = {
  package: Package$Outbound;
  versions: Array<PackageVersion$Outbound>;
};

/** @internal */
export const ListVersionsResult$outboundSchema: z.ZodType<
  ListVersionsResult$Outbound,
  z.ZodTypeDef,
  ListVersionsResult
> = z.object({
  package: Package$outboundSchema,
  versions: z.array(PackageVersion$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListVersionsResult$ {
  /** @deprecated use `ListVersionsResult$inboundSchema` instead. */
  export const inboundSchema = ListVersionsResult$inboundSchema;
  /** @deprecated use `ListVersionsResult$outboundSchema` instead. */
  export const outboundSchema = ListVersionsResult$outboundSchema;
  /** @deprecated use `ListVersionsResult$Outbound` instead. */
  export type Outbound = ListVersionsResult$Outbound;
}

export function listVersionsResultToJSON(
  listVersionsResult: ListVersionsResult,
): string {
  return JSON.stringify(
    ListVersionsResult$outboundSchema.parse(listVersionsResult),
  );
}

export function listVersionsResultFromJSON(
  jsonString: string,
): SafeParseResult<ListVersionsResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListVersionsResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListVersionsResult' from JSON`,
  );
}
