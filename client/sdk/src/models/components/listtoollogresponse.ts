/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HTTPToolLog,
  HTTPToolLog$inboundSchema,
  HTTPToolLog$Outbound,
  HTTPToolLog$outboundSchema,
} from "./httptoollog.js";
import {
  PaginationResponse,
  PaginationResponse$inboundSchema,
  PaginationResponse$Outbound,
  PaginationResponse$outboundSchema,
} from "./paginationresponse.js";

export type ListToolLogResponse = {
  logs: Array<HTTPToolLog>;
  /**
   * Pagination metadata for list responses
   */
  pagination: PaginationResponse;
};

/** @internal */
export const ListToolLogResponse$inboundSchema: z.ZodType<
  ListToolLogResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  logs: z.array(HTTPToolLog$inboundSchema),
  pagination: PaginationResponse$inboundSchema,
});

/** @internal */
export type ListToolLogResponse$Outbound = {
  logs: Array<HTTPToolLog$Outbound>;
  pagination: PaginationResponse$Outbound;
};

/** @internal */
export const ListToolLogResponse$outboundSchema: z.ZodType<
  ListToolLogResponse$Outbound,
  z.ZodTypeDef,
  ListToolLogResponse
> = z.object({
  logs: z.array(HTTPToolLog$outboundSchema),
  pagination: PaginationResponse$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListToolLogResponse$ {
  /** @deprecated use `ListToolLogResponse$inboundSchema` instead. */
  export const inboundSchema = ListToolLogResponse$inboundSchema;
  /** @deprecated use `ListToolLogResponse$outboundSchema` instead. */
  export const outboundSchema = ListToolLogResponse$outboundSchema;
  /** @deprecated use `ListToolLogResponse$Outbound` instead. */
  export type Outbound = ListToolLogResponse$Outbound;
}

export function listToolLogResponseToJSON(
  listToolLogResponse: ListToolLogResponse,
): string {
  return JSON.stringify(
    ListToolLogResponse$outboundSchema.parse(listToolLogResponse),
  );
}

export function listToolLogResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListToolLogResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListToolLogResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListToolLogResponse' from JSON`,
  );
}
