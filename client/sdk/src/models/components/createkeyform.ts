/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateKeyForm = {
  /**
   * The name of the key
   */
  name: string;
  /**
   * The scopes of the key that determines its permissions.
   */
  scopes: Array<string>;
};

/** @internal */
export const CreateKeyForm$inboundSchema: z.ZodType<
  CreateKeyForm,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  scopes: z.array(z.string()),
});

/** @internal */
export type CreateKeyForm$Outbound = {
  name: string;
  scopes: Array<string>;
};

/** @internal */
export const CreateKeyForm$outboundSchema: z.ZodType<
  CreateKeyForm$Outbound,
  z.ZodTypeDef,
  CreateKeyForm
> = z.object({
  name: z.string(),
  scopes: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateKeyForm$ {
  /** @deprecated use `CreateKeyForm$inboundSchema` instead. */
  export const inboundSchema = CreateKeyForm$inboundSchema;
  /** @deprecated use `CreateKeyForm$outboundSchema` instead. */
  export const outboundSchema = CreateKeyForm$outboundSchema;
  /** @deprecated use `CreateKeyForm$Outbound` instead. */
  export type Outbound = CreateKeyForm$Outbound;
}

export function createKeyFormToJSON(createKeyForm: CreateKeyForm): string {
  return JSON.stringify(CreateKeyForm$outboundSchema.parse(createKeyForm));
}

export function createKeyFormFromJSON(
  jsonString: string,
): SafeParseResult<CreateKeyForm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateKeyForm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateKeyForm' from JSON`,
  );
}
