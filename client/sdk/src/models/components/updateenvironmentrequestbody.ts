/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EnvironmentEntryInput,
  EnvironmentEntryInput$inboundSchema,
  EnvironmentEntryInput$Outbound,
  EnvironmentEntryInput$outboundSchema,
} from "./environmententryinput.js";

export type UpdateEnvironmentRequestBody = {
  /**
   * The description of the environment
   */
  description?: string | undefined;
  /**
   * List of environment entry names to remove
   */
  entriesToRemove: Array<string>;
  /**
   * List of environment entries to update or create
   */
  entriesToUpdate: Array<EnvironmentEntryInput>;
  /**
   * The name of the environment
   */
  name?: string | undefined;
};

/** @internal */
export const UpdateEnvironmentRequestBody$inboundSchema: z.ZodType<
  UpdateEnvironmentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  entries_to_remove: z.array(z.string()),
  entries_to_update: z.array(EnvironmentEntryInput$inboundSchema),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "entries_to_remove": "entriesToRemove",
    "entries_to_update": "entriesToUpdate",
  });
});

/** @internal */
export type UpdateEnvironmentRequestBody$Outbound = {
  description?: string | undefined;
  entries_to_remove: Array<string>;
  entries_to_update: Array<EnvironmentEntryInput$Outbound>;
  name?: string | undefined;
};

/** @internal */
export const UpdateEnvironmentRequestBody$outboundSchema: z.ZodType<
  UpdateEnvironmentRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateEnvironmentRequestBody
> = z.object({
  description: z.string().optional(),
  entriesToRemove: z.array(z.string()),
  entriesToUpdate: z.array(EnvironmentEntryInput$outboundSchema),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    entriesToRemove: "entries_to_remove",
    entriesToUpdate: "entries_to_update",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnvironmentRequestBody$ {
  /** @deprecated use `UpdateEnvironmentRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateEnvironmentRequestBody$inboundSchema;
  /** @deprecated use `UpdateEnvironmentRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateEnvironmentRequestBody$outboundSchema;
  /** @deprecated use `UpdateEnvironmentRequestBody$Outbound` instead. */
  export type Outbound = UpdateEnvironmentRequestBody$Outbound;
}

export function updateEnvironmentRequestBodyToJSON(
  updateEnvironmentRequestBody: UpdateEnvironmentRequestBody,
): string {
  return JSON.stringify(
    UpdateEnvironmentRequestBody$outboundSchema.parse(
      updateEnvironmentRequestBody,
    ),
  );
}

export function updateEnvironmentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnvironmentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEnvironmentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnvironmentRequestBody' from JSON`,
  );
}
