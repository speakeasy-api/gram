/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeploymentLogEvent = {
  /**
   * The ID of the asset tied to the log event
   */
  attachmentId?: string | undefined;
  /**
   * The type of the asset tied to the log event
   */
  attachmentType?: string | undefined;
  /**
   * The creation date of the log event
   */
  createdAt: string;
  /**
   * The type of event that occurred
   */
  event: string;
  /**
   * The ID of the log event
   */
  id: string;
  /**
   * The message of the log event
   */
  message: string;
};

/** @internal */
export const DeploymentLogEvent$inboundSchema: z.ZodType<
  DeploymentLogEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachment_id: z.string().optional(),
  attachment_type: z.string().optional(),
  created_at: z.string(),
  event: z.string(),
  id: z.string(),
  message: z.string(),
}).transform((v) => {
  return remap$(v, {
    "attachment_id": "attachmentId",
    "attachment_type": "attachmentType",
    "created_at": "createdAt",
  });
});

/** @internal */
export type DeploymentLogEvent$Outbound = {
  attachment_id?: string | undefined;
  attachment_type?: string | undefined;
  created_at: string;
  event: string;
  id: string;
  message: string;
};

/** @internal */
export const DeploymentLogEvent$outboundSchema: z.ZodType<
  DeploymentLogEvent$Outbound,
  z.ZodTypeDef,
  DeploymentLogEvent
> = z.object({
  attachmentId: z.string().optional(),
  attachmentType: z.string().optional(),
  createdAt: z.string(),
  event: z.string(),
  id: z.string(),
  message: z.string(),
}).transform((v) => {
  return remap$(v, {
    attachmentId: "attachment_id",
    attachmentType: "attachment_type",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentLogEvent$ {
  /** @deprecated use `DeploymentLogEvent$inboundSchema` instead. */
  export const inboundSchema = DeploymentLogEvent$inboundSchema;
  /** @deprecated use `DeploymentLogEvent$outboundSchema` instead. */
  export const outboundSchema = DeploymentLogEvent$outboundSchema;
  /** @deprecated use `DeploymentLogEvent$Outbound` instead. */
  export type Outbound = DeploymentLogEvent$Outbound;
}

export function deploymentLogEventToJSON(
  deploymentLogEvent: DeploymentLogEvent,
): string {
  return JSON.stringify(
    DeploymentLogEvent$outboundSchema.parse(deploymentLogEvent),
  );
}

export function deploymentLogEventFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentLogEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentLogEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentLogEvent' from JSON`,
  );
}
