/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CanonicalToolAttributes,
  CanonicalToolAttributes$inboundSchema,
  CanonicalToolAttributes$Outbound,
  CanonicalToolAttributes$outboundSchema,
} from "./canonicaltoolattributes.js";
import {
  ToolVariation,
  ToolVariation$inboundSchema,
  ToolVariation$Outbound,
  ToolVariation$outboundSchema,
} from "./toolvariation.js";

/**
 * The template engine
 */
export const Engine = {
  Mustache: "mustache",
} as const;
/**
 * The template engine
 */
export type Engine = ClosedEnum<typeof Engine>;

/**
 * The kind of prompt the template is used for
 */
export const PromptTemplateKind = {
  Prompt: "prompt",
  HigherOrderTool: "higher_order_tool",
} as const;
/**
 * The kind of prompt the template is used for
 */
export type PromptTemplateKind = ClosedEnum<typeof PromptTemplateKind>;

/**
 * A prompt template
 */
export type PromptTemplate = {
  /**
   * The original details of a tool
   */
  canonical?: CanonicalToolAttributes | undefined;
  /**
   * The canonical name of the tool. Will be the same as the name if there is no variation.
   */
  canonicalName: string;
  /**
   * Confirmation mode for the tool
   */
  confirm?: string | undefined;
  /**
   * Prompt for the confirmation
   */
  confirmPrompt?: string | undefined;
  /**
   * The creation date of the tool.
   */
  createdAt: Date;
  /**
   * Description of the tool
   */
  description: string;
  /**
   * The template engine
   */
  engine: Engine;
  /**
   * The revision tree ID for the prompt template
   */
  historyId: string;
  /**
   * The ID of the tool
   */
  id: string;
  /**
   * The kind of prompt the template is used for
   */
  kind: PromptTemplateKind;
  /**
   * The name of the tool
   */
  name: string;
  /**
   * The previous version of the prompt template to use as predecessor
   */
  predecessorId?: string | undefined;
  /**
   * The ID of the project
   */
  projectId: string;
  /**
   * The template content
   */
  prompt: string;
  /**
   * JSON schema for the request
   */
  schema: string;
  /**
   * Version of the schema
   */
  schemaVersion?: string | undefined;
  /**
   * Summarizer for the tool
   */
  summarizer?: string | undefined;
  /**
   * The URN of this tool
   */
  toolUrn: string;
  /**
   * The suggested tool names associated with the prompt template
   */
  toolsHint: Array<string>;
  /**
   * The last update date of the tool.
   */
  updatedAt: Date;
  variation?: ToolVariation | undefined;
};

/** @internal */
export const Engine$inboundSchema: z.ZodNativeEnum<typeof Engine> = z
  .nativeEnum(Engine);

/** @internal */
export const Engine$outboundSchema: z.ZodNativeEnum<typeof Engine> =
  Engine$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Engine$ {
  /** @deprecated use `Engine$inboundSchema` instead. */
  export const inboundSchema = Engine$inboundSchema;
  /** @deprecated use `Engine$outboundSchema` instead. */
  export const outboundSchema = Engine$outboundSchema;
}

/** @internal */
export const PromptTemplateKind$inboundSchema: z.ZodNativeEnum<
  typeof PromptTemplateKind
> = z.nativeEnum(PromptTemplateKind);

/** @internal */
export const PromptTemplateKind$outboundSchema: z.ZodNativeEnum<
  typeof PromptTemplateKind
> = PromptTemplateKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PromptTemplateKind$ {
  /** @deprecated use `PromptTemplateKind$inboundSchema` instead. */
  export const inboundSchema = PromptTemplateKind$inboundSchema;
  /** @deprecated use `PromptTemplateKind$outboundSchema` instead. */
  export const outboundSchema = PromptTemplateKind$outboundSchema;
}

/** @internal */
export const PromptTemplate$inboundSchema: z.ZodType<
  PromptTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  canonical: CanonicalToolAttributes$inboundSchema.optional(),
  canonical_name: z.string(),
  confirm: z.string().optional(),
  confirm_prompt: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.string(),
  engine: Engine$inboundSchema,
  history_id: z.string(),
  id: z.string(),
  kind: PromptTemplateKind$inboundSchema,
  name: z.string(),
  predecessor_id: z.string().optional(),
  project_id: z.string(),
  prompt: z.string(),
  schema: z.string(),
  schema_version: z.string().optional(),
  summarizer: z.string().optional(),
  tool_urn: z.string(),
  tools_hint: z.array(z.string()),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  variation: ToolVariation$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "canonical_name": "canonicalName",
    "confirm_prompt": "confirmPrompt",
    "created_at": "createdAt",
    "history_id": "historyId",
    "predecessor_id": "predecessorId",
    "project_id": "projectId",
    "schema_version": "schemaVersion",
    "tool_urn": "toolUrn",
    "tools_hint": "toolsHint",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PromptTemplate$Outbound = {
  canonical?: CanonicalToolAttributes$Outbound | undefined;
  canonical_name: string;
  confirm?: string | undefined;
  confirm_prompt?: string | undefined;
  created_at: string;
  description: string;
  engine: string;
  history_id: string;
  id: string;
  kind: string;
  name: string;
  predecessor_id?: string | undefined;
  project_id: string;
  prompt: string;
  schema: string;
  schema_version?: string | undefined;
  summarizer?: string | undefined;
  tool_urn: string;
  tools_hint: Array<string>;
  updated_at: string;
  variation?: ToolVariation$Outbound | undefined;
};

/** @internal */
export const PromptTemplate$outboundSchema: z.ZodType<
  PromptTemplate$Outbound,
  z.ZodTypeDef,
  PromptTemplate
> = z.object({
  canonical: CanonicalToolAttributes$outboundSchema.optional(),
  canonicalName: z.string(),
  confirm: z.string().optional(),
  confirmPrompt: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  description: z.string(),
  engine: Engine$outboundSchema,
  historyId: z.string(),
  id: z.string(),
  kind: PromptTemplateKind$outboundSchema,
  name: z.string(),
  predecessorId: z.string().optional(),
  projectId: z.string(),
  prompt: z.string(),
  schema: z.string(),
  schemaVersion: z.string().optional(),
  summarizer: z.string().optional(),
  toolUrn: z.string(),
  toolsHint: z.array(z.string()),
  updatedAt: z.date().transform(v => v.toISOString()),
  variation: ToolVariation$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    canonicalName: "canonical_name",
    confirmPrompt: "confirm_prompt",
    createdAt: "created_at",
    historyId: "history_id",
    predecessorId: "predecessor_id",
    projectId: "project_id",
    schemaVersion: "schema_version",
    toolUrn: "tool_urn",
    toolsHint: "tools_hint",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PromptTemplate$ {
  /** @deprecated use `PromptTemplate$inboundSchema` instead. */
  export const inboundSchema = PromptTemplate$inboundSchema;
  /** @deprecated use `PromptTemplate$outboundSchema` instead. */
  export const outboundSchema = PromptTemplate$outboundSchema;
  /** @deprecated use `PromptTemplate$Outbound` instead. */
  export type Outbound = PromptTemplate$Outbound;
}

export function promptTemplateToJSON(promptTemplate: PromptTemplate): string {
  return JSON.stringify(PromptTemplate$outboundSchema.parse(promptTemplate));
}

export function promptTemplateFromJSON(
  jsonString: string,
): SafeParseResult<PromptTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PromptTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PromptTemplate' from JSON`,
  );
}
