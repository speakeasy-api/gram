/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Project = {
  /**
   * The creation date of the project.
   */
  createdAt: Date;
  /**
   * The ID of the project
   */
  id: string;
  /**
   * The ID of the logo asset for the project
   */
  logoAssetId?: string | undefined;
  /**
   * The name of the project
   */
  name: string;
  /**
   * The ID of the organization that owns the project
   */
  organizationId: string;
  /**
   * A short url-friendly label that uniquely identifies a resource.
   */
  slug: string;
  /**
   * The last update date of the project.
   */
  updatedAt: Date;
};

/** @internal */
export const Project$inboundSchema: z.ZodType<Project, z.ZodTypeDef, unknown> =
  z.object({
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    id: z.string(),
    logo_asset_id: z.string().optional(),
    name: z.string(),
    organization_id: z.string(),
    slug: z.string(),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "logo_asset_id": "logoAssetId",
      "organization_id": "organizationId",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Project$Outbound = {
  created_at: string;
  id: string;
  logo_asset_id?: string | undefined;
  name: string;
  organization_id: string;
  slug: string;
  updated_at: string;
};

/** @internal */
export const Project$outboundSchema: z.ZodType<
  Project$Outbound,
  z.ZodTypeDef,
  Project
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  id: z.string(),
  logoAssetId: z.string().optional(),
  name: z.string(),
  organizationId: z.string(),
  slug: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    logoAssetId: "logo_asset_id",
    organizationId: "organization_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Project$ {
  /** @deprecated use `Project$inboundSchema` instead. */
  export const inboundSchema = Project$inboundSchema;
  /** @deprecated use `Project$outboundSchema` instead. */
  export const outboundSchema = Project$outboundSchema;
  /** @deprecated use `Project$Outbound` instead. */
  export type Outbound = Project$Outbound;
}

export function projectToJSON(project: Project): string {
  return JSON.stringify(Project$outboundSchema.parse(project));
}

export function projectFromJSON(
  jsonString: string,
): SafeParseResult<Project, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Project$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Project' from JSON`,
  );
}
