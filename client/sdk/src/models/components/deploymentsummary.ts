/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeploymentSummary = {
  /**
   * The creation date of the deployment.
   */
  createdAt: Date;
  /**
   * The number of Functions assets.
   */
  functionsAssetCount: number;
  /**
   * The number of tools in the deployment generated from Functions.
   */
  functionsToolCount: number;
  /**
   * The ID to of the deployment.
   */
  id: string;
  /**
   * The number of upstream OpenAPI assets.
   */
  openapiv3AssetCount: number;
  /**
   * The number of tools in the deployment generated from OpenAPI documents.
   */
  openapiv3ToolCount: number;
  /**
   * The status of the deployment.
   */
  status: string;
  /**
   * The ID of the user that created the deployment.
   */
  userId: string;
};

/** @internal */
export const DeploymentSummary$inboundSchema: z.ZodType<
  DeploymentSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  functions_asset_count: z.number().int(),
  functions_tool_count: z.number().int(),
  id: z.string(),
  openapiv3_asset_count: z.number().int(),
  openapiv3_tool_count: z.number().int(),
  status: z.string(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "functions_asset_count": "functionsAssetCount",
    "functions_tool_count": "functionsToolCount",
    "openapiv3_asset_count": "openapiv3AssetCount",
    "openapiv3_tool_count": "openapiv3ToolCount",
    "user_id": "userId",
  });
});

/** @internal */
export type DeploymentSummary$Outbound = {
  created_at: string;
  functions_asset_count: number;
  functions_tool_count: number;
  id: string;
  openapiv3_asset_count: number;
  openapiv3_tool_count: number;
  status: string;
  user_id: string;
};

/** @internal */
export const DeploymentSummary$outboundSchema: z.ZodType<
  DeploymentSummary$Outbound,
  z.ZodTypeDef,
  DeploymentSummary
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  functionsAssetCount: z.number().int(),
  functionsToolCount: z.number().int(),
  id: z.string(),
  openapiv3AssetCount: z.number().int(),
  openapiv3ToolCount: z.number().int(),
  status: z.string(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    functionsAssetCount: "functions_asset_count",
    functionsToolCount: "functions_tool_count",
    openapiv3AssetCount: "openapiv3_asset_count",
    openapiv3ToolCount: "openapiv3_tool_count",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentSummary$ {
  /** @deprecated use `DeploymentSummary$inboundSchema` instead. */
  export const inboundSchema = DeploymentSummary$inboundSchema;
  /** @deprecated use `DeploymentSummary$outboundSchema` instead. */
  export const outboundSchema = DeploymentSummary$outboundSchema;
  /** @deprecated use `DeploymentSummary$Outbound` instead. */
  export type Outbound = DeploymentSummary$Outbound;
}

export function deploymentSummaryToJSON(
  deploymentSummary: DeploymentSummary,
): string {
  return JSON.stringify(
    DeploymentSummary$outboundSchema.parse(deploymentSummary),
  );
}

export function deploymentSummaryFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentSummary' from JSON`,
  );
}
