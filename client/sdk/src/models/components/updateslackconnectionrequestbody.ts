/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateSlackConnectionRequestBody = {
  /**
   * The default toolset slug for this Slack connection
   */
  defaultToolsetSlug: string;
};

/** @internal */
export const UpdateSlackConnectionRequestBody$inboundSchema: z.ZodType<
  UpdateSlackConnectionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  default_toolset_slug: z.string(),
}).transform((v) => {
  return remap$(v, {
    "default_toolset_slug": "defaultToolsetSlug",
  });
});

/** @internal */
export type UpdateSlackConnectionRequestBody$Outbound = {
  default_toolset_slug: string;
};

/** @internal */
export const UpdateSlackConnectionRequestBody$outboundSchema: z.ZodType<
  UpdateSlackConnectionRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateSlackConnectionRequestBody
> = z.object({
  defaultToolsetSlug: z.string(),
}).transform((v) => {
  return remap$(v, {
    defaultToolsetSlug: "default_toolset_slug",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSlackConnectionRequestBody$ {
  /** @deprecated use `UpdateSlackConnectionRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateSlackConnectionRequestBody$inboundSchema;
  /** @deprecated use `UpdateSlackConnectionRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateSlackConnectionRequestBody$outboundSchema;
  /** @deprecated use `UpdateSlackConnectionRequestBody$Outbound` instead. */
  export type Outbound = UpdateSlackConnectionRequestBody$Outbound;
}

export function updateSlackConnectionRequestBodyToJSON(
  updateSlackConnectionRequestBody: UpdateSlackConnectionRequestBody,
): string {
  return JSON.stringify(
    UpdateSlackConnectionRequestBody$outboundSchema.parse(
      updateSlackConnectionRequestBody,
    ),
  );
}

export function updateSlackConnectionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSlackConnectionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSlackConnectionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSlackConnectionRequestBody' from JSON`,
  );
}
