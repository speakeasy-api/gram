/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EnvironmentEntryInput,
  EnvironmentEntryInput$inboundSchema,
  EnvironmentEntryInput$Outbound,
  EnvironmentEntryInput$outboundSchema,
} from "./environmententryinput.js";

/**
 * Form for creating a new environment
 */
export type CreateEnvironmentForm = {
  /**
   * Optional description of the environment
   */
  description?: string | undefined;
  /**
   * List of environment variable entries
   */
  entries: Array<EnvironmentEntryInput>;
  /**
   * The name of the environment
   */
  name: string;
  /**
   * The organization ID this environment belongs to
   */
  organizationId: string;
};

/** @internal */
export const CreateEnvironmentForm$inboundSchema: z.ZodType<
  CreateEnvironmentForm,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  entries: z.array(EnvironmentEntryInput$inboundSchema),
  name: z.string(),
  organization_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type CreateEnvironmentForm$Outbound = {
  description?: string | undefined;
  entries: Array<EnvironmentEntryInput$Outbound>;
  name: string;
  organization_id: string;
};

/** @internal */
export const CreateEnvironmentForm$outboundSchema: z.ZodType<
  CreateEnvironmentForm$Outbound,
  z.ZodTypeDef,
  CreateEnvironmentForm
> = z.object({
  description: z.string().optional(),
  entries: z.array(EnvironmentEntryInput$outboundSchema),
  name: z.string(),
  organizationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnvironmentForm$ {
  /** @deprecated use `CreateEnvironmentForm$inboundSchema` instead. */
  export const inboundSchema = CreateEnvironmentForm$inboundSchema;
  /** @deprecated use `CreateEnvironmentForm$outboundSchema` instead. */
  export const outboundSchema = CreateEnvironmentForm$outboundSchema;
  /** @deprecated use `CreateEnvironmentForm$Outbound` instead. */
  export type Outbound = CreateEnvironmentForm$Outbound;
}

export function createEnvironmentFormToJSON(
  createEnvironmentForm: CreateEnvironmentForm,
): string {
  return JSON.stringify(
    CreateEnvironmentForm$outboundSchema.parse(createEnvironmentForm),
  );
}

export function createEnvironmentFormFromJSON(
  jsonString: string,
): SafeParseResult<CreateEnvironmentForm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEnvironmentForm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEnvironmentForm' from JSON`,
  );
}
