/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ToolEntryType = {
  Http: "http",
  Prompt: "prompt",
  Function: "function",
} as const;
export type ToolEntryType = ClosedEnum<typeof ToolEntryType>;

export type ToolEntry = {
  /**
   * The ID of the tool
   */
  id: string;
  /**
   * The name of the tool
   */
  name: string;
  /**
   * The URN of the tool
   */
  toolUrn: string;
  type: ToolEntryType;
};

/** @internal */
export const ToolEntryType$inboundSchema: z.ZodNativeEnum<
  typeof ToolEntryType
> = z.nativeEnum(ToolEntryType);

/** @internal */
export const ToolEntryType$outboundSchema: z.ZodNativeEnum<
  typeof ToolEntryType
> = ToolEntryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolEntryType$ {
  /** @deprecated use `ToolEntryType$inboundSchema` instead. */
  export const inboundSchema = ToolEntryType$inboundSchema;
  /** @deprecated use `ToolEntryType$outboundSchema` instead. */
  export const outboundSchema = ToolEntryType$outboundSchema;
}

/** @internal */
export const ToolEntry$inboundSchema: z.ZodType<
  ToolEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  tool_urn: z.string(),
  type: ToolEntryType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "tool_urn": "toolUrn",
  });
});

/** @internal */
export type ToolEntry$Outbound = {
  id: string;
  name: string;
  tool_urn: string;
  type: string;
};

/** @internal */
export const ToolEntry$outboundSchema: z.ZodType<
  ToolEntry$Outbound,
  z.ZodTypeDef,
  ToolEntry
> = z.object({
  id: z.string(),
  name: z.string(),
  toolUrn: z.string(),
  type: ToolEntryType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    toolUrn: "tool_urn",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolEntry$ {
  /** @deprecated use `ToolEntry$inboundSchema` instead. */
  export const inboundSchema = ToolEntry$inboundSchema;
  /** @deprecated use `ToolEntry$outboundSchema` instead. */
  export const outboundSchema = ToolEntry$outboundSchema;
  /** @deprecated use `ToolEntry$Outbound` instead. */
  export type Outbound = ToolEntry$Outbound;
}

export function toolEntryToJSON(toolEntry: ToolEntry): string {
  return JSON.stringify(ToolEntry$outboundSchema.parse(toolEntry));
}

export function toolEntryFromJSON(
  jsonString: string,
): SafeParseResult<ToolEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolEntry' from JSON`,
  );
}
