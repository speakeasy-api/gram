/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Resource,
  Resource$inboundSchema,
  Resource$Outbound,
  Resource$outboundSchema,
} from "./resource.js";

export type ListResourcesResult = {
  /**
   * The cursor to fetch results from
   */
  nextCursor?: string | undefined;
  /**
   * The list of resources
   */
  resources: Array<Resource>;
};

/** @internal */
export const ListResourcesResult$inboundSchema: z.ZodType<
  ListResourcesResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  next_cursor: z.string().optional(),
  resources: z.array(Resource$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListResourcesResult$Outbound = {
  next_cursor?: string | undefined;
  resources: Array<Resource$Outbound>;
};

/** @internal */
export const ListResourcesResult$outboundSchema: z.ZodType<
  ListResourcesResult$Outbound,
  z.ZodTypeDef,
  ListResourcesResult
> = z.object({
  nextCursor: z.string().optional(),
  resources: z.array(Resource$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourcesResult$ {
  /** @deprecated use `ListResourcesResult$inboundSchema` instead. */
  export const inboundSchema = ListResourcesResult$inboundSchema;
  /** @deprecated use `ListResourcesResult$outboundSchema` instead. */
  export const outboundSchema = ListResourcesResult$outboundSchema;
  /** @deprecated use `ListResourcesResult$Outbound` instead. */
  export type Outbound = ListResourcesResult$Outbound;
}

export function listResourcesResultToJSON(
  listResourcesResult: ListResourcesResult,
): string {
  return JSON.stringify(
    ListResourcesResult$outboundSchema.parse(listResourcesResult),
  );
}

export function listResourcesResultFromJSON(
  jsonString: string,
): SafeParseResult<ListResourcesResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourcesResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourcesResult' from JSON`,
  );
}
