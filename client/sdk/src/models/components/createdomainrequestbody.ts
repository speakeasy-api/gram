/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateDomainRequestBody = {
  /**
   * The custom domain
   */
  domain: string;
};

/** @internal */
export const CreateDomainRequestBody$inboundSchema: z.ZodType<
  CreateDomainRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
});

/** @internal */
export type CreateDomainRequestBody$Outbound = {
  domain: string;
};

/** @internal */
export const CreateDomainRequestBody$outboundSchema: z.ZodType<
  CreateDomainRequestBody$Outbound,
  z.ZodTypeDef,
  CreateDomainRequestBody
> = z.object({
  domain: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDomainRequestBody$ {
  /** @deprecated use `CreateDomainRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateDomainRequestBody$inboundSchema;
  /** @deprecated use `CreateDomainRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateDomainRequestBody$outboundSchema;
  /** @deprecated use `CreateDomainRequestBody$Outbound` instead. */
  export type Outbound = CreateDomainRequestBody$Outbound;
}

export function createDomainRequestBodyToJSON(
  createDomainRequestBody: CreateDomainRequestBody,
): string {
  return JSON.stringify(
    CreateDomainRequestBody$outboundSchema.parse(createDomainRequestBody),
  );
}

export function createDomainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateDomainRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDomainRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDomainRequestBody' from JSON`,
  );
}
