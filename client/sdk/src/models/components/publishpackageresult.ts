/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Package,
  Package$inboundSchema,
  Package$Outbound,
  Package$outboundSchema,
} from "./package.js";
import {
  PackageVersion,
  PackageVersion$inboundSchema,
  PackageVersion$Outbound,
  PackageVersion$outboundSchema,
} from "./packageversion.js";

export type PublishPackageResult = {
  package: Package;
  version: PackageVersion;
};

/** @internal */
export const PublishPackageResult$inboundSchema: z.ZodType<
  PublishPackageResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  package: Package$inboundSchema,
  version: PackageVersion$inboundSchema,
});

/** @internal */
export type PublishPackageResult$Outbound = {
  package: Package$Outbound;
  version: PackageVersion$Outbound;
};

/** @internal */
export const PublishPackageResult$outboundSchema: z.ZodType<
  PublishPackageResult$Outbound,
  z.ZodTypeDef,
  PublishPackageResult
> = z.object({
  package: Package$outboundSchema,
  version: PackageVersion$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublishPackageResult$ {
  /** @deprecated use `PublishPackageResult$inboundSchema` instead. */
  export const inboundSchema = PublishPackageResult$inboundSchema;
  /** @deprecated use `PublishPackageResult$outboundSchema` instead. */
  export const outboundSchema = PublishPackageResult$outboundSchema;
  /** @deprecated use `PublishPackageResult$Outbound` instead. */
  export type Outbound = PublishPackageResult$Outbound;
}

export function publishPackageResultToJSON(
  publishPackageResult: PublishPackageResult,
): string {
  return JSON.stringify(
    PublishPackageResult$outboundSchema.parse(publishPackageResult),
  );
}

export function publishPackageResultFromJSON(
  jsonString: string,
): SafeParseResult<PublishPackageResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublishPackageResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublishPackageResult' from JSON`,
  );
}
