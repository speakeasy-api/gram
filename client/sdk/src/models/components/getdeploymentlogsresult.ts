/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DeploymentLogEvent,
  DeploymentLogEvent$inboundSchema,
  DeploymentLogEvent$Outbound,
  DeploymentLogEvent$outboundSchema,
} from "./deploymentlogevent.js";

export type GetDeploymentLogsResult = {
  /**
   * The logs for the deployment
   */
  events: Array<DeploymentLogEvent>;
  /**
   * The cursor to fetch results from
   */
  nextCursor?: string | undefined;
  /**
   * The status of the deployment
   */
  status: string;
};

/** @internal */
export const GetDeploymentLogsResult$inboundSchema: z.ZodType<
  GetDeploymentLogsResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  events: z.array(DeploymentLogEvent$inboundSchema),
  next_cursor: z.string().optional(),
  status: z.string(),
}).transform((v) => {
  return remap$(v, {
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type GetDeploymentLogsResult$Outbound = {
  events: Array<DeploymentLogEvent$Outbound>;
  next_cursor?: string | undefined;
  status: string;
};

/** @internal */
export const GetDeploymentLogsResult$outboundSchema: z.ZodType<
  GetDeploymentLogsResult$Outbound,
  z.ZodTypeDef,
  GetDeploymentLogsResult
> = z.object({
  events: z.array(DeploymentLogEvent$outboundSchema),
  nextCursor: z.string().optional(),
  status: z.string(),
}).transform((v) => {
  return remap$(v, {
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentLogsResult$ {
  /** @deprecated use `GetDeploymentLogsResult$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentLogsResult$inboundSchema;
  /** @deprecated use `GetDeploymentLogsResult$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentLogsResult$outboundSchema;
  /** @deprecated use `GetDeploymentLogsResult$Outbound` instead. */
  export type Outbound = GetDeploymentLogsResult$Outbound;
}

export function getDeploymentLogsResultToJSON(
  getDeploymentLogsResult: GetDeploymentLogsResult,
): string {
  return JSON.stringify(
    GetDeploymentLogsResult$outboundSchema.parse(getDeploymentLogsResult),
  );
}

export function getDeploymentLogsResultFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentLogsResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentLogsResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentLogsResult' from JSON`,
  );
}
