/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Type of tool being logged
 */
export const ToolType = {
  Http: "http",
  Function: "function",
  Prompt: "prompt",
} as const;
/**
 * Type of tool being logged
 */
export type ToolType = ClosedEnum<typeof ToolType>;

/**
 * HTTP tool request and response log entry
 */
export type HTTPToolLog = {
  /**
   * Deployment UUID
   */
  deploymentId: string;
  /**
   * Duration in milliseconds
   */
  durationMs: number;
  /**
   * HTTP method
   */
  httpMethod: string;
  /**
   * HTTP route
   */
  httpRoute: string;
  /**
   * Id of the request
   */
  id?: string | undefined;
  /**
   * Organization UUID
   */
  organizationId: string;
  /**
   * Project UUID
   */
  projectId?: string | undefined;
  /**
   * Request body size in bytes
   */
  requestBodyBytes?: number | undefined;
  /**
   * Request headers
   */
  requestHeaders?: { [k: string]: string } | undefined;
  /**
   * Response body size in bytes
   */
  responseBodyBytes?: number | undefined;
  /**
   * Response headers
   */
  responseHeaders?: { [k: string]: string } | undefined;
  /**
   * Span ID for correlation
   */
  spanId: string;
  /**
   * HTTP status code
   */
  statusCode: number;
  /**
   * Tool UUID
   */
  toolId: string;
  /**
   * Type of tool being logged
   */
  toolType: ToolType;
  /**
   * Tool URN
   */
  toolUrn: string;
  /**
   * Trace ID for correlation
   */
  traceId: string;
  /**
   * Timestamp of the request
   */
  ts: Date;
  /**
   * User agent
   */
  userAgent: string;
};

/** @internal */
export const ToolType$inboundSchema: z.ZodNativeEnum<typeof ToolType> = z
  .nativeEnum(ToolType);

/** @internal */
export const ToolType$outboundSchema: z.ZodNativeEnum<typeof ToolType> =
  ToolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolType$ {
  /** @deprecated use `ToolType$inboundSchema` instead. */
  export const inboundSchema = ToolType$inboundSchema;
  /** @deprecated use `ToolType$outboundSchema` instead. */
  export const outboundSchema = ToolType$outboundSchema;
}

/** @internal */
export const HTTPToolLog$inboundSchema: z.ZodType<
  HTTPToolLog,
  z.ZodTypeDef,
  unknown
> = z.object({
  deployment_id: z.string(),
  duration_ms: z.number(),
  http_method: z.string(),
  http_route: z.string(),
  id: z.string().optional(),
  organization_id: z.string(),
  project_id: z.string().optional(),
  request_body_bytes: z.number().int().optional(),
  request_headers: z.record(z.string()).optional(),
  response_body_bytes: z.number().int().optional(),
  response_headers: z.record(z.string()).optional(),
  span_id: z.string(),
  status_code: z.number().int(),
  tool_id: z.string(),
  tool_type: ToolType$inboundSchema,
  tool_urn: z.string(),
  trace_id: z.string(),
  ts: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  user_agent: z.string(),
}).transform((v) => {
  return remap$(v, {
    "deployment_id": "deploymentId",
    "duration_ms": "durationMs",
    "http_method": "httpMethod",
    "http_route": "httpRoute",
    "organization_id": "organizationId",
    "project_id": "projectId",
    "request_body_bytes": "requestBodyBytes",
    "request_headers": "requestHeaders",
    "response_body_bytes": "responseBodyBytes",
    "response_headers": "responseHeaders",
    "span_id": "spanId",
    "status_code": "statusCode",
    "tool_id": "toolId",
    "tool_type": "toolType",
    "tool_urn": "toolUrn",
    "trace_id": "traceId",
    "user_agent": "userAgent",
  });
});

/** @internal */
export type HTTPToolLog$Outbound = {
  deployment_id: string;
  duration_ms: number;
  http_method: string;
  http_route: string;
  id?: string | undefined;
  organization_id: string;
  project_id?: string | undefined;
  request_body_bytes?: number | undefined;
  request_headers?: { [k: string]: string } | undefined;
  response_body_bytes?: number | undefined;
  response_headers?: { [k: string]: string } | undefined;
  span_id: string;
  status_code: number;
  tool_id: string;
  tool_type: string;
  tool_urn: string;
  trace_id: string;
  ts: string;
  user_agent: string;
};

/** @internal */
export const HTTPToolLog$outboundSchema: z.ZodType<
  HTTPToolLog$Outbound,
  z.ZodTypeDef,
  HTTPToolLog
> = z.object({
  deploymentId: z.string(),
  durationMs: z.number(),
  httpMethod: z.string(),
  httpRoute: z.string(),
  id: z.string().optional(),
  organizationId: z.string(),
  projectId: z.string().optional(),
  requestBodyBytes: z.number().int().optional(),
  requestHeaders: z.record(z.string()).optional(),
  responseBodyBytes: z.number().int().optional(),
  responseHeaders: z.record(z.string()).optional(),
  spanId: z.string(),
  statusCode: z.number().int(),
  toolId: z.string(),
  toolType: ToolType$outboundSchema,
  toolUrn: z.string(),
  traceId: z.string(),
  ts: z.date().transform(v => v.toISOString()),
  userAgent: z.string(),
}).transform((v) => {
  return remap$(v, {
    deploymentId: "deployment_id",
    durationMs: "duration_ms",
    httpMethod: "http_method",
    httpRoute: "http_route",
    organizationId: "organization_id",
    projectId: "project_id",
    requestBodyBytes: "request_body_bytes",
    requestHeaders: "request_headers",
    responseBodyBytes: "response_body_bytes",
    responseHeaders: "response_headers",
    spanId: "span_id",
    statusCode: "status_code",
    toolId: "tool_id",
    toolType: "tool_type",
    toolUrn: "tool_urn",
    traceId: "trace_id",
    userAgent: "user_agent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HTTPToolLog$ {
  /** @deprecated use `HTTPToolLog$inboundSchema` instead. */
  export const inboundSchema = HTTPToolLog$inboundSchema;
  /** @deprecated use `HTTPToolLog$outboundSchema` instead. */
  export const outboundSchema = HTTPToolLog$outboundSchema;
  /** @deprecated use `HTTPToolLog$Outbound` instead. */
  export type Outbound = HTTPToolLog$Outbound;
}

export function httpToolLogToJSON(httpToolLog: HTTPToolLog): string {
  return JSON.stringify(HTTPToolLog$outboundSchema.parse(httpToolLog));
}

export function httpToolLogFromJSON(
  jsonString: string,
): SafeParseResult<HTTPToolLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HTTPToolLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HTTPToolLog' from JSON`,
  );
}
