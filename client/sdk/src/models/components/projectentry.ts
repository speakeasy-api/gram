/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ProjectEntry = {
  /**
   * The ID of the project
   */
  id: string;
  /**
   * The name of the project
   */
  name: string;
  /**
   * A short url-friendly label that uniquely identifies a resource.
   */
  slug: string;
};

/** @internal */
export const ProjectEntry$inboundSchema: z.ZodType<
  ProjectEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
});

/** @internal */
export type ProjectEntry$Outbound = {
  id: string;
  name: string;
  slug: string;
};

/** @internal */
export const ProjectEntry$outboundSchema: z.ZodType<
  ProjectEntry$Outbound,
  z.ZodTypeDef,
  ProjectEntry
> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectEntry$ {
  /** @deprecated use `ProjectEntry$inboundSchema` instead. */
  export const inboundSchema = ProjectEntry$inboundSchema;
  /** @deprecated use `ProjectEntry$outboundSchema` instead. */
  export const outboundSchema = ProjectEntry$outboundSchema;
  /** @deprecated use `ProjectEntry$Outbound` instead. */
  export type Outbound = ProjectEntry$Outbound;
}

export function projectEntryToJSON(projectEntry: ProjectEntry): string {
  return JSON.stringify(ProjectEntry$outboundSchema.parse(projectEntry));
}

export function projectEntryFromJSON(
  jsonString: string,
): SafeParseResult<ProjectEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectEntry' from JSON`,
  );
}
