/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HTTPToolDefinition,
  HTTPToolDefinition$inboundSchema,
  HTTPToolDefinition$Outbound,
  HTTPToolDefinition$outboundSchema,
} from "./httptooldefinition.js";
import {
  PromptTemplate,
  PromptTemplate$inboundSchema,
  PromptTemplate$Outbound,
  PromptTemplate$outboundSchema,
} from "./prompttemplate.js";

/**
 * A polymorphic tool - can be an HTTP tool or a prompt template
 */
export type Tool =
  | (HTTPToolDefinition & { type: "http" })
  | (PromptTemplate & { type: "prompt" });

/** @internal */
export const Tool$inboundSchema: z.ZodType<Tool, z.ZodTypeDef, unknown> = z
  .union([
    HTTPToolDefinition$inboundSchema.and(
      z.object({ type: z.literal("http") }).transform((v) => ({
        type: v.type,
      })),
    ),
    PromptTemplate$inboundSchema.and(
      z.object({ type: z.literal("prompt") }).transform((v) => ({
        type: v.type,
      })),
    ),
  ]);

/** @internal */
export type Tool$Outbound =
  | (HTTPToolDefinition$Outbound & { type: "http" })
  | (PromptTemplate$Outbound & { type: "prompt" });

/** @internal */
export const Tool$outboundSchema: z.ZodType<Tool$Outbound, z.ZodTypeDef, Tool> =
  z.union([
    HTTPToolDefinition$outboundSchema.and(
      z.object({ type: z.literal("http") }).transform((v) => ({
        type: v.type,
      })),
    ),
    PromptTemplate$outboundSchema.and(
      z.object({ type: z.literal("prompt") }).transform((v) => ({
        type: v.type,
      })),
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tool$ {
  /** @deprecated use `Tool$inboundSchema` instead. */
  export const inboundSchema = Tool$inboundSchema;
  /** @deprecated use `Tool$outboundSchema` instead. */
  export const outboundSchema = Tool$outboundSchema;
  /** @deprecated use `Tool$Outbound` instead. */
  export type Outbound = Tool$Outbound;
}

export function toolToJSON(tool: Tool): string {
  return JSON.stringify(Tool$outboundSchema.parse(tool));
}

export function toolFromJSON(
  jsonString: string,
): SafeParseResult<Tool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tool' from JSON`,
  );
}
