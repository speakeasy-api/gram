/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RenderTemplateByIDRequestBody = {
  /**
   * The input data to render the template with
   */
  arguments: { [k: string]: any };
};

/** @internal */
export const RenderTemplateByIDRequestBody$inboundSchema: z.ZodType<
  RenderTemplateByIDRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  arguments: z.record(z.any()),
});

/** @internal */
export type RenderTemplateByIDRequestBody$Outbound = {
  arguments: { [k: string]: any };
};

/** @internal */
export const RenderTemplateByIDRequestBody$outboundSchema: z.ZodType<
  RenderTemplateByIDRequestBody$Outbound,
  z.ZodTypeDef,
  RenderTemplateByIDRequestBody
> = z.object({
  arguments: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenderTemplateByIDRequestBody$ {
  /** @deprecated use `RenderTemplateByIDRequestBody$inboundSchema` instead. */
  export const inboundSchema = RenderTemplateByIDRequestBody$inboundSchema;
  /** @deprecated use `RenderTemplateByIDRequestBody$outboundSchema` instead. */
  export const outboundSchema = RenderTemplateByIDRequestBody$outboundSchema;
  /** @deprecated use `RenderTemplateByIDRequestBody$Outbound` instead. */
  export type Outbound = RenderTemplateByIDRequestBody$Outbound;
}

export function renderTemplateByIDRequestBodyToJSON(
  renderTemplateByIDRequestBody: RenderTemplateByIDRequestBody,
): string {
  return JSON.stringify(
    RenderTemplateByIDRequestBody$outboundSchema.parse(
      renderTemplateByIDRequestBody,
    ),
  );
}

export function renderTemplateByIDRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RenderTemplateByIDRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenderTemplateByIDRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenderTemplateByIDRequestBody' from JSON`,
  );
}
