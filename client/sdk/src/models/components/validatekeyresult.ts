/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ValidateKeyOrganization,
  ValidateKeyOrganization$inboundSchema,
  ValidateKeyOrganization$Outbound,
  ValidateKeyOrganization$outboundSchema,
} from "./validatekeyorganization.js";
import {
  ValidateKeyProject,
  ValidateKeyProject$inboundSchema,
  ValidateKeyProject$Outbound,
  ValidateKeyProject$outboundSchema,
} from "./validatekeyproject.js";

export type ValidateKeyResult = {
  organization: ValidateKeyOrganization;
  /**
   * The projects accessible with this key
   */
  projects: Array<ValidateKeyProject>;
  /**
   * List of permission scopes for this key
   */
  scopes: Array<string>;
};

/** @internal */
export const ValidateKeyResult$inboundSchema: z.ZodType<
  ValidateKeyResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization: ValidateKeyOrganization$inboundSchema,
  projects: z.array(ValidateKeyProject$inboundSchema),
  scopes: z.array(z.string()),
});

/** @internal */
export type ValidateKeyResult$Outbound = {
  organization: ValidateKeyOrganization$Outbound;
  projects: Array<ValidateKeyProject$Outbound>;
  scopes: Array<string>;
};

/** @internal */
export const ValidateKeyResult$outboundSchema: z.ZodType<
  ValidateKeyResult$Outbound,
  z.ZodTypeDef,
  ValidateKeyResult
> = z.object({
  organization: ValidateKeyOrganization$outboundSchema,
  projects: z.array(ValidateKeyProject$outboundSchema),
  scopes: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidateKeyResult$ {
  /** @deprecated use `ValidateKeyResult$inboundSchema` instead. */
  export const inboundSchema = ValidateKeyResult$inboundSchema;
  /** @deprecated use `ValidateKeyResult$outboundSchema` instead. */
  export const outboundSchema = ValidateKeyResult$outboundSchema;
  /** @deprecated use `ValidateKeyResult$Outbound` instead. */
  export type Outbound = ValidateKeyResult$Outbound;
}

export function validateKeyResultToJSON(
  validateKeyResult: ValidateKeyResult,
): string {
  return JSON.stringify(
    ValidateKeyResult$outboundSchema.parse(validateKeyResult),
  );
}

export function validateKeyResultFromJSON(
  jsonString: string,
): SafeParseResult<ValidateKeyResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidateKeyResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidateKeyResult' from JSON`,
  );
}
