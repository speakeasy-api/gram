/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RedeployRequestBody = {
  /**
   * The ID of the deployment to redeploy.
   */
  deploymentId: string;
};

/** @internal */
export const RedeployRequestBody$inboundSchema: z.ZodType<
  RedeployRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  deployment_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "deployment_id": "deploymentId",
  });
});

/** @internal */
export type RedeployRequestBody$Outbound = {
  deployment_id: string;
};

/** @internal */
export const RedeployRequestBody$outboundSchema: z.ZodType<
  RedeployRequestBody$Outbound,
  z.ZodTypeDef,
  RedeployRequestBody
> = z.object({
  deploymentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    deploymentId: "deployment_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedeployRequestBody$ {
  /** @deprecated use `RedeployRequestBody$inboundSchema` instead. */
  export const inboundSchema = RedeployRequestBody$inboundSchema;
  /** @deprecated use `RedeployRequestBody$outboundSchema` instead. */
  export const outboundSchema = RedeployRequestBody$outboundSchema;
  /** @deprecated use `RedeployRequestBody$Outbound` instead. */
  export type Outbound = RedeployRequestBody$Outbound;
}

export function redeployRequestBodyToJSON(
  redeployRequestBody: RedeployRequestBody,
): string {
  return JSON.stringify(
    RedeployRequestBody$outboundSchema.parse(redeployRequestBody),
  );
}

export function redeployRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RedeployRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedeployRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedeployRequestBody' from JSON`,
  );
}
