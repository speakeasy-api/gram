/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomDomain = {
  /**
   * Whether the domain is activated in ingress
   */
  activated: boolean;
  /**
   * When the custom domain was created.
   */
  createdAt: Date;
  /**
   * The custom domain name
   */
  domain: string;
  /**
   * The ID of the custom domain
   */
  id: string;
  /**
   * The custom domain is actively being registered
   */
  isUpdating: boolean;
  /**
   * The ID of the organization this domain belongs to
   */
  organizationId: string;
  /**
   * When the custom domain was last updated.
   */
  updatedAt: Date;
  /**
   * Whether the domain is verified
   */
  verified: boolean;
};

/** @internal */
export const CustomDomain$inboundSchema: z.ZodType<
  CustomDomain,
  z.ZodTypeDef,
  unknown
> = z.object({
  activated: z.boolean(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  domain: z.string(),
  id: z.string(),
  is_updating: z.boolean(),
  organization_id: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  verified: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "is_updating": "isUpdating",
    "organization_id": "organizationId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type CustomDomain$Outbound = {
  activated: boolean;
  created_at: string;
  domain: string;
  id: string;
  is_updating: boolean;
  organization_id: string;
  updated_at: string;
  verified: boolean;
};

/** @internal */
export const CustomDomain$outboundSchema: z.ZodType<
  CustomDomain$Outbound,
  z.ZodTypeDef,
  CustomDomain
> = z.object({
  activated: z.boolean(),
  createdAt: z.date().transform(v => v.toISOString()),
  domain: z.string(),
  id: z.string(),
  isUpdating: z.boolean(),
  organizationId: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
  verified: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    isUpdating: "is_updating",
    organizationId: "organization_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomDomain$ {
  /** @deprecated use `CustomDomain$inboundSchema` instead. */
  export const inboundSchema = CustomDomain$inboundSchema;
  /** @deprecated use `CustomDomain$outboundSchema` instead. */
  export const outboundSchema = CustomDomain$outboundSchema;
  /** @deprecated use `CustomDomain$Outbound` instead. */
  export type Outbound = CustomDomain$Outbound;
}

export function customDomainToJSON(customDomain: CustomDomain): string {
  return JSON.stringify(CustomDomain$outboundSchema.parse(customDomain));
}

export function customDomainFromJSON(
  jsonString: string,
): SafeParseResult<CustomDomain, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomDomain$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomDomain' from JSON`,
  );
}
