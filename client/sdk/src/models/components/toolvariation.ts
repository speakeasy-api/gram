/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolVariation = {
  /**
   * The confirmation mode for the tool variation
   */
  confirm?: string | undefined;
  /**
   * The confirmation prompt for the tool variation
   */
  confirmPrompt?: string | undefined;
  /**
   * The creation date of the tool variation
   */
  createdAt: string;
  /**
   * The description of the tool variation
   */
  description?: string | undefined;
  /**
   * The ID of the tool variation group
   */
  groupId: string;
  /**
   * The ID of the tool variation
   */
  id: string;
  /**
   * The name of the tool variation
   */
  name?: string | undefined;
  /**
   * The name of the source tool
   */
  srcToolName: string;
  /**
   * The URN of the source tool
   */
  srcToolUrn: string;
  /**
   * The summarizer of the tool variation
   */
  summarizer?: string | undefined;
  /**
   * The last update date of the tool variation
   */
  updatedAt: string;
};

/** @internal */
export const ToolVariation$inboundSchema: z.ZodType<
  ToolVariation,
  z.ZodTypeDef,
  unknown
> = z.object({
  confirm: z.string().optional(),
  confirm_prompt: z.string().optional(),
  created_at: z.string(),
  description: z.string().optional(),
  group_id: z.string(),
  id: z.string(),
  name: z.string().optional(),
  src_tool_name: z.string(),
  src_tool_urn: z.string(),
  summarizer: z.string().optional(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "confirm_prompt": "confirmPrompt",
    "created_at": "createdAt",
    "group_id": "groupId",
    "src_tool_name": "srcToolName",
    "src_tool_urn": "srcToolUrn",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ToolVariation$Outbound = {
  confirm?: string | undefined;
  confirm_prompt?: string | undefined;
  created_at: string;
  description?: string | undefined;
  group_id: string;
  id: string;
  name?: string | undefined;
  src_tool_name: string;
  src_tool_urn: string;
  summarizer?: string | undefined;
  updated_at: string;
};

/** @internal */
export const ToolVariation$outboundSchema: z.ZodType<
  ToolVariation$Outbound,
  z.ZodTypeDef,
  ToolVariation
> = z.object({
  confirm: z.string().optional(),
  confirmPrompt: z.string().optional(),
  createdAt: z.string(),
  description: z.string().optional(),
  groupId: z.string(),
  id: z.string(),
  name: z.string().optional(),
  srcToolName: z.string(),
  srcToolUrn: z.string(),
  summarizer: z.string().optional(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    confirmPrompt: "confirm_prompt",
    createdAt: "created_at",
    groupId: "group_id",
    srcToolName: "src_tool_name",
    srcToolUrn: "src_tool_urn",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolVariation$ {
  /** @deprecated use `ToolVariation$inboundSchema` instead. */
  export const inboundSchema = ToolVariation$inboundSchema;
  /** @deprecated use `ToolVariation$outboundSchema` instead. */
  export const outboundSchema = ToolVariation$outboundSchema;
  /** @deprecated use `ToolVariation$Outbound` instead. */
  export type Outbound = ToolVariation$Outbound;
}

export function toolVariationToJSON(toolVariation: ToolVariation): string {
  return JSON.stringify(ToolVariation$outboundSchema.parse(toolVariation));
}

export function toolVariationFromJSON(
  jsonString: string,
): SafeParseResult<ToolVariation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolVariation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolVariation' from JSON`,
  );
}
