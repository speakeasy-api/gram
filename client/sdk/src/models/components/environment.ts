/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EnvironmentEntry,
  EnvironmentEntry$inboundSchema,
  EnvironmentEntry$Outbound,
  EnvironmentEntry$outboundSchema,
} from "./environmententry.js";

/**
 * Model representing an environment
 */
export type Environment = {
  /**
   * The creation date of the environment
   */
  createdAt: Date;
  /**
   * The description of the environment
   */
  description?: string | undefined;
  /**
   * List of environment entries
   */
  entries: Array<EnvironmentEntry>;
  /**
   * The ID of the environment
   */
  id: string;
  /**
   * The name of the environment
   */
  name: string;
  /**
   * The organization ID this environment belongs to
   */
  organizationId: string;
  /**
   * The project ID this environment belongs to
   */
  projectId: string;
  /**
   * A short url-friendly label that uniquely identifies a resource.
   */
  slug: string;
  /**
   * When the environment was last updated
   */
  updatedAt: Date;
};

/** @internal */
export const Environment$inboundSchema: z.ZodType<
  Environment,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.string().optional(),
  entries: z.array(EnvironmentEntry$inboundSchema),
  id: z.string(),
  name: z.string(),
  organization_id: z.string(),
  project_id: z.string(),
  slug: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "organization_id": "organizationId",
    "project_id": "projectId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type Environment$Outbound = {
  created_at: string;
  description?: string | undefined;
  entries: Array<EnvironmentEntry$Outbound>;
  id: string;
  name: string;
  organization_id: string;
  project_id: string;
  slug: string;
  updated_at: string;
};

/** @internal */
export const Environment$outboundSchema: z.ZodType<
  Environment$Outbound,
  z.ZodTypeDef,
  Environment
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  description: z.string().optional(),
  entries: z.array(EnvironmentEntry$outboundSchema),
  id: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
  slug: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    organizationId: "organization_id",
    projectId: "project_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Environment$ {
  /** @deprecated use `Environment$inboundSchema` instead. */
  export const inboundSchema = Environment$inboundSchema;
  /** @deprecated use `Environment$outboundSchema` instead. */
  export const outboundSchema = Environment$outboundSchema;
  /** @deprecated use `Environment$Outbound` instead. */
  export type Outbound = Environment$Outbound;
}

export function environmentToJSON(environment: Environment): string {
  return JSON.stringify(Environment$outboundSchema.parse(environment));
}

export function environmentFromJSON(
  jsonString: string,
): SafeParseResult<Environment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Environment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Environment' from JSON`,
  );
}
