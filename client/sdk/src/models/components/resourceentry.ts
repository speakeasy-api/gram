/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Type = {
  Function: "function",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type ResourceEntry = {
  /**
   * The ID of the resource
   */
  id: string;
  /**
   * The name of the resource
   */
  name: string;
  /**
   * The URN of the resource
   */
  resourceUrn: string;
  type: Type;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const ResourceEntry$inboundSchema: z.ZodType<
  ResourceEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  resource_urn: z.string(),
  type: Type$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "resource_urn": "resourceUrn",
  });
});

/** @internal */
export type ResourceEntry$Outbound = {
  id: string;
  name: string;
  resource_urn: string;
  type: string;
};

/** @internal */
export const ResourceEntry$outboundSchema: z.ZodType<
  ResourceEntry$Outbound,
  z.ZodTypeDef,
  ResourceEntry
> = z.object({
  id: z.string(),
  name: z.string(),
  resourceUrn: z.string(),
  type: Type$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    resourceUrn: "resource_urn",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceEntry$ {
  /** @deprecated use `ResourceEntry$inboundSchema` instead. */
  export const inboundSchema = ResourceEntry$inboundSchema;
  /** @deprecated use `ResourceEntry$outboundSchema` instead. */
  export const outboundSchema = ResourceEntry$outboundSchema;
  /** @deprecated use `ResourceEntry$Outbound` instead. */
  export type Outbound = ResourceEntry$Outbound;
}

export function resourceEntryToJSON(resourceEntry: ResourceEntry): string {
  return JSON.stringify(ResourceEntry$outboundSchema.parse(resourceEntry));
}

export function resourceEntryFromJSON(
  jsonString: string,
): SafeParseResult<ResourceEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourceEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourceEntry' from JSON`,
  );
}
