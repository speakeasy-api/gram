/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatMessage,
  ChatMessage$inboundSchema,
  ChatMessage$Outbound,
  ChatMessage$outboundSchema,
} from "./chatmessage.js";

export type Chat = {
  /**
   * When the chat was created.
   */
  createdAt: Date;
  /**
   * The ID of the chat
   */
  id: string;
  /**
   * The list of messages in the chat
   */
  messages: Array<ChatMessage>;
  /**
   * The number of messages in the chat
   */
  numMessages: number;
  /**
   * The title of the chat
   */
  title: string;
  /**
   * When the chat was last updated.
   */
  updatedAt: Date;
  /**
   * The ID of the user who created the chat
   */
  userId: string;
};

/** @internal */
export const Chat$inboundSchema: z.ZodType<Chat, z.ZodTypeDef, unknown> = z
  .object({
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    id: z.string(),
    messages: z.array(ChatMessage$inboundSchema),
    num_messages: z.number().int(),
    title: z.string(),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    user_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "num_messages": "numMessages",
      "updated_at": "updatedAt",
      "user_id": "userId",
    });
  });

/** @internal */
export type Chat$Outbound = {
  created_at: string;
  id: string;
  messages: Array<ChatMessage$Outbound>;
  num_messages: number;
  title: string;
  updated_at: string;
  user_id: string;
};

/** @internal */
export const Chat$outboundSchema: z.ZodType<Chat$Outbound, z.ZodTypeDef, Chat> =
  z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    id: z.string(),
    messages: z.array(ChatMessage$outboundSchema),
    numMessages: z.number().int(),
    title: z.string(),
    updatedAt: z.date().transform(v => v.toISOString()),
    userId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      numMessages: "num_messages",
      updatedAt: "updated_at",
      userId: "user_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Chat$ {
  /** @deprecated use `Chat$inboundSchema` instead. */
  export const inboundSchema = Chat$inboundSchema;
  /** @deprecated use `Chat$outboundSchema` instead. */
  export const outboundSchema = Chat$outboundSchema;
  /** @deprecated use `Chat$Outbound` instead. */
  export type Outbound = Chat$Outbound;
}

export function chatToJSON(chat: Chat): string {
  return JSON.stringify(Chat$outboundSchema.parse(chat));
}

export function chatFromJSON(
  jsonString: string,
): SafeParseResult<Chat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Chat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Chat' from JSON`,
  );
}
