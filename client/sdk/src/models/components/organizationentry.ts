/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProjectEntry,
  ProjectEntry$inboundSchema,
  ProjectEntry$Outbound,
  ProjectEntry$outboundSchema,
} from "./projectentry.js";

export type OrganizationEntry = {
  id: string;
  name: string;
  projects: Array<ProjectEntry>;
  slug: string;
  ssoConnectionId?: string | undefined;
  userWorkspaceSlugs?: Array<string> | undefined;
};

/** @internal */
export const OrganizationEntry$inboundSchema: z.ZodType<
  OrganizationEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  projects: z.array(ProjectEntry$inboundSchema),
  slug: z.string(),
  sso_connection_id: z.string().optional(),
  user_workspace_slugs: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "sso_connection_id": "ssoConnectionId",
    "user_workspace_slugs": "userWorkspaceSlugs",
  });
});

/** @internal */
export type OrganizationEntry$Outbound = {
  id: string;
  name: string;
  projects: Array<ProjectEntry$Outbound>;
  slug: string;
  sso_connection_id?: string | undefined;
  user_workspace_slugs?: Array<string> | undefined;
};

/** @internal */
export const OrganizationEntry$outboundSchema: z.ZodType<
  OrganizationEntry$Outbound,
  z.ZodTypeDef,
  OrganizationEntry
> = z.object({
  id: z.string(),
  name: z.string(),
  projects: z.array(ProjectEntry$outboundSchema),
  slug: z.string(),
  ssoConnectionId: z.string().optional(),
  userWorkspaceSlugs: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    ssoConnectionId: "sso_connection_id",
    userWorkspaceSlugs: "user_workspace_slugs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationEntry$ {
  /** @deprecated use `OrganizationEntry$inboundSchema` instead. */
  export const inboundSchema = OrganizationEntry$inboundSchema;
  /** @deprecated use `OrganizationEntry$outboundSchema` instead. */
  export const outboundSchema = OrganizationEntry$outboundSchema;
  /** @deprecated use `OrganizationEntry$Outbound` instead. */
  export type Outbound = OrganizationEntry$Outbound;
}

export function organizationEntryToJSON(
  organizationEntry: OrganizationEntry,
): string {
  return JSON.stringify(
    OrganizationEntry$outboundSchema.parse(organizationEntry),
  );
}

export function organizationEntryFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationEntry' from JSON`,
  );
}
