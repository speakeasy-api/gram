/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ExternalOAuthServer = {
  /**
   * When the external OAuth server was created.
   */
  createdAt: Date;
  /**
   * The ID of the external OAuth server
   */
  id: string;
  /**
   * The metadata for the external OAuth server
   */
  metadata?: any | undefined;
  /**
   * The project ID this external OAuth server belongs to
   */
  projectId: string;
  /**
   * A short url-friendly label that uniquely identifies a resource.
   */
  slug: string;
  /**
   * When the external OAuth server was last updated.
   */
  updatedAt: Date;
};

/** @internal */
export const ExternalOAuthServer$inboundSchema: z.ZodType<
  ExternalOAuthServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  id: z.string(),
  metadata: z.any().optional(),
  project_id: z.string(),
  slug: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "project_id": "projectId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ExternalOAuthServer$Outbound = {
  created_at: string;
  id: string;
  metadata?: any | undefined;
  project_id: string;
  slug: string;
  updated_at: string;
};

/** @internal */
export const ExternalOAuthServer$outboundSchema: z.ZodType<
  ExternalOAuthServer$Outbound,
  z.ZodTypeDef,
  ExternalOAuthServer
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  id: z.string(),
  metadata: z.any().optional(),
  projectId: z.string(),
  slug: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    projectId: "project_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalOAuthServer$ {
  /** @deprecated use `ExternalOAuthServer$inboundSchema` instead. */
  export const inboundSchema = ExternalOAuthServer$inboundSchema;
  /** @deprecated use `ExternalOAuthServer$outboundSchema` instead. */
  export const outboundSchema = ExternalOAuthServer$outboundSchema;
  /** @deprecated use `ExternalOAuthServer$Outbound` instead. */
  export type Outbound = ExternalOAuthServer$Outbound;
}

export function externalOAuthServerToJSON(
  externalOAuthServer: ExternalOAuthServer,
): string {
  return JSON.stringify(
    ExternalOAuthServer$outboundSchema.parse(externalOAuthServer),
  );
}

export function externalOAuthServerFromJSON(
  jsonString: string,
): SafeParseResult<ExternalOAuthServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalOAuthServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalOAuthServer' from JSON`,
  );
}
