/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Environment,
  Environment$inboundSchema,
  Environment$Outbound,
  Environment$outboundSchema,
} from "./environment.js";
import {
  PromptTemplate,
  PromptTemplate$inboundSchema,
  PromptTemplate$Outbound,
  PromptTemplate$outboundSchema,
} from "./prompttemplate.js";
import {
  SecurityVariable,
  SecurityVariable$inboundSchema,
  SecurityVariable$Outbound,
  SecurityVariable$outboundSchema,
} from "./securityvariable.js";
import {
  ServerVariable,
  ServerVariable$inboundSchema,
  ServerVariable$Outbound,
  ServerVariable$outboundSchema,
} from "./servervariable.js";
import {
  Tool,
  Tool$inboundSchema,
  Tool$Outbound,
  Tool$outboundSchema,
} from "./tool.js";

export type GetInstanceResult = {
  /**
   * The description of the toolset
   */
  description?: string | undefined;
  /**
   * Model representing an environment
   */
  environment: Environment;
  /**
   * The name of the toolset
   */
  name: string;
  /**
   * The list of prompt templates
   */
  promptTemplates?: Array<PromptTemplate> | undefined;
  /**
   * The security variables that are relevant to the toolset
   */
  securityVariables?: Array<SecurityVariable> | undefined;
  /**
   * The server variables that are relevant to the toolset
   */
  serverVariables?: Array<ServerVariable> | undefined;
  /**
   * The list of tools
   */
  tools: Array<Tool>;
};

/** @internal */
export const GetInstanceResult$inboundSchema: z.ZodType<
  GetInstanceResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  environment: Environment$inboundSchema,
  name: z.string(),
  prompt_templates: z.array(PromptTemplate$inboundSchema).optional(),
  security_variables: z.array(SecurityVariable$inboundSchema).optional(),
  server_variables: z.array(ServerVariable$inboundSchema).optional(),
  tools: z.array(Tool$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prompt_templates": "promptTemplates",
    "security_variables": "securityVariables",
    "server_variables": "serverVariables",
  });
});

/** @internal */
export type GetInstanceResult$Outbound = {
  description?: string | undefined;
  environment: Environment$Outbound;
  name: string;
  prompt_templates?: Array<PromptTemplate$Outbound> | undefined;
  security_variables?: Array<SecurityVariable$Outbound> | undefined;
  server_variables?: Array<ServerVariable$Outbound> | undefined;
  tools: Array<Tool$Outbound>;
};

/** @internal */
export const GetInstanceResult$outboundSchema: z.ZodType<
  GetInstanceResult$Outbound,
  z.ZodTypeDef,
  GetInstanceResult
> = z.object({
  description: z.string().optional(),
  environment: Environment$outboundSchema,
  name: z.string(),
  promptTemplates: z.array(PromptTemplate$outboundSchema).optional(),
  securityVariables: z.array(SecurityVariable$outboundSchema).optional(),
  serverVariables: z.array(ServerVariable$outboundSchema).optional(),
  tools: z.array(Tool$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    promptTemplates: "prompt_templates",
    securityVariables: "security_variables",
    serverVariables: "server_variables",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstanceResult$ {
  /** @deprecated use `GetInstanceResult$inboundSchema` instead. */
  export const inboundSchema = GetInstanceResult$inboundSchema;
  /** @deprecated use `GetInstanceResult$outboundSchema` instead. */
  export const outboundSchema = GetInstanceResult$outboundSchema;
  /** @deprecated use `GetInstanceResult$Outbound` instead. */
  export type Outbound = GetInstanceResult$Outbound;
}

export function getInstanceResultToJSON(
  getInstanceResult: GetInstanceResult,
): string {
  return JSON.stringify(
    GetInstanceResult$outboundSchema.parse(getInstanceResult),
  );
}

export function getInstanceResultFromJSON(
  jsonString: string,
): SafeParseResult<GetInstanceResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstanceResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstanceResult' from JSON`,
  );
}
