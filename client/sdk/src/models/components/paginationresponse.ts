/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Pagination metadata for list responses
 */
export type PaginationResponse = {
  /**
   * Whether there is a next page
   */
  hasNextPage?: boolean | undefined;
  /**
   * Cursor for next page
   */
  nextPageCursor?: Date | undefined;
  /**
   * Number of items per page
   */
  perPage?: number | undefined;
};

/** @internal */
export const PaginationResponse$inboundSchema: z.ZodType<
  PaginationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  has_next_page: z.boolean().optional(),
  next_page_cursor: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  per_page: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "has_next_page": "hasNextPage",
    "next_page_cursor": "nextPageCursor",
    "per_page": "perPage",
  });
});

/** @internal */
export type PaginationResponse$Outbound = {
  has_next_page?: boolean | undefined;
  next_page_cursor?: string | undefined;
  per_page?: number | undefined;
};

/** @internal */
export const PaginationResponse$outboundSchema: z.ZodType<
  PaginationResponse$Outbound,
  z.ZodTypeDef,
  PaginationResponse
> = z.object({
  hasNextPage: z.boolean().optional(),
  nextPageCursor: z.date().transform(v => v.toISOString()).optional(),
  perPage: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    hasNextPage: "has_next_page",
    nextPageCursor: "next_page_cursor",
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationResponse$ {
  /** @deprecated use `PaginationResponse$inboundSchema` instead. */
  export const inboundSchema = PaginationResponse$inboundSchema;
  /** @deprecated use `PaginationResponse$outboundSchema` instead. */
  export const outboundSchema = PaginationResponse$outboundSchema;
  /** @deprecated use `PaginationResponse$Outbound` instead. */
  export type Outbound = PaginationResponse$Outbound;
}

export function paginationResponseToJSON(
  paginationResponse: PaginationResponse,
): string {
  return JSON.stringify(
    PaginationResponse$outboundSchema.parse(paginationResponse),
  );
}

export function paginationResponseFromJSON(
  jsonString: string,
): SafeParseResult<PaginationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationResponse' from JSON`,
  );
}
