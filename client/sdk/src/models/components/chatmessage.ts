/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChatMessage = {
  /**
   * The content of the message
   */
  content?: string | undefined;
  /**
   * When the message was created.
   */
  createdAt: Date;
  /**
   * The finish reason of the message
   */
  finishReason?: string | undefined;
  /**
   * The ID of the message
   */
  id: string;
  /**
   * The model that generated the message
   */
  model: string;
  /**
   * The role of the message
   */
  role: string;
  /**
   * The tool call ID of the message
   */
  toolCallId?: string | undefined;
  /**
   * The tool calls in the message as a JSON blob
   */
  toolCalls?: string | undefined;
  /**
   * The ID of the user who created the message
   */
  userId?: string | undefined;
};

/** @internal */
export const ChatMessage$inboundSchema: z.ZodType<
  ChatMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  finish_reason: z.string().optional(),
  id: z.string(),
  model: z.string(),
  role: z.string(),
  tool_call_id: z.string().optional(),
  tool_calls: z.string().optional(),
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "finish_reason": "finishReason",
    "tool_call_id": "toolCallId",
    "tool_calls": "toolCalls",
    "user_id": "userId",
  });
});

/** @internal */
export type ChatMessage$Outbound = {
  content?: string | undefined;
  created_at: string;
  finish_reason?: string | undefined;
  id: string;
  model: string;
  role: string;
  tool_call_id?: string | undefined;
  tool_calls?: string | undefined;
  user_id?: string | undefined;
};

/** @internal */
export const ChatMessage$outboundSchema: z.ZodType<
  ChatMessage$Outbound,
  z.ZodTypeDef,
  ChatMessage
> = z.object({
  content: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  finishReason: z.string().optional(),
  id: z.string(),
  model: z.string(),
  role: z.string(),
  toolCallId: z.string().optional(),
  toolCalls: z.string().optional(),
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    finishReason: "finish_reason",
    toolCallId: "tool_call_id",
    toolCalls: "tool_calls",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatMessage$ {
  /** @deprecated use `ChatMessage$inboundSchema` instead. */
  export const inboundSchema = ChatMessage$inboundSchema;
  /** @deprecated use `ChatMessage$outboundSchema` instead. */
  export const outboundSchema = ChatMessage$outboundSchema;
  /** @deprecated use `ChatMessage$Outbound` instead. */
  export type Outbound = ChatMessage$Outbound;
}

export function chatMessageToJSON(chatMessage: ChatMessage): string {
  return JSON.stringify(ChatMessage$outboundSchema.parse(chatMessage));
}

export function chatMessageFromJSON(
  jsonString: string,
): SafeParseResult<ChatMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatMessage' from JSON`,
  );
}
