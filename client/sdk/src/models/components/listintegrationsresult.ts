/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IntegrationEntry,
  IntegrationEntry$inboundSchema,
  IntegrationEntry$Outbound,
  IntegrationEntry$outboundSchema,
} from "./integrationentry.js";

export type ListIntegrationsResult = {
  /**
   * List of available third-party integrations
   */
  integrations?: Array<IntegrationEntry> | undefined;
};

/** @internal */
export const ListIntegrationsResult$inboundSchema: z.ZodType<
  ListIntegrationsResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrations: z.array(IntegrationEntry$inboundSchema).optional(),
});

/** @internal */
export type ListIntegrationsResult$Outbound = {
  integrations?: Array<IntegrationEntry$Outbound> | undefined;
};

/** @internal */
export const ListIntegrationsResult$outboundSchema: z.ZodType<
  ListIntegrationsResult$Outbound,
  z.ZodTypeDef,
  ListIntegrationsResult
> = z.object({
  integrations: z.array(IntegrationEntry$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsResult$ {
  /** @deprecated use `ListIntegrationsResult$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsResult$inboundSchema;
  /** @deprecated use `ListIntegrationsResult$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsResult$outboundSchema;
  /** @deprecated use `ListIntegrationsResult$Outbound` instead. */
  export type Outbound = ListIntegrationsResult$Outbound;
}

export function listIntegrationsResultToJSON(
  listIntegrationsResult: ListIntegrationsResult,
): string {
  return JSON.stringify(
    ListIntegrationsResult$outboundSchema.parse(listIntegrationsResult),
  );
}

export function listIntegrationsResultFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsResult' from JSON`,
  );
}
