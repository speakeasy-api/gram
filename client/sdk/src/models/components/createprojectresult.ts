/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Project,
  Project$inboundSchema,
  Project$Outbound,
  Project$outboundSchema,
} from "./project.js";

export type CreateProjectResult = {
  project: Project;
};

/** @internal */
export const CreateProjectResult$inboundSchema: z.ZodType<
  CreateProjectResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  project: Project$inboundSchema,
});

/** @internal */
export type CreateProjectResult$Outbound = {
  project: Project$Outbound;
};

/** @internal */
export const CreateProjectResult$outboundSchema: z.ZodType<
  CreateProjectResult$Outbound,
  z.ZodTypeDef,
  CreateProjectResult
> = z.object({
  project: Project$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectResult$ {
  /** @deprecated use `CreateProjectResult$inboundSchema` instead. */
  export const inboundSchema = CreateProjectResult$inboundSchema;
  /** @deprecated use `CreateProjectResult$outboundSchema` instead. */
  export const outboundSchema = CreateProjectResult$outboundSchema;
  /** @deprecated use `CreateProjectResult$Outbound` instead. */
  export type Outbound = CreateProjectResult$Outbound;
}

export function createProjectResultToJSON(
  createProjectResult: CreateProjectResult,
): string {
  return JSON.stringify(
    CreateProjectResult$outboundSchema.parse(createProjectResult),
  );
}

export function createProjectResultFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectResult' from JSON`,
  );
}
