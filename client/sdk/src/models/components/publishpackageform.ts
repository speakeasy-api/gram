/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The visibility of the package version
 */
export const Visibility = {
  Public: "public",
  Private: "private",
} as const;
/**
 * The visibility of the package version
 */
export type Visibility = ClosedEnum<typeof Visibility>;

export type PublishPackageForm = {
  /**
   * The deployment ID to associate with the package version
   */
  deploymentId: string;
  /**
   * The name of the package
   */
  name: string;
  /**
   * The new semantic version of the package to publish
   */
  version: string;
  /**
   * The visibility of the package version
   */
  visibility: Visibility;
};

/** @internal */
export const Visibility$inboundSchema: z.ZodNativeEnum<typeof Visibility> = z
  .nativeEnum(Visibility);

/** @internal */
export const Visibility$outboundSchema: z.ZodNativeEnum<typeof Visibility> =
  Visibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Visibility$ {
  /** @deprecated use `Visibility$inboundSchema` instead. */
  export const inboundSchema = Visibility$inboundSchema;
  /** @deprecated use `Visibility$outboundSchema` instead. */
  export const outboundSchema = Visibility$outboundSchema;
}

/** @internal */
export const PublishPackageForm$inboundSchema: z.ZodType<
  PublishPackageForm,
  z.ZodTypeDef,
  unknown
> = z.object({
  deployment_id: z.string(),
  name: z.string(),
  version: z.string(),
  visibility: Visibility$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "deployment_id": "deploymentId",
  });
});

/** @internal */
export type PublishPackageForm$Outbound = {
  deployment_id: string;
  name: string;
  version: string;
  visibility: string;
};

/** @internal */
export const PublishPackageForm$outboundSchema: z.ZodType<
  PublishPackageForm$Outbound,
  z.ZodTypeDef,
  PublishPackageForm
> = z.object({
  deploymentId: z.string(),
  name: z.string(),
  version: z.string(),
  visibility: Visibility$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    deploymentId: "deployment_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublishPackageForm$ {
  /** @deprecated use `PublishPackageForm$inboundSchema` instead. */
  export const inboundSchema = PublishPackageForm$inboundSchema;
  /** @deprecated use `PublishPackageForm$outboundSchema` instead. */
  export const outboundSchema = PublishPackageForm$outboundSchema;
  /** @deprecated use `PublishPackageForm$Outbound` instead. */
  export type Outbound = PublishPackageForm$Outbound;
}

export function publishPackageFormToJSON(
  publishPackageForm: PublishPackageForm,
): string {
  return JSON.stringify(
    PublishPackageForm$outboundSchema.parse(publishPackageForm),
  );
}

export function publishPackageFormFromJSON(
  jsonString: string,
): SafeParseResult<PublishPackageForm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublishPackageForm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublishPackageForm' from JSON`,
  );
}
