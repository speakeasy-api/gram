/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SecurityVariable = {
  /**
   * The bearer format
   */
  bearerFormat?: string | undefined;
  /**
   * The environment variables
   */
  envVariables: Array<string>;
  /**
   * Where the security token is placed
   */
  inPlacement: string;
  /**
   * The name of the security scheme
   */
  name: string;
  /**
   * The OAuth flows
   */
  oauthFlows?: Uint8Array | string | undefined;
  /**
   * The OAuth types
   */
  oauthTypes?: Array<string> | undefined;
  /**
   * The security scheme
   */
  scheme: string;
  /**
   * The type of security
   */
  type?: string | undefined;
};

/** @internal */
export const SecurityVariable$inboundSchema: z.ZodType<
  SecurityVariable,
  z.ZodTypeDef,
  unknown
> = z.object({
  bearer_format: z.string().optional(),
  env_variables: z.array(z.string()),
  in_placement: z.string(),
  name: z.string(),
  oauth_flows: b64$.zodInbound.optional(),
  oauth_types: z.array(z.string()).optional(),
  scheme: z.string(),
  type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "bearer_format": "bearerFormat",
    "env_variables": "envVariables",
    "in_placement": "inPlacement",
    "oauth_flows": "oauthFlows",
    "oauth_types": "oauthTypes",
  });
});

/** @internal */
export type SecurityVariable$Outbound = {
  bearer_format?: string | undefined;
  env_variables: Array<string>;
  in_placement: string;
  name: string;
  oauth_flows?: Uint8Array | undefined;
  oauth_types?: Array<string> | undefined;
  scheme: string;
  type?: string | undefined;
};

/** @internal */
export const SecurityVariable$outboundSchema: z.ZodType<
  SecurityVariable$Outbound,
  z.ZodTypeDef,
  SecurityVariable
> = z.object({
  bearerFormat: z.string().optional(),
  envVariables: z.array(z.string()),
  inPlacement: z.string(),
  name: z.string(),
  oauthFlows: b64$.zodOutbound.optional(),
  oauthTypes: z.array(z.string()).optional(),
  scheme: z.string(),
  type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    bearerFormat: "bearer_format",
    envVariables: "env_variables",
    inPlacement: "in_placement",
    oauthFlows: "oauth_flows",
    oauthTypes: "oauth_types",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityVariable$ {
  /** @deprecated use `SecurityVariable$inboundSchema` instead. */
  export const inboundSchema = SecurityVariable$inboundSchema;
  /** @deprecated use `SecurityVariable$outboundSchema` instead. */
  export const outboundSchema = SecurityVariable$outboundSchema;
  /** @deprecated use `SecurityVariable$Outbound` instead. */
  export type Outbound = SecurityVariable$Outbound;
}

export function securityVariableToJSON(
  securityVariable: SecurityVariable,
): string {
  return JSON.stringify(
    SecurityVariable$outboundSchema.parse(securityVariable),
  );
}

export function securityVariableFromJSON(
  jsonString: string,
): SafeParseResult<SecurityVariable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityVariable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityVariable' from JSON`,
  );
}
