/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddDeploymentPackageForm = {
  /**
   * The name of the package.
   */
  name: string;
  /**
   * The version of the package.
   */
  version?: string | undefined;
};

/** @internal */
export const AddDeploymentPackageForm$inboundSchema: z.ZodType<
  AddDeploymentPackageForm,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  version: z.string().optional(),
});

/** @internal */
export type AddDeploymentPackageForm$Outbound = {
  name: string;
  version?: string | undefined;
};

/** @internal */
export const AddDeploymentPackageForm$outboundSchema: z.ZodType<
  AddDeploymentPackageForm$Outbound,
  z.ZodTypeDef,
  AddDeploymentPackageForm
> = z.object({
  name: z.string(),
  version: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddDeploymentPackageForm$ {
  /** @deprecated use `AddDeploymentPackageForm$inboundSchema` instead. */
  export const inboundSchema = AddDeploymentPackageForm$inboundSchema;
  /** @deprecated use `AddDeploymentPackageForm$outboundSchema` instead. */
  export const outboundSchema = AddDeploymentPackageForm$outboundSchema;
  /** @deprecated use `AddDeploymentPackageForm$Outbound` instead. */
  export type Outbound = AddDeploymentPackageForm$Outbound;
}

export function addDeploymentPackageFormToJSON(
  addDeploymentPackageForm: AddDeploymentPackageForm,
): string {
  return JSON.stringify(
    AddDeploymentPackageForm$outboundSchema.parse(addDeploymentPackageForm),
  );
}

export function addDeploymentPackageFormFromJSON(
  jsonString: string,
): SafeParseResult<AddDeploymentPackageForm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddDeploymentPackageForm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddDeploymentPackageForm' from JSON`,
  );
}
