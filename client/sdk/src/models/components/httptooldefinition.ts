/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CanonicalToolAttributes,
  CanonicalToolAttributes$inboundSchema,
  CanonicalToolAttributes$Outbound,
  CanonicalToolAttributes$outboundSchema,
} from "./canonicaltoolattributes.js";
import {
  ResponseFilter,
  ResponseFilter$inboundSchema,
  ResponseFilter$Outbound,
  ResponseFilter$outboundSchema,
} from "./responsefilter.js";
import {
  ToolVariation,
  ToolVariation$inboundSchema,
  ToolVariation$Outbound,
  ToolVariation$outboundSchema,
} from "./toolvariation.js";

/**
 * An HTTP tool
 */
export type HTTPToolDefinition = {
  /**
   * The original details of a tool
   */
  canonical?: CanonicalToolAttributes | undefined;
  /**
   * The canonical name of the tool. Will be the same as the name if there is no variation.
   */
  canonicalName: string;
  /**
   * Confirmation mode for the tool
   */
  confirm?: string | undefined;
  /**
   * Prompt for the confirmation
   */
  confirmPrompt?: string | undefined;
  /**
   * The creation date of the tool.
   */
  createdAt: Date;
  /**
   * The default server URL for the tool
   */
  defaultServerUrl?: string | undefined;
  /**
   * The ID of the deployment
   */
  deploymentId: string;
  /**
   * Description of the tool
   */
  description: string;
  /**
   * HTTP method for the request
   */
  httpMethod: string;
  /**
   * The ID of the tool
   */
  id: string;
  /**
   * The name of the tool
   */
  name: string;
  /**
   * The ID of the OpenAPI v3 document
   */
  openapiv3DocumentId?: string | undefined;
  /**
   * OpenAPI v3 operation
   */
  openapiv3Operation?: string | undefined;
  /**
   * The name of the source package
   */
  packageName?: string | undefined;
  /**
   * Path for the request
   */
  path: string;
  /**
   * The ID of the project
   */
  projectId: string;
  /**
   * Response filter metadata for the tool
   */
  responseFilter?: ResponseFilter | undefined;
  /**
   * JSON schema for the request
   */
  schema: string;
  /**
   * Version of the schema
   */
  schemaVersion?: string | undefined;
  /**
   * Security requirements for the underlying HTTP endpoint
   */
  security?: string | undefined;
  /**
   * Summarizer for the tool
   */
  summarizer?: string | undefined;
  /**
   * Summary of the tool
   */
  summary: string;
  /**
   * The tags list for this http tool
   */
  tags: Array<string>;
  /**
   * The URN of this tool
   */
  toolUrn: string;
  /**
   * The last update date of the tool.
   */
  updatedAt: Date;
  variation?: ToolVariation | undefined;
};

/** @internal */
export const HTTPToolDefinition$inboundSchema: z.ZodType<
  HTTPToolDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  canonical: CanonicalToolAttributes$inboundSchema.optional(),
  canonical_name: z.string(),
  confirm: z.string().optional(),
  confirm_prompt: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  default_server_url: z.string().optional(),
  deployment_id: z.string(),
  description: z.string(),
  http_method: z.string(),
  id: z.string(),
  name: z.string(),
  openapiv3_document_id: z.string().optional(),
  openapiv3_operation: z.string().optional(),
  package_name: z.string().optional(),
  path: z.string(),
  project_id: z.string(),
  response_filter: ResponseFilter$inboundSchema.optional(),
  schema: z.string(),
  schema_version: z.string().optional(),
  security: z.string().optional(),
  summarizer: z.string().optional(),
  summary: z.string(),
  tags: z.array(z.string()),
  tool_urn: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  variation: ToolVariation$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "canonical_name": "canonicalName",
    "confirm_prompt": "confirmPrompt",
    "created_at": "createdAt",
    "default_server_url": "defaultServerUrl",
    "deployment_id": "deploymentId",
    "http_method": "httpMethod",
    "openapiv3_document_id": "openapiv3DocumentId",
    "openapiv3_operation": "openapiv3Operation",
    "package_name": "packageName",
    "project_id": "projectId",
    "response_filter": "responseFilter",
    "schema_version": "schemaVersion",
    "tool_urn": "toolUrn",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type HTTPToolDefinition$Outbound = {
  canonical?: CanonicalToolAttributes$Outbound | undefined;
  canonical_name: string;
  confirm?: string | undefined;
  confirm_prompt?: string | undefined;
  created_at: string;
  default_server_url?: string | undefined;
  deployment_id: string;
  description: string;
  http_method: string;
  id: string;
  name: string;
  openapiv3_document_id?: string | undefined;
  openapiv3_operation?: string | undefined;
  package_name?: string | undefined;
  path: string;
  project_id: string;
  response_filter?: ResponseFilter$Outbound | undefined;
  schema: string;
  schema_version?: string | undefined;
  security?: string | undefined;
  summarizer?: string | undefined;
  summary: string;
  tags: Array<string>;
  tool_urn: string;
  updated_at: string;
  variation?: ToolVariation$Outbound | undefined;
};

/** @internal */
export const HTTPToolDefinition$outboundSchema: z.ZodType<
  HTTPToolDefinition$Outbound,
  z.ZodTypeDef,
  HTTPToolDefinition
> = z.object({
  canonical: CanonicalToolAttributes$outboundSchema.optional(),
  canonicalName: z.string(),
  confirm: z.string().optional(),
  confirmPrompt: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  defaultServerUrl: z.string().optional(),
  deploymentId: z.string(),
  description: z.string(),
  httpMethod: z.string(),
  id: z.string(),
  name: z.string(),
  openapiv3DocumentId: z.string().optional(),
  openapiv3Operation: z.string().optional(),
  packageName: z.string().optional(),
  path: z.string(),
  projectId: z.string(),
  responseFilter: ResponseFilter$outboundSchema.optional(),
  schema: z.string(),
  schemaVersion: z.string().optional(),
  security: z.string().optional(),
  summarizer: z.string().optional(),
  summary: z.string(),
  tags: z.array(z.string()),
  toolUrn: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
  variation: ToolVariation$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    canonicalName: "canonical_name",
    confirmPrompt: "confirm_prompt",
    createdAt: "created_at",
    defaultServerUrl: "default_server_url",
    deploymentId: "deployment_id",
    httpMethod: "http_method",
    openapiv3DocumentId: "openapiv3_document_id",
    openapiv3Operation: "openapiv3_operation",
    packageName: "package_name",
    projectId: "project_id",
    responseFilter: "response_filter",
    schemaVersion: "schema_version",
    toolUrn: "tool_urn",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HTTPToolDefinition$ {
  /** @deprecated use `HTTPToolDefinition$inboundSchema` instead. */
  export const inboundSchema = HTTPToolDefinition$inboundSchema;
  /** @deprecated use `HTTPToolDefinition$outboundSchema` instead. */
  export const outboundSchema = HTTPToolDefinition$outboundSchema;
  /** @deprecated use `HTTPToolDefinition$Outbound` instead. */
  export type Outbound = HTTPToolDefinition$Outbound;
}

export function httpToolDefinitionToJSON(
  httpToolDefinition: HTTPToolDefinition,
): string {
  return JSON.stringify(
    HTTPToolDefinition$outboundSchema.parse(httpToolDefinition),
  );
}

export function httpToolDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<HTTPToolDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HTTPToolDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HTTPToolDefinition' from JSON`,
  );
}
