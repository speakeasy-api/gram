/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A single environment entry
 */
export type EnvironmentEntry = {
  /**
   * The creation date of the environment entry
   */
  createdAt: Date;
  /**
   * The name of the environment variable
   */
  name: string;
  /**
   * When the environment entry was last updated
   */
  updatedAt: Date;
  /**
   * Redacted values of the environment variable
   */
  value: string;
};

/** @internal */
export const EnvironmentEntry$inboundSchema: z.ZodType<
  EnvironmentEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  name: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type EnvironmentEntry$Outbound = {
  created_at: string;
  name: string;
  updated_at: string;
  value: string;
};

/** @internal */
export const EnvironmentEntry$outboundSchema: z.ZodType<
  EnvironmentEntry$Outbound,
  z.ZodTypeDef,
  EnvironmentEntry
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  name: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentEntry$ {
  /** @deprecated use `EnvironmentEntry$inboundSchema` instead. */
  export const inboundSchema = EnvironmentEntry$inboundSchema;
  /** @deprecated use `EnvironmentEntry$outboundSchema` instead. */
  export const outboundSchema = EnvironmentEntry$outboundSchema;
  /** @deprecated use `EnvironmentEntry$Outbound` instead. */
  export type Outbound = EnvironmentEntry$Outbound;
}

export function environmentEntryToJSON(
  environmentEntry: EnvironmentEntry,
): string {
  return JSON.stringify(
    EnvironmentEntry$outboundSchema.parse(environmentEntry),
  );
}

export function environmentEntryFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentEntry' from JSON`,
  );
}
