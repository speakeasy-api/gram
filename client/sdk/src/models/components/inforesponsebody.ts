/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OrganizationEntry,
  OrganizationEntry$inboundSchema,
  OrganizationEntry$Outbound,
  OrganizationEntry$outboundSchema,
} from "./organizationentry.js";

export type InfoResponseBody = {
  activeOrganizationId: string;
  gramAccountType: string;
  isAdmin: boolean;
  organizations: Array<OrganizationEntry>;
  userDisplayName?: string | undefined;
  userEmail: string;
  userId: string;
  userPhotoUrl?: string | undefined;
  userSignature?: string | undefined;
};

/** @internal */
export const InfoResponseBody$inboundSchema: z.ZodType<
  InfoResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  active_organization_id: z.string(),
  gram_account_type: z.string(),
  is_admin: z.boolean(),
  organizations: z.array(OrganizationEntry$inboundSchema),
  user_display_name: z.string().optional(),
  user_email: z.string(),
  user_id: z.string(),
  user_photo_url: z.string().optional(),
  user_signature: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "active_organization_id": "activeOrganizationId",
    "gram_account_type": "gramAccountType",
    "is_admin": "isAdmin",
    "user_display_name": "userDisplayName",
    "user_email": "userEmail",
    "user_id": "userId",
    "user_photo_url": "userPhotoUrl",
    "user_signature": "userSignature",
  });
});

/** @internal */
export type InfoResponseBody$Outbound = {
  active_organization_id: string;
  gram_account_type: string;
  is_admin: boolean;
  organizations: Array<OrganizationEntry$Outbound>;
  user_display_name?: string | undefined;
  user_email: string;
  user_id: string;
  user_photo_url?: string | undefined;
  user_signature?: string | undefined;
};

/** @internal */
export const InfoResponseBody$outboundSchema: z.ZodType<
  InfoResponseBody$Outbound,
  z.ZodTypeDef,
  InfoResponseBody
> = z.object({
  activeOrganizationId: z.string(),
  gramAccountType: z.string(),
  isAdmin: z.boolean(),
  organizations: z.array(OrganizationEntry$outboundSchema),
  userDisplayName: z.string().optional(),
  userEmail: z.string(),
  userId: z.string(),
  userPhotoUrl: z.string().optional(),
  userSignature: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    activeOrganizationId: "active_organization_id",
    gramAccountType: "gram_account_type",
    isAdmin: "is_admin",
    userDisplayName: "user_display_name",
    userEmail: "user_email",
    userId: "user_id",
    userPhotoUrl: "user_photo_url",
    userSignature: "user_signature",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InfoResponseBody$ {
  /** @deprecated use `InfoResponseBody$inboundSchema` instead. */
  export const inboundSchema = InfoResponseBody$inboundSchema;
  /** @deprecated use `InfoResponseBody$outboundSchema` instead. */
  export const outboundSchema = InfoResponseBody$outboundSchema;
  /** @deprecated use `InfoResponseBody$Outbound` instead. */
  export type Outbound = InfoResponseBody$Outbound;
}

export function infoResponseBodyToJSON(
  infoResponseBody: InfoResponseBody,
): string {
  return JSON.stringify(
    InfoResponseBody$outboundSchema.parse(infoResponseBody),
  );
}

export function infoResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<InfoResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InfoResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InfoResponseBody' from JSON`,
  );
}
