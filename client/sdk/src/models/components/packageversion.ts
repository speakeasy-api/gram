/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PackageVersion = {
  /**
   * The creation date of the package version
   */
  createdAt: Date;
  /**
   * The ID of the deployment that the version belongs to
   */
  deploymentId: string;
  /**
   * The ID of the package version
   */
  id: string;
  /**
   * The ID of the package that the version belongs to
   */
  packageId: string;
  /**
   * The semantic version value
   */
  semver: string;
  /**
   * The visibility of the package version
   */
  visibility: string;
};

/** @internal */
export const PackageVersion$inboundSchema: z.ZodType<
  PackageVersion,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  deployment_id: z.string(),
  id: z.string(),
  package_id: z.string(),
  semver: z.string(),
  visibility: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "deployment_id": "deploymentId",
    "package_id": "packageId",
  });
});

/** @internal */
export type PackageVersion$Outbound = {
  created_at: string;
  deployment_id: string;
  id: string;
  package_id: string;
  semver: string;
  visibility: string;
};

/** @internal */
export const PackageVersion$outboundSchema: z.ZodType<
  PackageVersion$Outbound,
  z.ZodTypeDef,
  PackageVersion
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  deploymentId: z.string(),
  id: z.string(),
  packageId: z.string(),
  semver: z.string(),
  visibility: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    deploymentId: "deployment_id",
    packageId: "package_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PackageVersion$ {
  /** @deprecated use `PackageVersion$inboundSchema` instead. */
  export const inboundSchema = PackageVersion$inboundSchema;
  /** @deprecated use `PackageVersion$outboundSchema` instead. */
  export const outboundSchema = PackageVersion$outboundSchema;
  /** @deprecated use `PackageVersion$Outbound` instead. */
  export type Outbound = PackageVersion$Outbound;
}

export function packageVersionToJSON(packageVersion: PackageVersion): string {
  return JSON.stringify(PackageVersion$outboundSchema.parse(packageVersion));
}

export function packageVersionFromJSON(
  jsonString: string,
): SafeParseResult<PackageVersion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PackageVersion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PackageVersion' from JSON`,
  );
}
