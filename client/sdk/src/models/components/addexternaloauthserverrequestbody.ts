/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ExternalOAuthServerForm,
  ExternalOAuthServerForm$inboundSchema,
  ExternalOAuthServerForm$Outbound,
  ExternalOAuthServerForm$outboundSchema,
} from "./externaloauthserverform.js";

export type AddExternalOAuthServerRequestBody = {
  externalOauthServer: ExternalOAuthServerForm;
};

/** @internal */
export const AddExternalOAuthServerRequestBody$inboundSchema: z.ZodType<
  AddExternalOAuthServerRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_oauth_server: ExternalOAuthServerForm$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "external_oauth_server": "externalOauthServer",
  });
});

/** @internal */
export type AddExternalOAuthServerRequestBody$Outbound = {
  external_oauth_server: ExternalOAuthServerForm$Outbound;
};

/** @internal */
export const AddExternalOAuthServerRequestBody$outboundSchema: z.ZodType<
  AddExternalOAuthServerRequestBody$Outbound,
  z.ZodTypeDef,
  AddExternalOAuthServerRequestBody
> = z.object({
  externalOauthServer: ExternalOAuthServerForm$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    externalOauthServer: "external_oauth_server",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddExternalOAuthServerRequestBody$ {
  /** @deprecated use `AddExternalOAuthServerRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddExternalOAuthServerRequestBody$inboundSchema;
  /** @deprecated use `AddExternalOAuthServerRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AddExternalOAuthServerRequestBody$outboundSchema;
  /** @deprecated use `AddExternalOAuthServerRequestBody$Outbound` instead. */
  export type Outbound = AddExternalOAuthServerRequestBody$Outbound;
}

export function addExternalOAuthServerRequestBodyToJSON(
  addExternalOAuthServerRequestBody: AddExternalOAuthServerRequestBody,
): string {
  return JSON.stringify(
    AddExternalOAuthServerRequestBody$outboundSchema.parse(
      addExternalOAuthServerRequestBody,
    ),
  );
}

export function addExternalOAuthServerRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddExternalOAuthServerRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddExternalOAuthServerRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddExternalOAuthServerRequestBody' from JSON`,
  );
}
