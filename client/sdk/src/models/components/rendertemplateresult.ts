/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RenderTemplateResult = {
  /**
   * The rendered prompt
   */
  prompt: string;
};

/** @internal */
export const RenderTemplateResult$inboundSchema: z.ZodType<
  RenderTemplateResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.string(),
});

/** @internal */
export type RenderTemplateResult$Outbound = {
  prompt: string;
};

/** @internal */
export const RenderTemplateResult$outboundSchema: z.ZodType<
  RenderTemplateResult$Outbound,
  z.ZodTypeDef,
  RenderTemplateResult
> = z.object({
  prompt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenderTemplateResult$ {
  /** @deprecated use `RenderTemplateResult$inboundSchema` instead. */
  export const inboundSchema = RenderTemplateResult$inboundSchema;
  /** @deprecated use `RenderTemplateResult$outboundSchema` instead. */
  export const outboundSchema = RenderTemplateResult$outboundSchema;
  /** @deprecated use `RenderTemplateResult$Outbound` instead. */
  export type Outbound = RenderTemplateResult$Outbound;
}

export function renderTemplateResultToJSON(
  renderTemplateResult: RenderTemplateResult,
): string {
  return JSON.stringify(
    RenderTemplateResult$outboundSchema.parse(renderTemplateResult),
  );
}

export function renderTemplateResultFromJSON(
  jsonString: string,
): SafeParseResult<RenderTemplateResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenderTemplateResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenderTemplateResult' from JSON`,
  );
}
