/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreatePackageForm = {
  /**
   * The description of the package. Limited markdown syntax is supported.
   */
  description?: string | undefined;
  /**
   * The asset ID of the image to show for this package
   */
  imageAssetId?: string | undefined;
  /**
   * The keywords of the package
   */
  keywords?: Array<string> | undefined;
  /**
   * The name of the package
   */
  name: string;
  /**
   * The summary of the package
   */
  summary: string;
  /**
   * The title of the package
   */
  title: string;
  /**
   * External URL for the package owner
   */
  url?: string | undefined;
};

/** @internal */
export const CreatePackageForm$inboundSchema: z.ZodType<
  CreatePackageForm,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  image_asset_id: z.string().optional(),
  keywords: z.array(z.string()).optional(),
  name: z.string(),
  summary: z.string(),
  title: z.string(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "image_asset_id": "imageAssetId",
  });
});

/** @internal */
export type CreatePackageForm$Outbound = {
  description?: string | undefined;
  image_asset_id?: string | undefined;
  keywords?: Array<string> | undefined;
  name: string;
  summary: string;
  title: string;
  url?: string | undefined;
};

/** @internal */
export const CreatePackageForm$outboundSchema: z.ZodType<
  CreatePackageForm$Outbound,
  z.ZodTypeDef,
  CreatePackageForm
> = z.object({
  description: z.string().optional(),
  imageAssetId: z.string().optional(),
  keywords: z.array(z.string()).optional(),
  name: z.string(),
  summary: z.string(),
  title: z.string(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    imageAssetId: "image_asset_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePackageForm$ {
  /** @deprecated use `CreatePackageForm$inboundSchema` instead. */
  export const inboundSchema = CreatePackageForm$inboundSchema;
  /** @deprecated use `CreatePackageForm$outboundSchema` instead. */
  export const outboundSchema = CreatePackageForm$outboundSchema;
  /** @deprecated use `CreatePackageForm$Outbound` instead. */
  export type Outbound = CreatePackageForm$Outbound;
}

export function createPackageFormToJSON(
  createPackageForm: CreatePackageForm,
): string {
  return JSON.stringify(
    CreatePackageForm$outboundSchema.parse(createPackageForm),
  );
}

export function createPackageFormFromJSON(
  jsonString: string,
): SafeParseResult<CreatePackageForm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePackageForm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePackageForm' from JSON`,
  );
}
