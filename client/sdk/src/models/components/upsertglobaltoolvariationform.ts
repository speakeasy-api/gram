/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The confirmation mode for the tool variation
 */
export const Confirm = {
  Always: "always",
  Never: "never",
  Session: "session",
} as const;
/**
 * The confirmation mode for the tool variation
 */
export type Confirm = ClosedEnum<typeof Confirm>;

export type UpsertGlobalToolVariationForm = {
  /**
   * The confirmation mode for the tool variation
   */
  confirm?: Confirm | undefined;
  /**
   * The confirmation prompt for the tool variation
   */
  confirmPrompt?: string | undefined;
  /**
   * The description of the tool variation
   */
  description?: string | undefined;
  /**
   * The name of the tool variation
   */
  name?: string | undefined;
  /**
   * The name of the source tool
   */
  srcToolName: string;
  /**
   * The URN of the source tool
   */
  srcToolUrn: string;
  /**
   * The summarizer of the tool variation
   */
  summarizer?: string | undefined;
  /**
   * The summary of the tool variation
   */
  summary?: string | undefined;
  /**
   * The tags of the tool variation
   */
  tags?: Array<string> | undefined;
};

/** @internal */
export const Confirm$inboundSchema: z.ZodNativeEnum<typeof Confirm> = z
  .nativeEnum(Confirm);

/** @internal */
export const Confirm$outboundSchema: z.ZodNativeEnum<typeof Confirm> =
  Confirm$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Confirm$ {
  /** @deprecated use `Confirm$inboundSchema` instead. */
  export const inboundSchema = Confirm$inboundSchema;
  /** @deprecated use `Confirm$outboundSchema` instead. */
  export const outboundSchema = Confirm$outboundSchema;
}

/** @internal */
export const UpsertGlobalToolVariationForm$inboundSchema: z.ZodType<
  UpsertGlobalToolVariationForm,
  z.ZodTypeDef,
  unknown
> = z.object({
  confirm: Confirm$inboundSchema.optional(),
  confirm_prompt: z.string().optional(),
  description: z.string().optional(),
  name: z.string().optional(),
  src_tool_name: z.string(),
  src_tool_urn: z.string(),
  summarizer: z.string().optional(),
  summary: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "confirm_prompt": "confirmPrompt",
    "src_tool_name": "srcToolName",
    "src_tool_urn": "srcToolUrn",
  });
});

/** @internal */
export type UpsertGlobalToolVariationForm$Outbound = {
  confirm?: string | undefined;
  confirm_prompt?: string | undefined;
  description?: string | undefined;
  name?: string | undefined;
  src_tool_name: string;
  src_tool_urn: string;
  summarizer?: string | undefined;
  summary?: string | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const UpsertGlobalToolVariationForm$outboundSchema: z.ZodType<
  UpsertGlobalToolVariationForm$Outbound,
  z.ZodTypeDef,
  UpsertGlobalToolVariationForm
> = z.object({
  confirm: Confirm$outboundSchema.optional(),
  confirmPrompt: z.string().optional(),
  description: z.string().optional(),
  name: z.string().optional(),
  srcToolName: z.string(),
  srcToolUrn: z.string(),
  summarizer: z.string().optional(),
  summary: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    confirmPrompt: "confirm_prompt",
    srcToolName: "src_tool_name",
    srcToolUrn: "src_tool_urn",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertGlobalToolVariationForm$ {
  /** @deprecated use `UpsertGlobalToolVariationForm$inboundSchema` instead. */
  export const inboundSchema = UpsertGlobalToolVariationForm$inboundSchema;
  /** @deprecated use `UpsertGlobalToolVariationForm$outboundSchema` instead. */
  export const outboundSchema = UpsertGlobalToolVariationForm$outboundSchema;
  /** @deprecated use `UpsertGlobalToolVariationForm$Outbound` instead. */
  export type Outbound = UpsertGlobalToolVariationForm$Outbound;
}

export function upsertGlobalToolVariationFormToJSON(
  upsertGlobalToolVariationForm: UpsertGlobalToolVariationForm,
): string {
  return JSON.stringify(
    UpsertGlobalToolVariationForm$outboundSchema.parse(
      upsertGlobalToolVariationForm,
    ),
  );
}

export function upsertGlobalToolVariationFormFromJSON(
  jsonString: string,
): SafeParseResult<UpsertGlobalToolVariationForm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertGlobalToolVariationForm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertGlobalToolVariationForm' from JSON`,
  );
}
