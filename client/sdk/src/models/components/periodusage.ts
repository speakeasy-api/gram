/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PeriodUsage = {
  /**
   * The maximum number of servers allowed
   */
  maxServers: number;
  /**
   * The maximum number of tool calls allowed
   */
  maxToolCalls: number;
  /**
   * The number of servers used
   */
  servers: number;
  /**
   * The number of tool calls used
   */
  toolCalls: number;
};

/** @internal */
export const PeriodUsage$inboundSchema: z.ZodType<
  PeriodUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_servers: z.number().int(),
  max_tool_calls: z.number().int(),
  servers: z.number().int(),
  tool_calls: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "max_servers": "maxServers",
    "max_tool_calls": "maxToolCalls",
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type PeriodUsage$Outbound = {
  max_servers: number;
  max_tool_calls: number;
  servers: number;
  tool_calls: number;
};

/** @internal */
export const PeriodUsage$outboundSchema: z.ZodType<
  PeriodUsage$Outbound,
  z.ZodTypeDef,
  PeriodUsage
> = z.object({
  maxServers: z.number().int(),
  maxToolCalls: z.number().int(),
  servers: z.number().int(),
  toolCalls: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    maxServers: "max_servers",
    maxToolCalls: "max_tool_calls",
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PeriodUsage$ {
  /** @deprecated use `PeriodUsage$inboundSchema` instead. */
  export const inboundSchema = PeriodUsage$inboundSchema;
  /** @deprecated use `PeriodUsage$outboundSchema` instead. */
  export const outboundSchema = PeriodUsage$outboundSchema;
  /** @deprecated use `PeriodUsage$Outbound` instead. */
  export type Outbound = PeriodUsage$Outbound;
}

export function periodUsageToJSON(periodUsage: PeriodUsage): string {
  return JSON.stringify(PeriodUsage$outboundSchema.parse(periodUsage));
}

export function periodUsageFromJSON(
  jsonString: string,
): SafeParseResult<PeriodUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PeriodUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PeriodUsage' from JSON`,
  );
}
