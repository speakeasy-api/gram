/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SetInstallPageMetadataRequestBody = {
  /**
   * A link to external documentation for the MCP install page
   */
  externalDocumentationUrl?: string | undefined;
  /**
   * The asset ID for the MCP install page logo
   */
  logoAssetId?: string | undefined;
  /**
   * The toolset associated with this install page metadata
   */
  toolsetId: string;
};

/** @internal */
export const SetInstallPageMetadataRequestBody$inboundSchema: z.ZodType<
  SetInstallPageMetadataRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_documentation_url: z.string().optional(),
  logo_asset_id: z.string().optional(),
  toolset_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "external_documentation_url": "externalDocumentationUrl",
    "logo_asset_id": "logoAssetId",
    "toolset_id": "toolsetId",
  });
});

/** @internal */
export type SetInstallPageMetadataRequestBody$Outbound = {
  external_documentation_url?: string | undefined;
  logo_asset_id?: string | undefined;
  toolset_id: string;
};

/** @internal */
export const SetInstallPageMetadataRequestBody$outboundSchema: z.ZodType<
  SetInstallPageMetadataRequestBody$Outbound,
  z.ZodTypeDef,
  SetInstallPageMetadataRequestBody
> = z.object({
  externalDocumentationUrl: z.string().optional(),
  logoAssetId: z.string().optional(),
  toolsetId: z.string(),
}).transform((v) => {
  return remap$(v, {
    externalDocumentationUrl: "external_documentation_url",
    logoAssetId: "logo_asset_id",
    toolsetId: "toolset_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetInstallPageMetadataRequestBody$ {
  /** @deprecated use `SetInstallPageMetadataRequestBody$inboundSchema` instead. */
  export const inboundSchema = SetInstallPageMetadataRequestBody$inboundSchema;
  /** @deprecated use `SetInstallPageMetadataRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    SetInstallPageMetadataRequestBody$outboundSchema;
  /** @deprecated use `SetInstallPageMetadataRequestBody$Outbound` instead. */
  export type Outbound = SetInstallPageMetadataRequestBody$Outbound;
}

export function setInstallPageMetadataRequestBodyToJSON(
  setInstallPageMetadataRequestBody: SetInstallPageMetadataRequestBody,
): string {
  return JSON.stringify(
    SetInstallPageMetadataRequestBody$outboundSchema.parse(
      setInstallPageMetadataRequestBody,
    ),
  );
}

export function setInstallPageMetadataRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SetInstallPageMetadataRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetInstallPageMetadataRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetInstallPageMetadataRequestBody' from JSON`,
  );
}
