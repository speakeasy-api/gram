/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A function resource
 */
export type FunctionResourceDefinition = {
  /**
   * The creation date of the resource.
   */
  createdAt: Date;
  /**
   * The ID of the deployment
   */
  deploymentId: string;
  /**
   * Description of the resource
   */
  description: string;
  /**
   * The ID of the function
   */
  functionId: string;
  /**
   * The ID of the resource
   */
  id: string;
  /**
   * Optional MIME type of the resource
   */
  mimeType?: string | undefined;
  /**
   * The name of the resource
   */
  name: string;
  /**
   * The ID of the project
   */
  projectId: string;
  /**
   * The URN of this resource
   */
  resourceUrn: string;
  /**
   * Runtime environment (e.g., nodejs:22, python:3.12)
   */
  runtime: string;
  /**
   * Optional title for the resource
   */
  title?: string | undefined;
  /**
   * The last update date of the resource.
   */
  updatedAt: Date;
  /**
   * The URI of the resource
   */
  uri: string;
  /**
   * Variables configuration for the resource
   */
  variables?: any | undefined;
};

/** @internal */
export const FunctionResourceDefinition$inboundSchema: z.ZodType<
  FunctionResourceDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  deployment_id: z.string(),
  description: z.string(),
  function_id: z.string(),
  id: z.string(),
  mime_type: z.string().optional(),
  name: z.string(),
  project_id: z.string(),
  resource_urn: z.string(),
  runtime: z.string(),
  title: z.string().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  uri: z.string(),
  variables: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "deployment_id": "deploymentId",
    "function_id": "functionId",
    "mime_type": "mimeType",
    "project_id": "projectId",
    "resource_urn": "resourceUrn",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type FunctionResourceDefinition$Outbound = {
  created_at: string;
  deployment_id: string;
  description: string;
  function_id: string;
  id: string;
  mime_type?: string | undefined;
  name: string;
  project_id: string;
  resource_urn: string;
  runtime: string;
  title?: string | undefined;
  updated_at: string;
  uri: string;
  variables?: any | undefined;
};

/** @internal */
export const FunctionResourceDefinition$outboundSchema: z.ZodType<
  FunctionResourceDefinition$Outbound,
  z.ZodTypeDef,
  FunctionResourceDefinition
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  deploymentId: z.string(),
  description: z.string(),
  functionId: z.string(),
  id: z.string(),
  mimeType: z.string().optional(),
  name: z.string(),
  projectId: z.string(),
  resourceUrn: z.string(),
  runtime: z.string(),
  title: z.string().optional(),
  updatedAt: z.date().transform(v => v.toISOString()),
  uri: z.string(),
  variables: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    deploymentId: "deployment_id",
    functionId: "function_id",
    mimeType: "mime_type",
    projectId: "project_id",
    resourceUrn: "resource_urn",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionResourceDefinition$ {
  /** @deprecated use `FunctionResourceDefinition$inboundSchema` instead. */
  export const inboundSchema = FunctionResourceDefinition$inboundSchema;
  /** @deprecated use `FunctionResourceDefinition$outboundSchema` instead. */
  export const outboundSchema = FunctionResourceDefinition$outboundSchema;
  /** @deprecated use `FunctionResourceDefinition$Outbound` instead. */
  export type Outbound = FunctionResourceDefinition$Outbound;
}

export function functionResourceDefinitionToJSON(
  functionResourceDefinition: FunctionResourceDefinition,
): string {
  return JSON.stringify(
    FunctionResourceDefinition$outboundSchema.parse(functionResourceDefinition),
  );
}

export function functionResourceDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<FunctionResourceDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionResourceDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionResourceDefinition' from JSON`,
  );
}
