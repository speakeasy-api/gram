/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Key,
  Key$inboundSchema,
  Key$Outbound,
  Key$outboundSchema,
} from "./key.js";

export type ListKeysResult = {
  keys: Array<Key>;
};

/** @internal */
export const ListKeysResult$inboundSchema: z.ZodType<
  ListKeysResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  keys: z.array(Key$inboundSchema),
});

/** @internal */
export type ListKeysResult$Outbound = {
  keys: Array<Key$Outbound>;
};

/** @internal */
export const ListKeysResult$outboundSchema: z.ZodType<
  ListKeysResult$Outbound,
  z.ZodTypeDef,
  ListKeysResult
> = z.object({
  keys: z.array(Key$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListKeysResult$ {
  /** @deprecated use `ListKeysResult$inboundSchema` instead. */
  export const inboundSchema = ListKeysResult$inboundSchema;
  /** @deprecated use `ListKeysResult$outboundSchema` instead. */
  export const outboundSchema = ListKeysResult$outboundSchema;
  /** @deprecated use `ListKeysResult$Outbound` instead. */
  export type Outbound = ListKeysResult$Outbound;
}

export function listKeysResultToJSON(listKeysResult: ListKeysResult): string {
  return JSON.stringify(ListKeysResult$outboundSchema.parse(listKeysResult));
}

export function listKeysResultFromJSON(
  jsonString: string,
): SafeParseResult<ListKeysResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListKeysResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListKeysResult' from JSON`,
  );
}
