/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FunctionResourceDefinition,
  FunctionResourceDefinition$inboundSchema,
  FunctionResourceDefinition$Outbound,
  FunctionResourceDefinition$outboundSchema,
} from "./functionresourcedefinition.js";

/**
 * A polymorphic resource - currently only function resources are supported
 */
export type Resource = {
  /**
   * A function resource
   */
  functionResourceDefinition?: FunctionResourceDefinition | undefined;
};

/** @internal */
export const Resource$inboundSchema: z.ZodType<
  Resource,
  z.ZodTypeDef,
  unknown
> = z.object({
  function_resource_definition: FunctionResourceDefinition$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "function_resource_definition": "functionResourceDefinition",
  });
});

/** @internal */
export type Resource$Outbound = {
  function_resource_definition?:
    | FunctionResourceDefinition$Outbound
    | undefined;
};

/** @internal */
export const Resource$outboundSchema: z.ZodType<
  Resource$Outbound,
  z.ZodTypeDef,
  Resource
> = z.object({
  functionResourceDefinition: FunctionResourceDefinition$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    functionResourceDefinition: "function_resource_definition",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Resource$ {
  /** @deprecated use `Resource$inboundSchema` instead. */
  export const inboundSchema = Resource$inboundSchema;
  /** @deprecated use `Resource$outboundSchema` instead. */
  export const outboundSchema = Resource$outboundSchema;
  /** @deprecated use `Resource$Outbound` instead. */
  export type Outbound = Resource$Outbound;
}

export function resourceToJSON(resource: Resource): string {
  return JSON.stringify(Resource$outboundSchema.parse(resource));
}

export function resourceFromJSON(
  jsonString: string,
): SafeParseResult<Resource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Resource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Resource' from JSON`,
  );
}
