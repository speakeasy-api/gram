/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Deployment,
  Deployment$inboundSchema,
  Deployment$Outbound,
  Deployment$outboundSchema,
} from "./deployment.js";

export type EvolveResult = {
  deployment?: Deployment | undefined;
};

/** @internal */
export const EvolveResult$inboundSchema: z.ZodType<
  EvolveResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  deployment: Deployment$inboundSchema.optional(),
});

/** @internal */
export type EvolveResult$Outbound = {
  deployment?: Deployment$Outbound | undefined;
};

/** @internal */
export const EvolveResult$outboundSchema: z.ZodType<
  EvolveResult$Outbound,
  z.ZodTypeDef,
  EvolveResult
> = z.object({
  deployment: Deployment$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvolveResult$ {
  /** @deprecated use `EvolveResult$inboundSchema` instead. */
  export const inboundSchema = EvolveResult$inboundSchema;
  /** @deprecated use `EvolveResult$outboundSchema` instead. */
  export const outboundSchema = EvolveResult$outboundSchema;
  /** @deprecated use `EvolveResult$Outbound` instead. */
  export type Outbound = EvolveResult$Outbound;
}

export function evolveResultToJSON(evolveResult: EvolveResult): string {
  return JSON.stringify(EvolveResult$outboundSchema.parse(evolveResult));
}

export function evolveResultFromJSON(
  jsonString: string,
): SafeParseResult<EvolveResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvolveResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvolveResult' from JSON`,
  );
}
