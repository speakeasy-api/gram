/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FunctionEnvironmentVariable = {
  /**
   * Description of the function environment variable
   */
  description?: string | undefined;
  /**
   * The environment variables
   */
  name: string;
};

/** @internal */
export const FunctionEnvironmentVariable$inboundSchema: z.ZodType<
  FunctionEnvironmentVariable,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  name: z.string(),
});

/** @internal */
export type FunctionEnvironmentVariable$Outbound = {
  description?: string | undefined;
  name: string;
};

/** @internal */
export const FunctionEnvironmentVariable$outboundSchema: z.ZodType<
  FunctionEnvironmentVariable$Outbound,
  z.ZodTypeDef,
  FunctionEnvironmentVariable
> = z.object({
  description: z.string().optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionEnvironmentVariable$ {
  /** @deprecated use `FunctionEnvironmentVariable$inboundSchema` instead. */
  export const inboundSchema = FunctionEnvironmentVariable$inboundSchema;
  /** @deprecated use `FunctionEnvironmentVariable$outboundSchema` instead. */
  export const outboundSchema = FunctionEnvironmentVariable$outboundSchema;
  /** @deprecated use `FunctionEnvironmentVariable$Outbound` instead. */
  export type Outbound = FunctionEnvironmentVariable$Outbound;
}

export function functionEnvironmentVariableToJSON(
  functionEnvironmentVariable: FunctionEnvironmentVariable,
): string {
  return JSON.stringify(
    FunctionEnvironmentVariable$outboundSchema.parse(
      functionEnvironmentVariable,
    ),
  );
}

export function functionEnvironmentVariableFromJSON(
  jsonString: string,
): SafeParseResult<FunctionEnvironmentVariable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionEnvironmentVariable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionEnvironmentVariable' from JSON`,
  );
}
