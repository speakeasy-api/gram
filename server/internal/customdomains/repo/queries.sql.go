// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomDomain = `-- name: CreateCustomDomain :one
INSERT INTO custom_domains (
    organization_id,
    domain,
    ingress_name,
    cert_secret_name
) VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, organization_id, domain, verified, activated, ingress_name, cert_secret_name, created_at, updated_at, deleted_at, deleted
`

type CreateCustomDomainParams struct {
	OrganizationID string
	Domain         string
	IngressName    pgtype.Text
	CertSecretName pgtype.Text
}

func (q *Queries) CreateCustomDomain(ctx context.Context, arg CreateCustomDomainParams) (CustomDomain, error) {
	row := q.db.QueryRow(ctx, createCustomDomain,
		arg.OrganizationID,
		arg.Domain,
		arg.IngressName,
		arg.CertSecretName,
	)
	var i CustomDomain
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Domain,
		&i.Verified,
		&i.Activated,
		&i.IngressName,
		&i.CertSecretName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const deleteCustomDomain = `-- name: DeleteCustomDomain :exec
UPDATE custom_domains
SET deleted_at = clock_timestamp()
WHERE organization_id = $1
  AND deleted IS FALSE
`

func (q *Queries) DeleteCustomDomain(ctx context.Context, organizationID string) error {
	_, err := q.db.Exec(ctx, deleteCustomDomain, organizationID)
	return err
}

const getCustomDomainByDomain = `-- name: GetCustomDomainByDomain :one
SELECT id, organization_id, domain, verified, activated, ingress_name, cert_secret_name, created_at, updated_at, deleted_at, deleted
FROM custom_domains
WHERE domain = $1
  AND deleted IS FALSE
`

func (q *Queries) GetCustomDomainByDomain(ctx context.Context, domain string) (CustomDomain, error) {
	row := q.db.QueryRow(ctx, getCustomDomainByDomain, domain)
	var i CustomDomain
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Domain,
		&i.Verified,
		&i.Activated,
		&i.IngressName,
		&i.CertSecretName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const getCustomDomainByID = `-- name: GetCustomDomainByID :one
SELECT id, organization_id, domain, verified, activated, ingress_name, cert_secret_name, created_at, updated_at, deleted_at, deleted
FROM custom_domains
WHERE id = $1
  AND deleted IS FALSE
`

func (q *Queries) GetCustomDomainByID(ctx context.Context, id uuid.UUID) (CustomDomain, error) {
	row := q.db.QueryRow(ctx, getCustomDomainByID, id)
	var i CustomDomain
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Domain,
		&i.Verified,
		&i.Activated,
		&i.IngressName,
		&i.CertSecretName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const getCustomDomainByOrganization = `-- name: GetCustomDomainByOrganization :one
SELECT id, organization_id, domain, verified, activated, ingress_name, cert_secret_name, created_at, updated_at, deleted_at, deleted
FROM custom_domains
WHERE organization_id = $1
  AND deleted IS FALSE
LIMIT 1
`

func (q *Queries) GetCustomDomainByOrganization(ctx context.Context, organizationID string) (CustomDomain, error) {
	row := q.db.QueryRow(ctx, getCustomDomainByOrganization, organizationID)
	var i CustomDomain
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Domain,
		&i.Verified,
		&i.Activated,
		&i.IngressName,
		&i.CertSecretName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const updateCustomDomain = `-- name: UpdateCustomDomain :one
UPDATE custom_domains
SET
    verified = COALESCE($1, verified),
    activated = COALESCE($2, activated),
    ingress_name = COALESCE($3, ingress_name),
    cert_secret_name = COALESCE($4, cert_secret_name),
    updated_at = clock_timestamp()
WHERE id = $5
  AND deleted IS FALSE
RETURNING id, organization_id, domain, verified, activated, ingress_name, cert_secret_name, created_at, updated_at, deleted_at, deleted
`

type UpdateCustomDomainParams struct {
	Verified       bool
	Activated      bool
	IngressName    pgtype.Text
	CertSecretName pgtype.Text
	ID             uuid.UUID
}

func (q *Queries) UpdateCustomDomain(ctx context.Context, arg UpdateCustomDomainParams) (CustomDomain, error) {
	row := q.db.QueryRow(ctx, updateCustomDomain,
		arg.Verified,
		arg.Activated,
		arg.IngressName,
		arg.CertSecretName,
		arg.ID,
	)
	var i CustomDomain
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Domain,
		&i.Verified,
		&i.Activated,
		&i.IngressName,
		&i.CertSecretName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}
