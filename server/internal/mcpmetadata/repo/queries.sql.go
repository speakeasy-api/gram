// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getMetadataForToolset = `-- name: GetMetadataForToolset :one
SELECT id,
       toolset_id,
       project_id,
       external_documentation_url,
       logo_id,
       created_at,
       updated_at
FROM mcp_metadata
WHERE toolset_id = $1
ORDER BY updated_at DESC
LIMIT 1
`

func (q *Queries) GetMetadataForToolset(ctx context.Context, toolsetID uuid.UUID) (McpMetadatum, error) {
	row := q.db.QueryRow(ctx, getMetadataForToolset, toolsetID)
	var i McpMetadatum
	err := row.Scan(
		&i.ID,
		&i.ToolsetID,
		&i.ProjectID,
		&i.ExternalDocumentationUrl,
		&i.LogoID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertMetadata = `-- name: UpsertMetadata :one
INSERT INTO mcp_metadata (
    toolset_id,
    project_id,
    external_documentation_url,
    logo_id
) VALUES ($1, $2, $3, $4)
ON CONFLICT (toolset_id)
DO UPDATE SET project_id = EXCLUDED.project_id,
              external_documentation_url = EXCLUDED.external_documentation_url,
              logo_id = EXCLUDED.logo_id,
              updated_at = clock_timestamp()
RETURNING id,
          toolset_id,
          project_id,
          external_documentation_url,
          logo_id,
          created_at,
          updated_at
`

type UpsertMetadataParams struct {
	ToolsetID                uuid.UUID
	ProjectID                uuid.UUID
	ExternalDocumentationUrl pgtype.Text
	LogoID                   uuid.NullUUID
}

func (q *Queries) UpsertMetadata(ctx context.Context, arg UpsertMetadataParams) (McpMetadatum, error) {
	row := q.db.QueryRow(ctx, upsertMetadata,
		arg.ToolsetID,
		arg.ProjectID,
		arg.ExternalDocumentationUrl,
		arg.LogoID,
	)
	var i McpMetadatum
	err := row.Scan(
		&i.ID,
		&i.ToolsetID,
		&i.ProjectID,
		&i.ExternalDocumentationUrl,
		&i.LogoID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
