// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteGlobalToolVariation = `-- name: DeleteGlobalToolVariation :one
UPDATE tool_variations SET deleted_at = clock_timestamp()
WHERE tool_variations.id = $1
  AND tool_variations.group_id IN (
    SELECT tool_variations_groups.id
    FROM tool_variations_groups
    INNER JOIN project_tool_variations ON tool_variations_groups.id = project_tool_variations.group_id
    WHERE project_tool_variations.project_id = $2
  )
  AND tool_variations.deleted IS FALSE
RETURNING tool_variations.id
`

type DeleteGlobalToolVariationParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) DeleteGlobalToolVariation(ctx context.Context, arg DeleteGlobalToolVariationParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deleteGlobalToolVariation, arg.ID, arg.ProjectID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const findGlobalVariationsByToolNames = `-- name: FindGlobalVariationsByToolNames :many
WITH global_group AS (
  SELECT tool_variations_groups.id
  FROM tool_variations_groups
  INNER JOIN project_tool_variations ON tool_variations_groups.id = project_tool_variations.group_id
  WHERE project_tool_variations.project_id = $2
  ORDER BY project_tool_variations.id DESC
  LIMIT 1
)
SELECT id, group_id, src_tool_urn, src_tool_name, confirm, confirm_prompt, name, summary, description, tags, summarizer, created_at, updated_at, deleted_at, deleted
FROM tool_variations
WHERE
  group_id = (SELECT id FROM global_group)
  AND src_tool_name = ANY($1::text[])
  AND deleted IS FALSE
`

type FindGlobalVariationsByToolNamesParams struct {
	ToolNames []string
	ProjectID uuid.UUID
}

func (q *Queries) FindGlobalVariationsByToolNames(ctx context.Context, arg FindGlobalVariationsByToolNamesParams) ([]ToolVariation, error) {
	rows, err := q.db.Query(ctx, findGlobalVariationsByToolNames, arg.ToolNames, arg.ProjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ToolVariation
	for rows.Next() {
		var i ToolVariation
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.SrcToolUrn,
			&i.SrcToolName,
			&i.Confirm,
			&i.ConfirmPrompt,
			&i.Name,
			&i.Summary,
			&i.Description,
			&i.Tags,
			&i.Summarizer,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const initGlobalToolVariationsGroup = `-- name: InitGlobalToolVariationsGroup :one
WITH created AS (
  INSERT INTO tool_variations_groups (
    project_id,
    name,
    description
  )
  SELECT $1, $2, $3
  RETURNING id
),
attached AS (
  INSERT INTO project_tool_variations (
    project_id,
    group_id
  )
  SELECT $1, (SELECT id FROM created)
)
SELECT id FROM created
`

type InitGlobalToolVariationsGroupParams struct {
	ProjectID   uuid.UUID
	Name        string
	Description pgtype.Text
}

func (q *Queries) InitGlobalToolVariationsGroup(ctx context.Context, arg InitGlobalToolVariationsGroupParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, initGlobalToolVariationsGroup, arg.ProjectID, arg.Name, arg.Description)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const listGlobalToolVariations = `-- name: ListGlobalToolVariations :many
SELECT tool_variations.id, tool_variations.group_id, tool_variations.src_tool_urn, tool_variations.src_tool_name, tool_variations.confirm, tool_variations.confirm_prompt, tool_variations.name, tool_variations.summary, tool_variations.description, tool_variations.tags, tool_variations.summarizer, tool_variations.created_at, tool_variations.updated_at, tool_variations.deleted_at, tool_variations.deleted
FROM tool_variations
INNER JOIN tool_variations_groups
  ON tool_variations.group_id = tool_variations_groups.id
INNER JOIN project_tool_variations
  ON tool_variations_groups.id = project_tool_variations.group_id
WHERE
  project_tool_variations.project_id = $1
  AND tool_variations.deleted IS FALSE
ORDER BY tool_variations.id DESC
`

type ListGlobalToolVariationsRow struct {
	ToolVariation ToolVariation
}

func (q *Queries) ListGlobalToolVariations(ctx context.Context, projectID uuid.UUID) ([]ListGlobalToolVariationsRow, error) {
	rows, err := q.db.Query(ctx, listGlobalToolVariations, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListGlobalToolVariationsRow
	for rows.Next() {
		var i ListGlobalToolVariationsRow
		if err := rows.Scan(
			&i.ToolVariation.ID,
			&i.ToolVariation.GroupID,
			&i.ToolVariation.SrcToolUrn,
			&i.ToolVariation.SrcToolName,
			&i.ToolVariation.Confirm,
			&i.ToolVariation.ConfirmPrompt,
			&i.ToolVariation.Name,
			&i.ToolVariation.Summary,
			&i.ToolVariation.Description,
			&i.ToolVariation.Tags,
			&i.ToolVariation.Summarizer,
			&i.ToolVariation.CreatedAt,
			&i.ToolVariation.UpdatedAt,
			&i.ToolVariation.DeletedAt,
			&i.ToolVariation.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pokeGlobalToolVariationsGroup = `-- name: PokeGlobalToolVariationsGroup :one
SELECT tool_variations_groups.id
FROM tool_variations_groups
INNER JOIN project_tool_variations ON tool_variations_groups.id = project_tool_variations.group_id
WHERE project_tool_variations.project_id = $1
`

func (q *Queries) PokeGlobalToolVariationsGroup(ctx context.Context, projectID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, pokeGlobalToolVariationsGroup, projectID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const upsertToolVariation = `-- name: UpsertToolVariation :one
INSERT INTO tool_variations (
  group_id,
  src_tool_urn,
  src_tool_name,
  confirm,
  confirm_prompt,
  name,
  summary,
  description,
  tags,
  summarizer
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10
) ON CONFLICT (group_id, src_tool_name) WHERE deleted IS FALSE DO UPDATE SET
  src_tool_urn = EXCLUDED.src_tool_urn,
  confirm = EXCLUDED.confirm,
  confirm_prompt = EXCLUDED.confirm_prompt,
  name = EXCLUDED.name,
  summary = EXCLUDED.summary,
  description = EXCLUDED.description,
  tags = EXCLUDED.tags,
  summarizer = EXCLUDED.summarizer,
  updated_at = clock_timestamp()
RETURNING id, group_id, src_tool_urn, src_tool_name, confirm, confirm_prompt, name, summary, description, tags, summarizer, created_at, updated_at, deleted_at, deleted
`

type UpsertToolVariationParams struct {
	GroupID       uuid.UUID
	SrcToolUrn    pgtype.Text
	SrcToolName   string
	Confirm       pgtype.Text
	ConfirmPrompt pgtype.Text
	Name          pgtype.Text
	Summary       pgtype.Text
	Description   pgtype.Text
	Tags          []string
	Summarizer    pgtype.Text
}

func (q *Queries) UpsertToolVariation(ctx context.Context, arg UpsertToolVariationParams) (ToolVariation, error) {
	row := q.db.QueryRow(ctx, upsertToolVariation,
		arg.GroupID,
		arg.SrcToolUrn,
		arg.SrcToolName,
		arg.Confirm,
		arg.ConfirmPrompt,
		arg.Name,
		arg.Summary,
		arg.Description,
		arg.Tags,
		arg.Summarizer,
	)
	var i ToolVariation
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.SrcToolUrn,
		&i.SrcToolName,
		&i.Confirm,
		&i.ConfirmPrompt,
		&i.Name,
		&i.Summary,
		&i.Description,
		&i.Tags,
		&i.Summarizer,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}
