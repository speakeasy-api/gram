// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAsset = `-- name: CreateAsset :one
INSERT INTO assets (
    name
  , url
  , project_id
  , sha256
  , kind
  , content_type
  , content_length
) VALUES (
    $1
  , $2
  , $3
  , $4
  , $5
  , $6
  , $7
)
ON CONFLICT (project_id, sha256) DO UPDATE SET
    deleted_at = NULL,
    url = $2,
    updated_at = clock_timestamp()
RETURNING id, project_id, name, url, kind, content_type, content_length, sha256, created_at, updated_at, deleted_at, deleted
`

type CreateAssetParams struct {
	Name          string
	Url           string
	ProjectID     uuid.UUID
	Sha256        string
	Kind          string
	ContentType   string
	ContentLength int64
}

func (q *Queries) CreateAsset(ctx context.Context, arg CreateAssetParams) (Asset, error) {
	row := q.db.QueryRow(ctx, createAsset,
		arg.Name,
		arg.Url,
		arg.ProjectID,
		arg.Sha256,
		arg.Kind,
		arg.ContentType,
		arg.ContentLength,
	)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Url,
		&i.Kind,
		&i.ContentType,
		&i.ContentLength,
		&i.Sha256,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const getAssetURLs = `-- name: GetAssetURLs :many
SELECT id, url, sha256
FROM assets
WHERE project_id = $1
  AND id = ANY($2::uuid[])
  AND deleted IS FALSE
`

type GetAssetURLsParams struct {
	ProjectID uuid.UUID
	Ids       []uuid.UUID
}

type GetAssetURLsRow struct {
	ID     uuid.UUID
	Url    string
	Sha256 string
}

func (q *Queries) GetAssetURLs(ctx context.Context, arg GetAssetURLsParams) ([]GetAssetURLsRow, error) {
	rows, err := q.db.Query(ctx, getAssetURLs, arg.ProjectID, arg.Ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAssetURLsRow
	for rows.Next() {
		var i GetAssetURLsRow
		if err := rows.Scan(&i.ID, &i.Url, &i.Sha256); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImageAssetURL = `-- name: GetImageAssetURL :one
SELECT url, content_type, content_length, updated_at FROM assets WHERE id = $1 AND kind = 'image'
`

type GetImageAssetURLRow struct {
	Url           string
	ContentType   string
	ContentLength int64
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) GetImageAssetURL(ctx context.Context, id uuid.UUID) (GetImageAssetURLRow, error) {
	row := q.db.QueryRow(ctx, getImageAssetURL, id)
	var i GetImageAssetURLRow
	err := row.Scan(
		&i.Url,
		&i.ContentType,
		&i.ContentLength,
		&i.UpdatedAt,
	)
	return i, err
}

const getOpenAPIv3AssetURL = `-- name: GetOpenAPIv3AssetURL :one
SELECT url, content_type, content_length, updated_at
FROM assets
WHERE
  id = $1 AND kind = 'openapiv3'
  AND project_id = $2
`

type GetOpenAPIv3AssetURLParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

type GetOpenAPIv3AssetURLRow struct {
	Url           string
	ContentType   string
	ContentLength int64
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) GetOpenAPIv3AssetURL(ctx context.Context, arg GetOpenAPIv3AssetURLParams) (GetOpenAPIv3AssetURLRow, error) {
	row := q.db.QueryRow(ctx, getOpenAPIv3AssetURL, arg.ID, arg.ProjectID)
	var i GetOpenAPIv3AssetURLRow
	err := row.Scan(
		&i.Url,
		&i.ContentType,
		&i.ContentLength,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectAsset = `-- name: GetProjectAsset :one
SELECT id, project_id, name, url, kind, content_type, content_length, sha256, created_at, updated_at, deleted_at, deleted FROM assets WHERE project_id = $1 AND id = $2
`

type GetProjectAssetParams struct {
	ProjectID uuid.UUID
	ID        uuid.UUID
}

func (q *Queries) GetProjectAsset(ctx context.Context, arg GetProjectAssetParams) (Asset, error) {
	row := q.db.QueryRow(ctx, getProjectAsset, arg.ProjectID, arg.ID)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Url,
		&i.Kind,
		&i.ContentType,
		&i.ContentLength,
		&i.Sha256,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const getProjectAssetBySHA256 = `-- name: GetProjectAssetBySHA256 :one
SELECT id, project_id, name, url, kind, content_type, content_length, sha256, created_at, updated_at, deleted_at, deleted FROM assets WHERE project_id = $1 AND sha256 = $2
`

type GetProjectAssetBySHA256Params struct {
	ProjectID uuid.UUID
	Sha256    string
}

func (q *Queries) GetProjectAssetBySHA256(ctx context.Context, arg GetProjectAssetBySHA256Params) (Asset, error) {
	row := q.db.QueryRow(ctx, getProjectAssetBySHA256, arg.ProjectID, arg.Sha256)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Url,
		&i.Kind,
		&i.ContentType,
		&i.ContentLength,
		&i.Sha256,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const listAssets = `-- name: ListAssets :many
SELECT id, project_id, name, url, kind, content_type, content_length, sha256, created_at, updated_at, deleted_at, deleted FROM assets WHERE project_id = $1
`

func (q *Queries) ListAssets(ctx context.Context, projectID uuid.UUID) ([]Asset, error) {
	rows, err := q.db.Query(ctx, listAssets, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Name,
			&i.Url,
			&i.Kind,
			&i.ContentType,
			&i.ContentLength,
			&i.Sha256,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
