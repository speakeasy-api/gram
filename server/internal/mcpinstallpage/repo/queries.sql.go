// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMetadata = `-- name: CreateMetadata :one
INSERT INTO mcp_install_page_metadata (toolset_id, external_documentation_url, logo_id)
VALUES ($1, $2, $3)
RETURNING id,
          toolset_id,
          external_documentation_url,
          logo_id,
          created_at,
          updated_at
`

type CreateMetadataParams struct {
	ToolsetID                uuid.UUID
	ExternalDocumentationUrl pgtype.Text
	LogoID                   uuid.NullUUID
}

func (q *Queries) CreateMetadata(ctx context.Context, arg CreateMetadataParams) (McpInstallPageMetadatum, error) {
	row := q.db.QueryRow(ctx, createMetadata, arg.ToolsetID, arg.ExternalDocumentationUrl, arg.LogoID)
	var i McpInstallPageMetadatum
	err := row.Scan(
		&i.ID,
		&i.ToolsetID,
		&i.ExternalDocumentationUrl,
		&i.LogoID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ensureToolsetOwnership = `-- name: EnsureToolsetOwnership :one
SELECT id
FROM toolsets
WHERE id = $1
  AND project_id = $2
  AND deleted IS FALSE
`

type EnsureToolsetOwnershipParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) EnsureToolsetOwnership(ctx context.Context, arg EnsureToolsetOwnershipParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, ensureToolsetOwnership, arg.ID, arg.ProjectID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getMetadataForToolset = `-- name: GetMetadataForToolset :one
SELECT id,
       toolset_id,
       external_documentation_url,
       logo_id,
       created_at,
       updated_at
FROM mcp_install_page_metadata
WHERE toolset_id = $1
ORDER BY updated_at DESC
LIMIT 1
`

func (q *Queries) GetMetadataForToolset(ctx context.Context, toolsetID uuid.UUID) (McpInstallPageMetadatum, error) {
	row := q.db.QueryRow(ctx, getMetadataForToolset, toolsetID)
	var i McpInstallPageMetadatum
	err := row.Scan(
		&i.ID,
		&i.ToolsetID,
		&i.ExternalDocumentationUrl,
		&i.LogoID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMetadata = `-- name: UpdateMetadata :one
UPDATE mcp_install_page_metadata
SET toolset_id = $2,
    external_documentation_url = $3,
    logo_id = $4,
    updated_at = clock_timestamp()
WHERE id = $1
RETURNING id,
          toolset_id,
          external_documentation_url,
          logo_id,
          created_at,
          updated_at
`

type UpdateMetadataParams struct {
	ID                       uuid.UUID
	ToolsetID                uuid.UUID
	ExternalDocumentationUrl pgtype.Text
	LogoID                   uuid.NullUUID
}

func (q *Queries) UpdateMetadata(ctx context.Context, arg UpdateMetadataParams) (McpInstallPageMetadatum, error) {
	row := q.db.QueryRow(ctx, updateMetadata,
		arg.ID,
		arg.ToolsetID,
		arg.ExternalDocumentationUrl,
		arg.LogoID,
	)
	var i McpInstallPageMetadatum
	err := row.Scan(
		&i.ID,
		&i.ToolsetID,
		&i.ExternalDocumentationUrl,
		&i.LogoID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
