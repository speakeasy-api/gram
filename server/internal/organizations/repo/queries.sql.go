// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repo

import (
	"context"
)

const getOrganizationMetadata = `-- name: GetOrganizationMetadata :one
SELECT id, name, slug, gram_account_type, created_at, updated_at, disabled_at
FROM organization_metadata
WHERE id = $1
`

func (q *Queries) GetOrganizationMetadata(ctx context.Context, id string) (OrganizationMetadatum, error) {
	row := q.db.QueryRow(ctx, getOrganizationMetadata, id)
	var i OrganizationMetadatum
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.GramAccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DisabledAt,
	)
	return i, err
}

const setAccountType = `-- name: SetAccountType :exec
UPDATE organization_metadata
SET gram_account_type = $1,
    updated_at = clock_timestamp()
WHERE id = $2
`

type SetAccountTypeParams struct {
	GramAccountType string
	ID              string
}

func (q *Queries) SetAccountType(ctx context.Context, arg SetAccountTypeParams) error {
	_, err := q.db.Exec(ctx, setAccountType, arg.GramAccountType, arg.ID)
	return err
}

const upsertOrganizationMetadata = `-- name: UpsertOrganizationMetadata :one
INSERT INTO organization_metadata (
    id,
    name,
    slug
) VALUES (
    $1,
    $2,
    $3
)
ON CONFLICT (id) DO UPDATE SET
    name = EXCLUDED.name,
    slug = EXCLUDED.slug,
    updated_at = clock_timestamp()
RETURNING id, name, slug, gram_account_type, created_at, updated_at, disabled_at
`

type UpsertOrganizationMetadataParams struct {
	ID   string
	Name string
	Slug string
}

func (q *Queries) UpsertOrganizationMetadata(ctx context.Context, arg UpsertOrganizationMetadataParams) (OrganizationMetadatum, error) {
	row := q.db.QueryRow(ctx, upsertOrganizationMetadata, arg.ID, arg.Name, arg.Slug)
	var i OrganizationMetadatum
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.GramAccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DisabledAt,
	)
	return i, err
}
