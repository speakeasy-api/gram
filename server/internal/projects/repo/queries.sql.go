// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    name
  , slug
  , organization_id
) VALUES (
    $1
  , $2
  , $3
)
RETURNING id, name, slug, organization_id, logo_asset_id, created_at, updated_at, deleted_at, deleted
`

type CreateProjectParams struct {
	Name           string
	Slug           string
	OrganizationID string
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.Name, arg.Slug, arg.OrganizationID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.OrganizationID,
		&i.LogoAssetID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, name, slug, organization_id, logo_asset_id, created_at, updated_at, deleted_at, deleted
FROM projects
WHERE id = $1
  AND deleted IS FALSE
`

func (q *Queries) GetProjectByID(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.OrganizationID,
		&i.LogoAssetID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const getProjectWithOrganizationMetadata = `-- name: GetProjectWithOrganizationMetadata :one
SELECT 
    -- Project fields
    p.id as project_id,
    p.name as project_name,
    p.slug as project_slug,
    
    -- Organization metadata fields
    om.id, om.name, om.slug, om.gram_account_type, om.created_at, om.updated_at
    
FROM projects p
INNER JOIN organization_metadata om ON p.organization_id = om.id
WHERE p.deleted IS FALSE
  AND p.id = $1
`

type GetProjectWithOrganizationMetadataRow struct {
	ProjectID       uuid.UUID
	ProjectName     string
	ProjectSlug     string
	ID              string
	Name            string
	Slug            string
	GramAccountType string
	CreatedAt       pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
}

func (q *Queries) GetProjectWithOrganizationMetadata(ctx context.Context, id uuid.UUID) (GetProjectWithOrganizationMetadataRow, error) {
	row := q.db.QueryRow(ctx, getProjectWithOrganizationMetadata, id)
	var i GetProjectWithOrganizationMetadataRow
	err := row.Scan(
		&i.ProjectID,
		&i.ProjectName,
		&i.ProjectSlug,
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.GramAccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProjectsByOrganization = `-- name: ListProjectsByOrganization :many
SELECT id, name, slug, organization_id, logo_asset_id, created_at, updated_at, deleted_at, deleted
FROM projects
WHERE organization_id = $1
  AND deleted IS FALSE
ORDER BY id ASC
`

func (q *Queries) ListProjectsByOrganization(ctx context.Context, organizationID string) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjectsByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.OrganizationID,
			&i.LogoAssetID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
