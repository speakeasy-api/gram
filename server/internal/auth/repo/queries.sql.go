// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
)

const listProjectsByOrganization = `-- name: ListProjectsByOrganization :many
SELECT id, name, slug, organization_id, logo_asset_id, created_at, updated_at, deleted_at, deleted
FROM projects
WHERE organization_id = $1
  AND deleted IS FALSE
ORDER BY created_at DESC
`

func (q *Queries) ListProjectsByOrganization(ctx context.Context, organizationID string) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjectsByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.OrganizationID,
			&i.LogoAssetID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pokeProjectByID = `-- name: PokeProjectByID :one
SELECT id
FROM projects
WHERE
  organization_id = $1
  AND id = $2
  AND deleted IS FALSE
`

type PokeProjectByIDParams struct {
	OrganizationID string
	ProjectID      uuid.UUID
}

func (q *Queries) PokeProjectByID(ctx context.Context, arg PokeProjectByIDParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, pokeProjectByID, arg.OrganizationID, arg.ProjectID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
