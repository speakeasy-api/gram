// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package testrepo

import (
	"context"

	"github.com/google/uuid"
)

const countFunctionsAccess = `-- name: CountFunctionsAccess :one
SELECT count(id)
FROM functions_access
WHERE
  project_id = $1
  AND deployment_id = $2
`

type CountFunctionsAccessParams struct {
	ProjectID    uuid.UUID
	DeploymentID uuid.UUID
}

func (q *Queries) CountFunctionsAccess(ctx context.Context, arg CountFunctionsAccessParams) (int64, error) {
	row := q.db.QueryRow(ctx, countFunctionsAccess, arg.ProjectID, arg.DeploymentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listDeploymentFunctionsResources = `-- name: ListDeploymentFunctionsResources :many
SELECT id, resource_urn, project_id, deployment_id, function_id, runtime, name, description, uri, title, mime_type, variables, created_at, updated_at, deleted_at, deleted
FROM function_resource_definitions
WHERE deployment_id = $1
`

func (q *Queries) ListDeploymentFunctionsResources(ctx context.Context, deploymentID uuid.UUID) ([]FunctionResourceDefinition, error) {
	rows, err := q.db.Query(ctx, listDeploymentFunctionsResources, deploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FunctionResourceDefinition
	for rows.Next() {
		var i FunctionResourceDefinition
		if err := rows.Scan(
			&i.ID,
			&i.ResourceUrn,
			&i.ProjectID,
			&i.DeploymentID,
			&i.FunctionID,
			&i.Runtime,
			&i.Name,
			&i.Description,
			&i.Uri,
			&i.Title,
			&i.MimeType,
			&i.Variables,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDeploymentFunctionsTools = `-- name: ListDeploymentFunctionsTools :many
SELECT id, tool_urn, project_id, deployment_id, function_id, runtime, name, description, input_schema, variables, created_at, updated_at, deleted_at, deleted
FROM function_tool_definitions
WHERE deployment_id = $1
`

func (q *Queries) ListDeploymentFunctionsTools(ctx context.Context, deploymentID uuid.UUID) ([]FunctionToolDefinition, error) {
	rows, err := q.db.Query(ctx, listDeploymentFunctionsTools, deploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FunctionToolDefinition
	for rows.Next() {
		var i FunctionToolDefinition
		if err := rows.Scan(
			&i.ID,
			&i.ToolUrn,
			&i.ProjectID,
			&i.DeploymentID,
			&i.FunctionID,
			&i.Runtime,
			&i.Name,
			&i.Description,
			&i.InputSchema,
			&i.Variables,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDeploymentHTTPTools = `-- name: ListDeploymentHTTPTools :many
SELECT id, tool_urn, project_id, deployment_id, openapiv3_document_id, confirm, confirm_prompt, summarizer, name, untruncated_name, summary, description, openapiv3_operation, tags, x_gram, original_name, original_summary, original_description, server_env_var, default_server_url, security, http_method, path, schema_version, schema, header_settings, query_settings, path_settings, request_content_type, response_filter, created_at, updated_at, deleted_at, deleted
FROM http_tool_definitions
WHERE deployment_id = $1
`

func (q *Queries) ListDeploymentHTTPTools(ctx context.Context, deploymentID uuid.UUID) ([]HttpToolDefinition, error) {
	rows, err := q.db.Query(ctx, listDeploymentHTTPTools, deploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HttpToolDefinition
	for rows.Next() {
		var i HttpToolDefinition
		if err := rows.Scan(
			&i.ID,
			&i.ToolUrn,
			&i.ProjectID,
			&i.DeploymentID,
			&i.Openapiv3DocumentID,
			&i.Confirm,
			&i.ConfirmPrompt,
			&i.Summarizer,
			&i.Name,
			&i.UntruncatedName,
			&i.Summary,
			&i.Description,
			&i.Openapiv3Operation,
			&i.Tags,
			&i.XGram,
			&i.OriginalName,
			&i.OriginalSummary,
			&i.OriginalDescription,
			&i.ServerEnvVar,
			&i.DefaultServerUrl,
			&i.Security,
			&i.HttpMethod,
			&i.Path,
			&i.SchemaVersion,
			&i.Schema,
			&i.HeaderSettings,
			&i.QuerySettings,
			&i.PathSettings,
			&i.RequestContentType,
			&i.ResponseFilter,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
