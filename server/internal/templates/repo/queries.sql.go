// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO prompt_templates (
  project_id,
  history_id,
  name,
  prompt,
  description,
  arguments,
  engine,
  kind,
  tools_hint
)
SELECT
  $1,
  generate_uuidv7(),
  $2,
  $3,
  NULLIF($4, ''),
  $5,
  $6,
  $7,
  $8
RETURNING id
`

type CreateTemplateParams struct {
	ProjectID   uuid.UUID
	Name        string
	Prompt      string
	Description pgtype.Text
	Arguments   []byte
	Engine      pgtype.Text
	Kind        string
	ToolsHint   []string
}

func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createTemplate,
		arg.ProjectID,
		arg.Name,
		arg.Prompt,
		arg.Description,
		arg.Arguments,
		arg.Engine,
		arg.Kind,
		arg.ToolsHint,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteTemplateByID = `-- name: DeleteTemplateByID :exec
UPDATE prompt_templates
SET deleted_at = clock_timestamp()
WHERE project_id = $1
  AND id = $2
`

type DeleteTemplateByIDParams struct {
	ProjectID uuid.UUID
	ID        uuid.UUID
}

func (q *Queries) DeleteTemplateByID(ctx context.Context, arg DeleteTemplateByIDParams) error {
	_, err := q.db.Exec(ctx, deleteTemplateByID, arg.ProjectID, arg.ID)
	return err
}

const deleteTemplateByName = `-- name: DeleteTemplateByName :exec
UPDATE prompt_templates
SET deleted_at = clock_timestamp()
WHERE project_id = $1
  AND name = $2
`

type DeleteTemplateByNameParams struct {
	ProjectID uuid.UUID
	Name      string
}

func (q *Queries) DeleteTemplateByName(ctx context.Context, arg DeleteTemplateByNameParams) error {
	_, err := q.db.Exec(ctx, deleteTemplateByName, arg.ProjectID, arg.Name)
	return err
}

const getTemplateByID = `-- name: GetTemplateByID :one
SELECT id, project_id, history_id, predecessor_id, name, description, arguments, prompt, engine, kind, tools_hint, created_at, updated_at, deleted_at, deleted
FROM prompt_templates pt
WHERE
  pt.project_id = $1
  AND pt.id = $2
  AND pt.deleted IS FALSE
ORDER BY pt.created_at DESC
LIMIT 1
`

type GetTemplateByIDParams struct {
	ProjectID uuid.UUID
	ID        uuid.UUID
}

func (q *Queries) GetTemplateByID(ctx context.Context, arg GetTemplateByIDParams) (PromptTemplate, error) {
	row := q.db.QueryRow(ctx, getTemplateByID, arg.ProjectID, arg.ID)
	var i PromptTemplate
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.HistoryID,
		&i.PredecessorID,
		&i.Name,
		&i.Description,
		&i.Arguments,
		&i.Prompt,
		&i.Engine,
		&i.Kind,
		&i.ToolsHint,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const getTemplateByName = `-- name: GetTemplateByName :one
SELECT id, project_id, history_id, predecessor_id, name, description, arguments, prompt, engine, kind, tools_hint, created_at, updated_at, deleted_at, deleted
FROM prompt_templates pt
WHERE
  pt.project_id = $1
  AND pt.name = $2
  AND pt.deleted IS FALSE
ORDER BY pt.created_at DESC
LIMIT 1
`

type GetTemplateByNameParams struct {
	ProjectID uuid.UUID
	Name      string
}

func (q *Queries) GetTemplateByName(ctx context.Context, arg GetTemplateByNameParams) (PromptTemplate, error) {
	row := q.db.QueryRow(ctx, getTemplateByName, arg.ProjectID, arg.Name)
	var i PromptTemplate
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.HistoryID,
		&i.PredecessorID,
		&i.Name,
		&i.Description,
		&i.Arguments,
		&i.Prompt,
		&i.Engine,
		&i.Kind,
		&i.ToolsHint,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const listTemplates = `-- name: ListTemplates :many
SELECT DISTINCT ON (pt.project_id, pt.name) id, project_id, history_id, predecessor_id, name, description, arguments, prompt, engine, kind, tools_hint, created_at, updated_at, deleted_at, deleted
FROM prompt_templates pt
WHERE pt.project_id = $1
  AND pt.deleted IS FALSE
ORDER BY pt.project_id, pt.name, pt.created_at DESC, pt.id DESC
`

func (q *Queries) ListTemplates(ctx context.Context, projectID uuid.UUID) ([]PromptTemplate, error) {
	rows, err := q.db.Query(ctx, listTemplates, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PromptTemplate
	for rows.Next() {
		var i PromptTemplate
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.HistoryID,
			&i.PredecessorID,
			&i.Name,
			&i.Description,
			&i.Arguments,
			&i.Prompt,
			&i.Engine,
			&i.Kind,
			&i.ToolsHint,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const peekTemplateByID = `-- name: PeekTemplateByID :one
SELECT id, history_id, name
FROM prompt_templates
WHERE project_id = $1
  AND id = $2
  AND deleted IS FALSE
ORDER BY id DESC
LIMIT 1
`

type PeekTemplateByIDParams struct {
	ProjectID uuid.UUID
	ID        uuid.UUID
}

type PeekTemplateByIDRow struct {
	ID        uuid.UUID
	HistoryID uuid.UUID
	Name      string
}

func (q *Queries) PeekTemplateByID(ctx context.Context, arg PeekTemplateByIDParams) (PeekTemplateByIDRow, error) {
	row := q.db.QueryRow(ctx, peekTemplateByID, arg.ProjectID, arg.ID)
	var i PeekTemplateByIDRow
	err := row.Scan(&i.ID, &i.HistoryID, &i.Name)
	return i, err
}

const peekTemplatesByNames = `-- name: PeekTemplatesByNames :many
SELECT DISTINCT ON (pt.project_id, pt.name) pt.id, pt.history_id, pt.name
FROM prompt_templates pt
WHERE pt.project_id = $1
  AND pt.name = ANY($2::TEXT[])
  AND pt.deleted IS FALSE
ORDER BY pt.project_id, pt.name, pt.id DESC
`

type PeekTemplatesByNamesParams struct {
	ProjectID uuid.UUID
	Names     []string
}

type PeekTemplatesByNamesRow struct {
	ID        uuid.UUID
	HistoryID uuid.UUID
	Name      string
}

func (q *Queries) PeekTemplatesByNames(ctx context.Context, arg PeekTemplatesByNamesParams) ([]PeekTemplatesByNamesRow, error) {
	rows, err := q.db.Query(ctx, peekTemplatesByNames, arg.ProjectID, arg.Names)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PeekTemplatesByNamesRow
	for rows.Next() {
		var i PeekTemplatesByNamesRow
		if err := rows.Scan(&i.ID, &i.HistoryID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTemplate = `-- name: UpdateTemplate :one
INSERT INTO prompt_templates (
  project_id,
  history_id,
  predecessor_id,
  name,
  prompt,
  description,
  arguments,
  engine,
  kind,
  tools_hint
)
SELECT
  c.project_id,
  c.history_id,
  c.id,
  c.name,
  COALESCE($1, c.prompt),
  NULLIF($2, ''),
  $3,
  COALESCE(NULLIF($4, ''), c.engine),
  COALESCE(NULLIF($5, ''), c.kind),
  COALESCE($6, ARRAY[]::TEXT[])
FROM prompt_templates c
WHERE project_id = $7
  AND id = $8
  AND (
    (NULLIF($1, '') IS NOT NULL AND $1 != c.prompt)
    OR (NULLIF($2, '') IS NOT NULL AND $2 != c.description)
    OR ($3 != c.arguments)
    OR (NULLIF($4, '') IS NOT NULL AND $4 != c.engine)
    OR (NULLIF($5, '') IS NOT NULL AND NULLIF($5, '') != c.kind)
    OR ($6 IS DISTINCT FROM c.tools_hint)
  )
RETURNING id
`

type UpdateTemplateParams struct {
	Prompt      pgtype.Text
	Description pgtype.Text
	Arguments   []byte
	Engine      pgtype.Text
	Kind        pgtype.Text
	ToolsHint   []string
	ProjectID   uuid.NullUUID
	ID          uuid.NullUUID
}

func (q *Queries) UpdateTemplate(ctx context.Context, arg UpdateTemplateParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateTemplate,
		arg.Prompt,
		arg.Description,
		arg.Arguments,
		arg.Engine,
		arg.Kind,
		arg.ToolsHint,
		arg.ProjectID,
		arg.ID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
