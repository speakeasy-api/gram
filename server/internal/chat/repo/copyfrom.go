// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package repo

import (
	"context"
)

// iteratorForCreateChatMessage implements pgx.CopyFromSource.
type iteratorForCreateChatMessage struct {
	rows                 []CreateChatMessageParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateChatMessage) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateChatMessage) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ChatID,
		r.rows[0].Role,
		r.rows[0].ProjectID,
		r.rows[0].Content,
		r.rows[0].Model,
		r.rows[0].MessageID,
		r.rows[0].ToolCallID,
		r.rows[0].UserID,
		r.rows[0].FinishReason,
		r.rows[0].ToolCalls,
		r.rows[0].PromptTokens,
		r.rows[0].CompletionTokens,
		r.rows[0].TotalTokens,
	}, nil
}

func (r iteratorForCreateChatMessage) Err() error {
	return nil
}

func (q *Queries) CreateChatMessage(ctx context.Context, arg []CreateChatMessageParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"chat_messages"}, []string{"chat_id", "role", "project_id", "content", "model", "message_id", "tool_call_id", "user_id", "finish_reason", "tool_calls", "prompt_tokens", "completion_tokens", "total_tokens"}, &iteratorForCreateChatMessage{rows: arg})
}
