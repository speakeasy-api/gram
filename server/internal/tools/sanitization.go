package tools

import (
	"fmt"
	"regexp"
	"strings"

	"github.com/speakeasy-api/gram/server/internal/constants"
	"golang.org/x/sync/singleflight"
)

var (
	sanitizeNameGroup = new(singleflight.Group)
	multiUnderscoreRE = regexp.MustCompile(`_+`)
)

// Adapted from https://github.com/speakeasy-api/openapi-generation/blob/26e86daa32f8eebe2832080552237394aebfeb13/internal/sanitization/sanitization.go
func SanitizeName(name string) string {
	rawResult, _, _ := sanitizeNameGroup.Do(name, func() (any, error) {
		if name == "" {
			return "", nil
		}

		var sb strings.Builder

		for _, r := range name {
			// Check if the current rune is a diacritic and if so, replace it with the lowercase replacement
			if replacement, ok := normalizedDiatriticsLookup[r]; ok {
				// Convert diacritic replacement to lowercase
				if replacement >= 'A' && replacement <= 'Z' {
					replacement = replacement - 'A' + 'a'
				}
				sb.WriteRune(replacement)
			} else if r >= 'a' && r <= 'z' {
				// Valid lowercase letter - keep as-is
				sb.WriteRune(r)
			} else if r >= 'A' && r <= 'Z' {
				// Convert uppercase to lowercase
				sb.WriteRune(r - 'A' + 'a')
			} else if r >= '0' && r <= '9' {
				// Valid digit - keep as-is
				sb.WriteRune(r)
			} else if r == '_' || r == '-' {
				// Valid symbols for slug pattern - keep as-is
				sb.WriteRune(r)
			} else {
				// All other characters (ASCII symbols, non-ASCII, etc.) become underscore
				sb.WriteRune('_')
			}
		}

		result := sb.String()

		// Clean up multiple consecutive underscores
		result = multiUnderscoreRE.ReplaceAllString(result, "_")

		// Remove leading underscores that are invalid (leave at most one)
		for len(result) > 1 && result[0] == '_' && result[1] == '_' {
			result = result[1:]
		}

		// Remove trailing underscores that are invalid (leave at most one)
		for len(result) > 1 && result[len(result)-1] == '_' && result[len(result)-2] == '_' {
			result = result[:len(result)-1]
		}

		// No need to remove leading characters - regex allows them

		return result, nil
	})

	res, ok := rawResult.(string)
	if !ok {
		panic(fmt.Sprintf("SanitizeName: expected string, got %T", rawResult))
	}

	// Handle empty string case - return empty string without validation
	if res == "" {
		return res
	}

	// Trim to 128 characters to comply with `SlugPatternRE`.
	if len(res) > 128 {
		res = res[:128]
	}

	if !constants.SlugPatternRE.MatchString(res) {
		panic(fmt.Sprintf("SanitizeName: '%s' does not match regular expression: %s", res, constants.SlugPattern))
	}

	return res
}

var normalizedDiatriticsLookup = map[rune]rune{
	'À': 'A',
	'Á': 'A',
	'Â': 'A',
	'Ã': 'A',
	'Ä': 'A',
	'Å': 'A',
	'Ç': 'C',
	'È': 'E',
	'É': 'E',
	'Ê': 'E',
	'Ë': 'E',
	'Ì': 'I',
	'Í': 'I',
	'Î': 'I',
	'Ï': 'I',
	'Ñ': 'N',
	'Ò': 'O',
	'Ó': 'O',
	'Ô': 'O',
	'Õ': 'O',
	'Ö': 'O',
	'Ù': 'U',
	'Ú': 'U',
	'Û': 'U',
	'Ü': 'U',
	'Ý': 'Y',
	'à': 'a',
	'á': 'a',
	'â': 'a',
	'ã': 'a',
	'ä': 'a',
	'å': 'a',
	'ç': 'c',
	'è': 'e',
	'é': 'e',
	'ê': 'e',
	'ë': 'e',
	'ì': 'i',
	'í': 'i',
	'î': 'i',
	'ï': 'i',
	'ñ': 'n',
	'ò': 'o',
	'ó': 'o',
	'ô': 'o',
	'õ': 'o',
	'ö': 'o',
	'ù': 'u',
	'ú': 'u',
	'û': 'u',
	'ü': 'u',
	'ý': 'y',
	'ÿ': 'y',
	'Ā': 'A',
	'ā': 'a',
	'Ă': 'A',
	'ă': 'a',
	'Ą': 'A',
	'ą': 'a',
	'Ć': 'C',
	'ć': 'c',
	'Ĉ': 'C',
	'ĉ': 'c',
	'Ċ': 'C',
	'ċ': 'c',
	'Č': 'C',
	'č': 'c',
	'Ď': 'D',
	'ď': 'd',
	'Ē': 'E',
	'ē': 'e',
	'Ĕ': 'E',
	'ĕ': 'e',
	'Ė': 'E',
	'ė': 'e',
	'Ę': 'E',
	'ę': 'e',
	'Ě': 'E',
	'ě': 'e',
	'Ĝ': 'G',
	'ĝ': 'g',
	'Ğ': 'G',
	'ğ': 'g',
	'Ġ': 'G',
	'ġ': 'g',
	'Ģ': 'G',
	'ģ': 'g',
	'Ĥ': 'H',
	'ĥ': 'h',
	'Ĩ': 'I',
	'ĩ': 'i',
	'Ī': 'I',
	'ī': 'i',
	'Ĭ': 'I',
	'ĭ': 'i',
	'Į': 'I',
	'į': 'i',
	'İ': 'I',
	'Ĵ': 'J',
	'ĵ': 'j',
	'Ķ': 'K',
	'ķ': 'k',
	'Ĺ': 'L',
	'ĺ': 'l',
	'Ļ': 'L',
	'ļ': 'l',
	'Ľ': 'L',
	'ľ': 'l',
	'Ń': 'N',
	'ń': 'n',
	'Ņ': 'N',
	'ņ': 'n',
	'Ň': 'N',
	'ň': 'n',
	'Ō': 'O',
	'ō': 'o',
	'Ŏ': 'O',
	'ŏ': 'o',
	'Ő': 'O',
	'ő': 'o',
	'Ŕ': 'R',
	'ŕ': 'r',
	'Ŗ': 'R',
	'ŗ': 'r',
	'Ř': 'R',
	'ř': 'r',
	'Ś': 'S',
	'ś': 's',
	'Ŝ': 'S',
	'ŝ': 's',
	'Ş': 'S',
	'ş': 's',
	'Š': 'S',
	'š': 's',
	'Ţ': 'T',
	'ţ': 't',
	'Ť': 'T',
	'ť': 't',
	'Ũ': 'U',
	'ũ': 'u',
	'Ū': 'U',
	'ū': 'u',
	'Ŭ': 'U',
	'ŭ': 'u',
	'Ů': 'U',
	'ů': 'u',
	'Ű': 'U',
	'ű': 'u',
	'Ų': 'U',
	'ų': 'u',
	'Ŵ': 'W',
	'ŵ': 'w',
	'Ŷ': 'Y',
	'ŷ': 'y',
	'Ÿ': 'Y',
	'Ź': 'Z',
	'ź': 'z',
	'Ż': 'Z',
	'ż': 'z',
	'Ž': 'Z',
	'ž': 'z',
	'Ơ': 'O',
	'ơ': 'o',
	'Ư': 'U',
	'ư': 'u',
	'Ǎ': 'A',
	'ǎ': 'a',
	'Ǐ': 'I',
	'ǐ': 'i',
	'Ǒ': 'O',
	'ǒ': 'o',
	'Ǔ': 'U',
	'ǔ': 'u',
	'Ǖ': 'U',
	'ǖ': 'u',
	'Ǘ': 'U',
	'ǘ': 'u',
	'Ǚ': 'U',
	'ǚ': 'u',
	'Ǜ': 'U',
	'ǜ': 'u',
	'Ǟ': 'A',
	'ǟ': 'a',
	'Ǡ': 'A',
	'ǡ': 'a',
	'Ǧ': 'G',
	'ǧ': 'g',
	'Ǩ': 'K',
	'ǩ': 'k',
	'Ǫ': 'O',
	'ǫ': 'o',
	'Ǭ': 'O',
	'ǭ': 'o',
	'ǰ': 'j',
	'Ǵ': 'G',
	'ǵ': 'g',
	'Ǹ': 'N',
	'ǹ': 'n',
	'Ǻ': 'A',
	'ǻ': 'a',
	'Ȁ': 'A',
	'ȁ': 'a',
	'Ȃ': 'A',
	'ȃ': 'a',
	'Ȅ': 'E',
	'ȅ': 'e',
	'Ȇ': 'E',
	'ȇ': 'e',
	'Ȉ': 'I',
	'ȉ': 'i',
	'Ȋ': 'I',
	'ȋ': 'i',
	'Ȍ': 'O',
	'ȍ': 'o',
	'Ȏ': 'O',
	'ȏ': 'o',
	'Ȑ': 'R',
	'ȑ': 'r',
	'Ȓ': 'R',
	'ȓ': 'r',
	'Ȕ': 'U',
	'ȕ': 'u',
	'Ȗ': 'U',
	'ȗ': 'u',
	'Ș': 'S',
	'ș': 's',
	'Ț': 'T',
	'ț': 't',
	'Ȟ': 'H',
	'ȟ': 'h',
	'Ȧ': 'A',
	'ȧ': 'a',
	'Ȩ': 'E',
	'ȩ': 'e',
	'Ȫ': 'O',
	'ȫ': 'o',
	'Ȭ': 'O',
	'ȭ': 'o',
	'Ȯ': 'O',
	'ȯ': 'o',
	'Ȱ': 'O',
	'ȱ': 'o',
	'Ȳ': 'Y',
	'ȳ': 'y',
	'Ḁ': 'A',
	'ḁ': 'a',
	'Ḃ': 'B',
	'ḃ': 'b',
	'Ḅ': 'B',
	'ḅ': 'b',
	'Ḇ': 'B',
	'ḇ': 'b',
	'Ḉ': 'C',
	'ḉ': 'c',
	'Ḋ': 'D',
	'ḋ': 'd',
	'Ḍ': 'D',
	'ḍ': 'd',
	'Ḏ': 'D',
	'ḏ': 'd',
	'Ḑ': 'D',
	'ḑ': 'd',
	'Ḓ': 'D',
	'ḓ': 'd',
	'Ḕ': 'E',
	'ḕ': 'e',
	'Ḗ': 'E',
	'ḗ': 'e',
	'Ḙ': 'E',
	'ḙ': 'e',
	'Ḛ': 'E',
	'ḛ': 'e',
	'Ḝ': 'E',
	'ḝ': 'e',
	'Ḟ': 'F',
	'ḟ': 'f',
	'Ḡ': 'G',
	'ḡ': 'g',
	'Ḣ': 'H',
	'ḣ': 'h',
	'Ḥ': 'H',
	'ḥ': 'h',
	'Ḧ': 'H',
	'ḧ': 'h',
	'Ḩ': 'H',
	'ḩ': 'h',
	'Ḫ': 'H',
	'ḫ': 'h',
	'Ḭ': 'I',
	'ḭ': 'i',
	'Ḯ': 'I',
	'ḯ': 'i',
	'Ḱ': 'K',
	'ḱ': 'k',
	'Ḳ': 'K',
	'ḳ': 'k',
	'Ḵ': 'K',
	'ḵ': 'k',
	'Ḷ': 'L',
	'ḷ': 'l',
	'Ḹ': 'L',
	'ḹ': 'l',
	'Ḻ': 'L',
	'ḻ': 'l',
	'Ḽ': 'L',
	'ḽ': 'l',
	'Ḿ': 'M',
	'ḿ': 'm',
	'Ṁ': 'M',
	'ṁ': 'm',
	'Ṃ': 'M',
	'ṃ': 'm',
	'Ṅ': 'N',
	'ṅ': 'n',
	'Ṇ': 'N',
	'ṇ': 'n',
	'Ṉ': 'N',
	'ṉ': 'n',
	'Ṋ': 'N',
	'ṋ': 'n',
	'Ṍ': 'O',
	'ṍ': 'o',
	'Ṏ': 'O',
	'ṏ': 'o',
	'Ṑ': 'O',
	'ṑ': 'o',
	'Ṓ': 'O',
	'ṓ': 'o',
	'Ṕ': 'P',
	'ṕ': 'p',
	'Ṗ': 'P',
	'ṗ': 'p',
	'Ṙ': 'R',
	'ṙ': 'r',
	'Ṛ': 'R',
	'ṛ': 'r',
	'Ṝ': 'R',
	'ṝ': 'r',
	'Ṟ': 'R',
	'ṟ': 'r',
	'Ṡ': 'S',
	'ṡ': 's',
	'Ṣ': 'S',
	'ṣ': 's',
	'Ṥ': 'S',
	'ṥ': 's',
	'Ṧ': 'S',
	'ṧ': 's',
	'Ṩ': 'S',
	'ṩ': 's',
	'Ṫ': 'T',
	'ṫ': 't',
	'Ṭ': 'T',
	'ṭ': 't',
	'Ṯ': 'T',
	'ṯ': 't',
	'Ṱ': 'T',
	'ṱ': 't',
	'Ṳ': 'U',
	'ṳ': 'u',
	'Ṵ': 'U',
	'ṵ': 'u',
	'Ṷ': 'U',
	'ṷ': 'u',
	'Ṹ': 'U',
	'ṹ': 'u',
	'Ṻ': 'U',
	'ṻ': 'u',
	'Ṽ': 'V',
	'ṽ': 'v',
	'Ṿ': 'V',
	'ṿ': 'v',
	'Ẁ': 'W',
	'ẁ': 'w',
	'Ẃ': 'W',
	'ẃ': 'w',
	'Ẅ': 'W',
	'ẅ': 'w',
	'Ẇ': 'W',
	'ẇ': 'w',
	'Ẉ': 'W',
	'ẉ': 'w',
	'Ẋ': 'X',
	'ẋ': 'x',
	'Ẍ': 'X',
	'ẍ': 'x',
	'Ẏ': 'Y',
	'ẏ': 'y',
	'Ẑ': 'Z',
	'ẑ': 'z',
	'Ẓ': 'Z',
	'ẓ': 'z',
	'Ẕ': 'Z',
	'ẕ': 'z',
	'ẖ': 'h',
	'ẗ': 't',
	'ẘ': 'w',
	'ẙ': 'y',
	'Ạ': 'A',
	'ạ': 'a',
	'Ả': 'A',
	'ả': 'a',
	'Ấ': 'A',
	'ấ': 'a',
	'Ầ': 'A',
	'ầ': 'a',
	'Ẩ': 'A',
	'ẩ': 'a',
	'Ẫ': 'A',
	'ẫ': 'a',
	'Ậ': 'A',
	'ậ': 'a',
	'Ắ': 'A',
	'ắ': 'a',
	'Ằ': 'A',
	'ằ': 'a',
	'Ẳ': 'A',
	'ẳ': 'a',
	'Ẵ': 'A',
	'ẵ': 'a',
	'Ặ': 'A',
	'ặ': 'a',
	'Ẹ': 'E',
	'ẹ': 'e',
	'Ẻ': 'E',
	'ẻ': 'e',
	'Ẽ': 'E',
	'ẽ': 'e',
	'Ế': 'E',
	'ế': 'e',
	'Ề': 'E',
	'ề': 'e',
	'Ể': 'E',
	'ể': 'e',
	'Ễ': 'E',
	'ễ': 'e',
	'Ệ': 'E',
	'ệ': 'e',
	'Ỉ': 'I',
	'ỉ': 'i',
	'Ị': 'I',
	'ị': 'i',
	'Ọ': 'O',
	'ọ': 'o',
	'Ỏ': 'O',
	'ỏ': 'o',
	'Ố': 'O',
	'ố': 'o',
	'Ồ': 'O',
	'ồ': 'o',
	'Ổ': 'O',
	'ổ': 'o',
	'Ỗ': 'O',
	'ỗ': 'o',
	'Ộ': 'O',
	'ộ': 'o',
	'Ớ': 'O',
	'ớ': 'o',
	'Ờ': 'O',
	'ờ': 'o',
	'Ở': 'O',
	'ở': 'o',
	'Ỡ': 'O',
	'ỡ': 'o',
	'Ợ': 'O',
	'ợ': 'o',
	'Ụ': 'U',
	'ụ': 'u',
	'Ủ': 'U',
	'ủ': 'u',
	'Ứ': 'U',
	'ứ': 'u',
	'Ừ': 'U',
	'ừ': 'u',
	'Ử': 'U',
	'ử': 'u',
	'Ữ': 'U',
	'ữ': 'u',
	'Ự': 'U',
	'ự': 'u',
	'Ỳ': 'Y',
	'ỳ': 'y',
	'Ỵ': 'Y',
	'ỵ': 'y',
	'Ỷ': 'Y',
	'ỷ': 'y',
	'Ỹ': 'Y',
	'ỹ': 'y',
	'K': 'K',
	'Å': 'A',
}
