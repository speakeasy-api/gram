-- ðŸš¨
-- ðŸš¨ READ .cursor/rules/database-design.mdc BEFORE EDITING THIS FILE
-- ðŸš¨

-- https://gist.github.com/kjmph/5bd772b2c2df145aa645b837da7eca74
CREATE OR REPLACE FUNCTION generate_uuidv7()
RETURNS uuid
AS $$
BEGIN
  -- use random v4 uuid as starting point (which has the same variant we need)
  -- then overlay timestamp
  -- then set version 7 by flipping the 2 and 1 bit in the version 4 string
  return encode(
    set_bit(
      set_bit(
        overlay(uuid_send(gen_random_uuid())
                placing substring(int8send(floor(extract(epoch from clock_timestamp()) * 1000)::bigint) from 3)
                from 1 for 6
        ),
        52, 1
      ),
      53, 1
    ),
    'hex')::uuid;
END
$$
LANGUAGE plpgsql
volatile;

CREATE TABLE IF NOT EXISTS projects (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 40),
  slug TEXT NOT NULL CHECK (slug <> '' AND CHAR_LENGTH(slug) <= 40),

  organization_id TEXT NOT NULL,
  logo_asset_id uuid,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT projects_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS organization_metadata (
  id TEXT NOT NULL,
  name TEXT NOT NULL,
  slug TEXT NOT NULL,
  gram_account_type TEXT NOT NULL DEFAULT 'free',

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),

  CONSTRAINT organization_metadata_pkey PRIMARY KEY (id)
);

CREATE UNIQUE INDEX IF NOT EXISTS projects_organization_id_slug_key
ON projects (organization_id, slug)
WHERE deleted IS FALSE;

CREATE TABLE IF NOT EXISTS deployments (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  seq BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Use this to serialize the processing of deployments. Tools will be created from the latest deployment.
  user_id TEXT NOT NULL,
  project_id uuid NOT NULL,
  organization_id TEXT NOT NULL,
  idempotency_key TEXT NOT NULL,
  cloned_from uuid,

  github_repo TEXT CHECK (github_repo <> '' AND CHAR_LENGTH(github_repo) <= 100),
  github_pr TEXT CHECK (github_pr <> '' AND CHAR_LENGTH(github_pr) <= 100),
  github_sha TEXT CHECK (github_sha <> '' AND CHAR_LENGTH(github_sha) <= 100),
  external_id TEXT CHECK (external_id <> '' AND CHAR_LENGTH(external_id) <= 100),
  external_url TEXT CHECK (external_url <> '' AND CHAR_LENGTH(external_url) <= 100),

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),

  CONSTRAINT deployments_pkey PRIMARY KEY (id),
  CONSTRAINT deployments_project_id_idempotency_key UNIQUE (project_id, idempotency_key),
  CONSTRAINT deployments_seq_key UNIQUE (seq),
  CONSTRAINT deployments_project_id_fkey FOREIGN key (project_id) REFERENCES projects (id) ON DELETE RESTRICT
);

CREATE INDEX IF NOT EXISTS deployments_project_id_seq_idx ON deployments(project_id, seq DESC);

CREATE TABLE IF NOT EXISTS deployment_statuses (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  seq BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,

  deployment_id uuid NOT NULL,
  status text NOT NULL,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),

  CONSTRAINT deployment_statuses_pkey PRIMARY KEY (id),
  CONSTRAINT deployment_statuses_seq_key UNIQUE (seq)
);

CREATE TABLE IF NOT EXISTS deployment_logs (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  seq BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,

  event text NOT NULL,
  message text NOT NULL,
  deployment_id uuid NOT NULL,
  project_id uuid NOT NULL,
  attachment_id uuid,
  attachment_type TEXT,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),

  CONSTRAINT deployment_logs_pkey PRIMARY KEY (id),
  CONSTRAINT deployment_logs_seq_key UNIQUE (seq),
  CONSTRAINT deployment_logs_deployment_id_fkey FOREIGN key (deployment_id) REFERENCES deployments (id) ON DELETE SET NULL,
  CONSTRAINT deployment_logs_project_id_fkey FOREIGN key (project_id) REFERENCES projects (id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS assets (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  project_id uuid NOT NULL,

  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 100),
  url TEXT NOT NULL,
  kind TEXT NOT NULL,
  content_type TEXT NOT NULL,
  content_length BIGINT NOT NULL,
  sha256 TEXT NOT NULL,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT assets_pkey PRIMARY KEY (id),
  CONSTRAINT assets_project_id_sha256_key UNIQUE (project_id, sha256)
);

CREATE TABLE IF NOT EXISTS packages (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 100),
  
  title TEXT CHECK (title <> '' AND CHAR_LENGTH(title) <= 100),
  summary TEXT CHECK (summary <> '' AND CHAR_LENGTH(summary) <= 80),
  description_raw TEXT CHECK (description_raw <> '' AND CHAR_LENGTH(description_raw) <= 10000),
  description_html TEXT,
  url TEXT CHECK (url <> '' AND CHAR_LENGTH(url) <= 200),
  keywords TEXT[] NOT NULL DEFAULT ARRAY[]::TEXT[] CHECK (array_length(keywords, 1) <= 8),
  image_asset_id uuid,
  organization_id TEXT NOT NULL,
  project_id uuid NOT NULL,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT packages_pkey PRIMARY KEY (id),
  CONSTRAINT packages_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE,
  CONSTRAINT packages_image_asset_id_fkey FOREIGN KEY (image_asset_id) REFERENCES assets (id) ON DELETE SET NULL
);

CREATE INDEX IF NOT EXISTS packages_name_idx ON packages (name);

-- package name must be unique within an organization
CREATE UNIQUE INDEX IF NOT EXISTS packages_organization_id_name_key
ON packages (organization_id, name)
WHERE deleted IS FALSE;

-- only one active package per project
CREATE UNIQUE INDEX IF NOT EXISTS packages_project_id_key
ON packages (project_id)
WHERE deleted IS FALSE;

CREATE TABLE IF NOT EXISTS package_versions (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  package_id uuid NOT NULL,
  deployment_id uuid NOT NULL,
  
  visibility TEXT NOT NULL CHECK (visibility <> '' AND CHAR_LENGTH(visibility) <= 20),
  major BIGINT NOT NULL CHECK (major >= 0 AND major <= 32767),
  minor BIGINT NOT NULL CHECK (minor >= 0 AND minor <= 32767),
  patch BIGINT NOT NULL CHECK (patch >= 0 AND patch <= 32767),
  prerelease TEXT CHECK (prerelease <> '' AND CHAR_LENGTH(prerelease) <= 20),
  build TEXT CHECK (build <> '' AND CHAR_LENGTH(build) <= 20),

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT package_versions_pkey PRIMARY KEY (id),
  CONSTRAINT package_versions_package_id_fkey FOREIGN KEY (package_id) REFERENCES packages (id) ON DELETE CASCADE,
  CONSTRAINT package_versions_deployment_id_fkey FOREIGN KEY (deployment_id) REFERENCES deployments (id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX IF NOT EXISTS package_versions_package_id_semver_key
ON package_versions (package_id DESC, major DESC, minor DESC, patch DESC, prerelease, build)
WHERE deleted IS FALSE;

CREATE TABLE IF NOT EXISTS api_keys (
  id uuid NOT NULL DEFAULT generate_uuidv7(),

  organization_id TEXT NOT NULL,
  project_id uuid,
  created_by_user_id TEXT NOT NULL,

  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 40),
  key_prefix TEXT NOT NULL,
  key_hash TEXT NOT NULL,
  scopes TEXT[] NOT NULL DEFAULT ARRAY[]::TEXT[],

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT api_keys_pkey PRIMARY KEY (id),
  CONSTRAINT api_keys_key_hash UNIQUE (key_hash),
  CONSTRAINT api_keys_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE SET NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS api_keys_organization_id_name_key
ON api_keys (organization_id, name)
WHERE deleted IS FALSE;

CREATE TABLE IF NOT EXISTS deployments_openapiv3_assets (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  deployment_id uuid NOT NULL,
  asset_id uuid NOT NULL,
  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 60),
  slug TEXT NOT NULL CHECK (slug <> '' AND CHAR_LENGTH(slug) <= 60),

  CONSTRAINT deployments_openapiv3_documents_pkey PRIMARY KEY (id),
  CONSTRAINT deployments_openapiv3_documents_deployment_id_fkey FOREIGN key (deployment_id) REFERENCES deployments (id) ON DELETE CASCADE,
  CONSTRAINT deployments_openapiv3_documents_asset_id_fkey FOREIGN key (asset_id) REFERENCES assets (id) ON DELETE CASCADE,
  CONSTRAINT deployments_openapiv3_documents_deployment_id_slug_key UNIQUE (deployment_id, slug)
);

CREATE TABLE IF NOT EXISTS deployments_packages (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  deployment_id uuid NOT NULL,

  package_id uuid NOT NULL,
  version_id uuid NOT NULL,

  CONSTRAINT deployments_packages_pkey PRIMARY KEY (id),
  CONSTRAINT deployments_packages_deployment_id_fkey FOREIGN key (deployment_id) REFERENCES deployments (id) ON DELETE CASCADE,
  CONSTRAINT deployments_packages_package_id_fkey FOREIGN key (package_id) REFERENCES packages (id) ON DELETE CASCADE,
  CONSTRAINT deployments_packages_version_id_fkey FOREIGN key (version_id) REFERENCES package_versions (id) ON DELETE CASCADE,
  -- a single deployment cannot have duplicate packages
  CONSTRAINT deployments_packages_deployment_id_package_id_key UNIQUE (deployment_id, package_id)
);

CREATE TABLE IF NOT EXISTS http_tool_definitions (
  id uuid NOT NULL DEFAULT generate_uuidv7(),

  project_id uuid NOT NULL,
  deployment_id uuid NOT NULL,

  openapiv3_document_id uuid,

  confirm TEXT,
  confirm_prompt TEXT,
  summarizer TEXT,

  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 100),
  untruncated_name TEXT,
  summary TEXT NOT NULL,
  description TEXT NOT NULL,
  openapiv3_operation TEXT CHECK (openapiv3_operation <> '' AND CHAR_LENGTH(openapiv3_operation) <= 255),
  tags TEXT[] NOT NULL DEFAULT ARRAY[]::TEXT[] CHECK (array_length(tags, 1) <= 40),

  x_gram BOOLEAN,
  original_name TEXT,
  original_summary TEXT,
  original_description TEXT,

  server_env_var TEXT NOT NULL,
  default_server_url TEXT,
  security jsonb,

  http_method TEXT NOT NULL CHECK (http_method <> '' AND CHAR_LENGTH(http_method) <= 20),
  path TEXT NOT NULL CHECK (path <> '' AND CHAR_LENGTH(path) <= 2000),
  schema_version TEXT NOT NULL CHECK (schema_version <> '' AND CHAR_LENGTH(schema_version) <= 20),
  schema JSONB,
  header_settings JSONB,
  query_settings JSONB,
  path_settings JSONB,
  request_content_type TEXT,
  response_filter JSONB NULL,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT http_tool_definitions_pkey PRIMARY KEY (id),
  CONSTRAINT http_tool_definitions_deployment_id_fkey FOREIGN key (deployment_id) REFERENCES deployments (id) ON DELETE CASCADE,
  CONSTRAINT http_tool_definitions_openapiv3_document_id_fkey FOREIGN key (openapiv3_document_id) REFERENCES deployments_openapiv3_assets (id) ON DELETE RESTRICT,
  CONSTRAINT http_tool_definitions_project_id_fkey FOREIGN key (project_id) REFERENCES projects (id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS http_tool_definitions_name_idx ON http_tool_definitions (name);
CREATE INDEX IF NOT EXISTS http_tool_definitions_deployment_deleted_id_idx ON http_tool_definitions(deployment_id, deleted, id DESC) WHERE deleted IS FALSE;

CREATE TABLE IF NOT EXISTS environments (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  organization_id TEXT NOT NULL,
  project_id uuid NOT NULL,
  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 60),
  slug TEXT NOT NULL CHECK (slug <> '' AND CHAR_LENGTH(slug) <= 60),
  description TEXT CHECK (description <> '' AND CHAR_LENGTH(description) <= 250),

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT environments_pkey PRIMARY KEY (id),
  CONSTRAINT environments_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE SET NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS environments_project_id_slug_key
ON environments (project_id, slug)
WHERE deleted IS FALSE;

CREATE TABLE IF NOT EXISTS environment_entries (
  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 60),
  value TEXT NOT NULL CHECK (value <> '' AND CHAR_LENGTH(value) <= 4000),
  environment_id uuid NOT NULL,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  CONSTRAINT environments_entries_pkey PRIMARY KEY (environment_id, name),
  CONSTRAINT environments_entries_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES environments (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS custom_domains (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  organization_id TEXT NOT NULL,
  domain TEXT NOT NULL,
  verified BOOLEAN NOT NULL DEFAULT FALSE,
  activated BOOLEAN NOT NULL DEFAULT FALSE,
  ingress_name TEXT,
  cert_secret_name TEXT,
  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,
  
  CONSTRAINT custom_domains_pkey PRIMARY KEY (id)
  
);

CREATE UNIQUE INDEX IF NOT EXISTS custom_domains_domain_key
ON custom_domains (domain);

CREATE UNIQUE INDEX IF NOT EXISTS custom_domains_organization_id_key
ON custom_domains (organization_id)
WHERE deleted IS FALSE;

-- External OAuth Server Metadata (RFC 8414 compliant)
-- For direct external OAuth provider connections
CREATE TABLE IF NOT EXISTS external_oauth_server_metadata (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  project_id uuid NOT NULL,
  
  slug TEXT NOT NULL CHECK (slug <> '' AND CHAR_LENGTH(slug) <= 100),
  metadata JSONB NOT NULL,
  
  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,
  
  CONSTRAINT external_oauth_server_metadata_pkey PRIMARY KEY (id),
  CONSTRAINT external_oauth_server_metadata_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX IF NOT EXISTS external_oauth_server_metadata_project_slug_key
ON external_oauth_server_metadata (project_id, slug)
WHERE deleted IS FALSE;

-- OAuth Proxy Servers - collection of OAuth proxy configurations
CREATE TABLE IF NOT EXISTS oauth_proxy_servers (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  project_id uuid NOT NULL,

  slug TEXT NOT NULL CHECK (slug <> '' AND CHAR_LENGTH(slug) <= 100),
  
  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,
  
  CONSTRAINT oauth_proxy_servers_pkey PRIMARY KEY (id),
  CONSTRAINT oauth_proxy_servers_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX IF NOT EXISTS oauth_proxy_servers_project_slug_key
ON oauth_proxy_servers (project_id, slug)
WHERE deleted IS FALSE;

-- OAuth Proxy Providers - individual OAuth providers within a proxy server
CREATE TABLE IF NOT EXISTS oauth_proxy_providers (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  project_id uuid NOT NULL,
  oauth_proxy_server_id uuid NOT NULL,
  
  slug TEXT NOT NULL CHECK (slug <> '' AND CHAR_LENGTH(slug) <= 100),
  authorization_endpoint TEXT NOT NULL,
  token_endpoint TEXT NOT NULL,
  registration_endpoint TEXT,
  
  -- OAuth server capabilities
  scopes_supported TEXT[] DEFAULT ARRAY[]::TEXT[],
  response_types_supported TEXT[] DEFAULT ARRAY[]::TEXT[],
  response_modes_supported TEXT[] DEFAULT ARRAY[]::TEXT[],
  grant_types_supported TEXT[] DEFAULT ARRAY[]::TEXT[],
  token_endpoint_auth_methods_supported TEXT[] DEFAULT ARRAY[]::TEXT[],
  
  security_key_names TEXT[] DEFAULT ARRAY[]::TEXT[],
  secrets JSONB,
  
  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,
  
  CONSTRAINT oauth_proxy_providers_pkey PRIMARY KEY (id),
  CONSTRAINT oauth_proxy_providers_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE,
  CONSTRAINT oauth_proxy_providers_oauth_proxy_server_id_fkey FOREIGN KEY (oauth_proxy_server_id) REFERENCES oauth_proxy_servers (id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX IF NOT EXISTS oauth_proxy_providers_project_slug_key
ON oauth_proxy_providers (project_id, slug)
WHERE deleted IS FALSE;

CREATE TABLE IF NOT EXISTS toolsets (
  id uuid NOT NULL DEFAULT generate_uuidv7(),

  organization_id TEXT NOT NULL,
  project_id uuid NOT NULL,
  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 60),
  slug TEXT NOT NULL CHECK (slug <> '' AND CHAR_LENGTH(slug) <= 60),
  description TEXT CHECK (description <> '' AND CHAR_LENGTH(description) <= 250),
  default_environment_slug TEXT CHECK (default_environment_slug <> '' AND CHAR_LENGTH(default_environment_slug) <= 60),
  http_tool_names TEXT[] DEFAULT ARRAY[]::TEXT[] CHECK (array_length(http_tool_names, 1) <= 5000),
  mcp_slug TEXT CHECK (
    mcp_slug IS NULL OR (mcp_slug <> '' AND CHAR_LENGTH(mcp_slug) <= 60)
  ),
  mcp_is_public BOOLEAN NOT NULL DEFAULT FALSE,
  mcp_enabled BOOLEAN NOT NULL DEFAULT FALSE,
  custom_domain_id uuid,

  -- OAuth configuration - mutually exclusive
  external_oauth_server_id uuid,
  oauth_proxy_server_id uuid,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT toolsets_pkey PRIMARY KEY (id),
  CONSTRAINT toolsets_project_id_fkey FOREIGN key (project_id) REFERENCES projects (id) ON DELETE SET NULL,
  CONSTRAINT toolsets_custom_domain_id_fkey FOREIGN key (custom_domain_id) REFERENCES custom_domains (id) ON DELETE SET NULL,
  CONSTRAINT toolsets_external_oauth_server_id_fkey FOREIGN KEY (external_oauth_server_id) REFERENCES external_oauth_server_metadata (id) ON DELETE SET NULL,
  CONSTRAINT toolsets_oauth_proxy_server_id_fkey FOREIGN KEY (oauth_proxy_server_id) REFERENCES oauth_proxy_servers (id) ON DELETE SET NULL,
  CONSTRAINT toolsets_oauth_exclusivity CHECK ((external_oauth_server_id IS NULL) != (oauth_proxy_server_id IS NULL) OR (external_oauth_server_id IS NULL AND oauth_proxy_server_id IS NULL))
);

CREATE UNIQUE INDEX IF NOT EXISTS toolsets_project_id_slug_key
ON toolsets (project_id, slug)
WHERE deleted IS FALSE;

CREATE UNIQUE INDEX IF NOT EXISTS toolsets_mcp_slug_custom_domain_id_key
ON toolsets (mcp_slug, custom_domain_id)
WHERE mcp_slug IS NOT NULL AND custom_domain_id IS NOT NULL AND deleted IS FALSE;

CREATE UNIQUE INDEX IF NOT EXISTS toolsets_mcp_slug_null_custom_domain_id_key
ON toolsets (mcp_slug)
WHERE mcp_slug IS NOT NULL AND custom_domain_id IS NULL AND deleted IS FALSE;

CREATE TABLE IF NOT EXISTS http_security (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  
  deployment_id uuid NOT NULL,
  project_id uuid,
  openapiv3_document_id uuid,

  key TEXT NOT NULL CHECK (key <> '' AND CHAR_LENGTH(key) <= 60),
  type TEXT CHECK (type <> '' AND CHAR_LENGTH(type) <= 20),
  name TEXT CHECK (name <> '' AND CHAR_LENGTH(name) <= 60),
  in_placement TEXT CHECK (in_placement <> '' AND CHAR_LENGTH(in_placement) <= 10), -- header, query, path
  scheme TEXT CHECK (scheme <> '' AND CHAR_LENGTH(scheme) <= 20),
  bearer_format TEXT CHECK (bearer_format <> '' AND CHAR_LENGTH(bearer_format) <= 20),
  oauth_types TEXT[],
  oauth_flows JSONB,

  env_variables TEXT[] DEFAULT ARRAY[]::TEXT[],
  
  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,
  
  CONSTRAINT http_security_pkey PRIMARY KEY (id),
  CONSTRAINT http_security_deployment_id_fkey FOREIGN KEY (deployment_id) REFERENCES deployments (id) ON DELETE CASCADE,
  CONSTRAINT http_security_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE,
  CONSTRAINT http_security_openapiv3_document_id_fkey FOREIGN key (openapiv3_document_id) REFERENCES deployments_openapiv3_assets (id) ON DELETE RESTRICT
);

CREATE INDEX IF NOT EXISTS http_security_deleted_idx 
ON http_security (deleted);

CREATE INDEX IF NOT EXISTS http_security_type_scheme_idx 
ON http_security (type, scheme);

CREATE TABLE IF NOT EXISTS openrouter_api_keys (
  organization_id TEXT NOT NULL,
  
  key TEXT NOT NULL,
  key_hash TEXT NOT NULL,
  monthly_credits BIGINT NOT NULL DEFAULT 0,
  disabled BOOLEAN NOT NULL DEFAULT FALSE,
  
  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,
  
  CONSTRAINT openrouter_api_keys_pkey PRIMARY KEY (organization_id)
);


-- Create the chats table to track individual chat conversations
CREATE TABLE IF NOT EXISTS chats (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  project_id uuid NOT NULL,
  organization_id TEXT NOT NULL,
  user_id TEXT,
  title TEXT,
  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,
  
  CONSTRAINT chats_pkey PRIMARY KEY (id),
  CONSTRAINT chats_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE
);

-- Create the chat_messages table to store individual messages in each chat
CREATE TABLE IF NOT EXISTS chat_messages (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  
  chat_id uuid NOT NULL,
  project_id uuid,
  role TEXT NOT NULL CHECK (role IN ('user', 'assistant', 'system', 'tool')),
  content TEXT NOT NULL,
  model TEXT,
  message_id TEXT,
  tool_call_id TEXT,
  user_id TEXT,
  finish_reason TEXT,
  tool_calls JSONB,
  prompt_tokens BIGINT NOT NULL DEFAULT 0,
  completion_tokens BIGINT NOT NULL DEFAULT 0,
  total_tokens BIGINT NOT NULL DEFAULT 0,
  
  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  
  CONSTRAINT chat_messages_pkey PRIMARY KEY (id),
  CONSTRAINT chat_messages_chat_id_fkey FOREIGN KEY (chat_id) REFERENCES chats(id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS chat_messages_chat_id_idx ON chat_messages (chat_id);

-- Function to update the total_tokens in chats table
CREATE OR REPLACE FUNCTION update_chat_total_tokens()
RETURNS TRIGGER AS $$
BEGIN
  -- Update the total_tokens in the chats table
  UPDATE chats
  SET total_tokens = (
    SELECT COALESCE(SUM(total_tokens), 0)
    FROM chat_messages
    WHERE chat_id = CASE
      WHEN TG_OP = 'DELETE' THEN OLD.chat_id
      ELSE NEW.chat_id
    END
  )
  WHERE id = CASE
    WHEN TG_OP = 'DELETE' THEN OLD.chat_id
    ELSE NEW.chat_id
  END;
  
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update total_tokens when chat_messages are inserted, updated, or deleted
CREATE TRIGGER update_chat_total_tokens_trigger
AFTER INSERT OR UPDATE OR DELETE ON chat_messages
FOR EACH ROW EXECUTE FUNCTION update_chat_total_tokens();

CREATE TABLE IF NOT EXISTS slack_app_connections (
  slack_team_id TEXT NOT NULL,
  organization_id TEXT NOT NULL,
  project_id uuid NOT NULL,
  access_token TEXT NOT NULL,
  slack_team_name TEXT NOT NULL,
  default_toolset_slug TEXT CHECK (
    default_toolset_slug IS NULL OR (default_toolset_slug <> '' AND CHAR_LENGTH(default_toolset_slug) <= 40)
  ),

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),

  CONSTRAINT slack_auth_connections_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE,
  CONSTRAINT slack_auth_connections_slack_team_id_key PRIMARY KEY (slack_team_id),
  CONSTRAINT slack_auth_connections_organization_id_project_id_key UNIQUE (organization_id, project_id)
);

CREATE TABLE IF NOT EXISTS tool_variations_groups (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  project_id uuid NOT NULL,

  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 40),
  description TEXT CHECK (description <> '' AND CHAR_LENGTH(description) <= 100),

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT tool_variations_groups_pkey PRIMARY KEY (id),
  CONSTRAINT tool_variations_groups_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS project_tool_variations (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  project_id uuid NOT NULL,
  group_id uuid NOT NULL,

  CONSTRAINT project_tool_variations_pkey PRIMARY KEY (id),
  CONSTRAINT project_tool_variations_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE,
  CONSTRAINT project_tool_variations_group_id_fkey FOREIGN KEY (group_id) REFERENCES tool_variations_groups (id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX IF NOT EXISTS project_tool_variations_project_id_key
ON project_tool_variations (project_id);

CREATE TABLE IF NOT EXISTS tool_variations (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  group_id uuid NOT NULL,

  src_tool_name TEXT NOT NULL,

  confirm TEXT,
  confirm_prompt TEXT,
  name TEXT,
  summary TEXT,
  description TEXT,
  tags TEXT[],
  summarizer TEXT,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT tool_variations_pkey PRIMARY KEY (id),
  CONSTRAINT tool_variations_group_id_fkey FOREIGN KEY (group_id) REFERENCES tool_variations_groups (id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX IF NOT EXISTS tool_variations_scoped_src_tool_name_key
ON tool_variations (group_id, src_tool_name)
WHERE deleted IS FALSE;

CREATE TABLE IF NOT EXISTS prompt_templates (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  project_id uuid NOT NULL,

  history_id uuid NOT NULL,
  predecessor_id uuid,

  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 60),
  description TEXT CHECK (description <> '' AND CHAR_LENGTH(description) <= 500),
  arguments JSONB,
  prompt TEXT NOT NULL,
  engine TEXT CHECK (engine IN ('mustache')),
  kind TEXT CHECK (kind IN ('prompt', 'higher_order_tool')),

  -- Any referenced tools in the prompt template. This can be used to suggest
  -- including them in toolsets where a prompt template is added.
  tools_hint TEXT[] DEFAULT ARRAY[]::TEXT[] CHECK (array_length(tools_hint, 1) <= 20),

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT prompt_templates_pkey PRIMARY KEY (id),
  CONSTRAINT prompt_templates_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE,
  CONSTRAINT prompt_templates_predecessor_id_fkey FOREIGN KEY (predecessor_id) REFERENCES prompt_templates (id) ON DELETE SET NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS prompt_templates_project_id_name_key
ON prompt_templates (project_id, name, predecessor_id) NULLS NOT DISTINCT
WHERE deleted IS FALSE;

CREATE INDEX IF NOT EXISTS prompt_templates_latest_revision
ON prompt_templates (project_id, history_id, id DESC)
WHERE deleted IS FALSE;

CREATE TABLE IF NOT EXISTS toolset_prompts (
  id UUID NOT NULL DEFAULT generate_uuidv7(),
  project_id UUID NOT NULL,
  toolset_id UUID NOT NULL,
  prompt_history_id UUID NOT NULL,
  -- allows pinning to a specific version of prompt template
  prompt_template_id UUID,
  prompt_name TEXT NOT NULL CHECK (prompt_name <> '' AND CHAR_LENGTH(prompt_name) <= 60),

  CONSTRAINT toolset_prompts_pkey PRIMARY KEY (id),
  CONSTRAINT toolset_prompts_toolset_id_fkey FOREIGN KEY (toolset_id) REFERENCES toolsets (id) ON DELETE CASCADE,
  CONSTRAINT toolset_prompts_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE,
  CONSTRAINT toolset_prompts_prompt_template_id_fkey FOREIGN KEY (prompt_template_id) REFERENCES prompt_templates (id) ON DELETE CASCADE
);

-- Ensure a toolset can only have one prompt template per name
CREATE UNIQUE INDEX IF NOT EXISTS toolset_prompts_toolset_id_prompt_name_key
ON toolset_prompts (toolset_id, prompt_name);

CREATE TABLE IF NOT EXISTS users (
  id TEXT NOT NULL,
  email TEXT NOT NULL,
  display_name TEXT NOT NULL,
  photo_url TEXT,
  admin BOOLEAN NOT NULL DEFAULT FALSE,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),

  CONSTRAINT users_pkey PRIMARY KEY (id)
);

CREATE UNIQUE INDEX IF NOT EXISTS users_email_key
ON users (email);


CREATE TABLE IF NOT EXISTS oauth_proxy_client_info (
  mcp_slug TEXT NOT NULL CHECK (mcp_slug <> '' AND CHAR_LENGTH(mcp_slug) <= 60),
  client_id TEXT NOT NULL CHECK (client_id <> '' AND CHAR_LENGTH(client_id) <= 100),
  client_secret TEXT NOT NULL CHECK (client_secret <> '' AND CHAR_LENGTH(client_secret) <= 200),
  client_secret_expires_at timestamptz NOT NULL,
  client_name TEXT NOT NULL,
  redirect_uris TEXT[] NOT NULL DEFAULT ARRAY[]::TEXT[],
  grant_types TEXT[] NOT NULL DEFAULT ARRAY[]::TEXT[],
  response_types TEXT[] NOT NULL DEFAULT ARRAY[]::TEXT[],
  scope TEXT NOT NULL,
  token_endpoint_auth_method TEXT NOT NULL,
  application_type TEXT NOT NULL,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),

  CONSTRAINT oauth_proxy_client_info_pkey PRIMARY KEY (client_id)
);
