// Code generated by goa v3.22.3, DO NOT EDIT.
//
// logs service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package logs

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Call logs for a toolset.
type Service interface {
	// List call logs for a toolset.
	ListLogs(context.Context, *ListLogsPayload) (res *ListToolLogResponse, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "logs"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"listLogs"}

// HTTP tool request and response log entry
type HTTPToolLog struct {
	// Id of the request
	ID *string
	// Timestamp of the request
	Ts string
	// Organization UUID
	OrganizationID string
	// Project UUID
	ProjectID *string
	// Deployment UUID
	DeploymentID string
	// Tool UUID
	ToolID string
	// Tool URN
	ToolUrn string
	// Tool type
	ToolType ToolType
	// Trace ID for correlation
	TraceID string
	// Span ID for correlation
	SpanID string
	// HTTP method
	HTTPMethod string
	// HTTP route
	HTTPRoute string
	// HTTP status code
	StatusCode int64
	// Duration in milliseconds
	DurationMs float64
	// User agent
	UserAgent string
	// Request headers
	RequestHeaders map[string]string
	// Request body size in bytes
	RequestBodyBytes *int64
	// Response headers
	ResponseHeaders map[string]string
	// Response body size in bytes
	ResponseBodyBytes *int64
}

// ListLogsPayload is the payload type of the logs service listLogs method.
type ListLogsPayload struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
	// Tool ID
	ToolID *string
	// Start timestamp
	TsStart *string
	// End timestamp
	TsEnd *string
	// Cursor for pagination
	Cursor *string
	// Number of items per page (1-100)
	PerPage int
	// Pagination direction
	Direction string
	// Sort order
	Sort string
}

// ListToolLogResponse is the result type of the logs service listLogs method.
type ListToolLogResponse struct {
	Logs       []*HTTPToolLog
	Pagination *PaginationResponse
}

// Pagination metadata for list responses
type PaginationResponse struct {
	// Number of items per page
	PerPage *int
	// Whether there is a next page
	HasNextPage *bool
	// Cursor for next page
	NextPageCursor *string
}

// Type of tool being logged
type ToolType string

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
