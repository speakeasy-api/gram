// Code generated by goa v3.22.2, DO NOT EDIT.
//
// variations service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package variations

import (
	"context"

	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Manage variations of tools.
type Service interface {
	// Create or update a globally defined tool variation.
	UpsertGlobal(context.Context, *UpsertGlobalPayload) (res *UpsertGlobalToolVariationResult, err error)
	// Create or update a globally defined tool variation.
	DeleteGlobal(context.Context, *DeleteGlobalPayload) (res *DeleteGlobalToolVariationResult, err error)
	// List globally defined tool variations.
	ListGlobal(context.Context, *ListGlobalPayload) (res *ListVariationsResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "variations"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"upsertGlobal", "deleteGlobal", "listGlobal"}

// DeleteGlobalPayload is the payload type of the variations service
// deleteGlobal method.
type DeleteGlobalPayload struct {
	SessionToken     *string
	ApikeyToken      *string
	ProjectSlugInput *string
	// The ID of the variation to delete
	VariationID string
}

// DeleteGlobalToolVariationResult is the result type of the variations service
// deleteGlobal method.
type DeleteGlobalToolVariationResult struct {
	// The ID of the variation that was deleted
	VariationID string
}

// ListGlobalPayload is the payload type of the variations service listGlobal
// method.
type ListGlobalPayload struct {
	SessionToken     *string
	ApikeyToken      *string
	ProjectSlugInput *string
}

// ListVariationsResult is the result type of the variations service listGlobal
// method.
type ListVariationsResult struct {
	Variations []*types.ToolVariation
}

// UpsertGlobalPayload is the payload type of the variations service
// upsertGlobal method.
type UpsertGlobalPayload struct {
	SessionToken     *string
	ApikeyToken      *string
	ProjectSlugInput *string
	// The name of the source tool
	SrcToolName string
	// The confirmation mode for the tool variation
	Confirm *string
	// The confirmation prompt for the tool variation
	ConfirmPrompt *string
	// The name of the tool variation
	Name *string
	// The summary of the tool variation
	Summary *string
	// The description of the tool variation
	Description *string
	// The tags of the tool variation
	Tags []string
	// The summarizer of the tool variation
	Summarizer *string
}

// UpsertGlobalToolVariationResult is the result type of the variations service
// upsertGlobal method.
type UpsertGlobalToolVariationResult struct {
	Variation *types.ToolVariation
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
