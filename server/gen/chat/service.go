// Code generated by goa v3.22.2, DO NOT EDIT.
//
// chat service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package chat

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Managed chats for gram AI consumers.
type Service interface {
	// List all chats for a project
	ListChats(context.Context, *ListChatsPayload) (res *ListChatsResult, err error)
	// Load a chat by its ID
	LoadChat(context.Context, *LoadChatPayload) (res *Chat, err error)
	// Load a chat by its ID
	CreditUsage(context.Context, *CreditUsagePayload) (res *CreditUsageResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "chat"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"listChats", "loadChat", "creditUsage"}

// Chat is the result type of the chat service loadChat method.
type Chat struct {
	// The list of messages in the chat
	Messages []*ChatMessage
	// The ID of the chat
	ID string
	// The title of the chat
	Title string
	// The ID of the user who created the chat
	UserID string
	// The number of messages in the chat
	NumMessages int
	// When the chat was created.
	CreatedAt string
	// When the chat was last updated.
	UpdatedAt string
}

type ChatMessage struct {
	// The ID of the message
	ID string
	// The role of the message
	Role string
	// The content of the message
	Content *string
	// The model that generated the message
	Model string
	// The tool call ID of the message
	ToolCallID *string
	// The tool calls in the message as a JSON blob
	ToolCalls *string
	// The finish reason of the message
	FinishReason *string
	// The ID of the user who created the message
	UserID *string
	// When the message was created.
	CreatedAt string
}

type ChatOverview struct {
	// The ID of the chat
	ID string
	// The title of the chat
	Title string
	// The ID of the user who created the chat
	UserID string
	// The number of messages in the chat
	NumMessages int
	// When the chat was created.
	CreatedAt string
	// When the chat was last updated.
	UpdatedAt string
}

// CreditUsagePayload is the payload type of the chat service creditUsage
// method.
type CreditUsagePayload struct {
	SessionToken     *string
	ProjectSlugInput *string
}

// CreditUsageResult is the result type of the chat service creditUsage method.
type CreditUsageResult struct {
	// The number of credits remaining
	CreditsUsed float64
	// The number of monthly credits
	MonthlyCredits int
}

// ListChatsPayload is the payload type of the chat service listChats method.
type ListChatsPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
}

// ListChatsResult is the result type of the chat service listChats method.
type ListChatsResult struct {
	// The list of chats
	Chats []*ChatOverview
}

// LoadChatPayload is the payload type of the chat service loadChat method.
type LoadChatPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
	// The ID of the chat
	ID string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
