// Code generated by goa v3.22.2, DO NOT EDIT.
//
// deployments service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package deployments

import (
	"context"

	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Manages deployments of tools from upstream sources.
type Service interface {
	// Get a deployment by its ID.
	GetDeployment(context.Context, *GetDeploymentPayload) (res *GetDeploymentResult, err error)
	// Get the latest deployment for a project.
	GetLatestDeployment(context.Context, *GetLatestDeploymentPayload) (res *GetLatestDeploymentResult, err error)
	// Create a deployment to load tool definitions.
	CreateDeployment(context.Context, *CreateDeploymentPayload) (res *CreateDeploymentResult, err error)
	// Create a new deployment with additional or updated tool sources.
	Evolve(context.Context, *EvolvePayload) (res *EvolveResult, err error)
	// Redeploys an existing deployment.
	Redeploy(context.Context, *RedeployPayload) (res *RedeployResult, err error)
	// List all deployments in descending order of creation.
	ListDeployments(context.Context, *ListDeploymentsPayload) (res *ListDeploymentResult, err error)
	// Get logs for a deployment.
	GetDeploymentLogs(context.Context, *GetDeploymentLogsPayload) (res *GetDeploymentLogsResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "deployments"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [7]string{"getDeployment", "getLatestDeployment", "createDeployment", "evolve", "redeploy", "listDeployments", "getDeploymentLogs"}

type AddDeploymentPackageForm struct {
	// The name of the package.
	Name string
	// The version of the package.
	Version *string
}

type AddOpenAPIv3DeploymentAssetForm struct {
	// The ID of the uploaded asset.
	AssetID string
	// The name to give the document as it will be displayed in UIs.
	Name string
	// The slug to give the document as it will be displayed in URLs.
	Slug types.Slug
}

type AddPackageForm struct {
	// The name of the package to add.
	Name string
	// The version of the package to add. If omitted, the latest version will be
	// used.
	Version *string
}

// CreateDeploymentPayload is the payload type of the deployments service
// createDeployment method.
type CreateDeploymentPayload struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
	// A unique identifier that will mitigate against duplicate deployments.
	IdempotencyKey string
	// The github repository in the form of "owner/repo".
	GithubRepo *string
	// The github pull request that resulted in the deployment.
	GithubPr *string
	// The commit hash that triggered the deployment.
	GithubSha *string
	// The external ID to refer to the deployment. This can be a git commit hash
	// for example.
	ExternalID *string
	// The upstream URL a deployment can refer to. This can be a github url to a
	// commit hash or pull request.
	ExternalURL     *string
	Openapiv3Assets []*AddOpenAPIv3DeploymentAssetForm
	Packages        []*AddDeploymentPackageForm
}

// CreateDeploymentResult is the result type of the deployments service
// createDeployment method.
type CreateDeploymentResult struct {
	// A deployment that was successfully created.
	Deployment *types.Deployment
}

type DeploymentLogEvent struct {
	// The ID of the log event
	ID string
	// The creation date of the log event
	CreatedAt string
	// The type of event that occurred
	Event string
	// The message of the log event
	Message string
}

type DeploymentSummary struct {
	// The ID to of the deployment.
	ID string
	// The ID of the user that created the deployment.
	UserID string
	// The status of the deployment.
	Status string
	// The creation date of the deployment.
	CreatedAt string
	// The number of upstream assets.
	AssetCount int64
	// The number of tools in the deployment.
	ToolCount int64
}

// EvolvePayload is the payload type of the deployments service evolve method.
type EvolvePayload struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
	// The ID of the deployment to evolve. If omitted, the latest deployment will
	// be used.
	DeploymentID *string
	// The OpenAPI 3.x documents to upsert in the new deployment.
	UpsertOpenapiv3Assets []*AddOpenAPIv3DeploymentAssetForm
	// The packages to upsert in the new deployment.
	UpsertPackages []*AddPackageForm
	// The OpenAPI 3.x documents to exclude from the new deployment when cloning a
	// previous deployment.
	ExcludeOpenapiv3Assets []string
	// The packages to exclude from the new deployment when cloning a previous
	// deployment.
	ExcludePackages []string
}

// EvolveResult is the result type of the deployments service evolve method.
type EvolveResult struct {
	// A deployment that was successfully created.
	Deployment *types.Deployment
}

// GetDeploymentLogsPayload is the payload type of the deployments service
// getDeploymentLogs method.
type GetDeploymentLogsPayload struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
	// The ID of the deployment
	DeploymentID string
	// The cursor to fetch results from
	Cursor *string
}

// GetDeploymentLogsResult is the result type of the deployments service
// getDeploymentLogs method.
type GetDeploymentLogsResult struct {
	// The cursor to fetch results from
	NextCursor *string
	// The status of the deployment
	Status string
	// The logs for the deployment
	Events []*DeploymentLogEvent
}

// GetDeploymentPayload is the payload type of the deployments service
// getDeployment method.
type GetDeploymentPayload struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
	// The ID of the deployment
	ID string
}

// GetDeploymentResult is the result type of the deployments service
// getDeployment method.
type GetDeploymentResult struct {
	// The ID to of the deployment.
	ID string
	// The ID of the organization that the deployment belongs to.
	OrganizationID string
	// The ID of the project that the deployment belongs to.
	ProjectID string
	// The ID of the user that created the deployment.
	UserID string
	// The creation date of the deployment.
	CreatedAt string
	// The status of the deployment.
	Status string
	// A unique identifier that will mitigate against duplicate deployments.
	IdempotencyKey *string
	// The github repository in the form of "owner/repo".
	GithubRepo *string
	// The github pull request that resulted in the deployment.
	GithubPr *string
	// The commit hash that triggered the deployment.
	GithubSha *string
	// The external ID to refer to the deployment. This can be a git commit hash
	// for example.
	ExternalID *string
	// The upstream URL a deployment can refer to. This can be a github url to a
	// commit hash or pull request.
	ExternalURL *string
	// The ID of the deployment that this deployment was cloned from.
	ClonedFrom *string
	// The number of tools in the deployment.
	ToolCount int64
	// The IDs, as returned from the assets upload service, to uploaded OpenAPI 3.x
	// documents whose operations will become tool definitions.
	Openapiv3Assets []*types.OpenAPIv3DeploymentAsset
	// The packages that were deployed.
	Packages []*types.DeploymentPackage
}

// GetLatestDeploymentPayload is the payload type of the deployments service
// getLatestDeployment method.
type GetLatestDeploymentPayload struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
}

// GetLatestDeploymentResult is the result type of the deployments service
// getLatestDeployment method.
type GetLatestDeploymentResult struct {
	// The latest deployment for a project if available.
	Deployment *types.Deployment
}

// ListDeploymentResult is the result type of the deployments service
// listDeployments method.
type ListDeploymentResult struct {
	// The cursor to fetch results from
	NextCursor *string
	// A list of deployments
	Items []*DeploymentSummary
}

// ListDeploymentsPayload is the payload type of the deployments service
// listDeployments method.
type ListDeploymentsPayload struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
	// The cursor to fetch results from
	Cursor *string
}

// RedeployPayload is the payload type of the deployments service redeploy
// method.
type RedeployPayload struct {
	// The ID of the deployment to redeploy.
	DeploymentID     string
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
}

// RedeployResult is the result type of the deployments service redeploy method.
type RedeployResult struct {
	// A deployment that was successfully created.
	Deployment *types.Deployment
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
