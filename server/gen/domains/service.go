// Code generated by goa v3.22.2, DO NOT EDIT.
//
// domains service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package domains

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Manage custom domains for gram.
type Service interface {
	// Get the custom domain for a project
	GetDomain(context.Context, *GetDomainPayload) (res *CustomDomain, err error)
	// Create a custom domain for a organization
	CreateDomain(context.Context, *CreateDomainPayload) (err error)
	// Delete a custom domain
	DeleteDomain(context.Context, *DeleteDomainPayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "domains"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"getDomain", "createDomain", "deleteDomain"}

// CreateDomainPayload is the payload type of the domains service createDomain
// method.
type CreateDomainPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
	// The custom domain
	Domain string
}

// CustomDomain is the result type of the domains service getDomain method.
type CustomDomain struct {
	// The ID of the custom domain
	ID string
	// The ID of the organization this domain belongs to
	OrganizationID string
	// The custom domain name
	Domain string
	// Whether the domain is verified
	Verified bool
	// Whether the domain is activated in ingress
	Activated bool
	// When the custom domain was created.
	CreatedAt string
	// When the custom domain was last updated.
	UpdatedAt string
	// The custom domain is actively being registered
	IsUpdating bool
}

// DeleteDomainPayload is the payload type of the domains service deleteDomain
// method.
type DeleteDomainPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
}

// GetDomainPayload is the payload type of the domains service getDomain method.
type GetDomainPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
