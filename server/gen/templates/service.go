// Code generated by goa v3.22.2, DO NOT EDIT.
//
// templates service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package templates

import (
	"context"

	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Manages re-usable prompt templates and higher-order tools for a project.
type Service interface {
	// Create a new prompt template.
	CreateTemplate(context.Context, *CreateTemplatePayload) (res *CreatePromptTemplateResult, err error)
	// Update a prompt template.
	UpdateTemplate(context.Context, *UpdateTemplatePayload) (res *UpdatePromptTemplateResult, err error)
	// Get prompt template by its ID or name.
	GetTemplate(context.Context, *GetTemplatePayload) (res *GetPromptTemplateResult, err error)
	// List available prompt template.
	ListTemplates(context.Context, *ListTemplatesPayload) (res *ListPromptTemplatesResult, err error)
	// Delete prompt template by its ID or name.
	DeleteTemplate(context.Context, *DeleteTemplatePayload) (err error)
	// Render a prompt template by ID with provided input data.
	RenderTemplateByID(context.Context, *RenderTemplateByIDPayload) (res *RenderTemplateResult, err error)
	// Render a prompt template directly with all template fields provided.
	RenderTemplate(context.Context, *RenderTemplatePayload) (res *RenderTemplateResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "templates"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [7]string{"createTemplate", "updateTemplate", "getTemplate", "listTemplates", "deleteTemplate", "renderTemplateByID", "renderTemplate"}

// CreatePromptTemplateResult is the result type of the templates service
// createTemplate method.
type CreatePromptTemplateResult struct {
	// The created prompt template
	Template *types.PromptTemplate
}

// CreateTemplatePayload is the payload type of the templates service
// createTemplate method.
type CreateTemplatePayload struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
	// The name of the prompt template
	Name types.Slug
	// The template content
	Prompt string
	// The description of the prompt template
	Description *string
	// The JSON Schema defining the placeholders found in the prompt template
	Arguments *string
	// The template engine
	Engine string
	// The kind of prompt the template is used for
	Kind string
	// The suggested tool names associated with the prompt template
	ToolsHint []string
}

// DeleteTemplatePayload is the payload type of the templates service
// deleteTemplate method.
type DeleteTemplatePayload struct {
	// The ID of the prompt template
	ID *string
	// The name of the prompt template
	Name             *string
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
}

// GetPromptTemplateResult is the result type of the templates service
// getTemplate method.
type GetPromptTemplateResult struct {
	// The created prompt template
	Template *types.PromptTemplate
}

// GetTemplatePayload is the payload type of the templates service getTemplate
// method.
type GetTemplatePayload struct {
	// The ID of the prompt template
	ID *string
	// The name of the prompt template
	Name             *string
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
}

// ListPromptTemplatesResult is the result type of the templates service
// listTemplates method.
type ListPromptTemplatesResult struct {
	// The created prompt template
	Templates []*types.PromptTemplate
}

// ListTemplatesPayload is the payload type of the templates service
// listTemplates method.
type ListTemplatesPayload struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
}

// RenderTemplateByIDPayload is the payload type of the templates service
// renderTemplateByID method.
type RenderTemplateByIDPayload struct {
	// The ID of the prompt template to render
	ID string
	// The input data to render the template with
	Arguments        map[string]any
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
}

// RenderTemplatePayload is the payload type of the templates service
// renderTemplate method.
type RenderTemplatePayload struct {
	// The template content to render
	Prompt string
	// The input data to render the template with
	Arguments map[string]any
	// The template engine
	Engine string
	// The kind of prompt the template is used for
	Kind             string
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
}

// RenderTemplateResult is the result type of the templates service
// renderTemplateByID method.
type RenderTemplateResult struct {
	// The rendered prompt
	Prompt string
}

// UpdatePromptTemplateResult is the result type of the templates service
// updateTemplate method.
type UpdatePromptTemplateResult struct {
	// The updated prompt template
	Template *types.PromptTemplate
}

// UpdateTemplatePayload is the payload type of the templates service
// updateTemplate method.
type UpdateTemplatePayload struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
	// The ID of the prompt template to update
	ID string
	// The template content
	Prompt *string
	// The description of the prompt template
	Description *string
	// The JSON Schema defining the placeholders found in the prompt template
	Arguments *string
	// The template engine
	Engine *string
	// The kind of prompt the template is used for
	Kind *string
	// The suggested tool names associated with the prompt template
	ToolsHint []string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
