// Code generated by goa v3.22.2, DO NOT EDIT.
//
// templates endpoints
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package templates

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "templates" service endpoints.
type Endpoints struct {
	CreateTemplate     goa.Endpoint
	UpdateTemplate     goa.Endpoint
	GetTemplate        goa.Endpoint
	ListTemplates      goa.Endpoint
	DeleteTemplate     goa.Endpoint
	RenderTemplateByID goa.Endpoint
	RenderTemplate     goa.Endpoint
}

// NewEndpoints wraps the methods of the "templates" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		CreateTemplate:     NewCreateTemplateEndpoint(s, a.APIKeyAuth),
		UpdateTemplate:     NewUpdateTemplateEndpoint(s, a.APIKeyAuth),
		GetTemplate:        NewGetTemplateEndpoint(s, a.APIKeyAuth),
		ListTemplates:      NewListTemplatesEndpoint(s, a.APIKeyAuth),
		DeleteTemplate:     NewDeleteTemplateEndpoint(s, a.APIKeyAuth),
		RenderTemplateByID: NewRenderTemplateByIDEndpoint(s, a.APIKeyAuth),
		RenderTemplate:     NewRenderTemplateEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "templates" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreateTemplate = m(e.CreateTemplate)
	e.UpdateTemplate = m(e.UpdateTemplate)
	e.GetTemplate = m(e.GetTemplate)
	e.ListTemplates = m(e.ListTemplates)
	e.DeleteTemplate = m(e.DeleteTemplate)
	e.RenderTemplateByID = m(e.RenderTemplateByID)
	e.RenderTemplate = m(e.RenderTemplate)
}

// NewCreateTemplateEndpoint returns an endpoint function that calls the method
// "createTemplate" of service "templates".
func NewCreateTemplateEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateTemplatePayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "apikey",
				Scopes:         []string{"consumer", "producer"},
				RequiredScopes: []string{"producer"},
			}
			var key string
			if p.ApikeyToken != nil {
				key = *p.ApikeyToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{"producer"},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			return nil, err
		}
		return s.CreateTemplate(ctx, p)
	}
}

// NewUpdateTemplateEndpoint returns an endpoint function that calls the method
// "updateTemplate" of service "templates".
func NewUpdateTemplateEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateTemplatePayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "apikey",
				Scopes:         []string{"consumer", "producer"},
				RequiredScopes: []string{"producer"},
			}
			var key string
			if p.ApikeyToken != nil {
				key = *p.ApikeyToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{"producer"},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			return nil, err
		}
		return s.UpdateTemplate(ctx, p)
	}
}

// NewGetTemplateEndpoint returns an endpoint function that calls the method
// "getTemplate" of service "templates".
func NewGetTemplateEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetTemplatePayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "apikey",
				Scopes:         []string{"consumer", "producer"},
				RequiredScopes: []string{"producer"},
			}
			var key string
			if p.ApikeyToken != nil {
				key = *p.ApikeyToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{"producer"},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "apikey",
				Scopes:         []string{"consumer", "producer"},
				RequiredScopes: []string{"consumer"},
			}
			var key string
			if p.ApikeyToken != nil {
				key = *p.ApikeyToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{"consumer"},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			return nil, err
		}
		return s.GetTemplate(ctx, p)
	}
}

// NewListTemplatesEndpoint returns an endpoint function that calls the method
// "listTemplates" of service "templates".
func NewListTemplatesEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListTemplatesPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "apikey",
				Scopes:         []string{"consumer", "producer"},
				RequiredScopes: []string{"producer"},
			}
			var key string
			if p.ApikeyToken != nil {
				key = *p.ApikeyToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{"producer"},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			return nil, err
		}
		return s.ListTemplates(ctx, p)
	}
}

// NewDeleteTemplateEndpoint returns an endpoint function that calls the method
// "deleteTemplate" of service "templates".
func NewDeleteTemplateEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteTemplatePayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "apikey",
				Scopes:         []string{"consumer", "producer"},
				RequiredScopes: []string{"producer"},
			}
			var key string
			if p.ApikeyToken != nil {
				key = *p.ApikeyToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{"producer"},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteTemplate(ctx, p)
	}
}

// NewRenderTemplateByIDEndpoint returns an endpoint function that calls the
// method "renderTemplateByID" of service "templates".
func NewRenderTemplateByIDEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RenderTemplateByIDPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "apikey",
				Scopes:         []string{"consumer", "producer"},
				RequiredScopes: []string{"producer"},
			}
			var key string
			if p.ApikeyToken != nil {
				key = *p.ApikeyToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{"producer"},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "apikey",
				Scopes:         []string{"consumer", "producer"},
				RequiredScopes: []string{"consumer"},
			}
			var key string
			if p.ApikeyToken != nil {
				key = *p.ApikeyToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{"consumer"},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			return nil, err
		}
		return s.RenderTemplateByID(ctx, p)
	}
}

// NewRenderTemplateEndpoint returns an endpoint function that calls the method
// "renderTemplate" of service "templates".
func NewRenderTemplateEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RenderTemplatePayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "apikey",
				Scopes:         []string{"consumer", "producer"},
				RequiredScopes: []string{"producer"},
			}
			var key string
			if p.ApikeyToken != nil {
				key = *p.ApikeyToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{"producer"},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "apikey",
				Scopes:         []string{"consumer", "producer"},
				RequiredScopes: []string{"consumer"},
			}
			var key string
			if p.ApikeyToken != nil {
				key = *p.ApikeyToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{"consumer"},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			return nil, err
		}
		return s.RenderTemplate(ctx, p)
	}
}
