// Code generated by goa v3.22.2, DO NOT EDIT.
//
// instances endpoints
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package instances

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "instances" service endpoints.
type Endpoints struct {
	GetInstance goa.Endpoint
}

// NewEndpoints wraps the methods of the "instances" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		GetInstance: NewGetInstanceEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "instances" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetInstance = m(e.GetInstance)
}

// NewGetInstanceEndpoint returns an endpoint function that calls the method
// "getInstance" of service "instances".
func NewGetInstanceEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetInstanceForm)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "apikey",
				Scopes:         []string{"consumer", "producer"},
				RequiredScopes: []string{"consumer"},
			}
			var key string
			if p.ApikeyToken != nil {
				key = *p.ApikeyToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{"consumer"},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			return nil, err
		}
		return s.GetInstance(ctx, p)
	}
}
