// Code generated by goa v3.22.2, DO NOT EDIT.
//
// auth service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package auth

import (
	"context"

	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Managed auth for gram producers and dashboard.
type Service interface {
	// Handles the authentication callback.
	Callback(context.Context, *CallbackPayload) (res *CallbackResult, err error)
	// Proxies to auth login through speakeasy oidc.
	Login(context.Context) (res *LoginResult, err error)
	// Switches the authentication scope to a different organization.
	SwitchScopes(context.Context, *SwitchScopesPayload) (res *SwitchScopesResult, err error)
	// Logs out the current user by clearing their session.
	Logout(context.Context, *LogoutPayload) (res *LogoutResult, err error)
	// Register a new org for a user with their session information.
	Register(context.Context, *RegisterPayload) (err error)
	// Provides information about the current authentication status.
	Info(context.Context, *InfoPayload) (res *InfoResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "auth"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [6]string{"callback", "login", "switchScopes", "logout", "register", "info"}

// CallbackPayload is the payload type of the auth service callback method.
type CallbackPayload struct {
	// The auth code for authentication from the speakeasy system
	Code string
}

// CallbackResult is the result type of the auth service callback method.
type CallbackResult struct {
	// The URL to redirect to after authentication
	Location string
	// The authentication session
	SessionToken string
	// The authentication session
	SessionCookie string
}

// InfoPayload is the payload type of the auth service info method.
type InfoPayload struct {
	SessionToken *string
}

// InfoResult is the result type of the auth service info method.
type InfoResult struct {
	UserID               string
	UserEmail            string
	UserSignature        *string
	UserDisplayName      *string
	UserPhotoURL         *string
	IsAdmin              bool
	ActiveOrganizationID string
	GramAccountType      string
	Organizations        []*OrganizationEntry
	// The authentication session
	SessionToken string
	// The authentication session
	SessionCookie string
}

// LoginResult is the result type of the auth service login method.
type LoginResult struct {
	// The URL to redirect to after authentication
	Location string
}

// LogoutPayload is the payload type of the auth service logout method.
type LogoutPayload struct {
	SessionToken *string
}

// LogoutResult is the result type of the auth service logout method.
type LogoutResult struct {
	// Empty string to clear the session
	SessionCookie string
}

type OrganizationEntry struct {
	ID                 string
	Name               string
	Slug               string
	Projects           []*ProjectEntry
	SsoConnectionID    *string
	UserWorkspaceSlugs []string
}

type ProjectEntry struct {
	// The ID of the project
	ID string
	// The name of the project
	Name string
	// The slug of the project
	Slug types.Slug
}

// RegisterPayload is the payload type of the auth service register method.
type RegisterPayload struct {
	SessionToken *string
	// The name of the org to register
	OrgName string
}

// SwitchScopesPayload is the payload type of the auth service switchScopes
// method.
type SwitchScopesPayload struct {
	// The organization slug to switch scopes
	OrganizationID *string
	// The project id to switch scopes too
	ProjectID    *string
	SessionToken *string
}

// SwitchScopesResult is the result type of the auth service switchScopes
// method.
type SwitchScopesResult struct {
	// The authentication session
	SessionToken string
	// The authentication session
	SessionCookie string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
