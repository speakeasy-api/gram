// Code generated by goa v3.22.2, DO NOT EDIT.
//
// auth endpoints
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package auth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "auth" service endpoints.
type Endpoints struct {
	Callback     goa.Endpoint
	Login        goa.Endpoint
	SwitchScopes goa.Endpoint
	Logout       goa.Endpoint
	Register     goa.Endpoint
	Info         goa.Endpoint
}

// NewEndpoints wraps the methods of the "auth" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Callback:     NewCallbackEndpoint(s),
		Login:        NewLoginEndpoint(s),
		SwitchScopes: NewSwitchScopesEndpoint(s, a.APIKeyAuth),
		Logout:       NewLogoutEndpoint(s, a.APIKeyAuth),
		Register:     NewRegisterEndpoint(s, a.APIKeyAuth),
		Info:         NewInfoEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "auth" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Callback = m(e.Callback)
	e.Login = m(e.Login)
	e.SwitchScopes = m(e.SwitchScopes)
	e.Logout = m(e.Logout)
	e.Register = m(e.Register)
	e.Info = m(e.Info)
}

// NewCallbackEndpoint returns an endpoint function that calls the method
// "callback" of service "auth".
func NewCallbackEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CallbackPayload)
		return s.Callback(ctx, p)
	}
}

// NewLoginEndpoint returns an endpoint function that calls the method "login"
// of service "auth".
func NewLoginEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Login(ctx)
	}
}

// NewSwitchScopesEndpoint returns an endpoint function that calls the method
// "switchScopes" of service "auth".
func NewSwitchScopesEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SwitchScopesPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return s.SwitchScopes(ctx, p)
	}
}

// NewLogoutEndpoint returns an endpoint function that calls the method
// "logout" of service "auth".
func NewLogoutEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LogoutPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return s.Logout(ctx, p)
	}
}

// NewRegisterEndpoint returns an endpoint function that calls the method
// "register" of service "auth".
func NewRegisterEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RegisterPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Register(ctx, p)
	}
}

// NewInfoEndpoint returns an endpoint function that calls the method "info" of
// service "auth".
func NewInfoEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*InfoPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return s.Info(ctx, p)
	}
}
