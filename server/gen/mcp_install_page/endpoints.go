// Code generated by goa v3.22.3, DO NOT EDIT.
//
// mcpInstallPage endpoints
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package mcpinstallpage

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "mcpInstallPage" service endpoints.
type Endpoints struct {
	GetInstallPageMetadata goa.Endpoint
	SetInstallPageMetadata goa.Endpoint
}

// NewEndpoints wraps the methods of the "mcpInstallPage" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		GetInstallPageMetadata: NewGetInstallPageMetadataEndpoint(s, a.APIKeyAuth),
		SetInstallPageMetadata: NewSetInstallPageMetadataEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "mcpInstallPage" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetInstallPageMetadata = m(e.GetInstallPageMetadata)
	e.SetInstallPageMetadata = m(e.SetInstallPageMetadata)
}

// NewGetInstallPageMetadataEndpoint returns an endpoint function that calls
// the method "getInstallPageMetadata" of service "mcpInstallPage".
func NewGetInstallPageMetadataEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetInstallPageMetadataPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.GetInstallPageMetadata(ctx, p)
	}
}

// NewSetInstallPageMetadataEndpoint returns an endpoint function that calls
// the method "setInstallPageMetadata" of service "mcpInstallPage".
func NewSetInstallPageMetadataEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SetInstallPageMetadataPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.SetInstallPageMetadata(ctx, p)
	}
}
