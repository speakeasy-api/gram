// Code generated by goa v3.22.3, DO NOT EDIT.
//
// mcpInstallPage service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package mcpinstallpage

import (
	"context"

	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Manages metadata for the MCP install page shown to users.
type Service interface {
	// Fetch the metadata that powers the MCP install page.
	GetInstallPageMetadata(context.Context, *GetInstallPageMetadataPayload) (res *GetInstallPageMetadataResult, err error)
	// Create or update the metadata that powers the MCP install page.
	SetInstallPageMetadata(context.Context, *SetInstallPageMetadataPayload) (res *types.MCPInstallPageMetadata, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "mcpInstallPage"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"getInstallPageMetadata", "setInstallPageMetadata"}

// GetInstallPageMetadataPayload is the payload type of the mcpInstallPage
// service getInstallPageMetadata method.
type GetInstallPageMetadataPayload struct {
	// The slug of the toolset associated with this install page metadata
	ToolsetSlug      types.Slug
	SessionToken     *string
	ProjectSlugInput *string
}

// GetInstallPageMetadataResult is the result type of the mcpInstallPage
// service getInstallPageMetadata method.
type GetInstallPageMetadataResult struct {
	// Metadata for the MCP install page
	Metadata *types.MCPInstallPageMetadata
}

// SetInstallPageMetadataPayload is the payload type of the mcpInstallPage
// service setInstallPageMetadata method.
type SetInstallPageMetadataPayload struct {
	// The slug of the toolset associated with this install page metadata
	ToolsetSlug types.Slug
	// The asset ID for the MCP install page logo
	LogoAssetID *string
	// A link to external documentation for the MCP install page
	ExternalDocumentationURL *string
	SessionToken             *string
	ProjectSlugInput         *string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
