// Code generated by goa v3.22.2, DO NOT EDIT.
//
// about endpoints
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package about

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "about" service endpoints.
type Endpoints struct {
	Openapi goa.Endpoint
}

// OpenapiResponseData holds both the result and the HTTP response body reader
// of the "openapi" method.
type OpenapiResponseData struct {
	// Result is the method result.
	Result *OpenapiResult
	// Body streams the HTTP response body.
	Body io.ReadCloser
}

// NewEndpoints wraps the methods of the "about" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Openapi: NewOpenapiEndpoint(s),
	}
}

// Use applies the given middleware to all the "about" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Openapi = m(e.Openapi)
}

// NewOpenapiEndpoint returns an endpoint function that calls the method
// "openapi" of service "about".
func NewOpenapiEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		res, body, err := s.Openapi(ctx)
		if err != nil {
			return nil, err
		}
		return &OpenapiResponseData{Result: res, Body: body}, nil
	}
}
