// Code generated by goa v3.22.2, DO NOT EDIT.
//
// projects endpoints
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package projects

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "projects" service endpoints.
type Endpoints struct {
	CreateProject goa.Endpoint
	ListProjects  goa.Endpoint
	SetLogo       goa.Endpoint
}

// NewEndpoints wraps the methods of the "projects" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		CreateProject: NewCreateProjectEndpoint(s, a.APIKeyAuth),
		ListProjects:  NewListProjectsEndpoint(s, a.APIKeyAuth),
		SetLogo:       NewSetLogoEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "projects" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreateProject = m(e.CreateProject)
	e.ListProjects = m(e.ListProjects)
	e.SetLogo = m(e.SetLogo)
}

// NewCreateProjectEndpoint returns an endpoint function that calls the method
// "createProject" of service "projects".
func NewCreateProjectEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateProjectPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "apikey",
			Scopes:         []string{"consumer", "producer"},
			RequiredScopes: []string{"producer"},
		}
		var key string
		if p.ApikeyToken != nil {
			key = *p.ApikeyToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "session",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.SessionToken != nil {
				key = *p.SessionToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.CreateProject(ctx, p)
	}
}

// NewListProjectsEndpoint returns an endpoint function that calls the method
// "listProjects" of service "projects".
func NewListProjectsEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListProjectsPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "apikey",
			Scopes:         []string{"consumer", "producer"},
			RequiredScopes: []string{"producer"},
		}
		var key string
		if p.ApikeyToken != nil {
			key = *p.ApikeyToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "session",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.SessionToken != nil {
				key = *p.SessionToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.ListProjects(ctx, p)
	}
}

// NewSetLogoEndpoint returns an endpoint function that calls the method
// "setLogo" of service "projects".
func NewSetLogoEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SetLogoPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "apikey",
			Scopes:         []string{"consumer", "producer"},
			RequiredScopes: []string{"producer"},
		}
		var key string
		if p.ApikeyToken != nil {
			key = *p.ApikeyToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{"producer"},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "session",
					Scopes:         []string{},
					RequiredScopes: []string{},
				}
				var key string
				if p.SessionToken != nil {
					key = *p.SessionToken
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			return nil, err
		}
		return s.SetLogo(ctx, p)
	}
}
