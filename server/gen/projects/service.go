// Code generated by goa v3.22.2, DO NOT EDIT.
//
// projects service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package projects

import (
	"context"

	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Manages projects in Gram.
type Service interface {
	// Create a new project.
	CreateProject(context.Context, *CreateProjectPayload) (res *CreateProjectResult, err error)
	// List all projects for an organization.
	ListProjects(context.Context, *ListProjectsPayload) (res *ListProjectsResult, err error)
	// Uploads a logo for a project.
	SetLogo(context.Context, *SetLogoPayload) (res *SetProjectLogoResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "projects"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"createProject", "listProjects", "setLogo"}

// CreateProjectPayload is the payload type of the projects service
// createProject method.
type CreateProjectPayload struct {
	ApikeyToken  *string
	SessionToken *string
	// The ID of the organization to create the project in
	OrganizationID string
	// The name of the project
	Name string
}

// CreateProjectResult is the result type of the projects service createProject
// method.
type CreateProjectResult struct {
	// The created project
	Project *Project
}

// ListProjectsPayload is the payload type of the projects service listProjects
// method.
type ListProjectsPayload struct {
	ApikeyToken  *string
	SessionToken *string
	// The ID of the organization to list projects for
	OrganizationID string
}

// ListProjectsResult is the result type of the projects service listProjects
// method.
type ListProjectsResult struct {
	// The list of projects
	Projects []*ProjectEntry
}

type Project struct {
	// The ID of the project
	ID string
	// The name of the project
	Name string
	// The slug of the project
	Slug types.Slug
	// The ID of the organization that owns the project
	OrganizationID string
	// The ID of the logo asset for the project
	LogoAssetID *string
	// The creation date of the project.
	CreatedAt string
	// The last update date of the project.
	UpdatedAt string
}

type ProjectEntry struct {
	// The ID of the project
	ID string
	// The name of the project
	Name string
	// The slug of the project
	Slug types.Slug
}

// SetLogoPayload is the payload type of the projects service setLogo method.
type SetLogoPayload struct {
	ApikeyToken      *string
	ProjectSlugInput *string
	SessionToken     *string
	// The ID of the asset
	AssetID string
}

// SetProjectLogoResult is the result type of the projects service setLogo
// method.
type SetProjectLogoResult struct {
	// The updated project with the new logo
	Project *Project
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
