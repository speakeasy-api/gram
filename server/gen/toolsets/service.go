// Code generated by goa v3.22.2, DO NOT EDIT.
//
// toolsets service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package toolsets

import (
	"context"

	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Managed toolsets for gram AI consumers.
type Service interface {
	// Create a new toolset with associated tools
	CreateToolset(context.Context, *CreateToolsetPayload) (res *types.Toolset, err error)
	// List all toolsets for a project
	ListToolsets(context.Context, *ListToolsetsPayload) (res *ListToolsetsResult, err error)
	// Update a toolset's properties including name, description, and HTTP tools
	UpdateToolset(context.Context, *UpdateToolsetPayload) (res *types.Toolset, err error)
	// Delete a toolset by its ID
	DeleteToolset(context.Context, *DeleteToolsetPayload) (err error)
	// Get detailed information about a toolset including full HTTP tool definitions
	GetToolset(context.Context, *GetToolsetPayload) (res *types.Toolset, err error)
	// Check if a MCP slug is available
	CheckMCPSlugAvailability(context.Context, *CheckMCPSlugAvailabilityPayload) (res bool, err error)
	// Associate an external OAuth server with a toolset
	AddExternalOAuthServer(context.Context, *AddExternalOAuthServerPayload) (res *types.Toolset, err error)
	// Remove OAuth server association from a toolset
	RemoveOAuthServer(context.Context, *RemoveOAuthServerPayload) (res *types.Toolset, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "toolsets"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [8]string{"createToolset", "listToolsets", "updateToolset", "deleteToolset", "getToolset", "checkMCPSlugAvailability", "addExternalOAuthServer", "removeOAuthServer"}

// AddExternalOAuthServerPayload is the payload type of the toolsets service
// addExternalOAuthServer method.
type AddExternalOAuthServerPayload struct {
	SessionToken *string
	// The slug of the toolset to update
	Slug types.Slug
	// The external OAuth server data to create and associate with the toolset
	ExternalOauthServer *types.ExternalOAuthServerForm
	ProjectSlugInput    *string
}

// CheckMCPSlugAvailabilityPayload is the payload type of the toolsets service
// checkMCPSlugAvailability method.
type CheckMCPSlugAvailabilityPayload struct {
	// The slug to check
	Slug             types.Slug
	SessionToken     *string
	ProjectSlugInput *string
}

// CreateToolsetPayload is the payload type of the toolsets service
// createToolset method.
type CreateToolsetPayload struct {
	SessionToken *string
	// The name of the toolset
	Name string
	// Description of the toolset
	Description *string
	// List of HTTP tool names to include
	HTTPToolNames []string
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *types.Slug
	ProjectSlugInput       *string
}

// DeleteToolsetPayload is the payload type of the toolsets service
// deleteToolset method.
type DeleteToolsetPayload struct {
	// The slug of the toolset
	Slug             types.Slug
	SessionToken     *string
	ProjectSlugInput *string
}

// GetToolsetPayload is the payload type of the toolsets service getToolset
// method.
type GetToolsetPayload struct {
	// The slug of the toolset
	Slug             types.Slug
	SessionToken     *string
	ProjectSlugInput *string
}

// ListToolsetsPayload is the payload type of the toolsets service listToolsets
// method.
type ListToolsetsPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
}

// ListToolsetsResult is the result type of the toolsets service listToolsets
// method.
type ListToolsetsResult struct {
	// The list of toolsets
	Toolsets []*types.ToolsetEntry
}

// RemoveOAuthServerPayload is the payload type of the toolsets service
// removeOAuthServer method.
type RemoveOAuthServerPayload struct {
	// The slug of the toolset
	Slug             types.Slug
	SessionToken     *string
	ProjectSlugInput *string
}

// UpdateToolsetPayload is the payload type of the toolsets service
// updateToolset method.
type UpdateToolsetPayload struct {
	SessionToken *string
	// The slug of the toolset to update
	Slug types.Slug
	// The new name of the toolset
	Name *string
	// The new description of the toolset
	Description *string
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *types.Slug
	// List of HTTP tool names to include
	HTTPToolNames []string
	// List of prompt template names to include
	PromptTemplateNames []string
	// Whether the toolset is enabled for MCP
	McpEnabled *bool
	// The slug of the MCP to use for the toolset
	McpSlug *types.Slug
	// Whether the toolset is public in MCP
	McpIsPublic *bool
	// The ID of the custom domain to use for the toolset
	CustomDomainID   *string
	ProjectSlugInput *string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
