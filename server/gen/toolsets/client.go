// Code generated by goa v3.22.2, DO NOT EDIT.
//
// toolsets client
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package toolsets

import (
	"context"

	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
)

// Client is the "toolsets" service client.
type Client struct {
	CreateToolsetEndpoint            goa.Endpoint
	ListToolsetsEndpoint             goa.Endpoint
	UpdateToolsetEndpoint            goa.Endpoint
	DeleteToolsetEndpoint            goa.Endpoint
	GetToolsetEndpoint               goa.Endpoint
	CheckMCPSlugAvailabilityEndpoint goa.Endpoint
	AddExternalOAuthServerEndpoint   goa.Endpoint
	RemoveOAuthServerEndpoint        goa.Endpoint
}

// NewClient initializes a "toolsets" service client given the endpoints.
func NewClient(createToolset, listToolsets, updateToolset, deleteToolset, getToolset, checkMCPSlugAvailability, addExternalOAuthServer, removeOAuthServer goa.Endpoint) *Client {
	return &Client{
		CreateToolsetEndpoint:            createToolset,
		ListToolsetsEndpoint:             listToolsets,
		UpdateToolsetEndpoint:            updateToolset,
		DeleteToolsetEndpoint:            deleteToolset,
		GetToolsetEndpoint:               getToolset,
		CheckMCPSlugAvailabilityEndpoint: checkMCPSlugAvailability,
		AddExternalOAuthServerEndpoint:   addExternalOAuthServer,
		RemoveOAuthServerEndpoint:        removeOAuthServer,
	}
}

// CreateToolset calls the "createToolset" endpoint of the "toolsets" service.
// CreateToolset may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): unauthorized access
//   - "forbidden" (type *goa.ServiceError): permission denied
//   - "bad_request" (type *goa.ServiceError): request is invalid
//   - "not_found" (type *goa.ServiceError): resource not found
//   - "conflict" (type *goa.ServiceError): resource already exists
//   - "unsupported_media" (type *goa.ServiceError): unsupported media type
//   - "invalid" (type *goa.ServiceError): request contains one or more invalidation fields
//   - "invariant_violation" (type *goa.ServiceError): an unexpected error occurred
//   - "unexpected" (type *goa.ServiceError): an unexpected error occurred
//   - "gateway_error" (type *goa.ServiceError): an unexpected error occurred
//   - error: internal error
func (c *Client) CreateToolset(ctx context.Context, p *CreateToolsetPayload) (res *types.Toolset, err error) {
	var ires any
	ires, err = c.CreateToolsetEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*types.Toolset), nil
}

// ListToolsets calls the "listToolsets" endpoint of the "toolsets" service.
// ListToolsets may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): unauthorized access
//   - "forbidden" (type *goa.ServiceError): permission denied
//   - "bad_request" (type *goa.ServiceError): request is invalid
//   - "not_found" (type *goa.ServiceError): resource not found
//   - "conflict" (type *goa.ServiceError): resource already exists
//   - "unsupported_media" (type *goa.ServiceError): unsupported media type
//   - "invalid" (type *goa.ServiceError): request contains one or more invalidation fields
//   - "invariant_violation" (type *goa.ServiceError): an unexpected error occurred
//   - "unexpected" (type *goa.ServiceError): an unexpected error occurred
//   - "gateway_error" (type *goa.ServiceError): an unexpected error occurred
//   - error: internal error
func (c *Client) ListToolsets(ctx context.Context, p *ListToolsetsPayload) (res *ListToolsetsResult, err error) {
	var ires any
	ires, err = c.ListToolsetsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ListToolsetsResult), nil
}

// UpdateToolset calls the "updateToolset" endpoint of the "toolsets" service.
// UpdateToolset may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): unauthorized access
//   - "forbidden" (type *goa.ServiceError): permission denied
//   - "bad_request" (type *goa.ServiceError): request is invalid
//   - "not_found" (type *goa.ServiceError): resource not found
//   - "conflict" (type *goa.ServiceError): resource already exists
//   - "unsupported_media" (type *goa.ServiceError): unsupported media type
//   - "invalid" (type *goa.ServiceError): request contains one or more invalidation fields
//   - "invariant_violation" (type *goa.ServiceError): an unexpected error occurred
//   - "unexpected" (type *goa.ServiceError): an unexpected error occurred
//   - "gateway_error" (type *goa.ServiceError): an unexpected error occurred
//   - error: internal error
func (c *Client) UpdateToolset(ctx context.Context, p *UpdateToolsetPayload) (res *types.Toolset, err error) {
	var ires any
	ires, err = c.UpdateToolsetEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*types.Toolset), nil
}

// DeleteToolset calls the "deleteToolset" endpoint of the "toolsets" service.
// DeleteToolset may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): unauthorized access
//   - "forbidden" (type *goa.ServiceError): permission denied
//   - "bad_request" (type *goa.ServiceError): request is invalid
//   - "not_found" (type *goa.ServiceError): resource not found
//   - "conflict" (type *goa.ServiceError): resource already exists
//   - "unsupported_media" (type *goa.ServiceError): unsupported media type
//   - "invalid" (type *goa.ServiceError): request contains one or more invalidation fields
//   - "invariant_violation" (type *goa.ServiceError): an unexpected error occurred
//   - "unexpected" (type *goa.ServiceError): an unexpected error occurred
//   - "gateway_error" (type *goa.ServiceError): an unexpected error occurred
//   - error: internal error
func (c *Client) DeleteToolset(ctx context.Context, p *DeleteToolsetPayload) (err error) {
	_, err = c.DeleteToolsetEndpoint(ctx, p)
	return
}

// GetToolset calls the "getToolset" endpoint of the "toolsets" service.
// GetToolset may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): unauthorized access
//   - "forbidden" (type *goa.ServiceError): permission denied
//   - "bad_request" (type *goa.ServiceError): request is invalid
//   - "not_found" (type *goa.ServiceError): resource not found
//   - "conflict" (type *goa.ServiceError): resource already exists
//   - "unsupported_media" (type *goa.ServiceError): unsupported media type
//   - "invalid" (type *goa.ServiceError): request contains one or more invalidation fields
//   - "invariant_violation" (type *goa.ServiceError): an unexpected error occurred
//   - "unexpected" (type *goa.ServiceError): an unexpected error occurred
//   - "gateway_error" (type *goa.ServiceError): an unexpected error occurred
//   - error: internal error
func (c *Client) GetToolset(ctx context.Context, p *GetToolsetPayload) (res *types.Toolset, err error) {
	var ires any
	ires, err = c.GetToolsetEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*types.Toolset), nil
}

// CheckMCPSlugAvailability calls the "checkMCPSlugAvailability" endpoint of
// the "toolsets" service.
// CheckMCPSlugAvailability may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): unauthorized access
//   - "forbidden" (type *goa.ServiceError): permission denied
//   - "bad_request" (type *goa.ServiceError): request is invalid
//   - "not_found" (type *goa.ServiceError): resource not found
//   - "conflict" (type *goa.ServiceError): resource already exists
//   - "unsupported_media" (type *goa.ServiceError): unsupported media type
//   - "invalid" (type *goa.ServiceError): request contains one or more invalidation fields
//   - "invariant_violation" (type *goa.ServiceError): an unexpected error occurred
//   - "unexpected" (type *goa.ServiceError): an unexpected error occurred
//   - "gateway_error" (type *goa.ServiceError): an unexpected error occurred
//   - error: internal error
func (c *Client) CheckMCPSlugAvailability(ctx context.Context, p *CheckMCPSlugAvailabilityPayload) (res bool, err error) {
	var ires any
	ires, err = c.CheckMCPSlugAvailabilityEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(bool), nil
}

// AddExternalOAuthServer calls the "addExternalOAuthServer" endpoint of the
// "toolsets" service.
// AddExternalOAuthServer may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): unauthorized access
//   - "forbidden" (type *goa.ServiceError): permission denied
//   - "bad_request" (type *goa.ServiceError): request is invalid
//   - "not_found" (type *goa.ServiceError): resource not found
//   - "conflict" (type *goa.ServiceError): resource already exists
//   - "unsupported_media" (type *goa.ServiceError): unsupported media type
//   - "invalid" (type *goa.ServiceError): request contains one or more invalidation fields
//   - "invariant_violation" (type *goa.ServiceError): an unexpected error occurred
//   - "unexpected" (type *goa.ServiceError): an unexpected error occurred
//   - "gateway_error" (type *goa.ServiceError): an unexpected error occurred
//   - error: internal error
func (c *Client) AddExternalOAuthServer(ctx context.Context, p *AddExternalOAuthServerPayload) (res *types.Toolset, err error) {
	var ires any
	ires, err = c.AddExternalOAuthServerEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*types.Toolset), nil
}

// RemoveOAuthServer calls the "removeOAuthServer" endpoint of the "toolsets"
// service.
// RemoveOAuthServer may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): unauthorized access
//   - "forbidden" (type *goa.ServiceError): permission denied
//   - "bad_request" (type *goa.ServiceError): request is invalid
//   - "not_found" (type *goa.ServiceError): resource not found
//   - "conflict" (type *goa.ServiceError): resource already exists
//   - "unsupported_media" (type *goa.ServiceError): unsupported media type
//   - "invalid" (type *goa.ServiceError): request contains one or more invalidation fields
//   - "invariant_violation" (type *goa.ServiceError): an unexpected error occurred
//   - "unexpected" (type *goa.ServiceError): an unexpected error occurred
//   - "gateway_error" (type *goa.ServiceError): an unexpected error occurred
//   - error: internal error
func (c *Client) RemoveOAuthServer(ctx context.Context, p *RemoveOAuthServerPayload) (res *types.Toolset, err error) {
	var ires any
	ires, err = c.RemoveOAuthServerEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*types.Toolset), nil
}
