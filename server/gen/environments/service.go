// Code generated by goa v3.22.2, DO NOT EDIT.
//
// environments service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package environments

import (
	"context"

	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Managing toolset environments.
type Service interface {
	// Create a new environment
	CreateEnvironment(context.Context, *CreateEnvironmentPayload) (res *types.Environment, err error)
	// List all environments for an organization
	ListEnvironments(context.Context, *ListEnvironmentsPayload) (res *ListEnvironmentsResult, err error)
	// Update an environment
	UpdateEnvironment(context.Context, *UpdateEnvironmentPayload) (res *types.Environment, err error)
	// Delete an environment
	DeleteEnvironment(context.Context, *DeleteEnvironmentPayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "environments"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"createEnvironment", "listEnvironments", "updateEnvironment", "deleteEnvironment"}

// CreateEnvironmentPayload is the payload type of the environments service
// createEnvironment method.
type CreateEnvironmentPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
	// The organization ID this environment belongs to
	OrganizationID string
	// The name of the environment
	Name string
	// Optional description of the environment
	Description *string
	// List of environment variable entries
	Entries []*EnvironmentEntryInput
}

// DeleteEnvironmentPayload is the payload type of the environments service
// deleteEnvironment method.
type DeleteEnvironmentPayload struct {
	// The slug of the environment to delete
	Slug             types.Slug
	SessionToken     *string
	ProjectSlugInput *string
}

// A single environment entry
type EnvironmentEntryInput struct {
	// The name of the environment variable
	Name string
	// The value of the environment variable
	Value string
}

// ListEnvironmentsPayload is the payload type of the environments service
// listEnvironments method.
type ListEnvironmentsPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
}

// ListEnvironmentsResult is the result type of the environments service
// listEnvironments method.
type ListEnvironmentsResult struct {
	Environments []*types.Environment
}

// UpdateEnvironmentPayload is the payload type of the environments service
// updateEnvironment method.
type UpdateEnvironmentPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
	// The slug of the environment to update
	Slug types.Slug
	// The description of the environment
	Description *string
	// The name of the environment
	Name *string
	// List of environment entries to update or create
	EntriesToUpdate []*EnvironmentEntryInput
	// List of environment entry names to remove
	EntriesToRemove []string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
