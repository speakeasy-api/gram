// Code generated by goa v3.22.2, DO NOT EDIT.
//
// environments endpoints
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package environments

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "environments" service endpoints.
type Endpoints struct {
	CreateEnvironment goa.Endpoint
	ListEnvironments  goa.Endpoint
	UpdateEnvironment goa.Endpoint
	DeleteEnvironment goa.Endpoint
}

// NewEndpoints wraps the methods of the "environments" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		CreateEnvironment: NewCreateEnvironmentEndpoint(s, a.APIKeyAuth),
		ListEnvironments:  NewListEnvironmentsEndpoint(s, a.APIKeyAuth),
		UpdateEnvironment: NewUpdateEnvironmentEndpoint(s, a.APIKeyAuth),
		DeleteEnvironment: NewDeleteEnvironmentEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "environments" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreateEnvironment = m(e.CreateEnvironment)
	e.ListEnvironments = m(e.ListEnvironments)
	e.UpdateEnvironment = m(e.UpdateEnvironment)
	e.DeleteEnvironment = m(e.DeleteEnvironment)
}

// NewCreateEnvironmentEndpoint returns an endpoint function that calls the
// method "createEnvironment" of service "environments".
func NewCreateEnvironmentEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateEnvironmentPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.CreateEnvironment(ctx, p)
	}
}

// NewListEnvironmentsEndpoint returns an endpoint function that calls the
// method "listEnvironments" of service "environments".
func NewListEnvironmentsEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListEnvironmentsPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.ListEnvironments(ctx, p)
	}
}

// NewUpdateEnvironmentEndpoint returns an endpoint function that calls the
// method "updateEnvironment" of service "environments".
func NewUpdateEnvironmentEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateEnvironmentPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.UpdateEnvironment(ctx, p)
	}
}

// NewDeleteEnvironmentEndpoint returns an endpoint function that calls the
// method "deleteEnvironment" of service "environments".
func NewDeleteEnvironmentEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteEnvironmentPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteEnvironment(ctx, p)
	}
}
