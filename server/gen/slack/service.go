// Code generated by goa v3.22.2, DO NOT EDIT.
//
// slack service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package slack

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Auth and interactions for the Gram Slack App.
type Service interface {
	// Handles the authentication callback.
	Callback(context.Context, *CallbackPayload) (res *CallbackResult, err error)
	// Proxies to auth login through speakeasy oidc.
	Login(context.Context, *LoginPayload) (res *LoginResult, err error)
	// get slack connection for an organization and project.
	GetSlackConnection(context.Context, *GetSlackConnectionPayload) (res *GetSlackConnectionResult, err error)
	// update slack connection for an organization and project.
	UpdateSlackConnection(context.Context, *UpdateSlackConnectionPayload) (res *GetSlackConnectionResult, err error)
	// delete slack connection for an organization and project.
	DeleteSlackConnection(context.Context, *DeleteSlackConnectionPayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "slack"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"callback", "login", "getSlackConnection", "updateSlackConnection", "deleteSlackConnection"}

// CallbackPayload is the payload type of the slack service callback method.
type CallbackPayload struct {
	// The state parameter from the callback
	State string
	// The code parameter from the callback
	Code string
}

// CallbackResult is the result type of the slack service callback method.
type CallbackResult struct {
	// The URL to redirect to after authentication
	Location string
}

// DeleteSlackConnectionPayload is the payload type of the slack service
// deleteSlackConnection method.
type DeleteSlackConnectionPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
}

// GetSlackConnectionPayload is the payload type of the slack service
// getSlackConnection method.
type GetSlackConnectionPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
}

// GetSlackConnectionResult is the result type of the slack service
// getSlackConnection method.
type GetSlackConnectionResult struct {
	// The name of the connected Slack team
	SlackTeamName string
	// The ID of the connected Slack team
	SlackTeamID string
	// The default toolset slug for this Slack connection
	DefaultToolsetSlug string
	// When the toolset was created.
	CreatedAt string
	// When the toolset was last updated.
	UpdatedAt string
}

// LoginPayload is the payload type of the slack service login method.
type LoginPayload struct {
	SessionToken *string
	ProjectSlug  *string
	// The dashboard location to return too
	ReturnURL *string
}

// LoginResult is the result type of the slack service login method.
type LoginResult struct {
	// The URL to redirect to after authentication
	Location string
}

// UpdateSlackConnectionPayload is the payload type of the slack service
// updateSlackConnection method.
type UpdateSlackConnectionPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
	// The default toolset slug for this Slack connection
	DefaultToolsetSlug string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
