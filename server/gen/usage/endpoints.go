// Code generated by goa v3.22.2, DO NOT EDIT.
//
// usage endpoints
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package usage

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "usage" service endpoints.
type Endpoints struct {
	GetPeriodUsage        goa.Endpoint
	GetUsageTiers         goa.Endpoint
	CreateCustomerSession goa.Endpoint
	CreateCheckout        goa.Endpoint
}

// NewEndpoints wraps the methods of the "usage" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		GetPeriodUsage:        NewGetPeriodUsageEndpoint(s, a.APIKeyAuth),
		GetUsageTiers:         NewGetUsageTiersEndpoint(s),
		CreateCustomerSession: NewCreateCustomerSessionEndpoint(s, a.APIKeyAuth),
		CreateCheckout:        NewCreateCheckoutEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "usage" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetPeriodUsage = m(e.GetPeriodUsage)
	e.GetUsageTiers = m(e.GetUsageTiers)
	e.CreateCustomerSession = m(e.CreateCustomerSession)
	e.CreateCheckout = m(e.CreateCheckout)
}

// NewGetPeriodUsageEndpoint returns an endpoint function that calls the method
// "getPeriodUsage" of service "usage".
func NewGetPeriodUsageEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetPeriodUsagePayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.GetPeriodUsage(ctx, p)
	}
}

// NewGetUsageTiersEndpoint returns an endpoint function that calls the method
// "getUsageTiers" of service "usage".
func NewGetUsageTiersEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.GetUsageTiers(ctx)
	}
}

// NewCreateCustomerSessionEndpoint returns an endpoint function that calls the
// method "createCustomerSession" of service "usage".
func NewCreateCustomerSessionEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateCustomerSessionPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.CreateCustomerSession(ctx, p)
	}
}

// NewCreateCheckoutEndpoint returns an endpoint function that calls the method
// "createCheckout" of service "usage".
func NewCreateCheckoutEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateCheckoutPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.CreateCheckout(ctx, p)
	}
}
