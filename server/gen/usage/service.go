// Code generated by goa v3.22.2, DO NOT EDIT.
//
// usage service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package usage

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Read usage for gram.
type Service interface {
	// Get the usage for a project for a given period
	GetPeriodUsage(context.Context, *GetPeriodUsagePayload) (res *PeriodUsage, err error)
	// Get the usage tiers
	GetUsageTiers(context.Context) (res *UsageTiers, err error)
	// Create a customer session for the user
	CreateCustomerSession(context.Context, *CreateCustomerSessionPayload) (res string, err error)
	// Create a checkout link for upgrading to the business plan
	CreateCheckout(context.Context, *CreateCheckoutPayload) (res string, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "usage"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"getPeriodUsage", "getUsageTiers", "createCustomerSession", "createCheckout"}

// CreateCheckoutPayload is the payload type of the usage service
// createCheckout method.
type CreateCheckoutPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
}

// CreateCustomerSessionPayload is the payload type of the usage service
// createCustomerSession method.
type CreateCustomerSessionPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
}

// GetPeriodUsagePayload is the payload type of the usage service
// getPeriodUsage method.
type GetPeriodUsagePayload struct {
	SessionToken     *string
	ProjectSlugInput *string
}

// PeriodUsage is the result type of the usage service getPeriodUsage method.
type PeriodUsage struct {
	// The number of tool calls used
	ToolCalls int
	// The maximum number of tool calls allowed
	MaxToolCalls int
	// The number of servers used, according to the Polar meter
	Servers int
	// The maximum number of servers allowed
	MaxServers int
	// The number of servers enabled at the time of the request
	ActualEnabledServerCount int
}

type TierLimits struct {
	// The base price for the tier
	BasePrice float64
	// The number of tool calls included in the tier
	IncludedToolCalls int
	// The number of servers included in the tier
	IncludedServers int
	// The number of credits included in the tier for playground and other
	// dashboard activities
	IncludedCredits int
	// The price per additional tool call
	PricePerAdditionalToolCall float64
	// The price per additional server
	PricePerAdditionalServer float64
	// The price per additional credit
	PricePerAdditionalCredit float64
	// Key feature bullets of the tier
	FeatureBullets []string
	// Included items bullets of the tier
	IncludedBullets []string
	// Add-on items bullets of the tier (optional)
	AddOnBullets []string
}

// UsageTiers is the result type of the usage service getUsageTiers method.
type UsageTiers struct {
	// The limits for the free tier
	Free *TierLimits
	// The limits for the pro tier
	Pro *TierLimits
	// The limits for the enterprise tier
	Enterprise *TierLimits
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
