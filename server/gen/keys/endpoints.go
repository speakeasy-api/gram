// Code generated by goa v3.22.2, DO NOT EDIT.
//
// keys endpoints
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package keys

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "keys" service endpoints.
type Endpoints struct {
	CreateKey goa.Endpoint
	ListKeys  goa.Endpoint
	RevokeKey goa.Endpoint
}

// NewEndpoints wraps the methods of the "keys" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		CreateKey: NewCreateKeyEndpoint(s, a.APIKeyAuth),
		ListKeys:  NewListKeysEndpoint(s, a.APIKeyAuth),
		RevokeKey: NewRevokeKeyEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "keys" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreateKey = m(e.CreateKey)
	e.ListKeys = m(e.ListKeys)
	e.RevokeKey = m(e.RevokeKey)
}

// NewCreateKeyEndpoint returns an endpoint function that calls the method
// "createKey" of service "keys".
func NewCreateKeyEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateKeyPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateKey(ctx, p)
	}
}

// NewListKeysEndpoint returns an endpoint function that calls the method
// "listKeys" of service "keys".
func NewListKeysEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListKeysPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListKeys(ctx, p)
	}
}

// NewRevokeKeyEndpoint returns an endpoint function that calls the method
// "revokeKey" of service "keys".
func NewRevokeKeyEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RevokeKeyPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.RevokeKey(ctx, p)
	}
}
