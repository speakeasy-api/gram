// Code generated by goa v3.22.2, DO NOT EDIT.
//
// keys service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package keys

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Managing system api keys.
type Service interface {
	// Create a new api key
	CreateKey(context.Context, *CreateKeyPayload) (res *Key, err error)
	// List all api keys for an organization
	ListKeys(context.Context, *ListKeysPayload) (res *ListKeysResult, err error)
	// Revoke a api key
	RevokeKey(context.Context, *RevokeKeyPayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "keys"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"createKey", "listKeys", "revokeKey"}

// CreateKeyPayload is the payload type of the keys service createKey method.
type CreateKeyPayload struct {
	SessionToken *string
	// The name of the key
	Name string
	// The scopes of the key that determines its permissions.
	Scopes []string
}

// Key is the result type of the keys service createKey method.
type Key struct {
	// The ID of the key
	ID string
	// The organization ID this key belongs to
	OrganizationID string
	// The optional project ID this key is scoped to
	ProjectID *string
	// The ID of the user who created this key
	CreatedByUserID string
	// The name of the key
	Name string
	// The store prefix of the api key for recognition
	KeyPrefix string
	// The token of the api key (only returned on key creation)
	Key *string
	// List of permission scopes for this key
	Scopes []string
	// The creation date of the key.
	CreatedAt string
	// When the key was last updated.
	UpdatedAt string
}

// ListKeysPayload is the payload type of the keys service listKeys method.
type ListKeysPayload struct {
	SessionToken *string
}

// ListKeysResult is the result type of the keys service listKeys method.
type ListKeysResult struct {
	Keys []*Key
}

// RevokeKeyPayload is the payload type of the keys service revokeKey method.
type RevokeKeyPayload struct {
	// The ID of the key to revoke
	ID           string
	SessionToken *string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
