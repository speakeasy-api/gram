// Code generated by goa v3.22.2, DO NOT EDIT.
//
// packages endpoints
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package packages

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "packages" service endpoints.
type Endpoints struct {
	CreatePackage goa.Endpoint
	UpdatePackage goa.Endpoint
	ListPackages  goa.Endpoint
	ListVersions  goa.Endpoint
	Publish       goa.Endpoint
}

// NewEndpoints wraps the methods of the "packages" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		CreatePackage: NewCreatePackageEndpoint(s, a.APIKeyAuth),
		UpdatePackage: NewUpdatePackageEndpoint(s, a.APIKeyAuth),
		ListPackages:  NewListPackagesEndpoint(s, a.APIKeyAuth),
		ListVersions:  NewListVersionsEndpoint(s, a.APIKeyAuth),
		Publish:       NewPublishEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "packages" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreatePackage = m(e.CreatePackage)
	e.UpdatePackage = m(e.UpdatePackage)
	e.ListPackages = m(e.ListPackages)
	e.ListVersions = m(e.ListVersions)
	e.Publish = m(e.Publish)
}

// NewCreatePackageEndpoint returns an endpoint function that calls the method
// "createPackage" of service "packages".
func NewCreatePackageEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreatePackagePayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "apikey",
			Scopes:         []string{"consumer", "producer"},
			RequiredScopes: []string{"producer"},
		}
		var key string
		if p.ApikeyToken != nil {
			key = *p.ApikeyToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{"producer"},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "session",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.SessionToken != nil {
				key = *p.SessionToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			return nil, err
		}
		return s.CreatePackage(ctx, p)
	}
}

// NewUpdatePackageEndpoint returns an endpoint function that calls the method
// "updatePackage" of service "packages".
func NewUpdatePackageEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdatePackagePayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "apikey",
			Scopes:         []string{"consumer", "producer"},
			RequiredScopes: []string{"producer"},
		}
		var key string
		if p.ApikeyToken != nil {
			key = *p.ApikeyToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{"producer"},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "session",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.SessionToken != nil {
				key = *p.SessionToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			return nil, err
		}
		return s.UpdatePackage(ctx, p)
	}
}

// NewListPackagesEndpoint returns an endpoint function that calls the method
// "listPackages" of service "packages".
func NewListPackagesEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListPackagesPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "apikey",
			Scopes:         []string{"consumer", "producer"},
			RequiredScopes: []string{"producer"},
		}
		var key string
		if p.ApikeyToken != nil {
			key = *p.ApikeyToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{"producer"},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "session",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.SessionToken != nil {
				key = *p.SessionToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			return nil, err
		}
		return s.ListPackages(ctx, p)
	}
}

// NewListVersionsEndpoint returns an endpoint function that calls the method
// "listVersions" of service "packages".
func NewListVersionsEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListVersionsPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "apikey",
			Scopes:         []string{"consumer", "producer"},
			RequiredScopes: []string{"producer"},
		}
		var key string
		if p.ApikeyToken != nil {
			key = *p.ApikeyToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{"producer"},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "session",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.SessionToken != nil {
				key = *p.SessionToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			return nil, err
		}
		return s.ListVersions(ctx, p)
	}
}

// NewPublishEndpoint returns an endpoint function that calls the method
// "publish" of service "packages".
func NewPublishEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*PublishPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "apikey",
			Scopes:         []string{"consumer", "producer"},
			RequiredScopes: []string{"producer"},
		}
		var key string
		if p.ApikeyToken != nil {
			key = *p.ApikeyToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{"producer"},
			}
			var key string
			if p.ProjectSlugInput != nil {
				key = *p.ProjectSlugInput
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			sc := security.APIKeyScheme{
				Name:           "session",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.SessionToken != nil {
				key = *p.SessionToken
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
			if err == nil {
				sc := security.APIKeyScheme{
					Name:           "project_slug",
					Scopes:         []string{},
					RequiredScopes: []string{},
				}
				var key string
				if p.ProjectSlugInput != nil {
					key = *p.ProjectSlugInput
				}
				ctx, err = authAPIKeyFn(ctx, key, &sc)
			}
		}
		if err != nil {
			return nil, err
		}
		return s.Publish(ctx, p)
	}
}
