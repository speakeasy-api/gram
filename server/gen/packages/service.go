// Code generated by goa v3.22.2, DO NOT EDIT.
//
// packages service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package packages

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Manages packages in Gram.
type Service interface {
	// Create a new package for a project.
	CreatePackage(context.Context, *CreatePackagePayload) (res *CreatePackageResult, err error)
	// Update package details.
	UpdatePackage(context.Context, *UpdatePackagePayload) (res *UpdatePackageResult, err error)
	// List all packages for a project.
	ListPackages(context.Context, *ListPackagesPayload) (res *ListPackagesResult, err error)
	// List published versions of a package.
	ListVersions(context.Context, *ListVersionsPayload) (res *ListVersionsResult, err error)
	// Publish a new version of a package.
	Publish(context.Context, *PublishPayload) (res *PublishPackageResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "packages"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"createPackage", "updatePackage", "listPackages", "listVersions", "publish"}

// CreatePackagePayload is the payload type of the packages service
// createPackage method.
type CreatePackagePayload struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
	// The name of the package
	Name string
	// The title of the package
	Title string
	// The summary of the package
	Summary string
	// The description of the package. Limited markdown syntax is supported.
	Description *string
	// External URL for the package owner
	URL *string
	// The keywords of the package
	Keywords []string
	// The asset ID of the image to show for this package
	ImageAssetID *string
}

// CreatePackageResult is the result type of the packages service createPackage
// method.
type CreatePackageResult struct {
	// The newly created package
	Package *Package
}

// ListPackagesPayload is the payload type of the packages service listPackages
// method.
type ListPackagesPayload struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
}

// ListPackagesResult is the result type of the packages service listPackages
// method.
type ListPackagesResult struct {
	// The list of packages
	Packages []*Package
}

// ListVersionsPayload is the payload type of the packages service listVersions
// method.
type ListVersionsPayload struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
	// The name of the package
	Name string
}

// ListVersionsResult is the result type of the packages service listVersions
// method.
type ListVersionsResult struct {
	Package  *Package
	Versions []*PackageVersion
}

type Package struct {
	// The ID of the package
	ID string
	// The ID of the project that owns the package
	ProjectID string
	// The ID of the organization that owns the package
	OrganizationID string
	// The name of the package
	Name string
	// The title of the package
	Title *string
	// The summary of the package
	Summary *string
	// The description of the package. This contains HTML content.
	Description *string
	// The unsanitized, user-supplied description of the package. Limited markdown
	// syntax is supported.
	DescriptionRaw *string
	// The keywords of the package
	Keywords []string
	// External URL for the package owner
	URL *string
	// The asset ID of the image to show for this package
	ImageAssetID *string
	// The latest version of the package
	LatestVersion *string
	// The creation date of the package
	CreatedAt string
	// The last update date of the package
	UpdatedAt string
	// The deletion date of the package
	DeletedAt *string
}

type PackageVersion struct {
	// The ID of the package version
	ID string
	// The ID of the package that the version belongs to
	PackageID string
	// The ID of the deployment that the version belongs to
	DeploymentID string
	// The visibility of the package version
	Visibility string
	// The semantic version value
	Semver string
	// The creation date of the package version
	CreatedAt string
}

// PublishPackageResult is the result type of the packages service publish
// method.
type PublishPackageResult struct {
	// The published package
	Package *Package
	// The published package version
	Version *PackageVersion
}

// PublishPayload is the payload type of the packages service publish method.
type PublishPayload struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
	// The name of the package
	Name string
	// The new semantic version of the package to publish
	Version string
	// The deployment ID to associate with the package version
	DeploymentID string
	// The visibility of the package version
	Visibility string
}

// UpdatePackagePayload is the payload type of the packages service
// updatePackage method.
type UpdatePackagePayload struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
	// The id of the package to update
	ID string
	// The title of the package
	Title *string
	// The summary of the package
	Summary *string
	// The description of the package. Limited markdown syntax is supported.
	Description *string
	// External URL for the package owner
	URL *string
	// The keywords of the package
	Keywords []string
	// The asset ID of the image to show for this package
	ImageAssetID *string
}

// UpdatePackageResult is the result type of the packages service updatePackage
// method.
type UpdatePackageResult struct {
	// The newly created package
	Package *Package
}

type NotModified struct {
	Location string
}

// Error returns an error description.
func (e *NotModified) Error() string {
	return ""
}

// ErrorName returns "not_modified".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotModified) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "not_modified".
func (e *NotModified) GoaErrorName() string {
	return "not_modified"
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
