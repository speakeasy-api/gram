// Code generated by goa v3.22.2, DO NOT EDIT.
//
// tools HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"fmt"
	"strconv"

	tools "github.com/speakeasy-api/gram/server/gen/tools"
)

// BuildListToolsPayload builds the payload for the tools listTools endpoint
// from CLI flags.
func BuildListToolsPayload(toolsListToolsCursor string, toolsListToolsLimit string, toolsListToolsDeploymentID string, toolsListToolsSessionToken string, toolsListToolsProjectSlugInput string) (*tools.ListToolsPayload, error) {
	var err error
	var cursor *string
	{
		if toolsListToolsCursor != "" {
			cursor = &toolsListToolsCursor
		}
	}
	var limit *int32
	{
		if toolsListToolsLimit != "" {
			var v int64
			v, err = strconv.ParseInt(toolsListToolsLimit, 10, 32)
			val := int32(v)
			limit = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT32")
			}
		}
	}
	var deploymentID *string
	{
		if toolsListToolsDeploymentID != "" {
			deploymentID = &toolsListToolsDeploymentID
		}
	}
	var sessionToken *string
	{
		if toolsListToolsSessionToken != "" {
			sessionToken = &toolsListToolsSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsListToolsProjectSlugInput != "" {
			projectSlugInput = &toolsListToolsProjectSlugInput
		}
	}
	v := &tools.ListToolsPayload{}
	v.Cursor = cursor
	v.Limit = limit
	v.DeploymentID = deploymentID
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}
