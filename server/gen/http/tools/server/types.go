// Code generated by goa v3.22.3, DO NOT EDIT.
//
// tools HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	tools "github.com/speakeasy-api/gram/server/gen/tools"
	goa "goa.design/goa/v3/pkg"
)

// ListToolsResponseBody is the type of the "tools" service "listTools"
// endpoint HTTP response body.
type ListToolsResponseBody struct {
	// The cursor to fetch results from
	NextCursor *string `form:"next_cursor,omitempty" json:"next_cursor,omitempty" xml:"next_cursor,omitempty"`
	// The list of tools (polymorphic union of HTTP tools and prompt templates)
	Tools []*ToolResponseBody `form:"tools" json:"tools" xml:"tools"`
}

// ListToolsUnauthorizedResponseBody is the type of the "tools" service
// "listTools" endpoint HTTP response body for the "unauthorized" error.
type ListToolsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsForbiddenResponseBody is the type of the "tools" service
// "listTools" endpoint HTTP response body for the "forbidden" error.
type ListToolsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsBadRequestResponseBody is the type of the "tools" service
// "listTools" endpoint HTTP response body for the "bad_request" error.
type ListToolsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsNotFoundResponseBody is the type of the "tools" service "listTools"
// endpoint HTTP response body for the "not_found" error.
type ListToolsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsConflictResponseBody is the type of the "tools" service "listTools"
// endpoint HTTP response body for the "conflict" error.
type ListToolsConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsUnsupportedMediaResponseBody is the type of the "tools" service
// "listTools" endpoint HTTP response body for the "unsupported_media" error.
type ListToolsUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsInvalidResponseBody is the type of the "tools" service "listTools"
// endpoint HTTP response body for the "invalid" error.
type ListToolsInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsInvariantViolationResponseBody is the type of the "tools" service
// "listTools" endpoint HTTP response body for the "invariant_violation" error.
type ListToolsInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsUnexpectedResponseBody is the type of the "tools" service
// "listTools" endpoint HTTP response body for the "unexpected" error.
type ListToolsUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsGatewayErrorResponseBody is the type of the "tools" service
// "listTools" endpoint HTTP response body for the "gateway_error" error.
type ListToolsGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ToolResponseBody is used to define fields on response body types.
type ToolResponseBody struct {
	Tool *struct {
		// Union type name, one of:
		// - "http_tool"
		// - "prompt_template"
		Type string `form:"Type" json:"Type" xml:"Type"`
		// JSON encoded union value
		Value string `form:"Value" json:"Value" xml:"Value"`
	} `form:"tool,omitempty" json:"tool,omitempty" xml:"tool,omitempty"`
}

// NewListToolsResponseBody builds the HTTP response body from the result of
// the "listTools" endpoint of the "tools" service.
func NewListToolsResponseBody(res *tools.ListToolsResult) *ListToolsResponseBody {
	body := &ListToolsResponseBody{
		NextCursor: res.NextCursor,
	}
	if res.Tools != nil {
		body.Tools = make([]*ToolResponseBody, len(res.Tools))
		for i, val := range res.Tools {
			body.Tools[i] = marshalTypesToolToToolResponseBody(val)
		}
	} else {
		body.Tools = []*ToolResponseBody{}
	}
	return body
}

// NewListToolsUnauthorizedResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsUnauthorizedResponseBody(res *goa.ServiceError) *ListToolsUnauthorizedResponseBody {
	body := &ListToolsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsForbiddenResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsForbiddenResponseBody(res *goa.ServiceError) *ListToolsForbiddenResponseBody {
	body := &ListToolsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsBadRequestResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsBadRequestResponseBody(res *goa.ServiceError) *ListToolsBadRequestResponseBody {
	body := &ListToolsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsNotFoundResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsNotFoundResponseBody(res *goa.ServiceError) *ListToolsNotFoundResponseBody {
	body := &ListToolsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsConflictResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsConflictResponseBody(res *goa.ServiceError) *ListToolsConflictResponseBody {
	body := &ListToolsConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "listTools" endpoint of the "tools" service.
func NewListToolsUnsupportedMediaResponseBody(res *goa.ServiceError) *ListToolsUnsupportedMediaResponseBody {
	body := &ListToolsUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsInvalidResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsInvalidResponseBody(res *goa.ServiceError) *ListToolsInvalidResponseBody {
	body := &ListToolsInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsInvariantViolationResponseBody builds the HTTP response body
// from the result of the "listTools" endpoint of the "tools" service.
func NewListToolsInvariantViolationResponseBody(res *goa.ServiceError) *ListToolsInvariantViolationResponseBody {
	body := &ListToolsInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsUnexpectedResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsUnexpectedResponseBody(res *goa.ServiceError) *ListToolsUnexpectedResponseBody {
	body := &ListToolsUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsGatewayErrorResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsGatewayErrorResponseBody(res *goa.ServiceError) *ListToolsGatewayErrorResponseBody {
	body := &ListToolsGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsPayload builds a tools service listTools endpoint payload.
func NewListToolsPayload(cursor *string, limit *int32, deploymentID *string, sessionToken *string, projectSlugInput *string) *tools.ListToolsPayload {
	v := &tools.ListToolsPayload{}
	v.Cursor = cursor
	v.Limit = limit
	v.DeploymentID = deploymentID
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}
