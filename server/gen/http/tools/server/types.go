// Code generated by goa v3.22.2, DO NOT EDIT.
//
// tools HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	tools "github.com/speakeasy-api/gram/server/gen/tools"
	goa "goa.design/goa/v3/pkg"
)

// ListToolsResponseBody is the type of the "tools" service "listTools"
// endpoint HTTP response body.
type ListToolsResponseBody struct {
	// The cursor to fetch results from
	NextCursor *string `form:"next_cursor,omitempty" json:"next_cursor,omitempty" xml:"next_cursor,omitempty"`
	// The list of tools
	Tools []*HTTPToolDefinitionResponseBody `form:"tools" json:"tools" xml:"tools"`
}

// ListToolsUnauthorizedResponseBody is the type of the "tools" service
// "listTools" endpoint HTTP response body for the "unauthorized" error.
type ListToolsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsForbiddenResponseBody is the type of the "tools" service
// "listTools" endpoint HTTP response body for the "forbidden" error.
type ListToolsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsBadRequestResponseBody is the type of the "tools" service
// "listTools" endpoint HTTP response body for the "bad_request" error.
type ListToolsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsNotFoundResponseBody is the type of the "tools" service "listTools"
// endpoint HTTP response body for the "not_found" error.
type ListToolsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsConflictResponseBody is the type of the "tools" service "listTools"
// endpoint HTTP response body for the "conflict" error.
type ListToolsConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsUnsupportedMediaResponseBody is the type of the "tools" service
// "listTools" endpoint HTTP response body for the "unsupported_media" error.
type ListToolsUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsInvalidResponseBody is the type of the "tools" service "listTools"
// endpoint HTTP response body for the "invalid" error.
type ListToolsInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsInvariantViolationResponseBody is the type of the "tools" service
// "listTools" endpoint HTTP response body for the "invariant_violation" error.
type ListToolsInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsUnexpectedResponseBody is the type of the "tools" service
// "listTools" endpoint HTTP response body for the "unexpected" error.
type ListToolsUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsGatewayErrorResponseBody is the type of the "tools" service
// "listTools" endpoint HTTP response body for the "gateway_error" error.
type ListToolsGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// HTTPToolDefinitionResponseBody is used to define fields on response body
// types.
type HTTPToolDefinitionResponseBody struct {
	// The ID of the HTTP tool
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the project
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The ID of the deployment
	DeploymentID string `form:"deployment_id" json:"deployment_id" xml:"deployment_id"`
	// The name of the tool
	Name string `form:"name" json:"name" xml:"name"`
	// The canonical name of the tool. Will be the same as the name if there is no
	// variation.
	CanonicalName string `form:"canonical_name" json:"canonical_name" xml:"canonical_name"`
	// Summary of the tool
	Summary string `form:"summary" json:"summary" xml:"summary"`
	// Description of the tool
	Description string `form:"description" json:"description" xml:"description"`
	// Confirmation mode for the tool
	Confirm string `form:"confirm" json:"confirm" xml:"confirm"`
	// Prompt for the confirmation
	ConfirmPrompt *string `form:"confirm_prompt,omitempty" json:"confirm_prompt,omitempty" xml:"confirm_prompt,omitempty"`
	// Summarizer for the tool
	Summarizer *string `form:"summarizer,omitempty" json:"summarizer,omitempty" xml:"summarizer,omitempty"`
	// Response filter metadata for the tool
	ResponseFilter *ResponseFilterResponseBody `form:"response_filter,omitempty" json:"response_filter,omitempty" xml:"response_filter,omitempty"`
	// The ID of the OpenAPI v3 document
	Openapiv3DocumentID *string `form:"openapiv3_document_id,omitempty" json:"openapiv3_document_id,omitempty" xml:"openapiv3_document_id,omitempty"`
	// OpenAPI v3 operation
	Openapiv3Operation *string `form:"openapiv3_operation,omitempty" json:"openapiv3_operation,omitempty" xml:"openapiv3_operation,omitempty"`
	// The tags list for this http tool
	Tags []string `form:"tags" json:"tags" xml:"tags"`
	// Security requirements for the underlying HTTP endpoint
	Security *string `form:"security,omitempty" json:"security,omitempty" xml:"security,omitempty"`
	// The default server URL for the tool
	DefaultServerURL *string `form:"default_server_url,omitempty" json:"default_server_url,omitempty" xml:"default_server_url,omitempty"`
	// HTTP method for the request
	HTTPMethod string `form:"http_method" json:"http_method" xml:"http_method"`
	// Path for the request
	Path string `form:"path" json:"path" xml:"path"`
	// Version of the schema
	SchemaVersion *string `form:"schema_version,omitempty" json:"schema_version,omitempty" xml:"schema_version,omitempty"`
	// JSON schema for the request
	Schema string `form:"schema" json:"schema" xml:"schema"`
	// The name of the source package
	PackageName *string `form:"package_name,omitempty" json:"package_name,omitempty" xml:"package_name,omitempty"`
	// The creation date of the tool.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the tool.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
	// The original details of a tool, excluding any variations
	Canonical *CanonicalToolAttributesResponseBody `form:"canonical,omitempty" json:"canonical,omitempty" xml:"canonical,omitempty"`
	// The variation details of a tool. Only includes explicitly varied fields.
	Variation *ToolVariationResponseBody `form:"variation,omitempty" json:"variation,omitempty" xml:"variation,omitempty"`
}

// ResponseFilterResponseBody is used to define fields on response body types.
type ResponseFilterResponseBody struct {
	// Response filter type for the tool
	Type string `form:"type" json:"type" xml:"type"`
	// Status codes to filter for
	StatusCodes []string `form:"status_codes" json:"status_codes" xml:"status_codes"`
	// Content types to filter for
	ContentTypes []string `form:"content_types" json:"content_types" xml:"content_types"`
}

// CanonicalToolAttributesResponseBody is used to define fields on response
// body types.
type CanonicalToolAttributesResponseBody struct {
	// The ID of the variation that was applied to the tool
	VariationID string `form:"variation_id" json:"variation_id" xml:"variation_id"`
	// The name of the tool
	Name string `form:"name" json:"name" xml:"name"`
	// Summary of the tool
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// Description of the tool
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Confirmation mode for the tool
	Confirm *string `form:"confirm,omitempty" json:"confirm,omitempty" xml:"confirm,omitempty"`
	// Prompt for the confirmation
	ConfirmPrompt *string `form:"confirm_prompt,omitempty" json:"confirm_prompt,omitempty" xml:"confirm_prompt,omitempty"`
	// Summarizer for the tool
	Summarizer *string `form:"summarizer,omitempty" json:"summarizer,omitempty" xml:"summarizer,omitempty"`
	// The tags list for this http tool
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// ToolVariationResponseBody is used to define fields on response body types.
type ToolVariationResponseBody struct {
	// The ID of the tool variation
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the tool variation group
	GroupID string `form:"group_id" json:"group_id" xml:"group_id"`
	// The name of the source tool
	SrcToolName string `form:"src_tool_name" json:"src_tool_name" xml:"src_tool_name"`
	// The confirmation mode for the tool variation
	Confirm *string `form:"confirm,omitempty" json:"confirm,omitempty" xml:"confirm,omitempty"`
	// The confirmation prompt for the tool variation
	ConfirmPrompt *string `form:"confirm_prompt,omitempty" json:"confirm_prompt,omitempty" xml:"confirm_prompt,omitempty"`
	// The name of the tool variation
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The summary of the tool variation
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// The description of the tool variation
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The tags of the tool variation
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// The summarizer of the tool variation
	Summarizer *string `form:"summarizer,omitempty" json:"summarizer,omitempty" xml:"summarizer,omitempty"`
	// The creation date of the tool variation
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the tool variation
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewListToolsResponseBody builds the HTTP response body from the result of
// the "listTools" endpoint of the "tools" service.
func NewListToolsResponseBody(res *tools.ListToolsResult) *ListToolsResponseBody {
	body := &ListToolsResponseBody{
		NextCursor: res.NextCursor,
	}
	if res.Tools != nil {
		body.Tools = make([]*HTTPToolDefinitionResponseBody, len(res.Tools))
		for i, val := range res.Tools {
			body.Tools[i] = marshalTypesHTTPToolDefinitionToHTTPToolDefinitionResponseBody(val)
		}
	} else {
		body.Tools = []*HTTPToolDefinitionResponseBody{}
	}
	return body
}

// NewListToolsUnauthorizedResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsUnauthorizedResponseBody(res *goa.ServiceError) *ListToolsUnauthorizedResponseBody {
	body := &ListToolsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsForbiddenResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsForbiddenResponseBody(res *goa.ServiceError) *ListToolsForbiddenResponseBody {
	body := &ListToolsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsBadRequestResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsBadRequestResponseBody(res *goa.ServiceError) *ListToolsBadRequestResponseBody {
	body := &ListToolsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsNotFoundResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsNotFoundResponseBody(res *goa.ServiceError) *ListToolsNotFoundResponseBody {
	body := &ListToolsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsConflictResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsConflictResponseBody(res *goa.ServiceError) *ListToolsConflictResponseBody {
	body := &ListToolsConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "listTools" endpoint of the "tools" service.
func NewListToolsUnsupportedMediaResponseBody(res *goa.ServiceError) *ListToolsUnsupportedMediaResponseBody {
	body := &ListToolsUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsInvalidResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsInvalidResponseBody(res *goa.ServiceError) *ListToolsInvalidResponseBody {
	body := &ListToolsInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsInvariantViolationResponseBody builds the HTTP response body
// from the result of the "listTools" endpoint of the "tools" service.
func NewListToolsInvariantViolationResponseBody(res *goa.ServiceError) *ListToolsInvariantViolationResponseBody {
	body := &ListToolsInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsUnexpectedResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsUnexpectedResponseBody(res *goa.ServiceError) *ListToolsUnexpectedResponseBody {
	body := &ListToolsUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsGatewayErrorResponseBody builds the HTTP response body from the
// result of the "listTools" endpoint of the "tools" service.
func NewListToolsGatewayErrorResponseBody(res *goa.ServiceError) *ListToolsGatewayErrorResponseBody {
	body := &ListToolsGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsPayload builds a tools service listTools endpoint payload.
func NewListToolsPayload(cursor *string, limit *int32, deploymentID *string, sessionToken *string, projectSlugInput *string) *tools.ListToolsPayload {
	v := &tools.ListToolsPayload{}
	v.Cursor = cursor
	v.Limit = limit
	v.DeploymentID = deploymentID
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}
