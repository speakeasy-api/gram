// Code generated by goa v3.22.2, DO NOT EDIT.
//
// tools HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	"context"
	"errors"
	"net/http"
	"strconv"
	"strings"

	tools "github.com/speakeasy-api/gram/server/gen/tools"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListToolsResponse returns an encoder for responses returned by the
// tools listTools endpoint.
func EncodeListToolsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*tools.ListToolsResult)
		enc := encoder(ctx, w)
		body := NewListToolsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListToolsRequest returns a decoder for requests sent to the tools
// listTools endpoint.
func DecodeListToolsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*tools.ListToolsPayload, error) {
	return func(r *http.Request) (*tools.ListToolsPayload, error) {
		var (
			cursor           *string
			limit            *int32
			deploymentID     *string
			sessionToken     *string
			projectSlugInput *string
			err              error
		)
		qp := r.URL.Query()
		cursorRaw := qp.Get("cursor")
		if cursorRaw != "" {
			cursor = &cursorRaw
		}
		{
			limitRaw := qp.Get("limit")
			if limitRaw != "" {
				v, err2 := strconv.ParseInt(limitRaw, 10, 32)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
				}
				pv := int32(v)
				limit = &pv
			}
		}
		deploymentIDRaw := qp.Get("deployment_id")
		if deploymentIDRaw != "" {
			deploymentID = &deploymentIDRaw
		}
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugInputRaw := r.Header.Get("Gram-Project")
		if projectSlugInputRaw != "" {
			projectSlugInput = &projectSlugInputRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewListToolsPayload(cursor, limit, deploymentID, sessionToken, projectSlugInput)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}
		if payload.ProjectSlugInput != nil {
			if strings.Contains(*payload.ProjectSlugInput, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlugInput, " ", 2)[1]
				payload.ProjectSlugInput = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListToolsError returns an encoder for errors returned by the listTools
// tools endpoint.
func EncodeListToolsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListToolsUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListToolsForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListToolsBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListToolsNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "conflict":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListToolsConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "unsupported_media":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListToolsUnsupportedMediaResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnsupportedMediaType)
			return enc.Encode(body)
		case "invalid":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListToolsInvalidResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnprocessableEntity)
			return enc.Encode(body)
		case "invariant_violation":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListToolsInvariantViolationResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "unexpected":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListToolsUnexpectedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "gateway_error":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListToolsGatewayErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalTypesHTTPToolDefinitionToHTTPToolDefinitionResponseBody builds a
// value of type *HTTPToolDefinitionResponseBody from a value of type
// *types.HTTPToolDefinition.
func marshalTypesHTTPToolDefinitionToHTTPToolDefinitionResponseBody(v *types.HTTPToolDefinition) *HTTPToolDefinitionResponseBody {
	res := &HTTPToolDefinitionResponseBody{
		ID:                  v.ID,
		ProjectID:           v.ProjectID,
		DeploymentID:        v.DeploymentID,
		Name:                v.Name,
		CanonicalName:       v.CanonicalName,
		Summary:             v.Summary,
		Description:         v.Description,
		Confirm:             v.Confirm,
		ConfirmPrompt:       v.ConfirmPrompt,
		Summarizer:          v.Summarizer,
		Openapiv3DocumentID: v.Openapiv3DocumentID,
		Openapiv3Operation:  v.Openapiv3Operation,
		Security:            v.Security,
		DefaultServerURL:    v.DefaultServerURL,
		HTTPMethod:          v.HTTPMethod,
		Path:                v.Path,
		SchemaVersion:       v.SchemaVersion,
		Schema:              v.Schema,
		PackageName:         v.PackageName,
		CreatedAt:           v.CreatedAt,
		UpdatedAt:           v.UpdatedAt,
	}
	if v.ResponseFilter != nil {
		res.ResponseFilter = marshalTypesResponseFilterToResponseFilterResponseBody(v.ResponseFilter)
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	} else {
		res.Tags = []string{}
	}
	if v.Canonical != nil {
		res.Canonical = marshalTypesCanonicalToolAttributesToCanonicalToolAttributesResponseBody(v.Canonical)
	}
	if v.Variation != nil {
		res.Variation = marshalTypesToolVariationToToolVariationResponseBody(v.Variation)
	}

	return res
}

// marshalTypesResponseFilterToResponseFilterResponseBody builds a value of
// type *ResponseFilterResponseBody from a value of type *types.ResponseFilter.
func marshalTypesResponseFilterToResponseFilterResponseBody(v *types.ResponseFilter) *ResponseFilterResponseBody {
	if v == nil {
		return nil
	}
	res := &ResponseFilterResponseBody{
		Type: v.Type,
	}
	if v.StatusCodes != nil {
		res.StatusCodes = make([]string, len(v.StatusCodes))
		for i, val := range v.StatusCodes {
			res.StatusCodes[i] = val
		}
	} else {
		res.StatusCodes = []string{}
	}
	if v.ContentTypes != nil {
		res.ContentTypes = make([]string, len(v.ContentTypes))
		for i, val := range v.ContentTypes {
			res.ContentTypes[i] = val
		}
	} else {
		res.ContentTypes = []string{}
	}

	return res
}

// marshalTypesCanonicalToolAttributesToCanonicalToolAttributesResponseBody
// builds a value of type *CanonicalToolAttributesResponseBody from a value of
// type *types.CanonicalToolAttributes.
func marshalTypesCanonicalToolAttributesToCanonicalToolAttributesResponseBody(v *types.CanonicalToolAttributes) *CanonicalToolAttributesResponseBody {
	if v == nil {
		return nil
	}
	res := &CanonicalToolAttributesResponseBody{
		VariationID:   v.VariationID,
		Name:          v.Name,
		Summary:       v.Summary,
		Description:   v.Description,
		Confirm:       v.Confirm,
		ConfirmPrompt: v.ConfirmPrompt,
		Summarizer:    v.Summarizer,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}

	return res
}

// marshalTypesToolVariationToToolVariationResponseBody builds a value of type
// *ToolVariationResponseBody from a value of type *types.ToolVariation.
func marshalTypesToolVariationToToolVariationResponseBody(v *types.ToolVariation) *ToolVariationResponseBody {
	if v == nil {
		return nil
	}
	res := &ToolVariationResponseBody{
		ID:            v.ID,
		GroupID:       v.GroupID,
		SrcToolName:   v.SrcToolName,
		Confirm:       v.Confirm,
		ConfirmPrompt: v.ConfirmPrompt,
		Name:          v.Name,
		Summary:       v.Summary,
		Description:   v.Description,
		Summarizer:    v.Summarizer,
		CreatedAt:     v.CreatedAt,
		UpdatedAt:     v.UpdatedAt,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}

	return res
}
