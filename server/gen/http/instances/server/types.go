// Code generated by goa v3.22.2, DO NOT EDIT.
//
// instances HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	instances "github.com/speakeasy-api/gram/server/gen/instances"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
)

// GetInstanceResponseBody is the type of the "instances" service "getInstance"
// endpoint HTTP response body.
type GetInstanceResponseBody struct {
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// The description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The list of tools
	Tools []*HTTPToolDefinitionResponseBody `form:"tools" json:"tools" xml:"tools"`
	// The list of prompt templates
	PromptTemplates []*PromptTemplateResponseBody `form:"prompt_templates,omitempty" json:"prompt_templates,omitempty" xml:"prompt_templates,omitempty"`
	// The security variables that are relevant to the toolset
	SecurityVariables []*SecurityVariableResponseBody `form:"security_variables,omitempty" json:"security_variables,omitempty" xml:"security_variables,omitempty"`
	// The server variables that are relevant to the toolset
	ServerVariables []*ServerVariableResponseBody `form:"server_variables,omitempty" json:"server_variables,omitempty" xml:"server_variables,omitempty"`
	// The environment
	Environment *EnvironmentResponseBody `form:"environment" json:"environment" xml:"environment"`
}

// GetInstanceUnauthorizedResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "unauthorized" error.
type GetInstanceUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceForbiddenResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "forbidden" error.
type GetInstanceForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceBadRequestResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "bad_request" error.
type GetInstanceBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceNotFoundResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "not_found" error.
type GetInstanceNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceConflictResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "conflict" error.
type GetInstanceConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceUnsupportedMediaResponseBody is the type of the "instances"
// service "getInstance" endpoint HTTP response body for the
// "unsupported_media" error.
type GetInstanceUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceInvalidResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "invalid" error.
type GetInstanceInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceInvariantViolationResponseBody is the type of the "instances"
// service "getInstance" endpoint HTTP response body for the
// "invariant_violation" error.
type GetInstanceInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceUnexpectedResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "unexpected" error.
type GetInstanceUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceGatewayErrorResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "gateway_error" error.
type GetInstanceGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// HTTPToolDefinitionResponseBody is used to define fields on response body
// types.
type HTTPToolDefinitionResponseBody struct {
	// The ID of the HTTP tool
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the project
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The ID of the deployment
	DeploymentID string `form:"deployment_id" json:"deployment_id" xml:"deployment_id"`
	// The name of the tool
	Name string `form:"name" json:"name" xml:"name"`
	// The canonical name of the tool. Will be the same as the name if there is no
	// variation.
	CanonicalName string `form:"canonical_name" json:"canonical_name" xml:"canonical_name"`
	// Summary of the tool
	Summary string `form:"summary" json:"summary" xml:"summary"`
	// Description of the tool
	Description string `form:"description" json:"description" xml:"description"`
	// Confirmation mode for the tool
	Confirm string `form:"confirm" json:"confirm" xml:"confirm"`
	// Prompt for the confirmation
	ConfirmPrompt *string `form:"confirm_prompt,omitempty" json:"confirm_prompt,omitempty" xml:"confirm_prompt,omitempty"`
	// Summarizer for the tool
	Summarizer *string `form:"summarizer,omitempty" json:"summarizer,omitempty" xml:"summarizer,omitempty"`
	// Response filter metadata for the tool
	ResponseFilter *ResponseFilterResponseBody `form:"response_filter,omitempty" json:"response_filter,omitempty" xml:"response_filter,omitempty"`
	// The ID of the OpenAPI v3 document
	Openapiv3DocumentID *string `form:"openapiv3_document_id,omitempty" json:"openapiv3_document_id,omitempty" xml:"openapiv3_document_id,omitempty"`
	// OpenAPI v3 operation
	Openapiv3Operation *string `form:"openapiv3_operation,omitempty" json:"openapiv3_operation,omitempty" xml:"openapiv3_operation,omitempty"`
	// The tags list for this http tool
	Tags []string `form:"tags" json:"tags" xml:"tags"`
	// Security requirements for the underlying HTTP endpoint
	Security *string `form:"security,omitempty" json:"security,omitempty" xml:"security,omitempty"`
	// The default server URL for the tool
	DefaultServerURL *string `form:"default_server_url,omitempty" json:"default_server_url,omitempty" xml:"default_server_url,omitempty"`
	// HTTP method for the request
	HTTPMethod string `form:"http_method" json:"http_method" xml:"http_method"`
	// Path for the request
	Path string `form:"path" json:"path" xml:"path"`
	// Version of the schema
	SchemaVersion *string `form:"schema_version,omitempty" json:"schema_version,omitempty" xml:"schema_version,omitempty"`
	// JSON schema for the request
	Schema string `form:"schema" json:"schema" xml:"schema"`
	// The name of the source package
	PackageName *string `form:"package_name,omitempty" json:"package_name,omitempty" xml:"package_name,omitempty"`
	// The creation date of the tool.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the tool.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
	// The original details of a tool, excluding any variations
	Canonical *CanonicalToolAttributesResponseBody `form:"canonical,omitempty" json:"canonical,omitempty" xml:"canonical,omitempty"`
	// The variation details of a tool. Only includes explicitly varied fields.
	Variation *ToolVariationResponseBody `form:"variation,omitempty" json:"variation,omitempty" xml:"variation,omitempty"`
}

// ResponseFilterResponseBody is used to define fields on response body types.
type ResponseFilterResponseBody struct {
	// Response filter type for the tool
	Type string `form:"type" json:"type" xml:"type"`
	// Status codes to filter for
	StatusCodes []string `form:"status_codes" json:"status_codes" xml:"status_codes"`
	// Content types to filter for
	ContentTypes []string `form:"content_types" json:"content_types" xml:"content_types"`
}

// CanonicalToolAttributesResponseBody is used to define fields on response
// body types.
type CanonicalToolAttributesResponseBody struct {
	// The ID of the variation that was applied to the tool
	VariationID string `form:"variation_id" json:"variation_id" xml:"variation_id"`
	// The name of the tool
	Name string `form:"name" json:"name" xml:"name"`
	// Summary of the tool
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// Description of the tool
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Confirmation mode for the tool
	Confirm *string `form:"confirm,omitempty" json:"confirm,omitempty" xml:"confirm,omitempty"`
	// Prompt for the confirmation
	ConfirmPrompt *string `form:"confirm_prompt,omitempty" json:"confirm_prompt,omitempty" xml:"confirm_prompt,omitempty"`
	// Summarizer for the tool
	Summarizer *string `form:"summarizer,omitempty" json:"summarizer,omitempty" xml:"summarizer,omitempty"`
	// The tags list for this http tool
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// ToolVariationResponseBody is used to define fields on response body types.
type ToolVariationResponseBody struct {
	// The ID of the tool variation
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the tool variation group
	GroupID string `form:"group_id" json:"group_id" xml:"group_id"`
	// The name of the source tool
	SrcToolName string `form:"src_tool_name" json:"src_tool_name" xml:"src_tool_name"`
	// The confirmation mode for the tool variation
	Confirm *string `form:"confirm,omitempty" json:"confirm,omitempty" xml:"confirm,omitempty"`
	// The confirmation prompt for the tool variation
	ConfirmPrompt *string `form:"confirm_prompt,omitempty" json:"confirm_prompt,omitempty" xml:"confirm_prompt,omitempty"`
	// The name of the tool variation
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The summary of the tool variation
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// The description of the tool variation
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The tags of the tool variation
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// The summarizer of the tool variation
	Summarizer *string `form:"summarizer,omitempty" json:"summarizer,omitempty" xml:"summarizer,omitempty"`
	// The creation date of the tool variation
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the tool variation
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// PromptTemplateResponseBody is used to define fields on response body types.
type PromptTemplateResponseBody struct {
	// The ID of the prompt template
	ID string `form:"id" json:"id" xml:"id"`
	// The revision tree ID for the prompt template
	HistoryID string `form:"history_id" json:"history_id" xml:"history_id"`
	// The previous version of the prompt template to use as predecessor
	PredecessorID *string `form:"predecessor_id,omitempty" json:"predecessor_id,omitempty" xml:"predecessor_id,omitempty"`
	// The name of the prompt template
	Name string `form:"name" json:"name" xml:"name"`
	// The template content
	Prompt string `form:"prompt" json:"prompt" xml:"prompt"`
	// The description of the prompt template
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The JSON Schema defining the placeholders found in the prompt template
	Arguments *string `form:"arguments,omitempty" json:"arguments,omitempty" xml:"arguments,omitempty"`
	// The template engine
	Engine string `form:"engine" json:"engine" xml:"engine"`
	// The kind of prompt the template is used for
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// The suggested tool names associated with the prompt template
	ToolsHint []string `form:"tools_hint" json:"tools_hint" xml:"tools_hint"`
	// The creation date of the prompt template.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the prompt template.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// SecurityVariableResponseBody is used to define fields on response body types.
type SecurityVariableResponseBody struct {
	// The type of security
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// The name of the security scheme
	Name string `form:"name" json:"name" xml:"name"`
	// Where the security token is placed
	InPlacement string `form:"in_placement" json:"in_placement" xml:"in_placement"`
	// The security scheme
	Scheme string `form:"scheme" json:"scheme" xml:"scheme"`
	// The bearer format
	BearerFormat *string `form:"bearer_format,omitempty" json:"bearer_format,omitempty" xml:"bearer_format,omitempty"`
	// The OAuth types
	OauthTypes []string `form:"oauth_types,omitempty" json:"oauth_types,omitempty" xml:"oauth_types,omitempty"`
	// The OAuth flows
	OauthFlows []byte `form:"oauth_flows,omitempty" json:"oauth_flows,omitempty" xml:"oauth_flows,omitempty"`
	// The environment variables
	EnvVariables []string `form:"env_variables" json:"env_variables" xml:"env_variables"`
}

// ServerVariableResponseBody is used to define fields on response body types.
type ServerVariableResponseBody struct {
	// Description of the server variable
	Description string `form:"description" json:"description" xml:"description"`
	// The environment variables
	EnvVariables []string `form:"env_variables" json:"env_variables" xml:"env_variables"`
}

// EnvironmentResponseBody is used to define fields on response body types.
type EnvironmentResponseBody struct {
	// The ID of the environment
	ID string `form:"id" json:"id" xml:"id"`
	// The organization ID this environment belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The project ID this environment belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The name of the environment
	Name string `form:"name" json:"name" xml:"name"`
	// The slug identifier for the environment
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment entries
	Entries []*EnvironmentEntryResponseBody `form:"entries" json:"entries" xml:"entries"`
	// The creation date of the environment
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// EnvironmentEntryResponseBody is used to define fields on response body types.
type EnvironmentEntryResponseBody struct {
	// The name of the environment variable
	Name string `form:"name" json:"name" xml:"name"`
	// Redacted values of the environment variable
	Value string `form:"value" json:"value" xml:"value"`
	// The creation date of the environment entry
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment entry was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewGetInstanceResponseBody builds the HTTP response body from the result of
// the "getInstance" endpoint of the "instances" service.
func NewGetInstanceResponseBody(res *instances.GetInstanceResult) *GetInstanceResponseBody {
	body := &GetInstanceResponseBody{
		Name:        res.Name,
		Description: res.Description,
	}
	if res.Tools != nil {
		body.Tools = make([]*HTTPToolDefinitionResponseBody, len(res.Tools))
		for i, val := range res.Tools {
			body.Tools[i] = marshalTypesHTTPToolDefinitionToHTTPToolDefinitionResponseBody(val)
		}
	} else {
		body.Tools = []*HTTPToolDefinitionResponseBody{}
	}
	if res.PromptTemplates != nil {
		body.PromptTemplates = make([]*PromptTemplateResponseBody, len(res.PromptTemplates))
		for i, val := range res.PromptTemplates {
			body.PromptTemplates[i] = marshalTypesPromptTemplateToPromptTemplateResponseBody(val)
		}
	}
	if res.SecurityVariables != nil {
		body.SecurityVariables = make([]*SecurityVariableResponseBody, len(res.SecurityVariables))
		for i, val := range res.SecurityVariables {
			body.SecurityVariables[i] = marshalTypesSecurityVariableToSecurityVariableResponseBody(val)
		}
	}
	if res.ServerVariables != nil {
		body.ServerVariables = make([]*ServerVariableResponseBody, len(res.ServerVariables))
		for i, val := range res.ServerVariables {
			body.ServerVariables[i] = marshalTypesServerVariableToServerVariableResponseBody(val)
		}
	}
	if res.Environment != nil {
		body.Environment = marshalTypesEnvironmentToEnvironmentResponseBody(res.Environment)
	}
	return body
}

// NewGetInstanceUnauthorizedResponseBody builds the HTTP response body from
// the result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceUnauthorizedResponseBody(res *goa.ServiceError) *GetInstanceUnauthorizedResponseBody {
	body := &GetInstanceUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceForbiddenResponseBody builds the HTTP response body from the
// result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceForbiddenResponseBody(res *goa.ServiceError) *GetInstanceForbiddenResponseBody {
	body := &GetInstanceForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceBadRequestResponseBody builds the HTTP response body from the
// result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceBadRequestResponseBody(res *goa.ServiceError) *GetInstanceBadRequestResponseBody {
	body := &GetInstanceBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceNotFoundResponseBody builds the HTTP response body from the
// result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceNotFoundResponseBody(res *goa.ServiceError) *GetInstanceNotFoundResponseBody {
	body := &GetInstanceNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceConflictResponseBody builds the HTTP response body from the
// result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceConflictResponseBody(res *goa.ServiceError) *GetInstanceConflictResponseBody {
	body := &GetInstanceConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceUnsupportedMediaResponseBody(res *goa.ServiceError) *GetInstanceUnsupportedMediaResponseBody {
	body := &GetInstanceUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceInvalidResponseBody builds the HTTP response body from the
// result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceInvalidResponseBody(res *goa.ServiceError) *GetInstanceInvalidResponseBody {
	body := &GetInstanceInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceInvariantViolationResponseBody builds the HTTP response body
// from the result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceInvariantViolationResponseBody(res *goa.ServiceError) *GetInstanceInvariantViolationResponseBody {
	body := &GetInstanceInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceUnexpectedResponseBody builds the HTTP response body from the
// result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceUnexpectedResponseBody(res *goa.ServiceError) *GetInstanceUnexpectedResponseBody {
	body := &GetInstanceUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceGatewayErrorResponseBody builds the HTTP response body from
// the result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceGatewayErrorResponseBody(res *goa.ServiceError) *GetInstanceGatewayErrorResponseBody {
	body := &GetInstanceGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceForm builds a instances service getInstance endpoint payload.
func NewGetInstanceForm(toolsetSlug string, environmentSlug *string, sessionToken *string, projectSlugInput *string, apikeyToken *string) *instances.GetInstanceForm {
	v := &instances.GetInstanceForm{}
	v.ToolsetSlug = types.Slug(toolsetSlug)
	if environmentSlug != nil {
		tmpenvironmentSlug := types.Slug(*environmentSlug)
		v.EnvironmentSlug = &tmpenvironmentSlug
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput
	v.ApikeyToken = apikeyToken

	return v
}
