// Code generated by goa v3.22.2, DO NOT EDIT.
//
// instances HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"unicode/utf8"

	instances "github.com/speakeasy-api/gram/server/gen/instances"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetInstancePayload builds the payload for the instances getInstance
// endpoint from CLI flags.
func BuildGetInstancePayload(instancesGetInstanceToolsetSlug string, instancesGetInstanceEnvironmentSlug string, instancesGetInstanceSessionToken string, instancesGetInstanceProjectSlugInput string, instancesGetInstanceApikeyToken string) (*instances.GetInstanceForm, error) {
	var err error
	var toolsetSlug string
	{
		toolsetSlug = instancesGetInstanceToolsetSlug
		err = goa.MergeErrors(err, goa.ValidatePattern("toolset_slug", toolsetSlug, "^[a-z0-9]+(?:[a-z0-9_-]*[a-z0-9])?$"))
		if utf8.RuneCountInString(toolsetSlug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("toolset_slug", toolsetSlug, utf8.RuneCountInString(toolsetSlug), 40, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var environmentSlug *string
	{
		if instancesGetInstanceEnvironmentSlug != "" {
			environmentSlug = &instancesGetInstanceEnvironmentSlug
			err = goa.MergeErrors(err, goa.ValidatePattern("environment_slug", *environmentSlug, "^[a-z0-9]+(?:[a-z0-9_-]*[a-z0-9])?$"))
			if utf8.RuneCountInString(*environmentSlug) > 40 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("environment_slug", *environmentSlug, utf8.RuneCountInString(*environmentSlug), 40, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var sessionToken *string
	{
		if instancesGetInstanceSessionToken != "" {
			sessionToken = &instancesGetInstanceSessionToken
		}
	}
	var projectSlugInput *string
	{
		if instancesGetInstanceProjectSlugInput != "" {
			projectSlugInput = &instancesGetInstanceProjectSlugInput
		}
	}
	var apikeyToken *string
	{
		if instancesGetInstanceApikeyToken != "" {
			apikeyToken = &instancesGetInstanceApikeyToken
		}
	}
	v := &instances.GetInstanceForm{}
	v.ToolsetSlug = types.Slug(toolsetSlug)
	if environmentSlug != nil {
		tmpenvironmentSlug := types.Slug(*environmentSlug)
		v.EnvironmentSlug = &tmpenvironmentSlug
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput
	v.ApikeyToken = apikeyToken

	return v, nil
}
