// Code generated by goa v3.22.2, DO NOT EDIT.
//
// instances HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	instances "github.com/speakeasy-api/gram/server/gen/instances"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetInstanceRequest instantiates a HTTP request object with method and
// path set to call the "instances" service "getInstance" endpoint
func (c *Client) BuildGetInstanceRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetInstanceInstancesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("instances", "getInstance", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetInstanceRequest returns an encoder for requests sent to the
// instances getInstance server.
func EncodeGetInstanceRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*instances.GetInstanceForm)
		if !ok {
			return goahttp.ErrInvalidType("instances", "getInstance", "*instances.GetInstanceForm", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		values := req.URL.Query()
		values.Add("toolset_slug", string(p.ToolsetSlug))
		if p.EnvironmentSlug != nil {
			values.Add("environment_slug", string(*p.EnvironmentSlug))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetInstanceResponse returns a decoder for responses returned by the
// instances getInstance endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetInstanceResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeGetInstanceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetInstanceResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("instances", "getInstance", err)
			}
			err = ValidateGetInstanceResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("instances", "getInstance", err)
			}
			res := NewGetInstanceResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetInstanceUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("instances", "getInstance", err)
			}
			err = ValidateGetInstanceUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("instances", "getInstance", err)
			}
			return nil, NewGetInstanceUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetInstanceForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("instances", "getInstance", err)
			}
			err = ValidateGetInstanceForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("instances", "getInstance", err)
			}
			return nil, NewGetInstanceForbidden(&body)
		case http.StatusBadRequest:
			var (
				body GetInstanceBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("instances", "getInstance", err)
			}
			err = ValidateGetInstanceBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("instances", "getInstance", err)
			}
			return nil, NewGetInstanceBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetInstanceNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("instances", "getInstance", err)
			}
			err = ValidateGetInstanceNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("instances", "getInstance", err)
			}
			return nil, NewGetInstanceNotFound(&body)
		case http.StatusConflict:
			var (
				body GetInstanceConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("instances", "getInstance", err)
			}
			err = ValidateGetInstanceConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("instances", "getInstance", err)
			}
			return nil, NewGetInstanceConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body GetInstanceUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("instances", "getInstance", err)
			}
			err = ValidateGetInstanceUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("instances", "getInstance", err)
			}
			return nil, NewGetInstanceUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body GetInstanceInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("instances", "getInstance", err)
			}
			err = ValidateGetInstanceInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("instances", "getInstance", err)
			}
			return nil, NewGetInstanceInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body GetInstanceInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("instances", "getInstance", err)
				}
				err = ValidateGetInstanceInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("instances", "getInstance", err)
				}
				return nil, NewGetInstanceInvariantViolation(&body)
			case "unexpected":
				var (
					body GetInstanceUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("instances", "getInstance", err)
				}
				err = ValidateGetInstanceUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("instances", "getInstance", err)
				}
				return nil, NewGetInstanceUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("instances", "getInstance", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body GetInstanceGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("instances", "getInstance", err)
			}
			err = ValidateGetInstanceGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("instances", "getInstance", err)
			}
			return nil, NewGetInstanceGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("instances", "getInstance", resp.StatusCode, string(body))
		}
	}
}

// unmarshalHTTPToolDefinitionResponseBodyToTypesHTTPToolDefinition builds a
// value of type *types.HTTPToolDefinition from a value of type
// *HTTPToolDefinitionResponseBody.
func unmarshalHTTPToolDefinitionResponseBodyToTypesHTTPToolDefinition(v *HTTPToolDefinitionResponseBody) *types.HTTPToolDefinition {
	res := &types.HTTPToolDefinition{
		ID:                  *v.ID,
		ProjectID:           *v.ProjectID,
		DeploymentID:        *v.DeploymentID,
		Name:                *v.Name,
		CanonicalName:       *v.CanonicalName,
		Summary:             *v.Summary,
		Description:         *v.Description,
		Confirm:             *v.Confirm,
		ConfirmPrompt:       v.ConfirmPrompt,
		Summarizer:          v.Summarizer,
		Openapiv3DocumentID: v.Openapiv3DocumentID,
		Openapiv3Operation:  v.Openapiv3Operation,
		Security:            v.Security,
		DefaultServerURL:    v.DefaultServerURL,
		HTTPMethod:          *v.HTTPMethod,
		Path:                *v.Path,
		SchemaVersion:       v.SchemaVersion,
		Schema:              *v.Schema,
		PackageName:         v.PackageName,
		CreatedAt:           *v.CreatedAt,
		UpdatedAt:           *v.UpdatedAt,
	}
	if v.ResponseFilter != nil {
		res.ResponseFilter = unmarshalResponseFilterResponseBodyToTypesResponseFilter(v.ResponseFilter)
	}
	res.Tags = make([]string, len(v.Tags))
	for i, val := range v.Tags {
		res.Tags[i] = val
	}
	if v.Canonical != nil {
		res.Canonical = unmarshalCanonicalToolAttributesResponseBodyToTypesCanonicalToolAttributes(v.Canonical)
	}
	if v.Variation != nil {
		res.Variation = unmarshalToolVariationResponseBodyToTypesToolVariation(v.Variation)
	}

	return res
}

// unmarshalResponseFilterResponseBodyToTypesResponseFilter builds a value of
// type *types.ResponseFilter from a value of type *ResponseFilterResponseBody.
func unmarshalResponseFilterResponseBodyToTypesResponseFilter(v *ResponseFilterResponseBody) *types.ResponseFilter {
	if v == nil {
		return nil
	}
	res := &types.ResponseFilter{
		Type: *v.Type,
	}
	res.StatusCodes = make([]string, len(v.StatusCodes))
	for i, val := range v.StatusCodes {
		res.StatusCodes[i] = val
	}
	res.ContentTypes = make([]string, len(v.ContentTypes))
	for i, val := range v.ContentTypes {
		res.ContentTypes[i] = val
	}

	return res
}

// unmarshalCanonicalToolAttributesResponseBodyToTypesCanonicalToolAttributes
// builds a value of type *types.CanonicalToolAttributes from a value of type
// *CanonicalToolAttributesResponseBody.
func unmarshalCanonicalToolAttributesResponseBodyToTypesCanonicalToolAttributes(v *CanonicalToolAttributesResponseBody) *types.CanonicalToolAttributes {
	if v == nil {
		return nil
	}
	res := &types.CanonicalToolAttributes{
		VariationID:   *v.VariationID,
		Name:          *v.Name,
		Summary:       v.Summary,
		Description:   v.Description,
		Confirm:       v.Confirm,
		ConfirmPrompt: v.ConfirmPrompt,
		Summarizer:    v.Summarizer,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}

	return res
}

// unmarshalToolVariationResponseBodyToTypesToolVariation builds a value of
// type *types.ToolVariation from a value of type *ToolVariationResponseBody.
func unmarshalToolVariationResponseBodyToTypesToolVariation(v *ToolVariationResponseBody) *types.ToolVariation {
	if v == nil {
		return nil
	}
	res := &types.ToolVariation{
		ID:            *v.ID,
		GroupID:       *v.GroupID,
		SrcToolName:   *v.SrcToolName,
		Confirm:       v.Confirm,
		ConfirmPrompt: v.ConfirmPrompt,
		Name:          v.Name,
		Summary:       v.Summary,
		Description:   v.Description,
		Summarizer:    v.Summarizer,
		CreatedAt:     *v.CreatedAt,
		UpdatedAt:     *v.UpdatedAt,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}

	return res
}

// unmarshalPromptTemplateResponseBodyToTypesPromptTemplate builds a value of
// type *types.PromptTemplate from a value of type *PromptTemplateResponseBody.
func unmarshalPromptTemplateResponseBodyToTypesPromptTemplate(v *PromptTemplateResponseBody) *types.PromptTemplate {
	if v == nil {
		return nil
	}
	res := &types.PromptTemplate{
		ID:            *v.ID,
		HistoryID:     *v.HistoryID,
		PredecessorID: v.PredecessorID,
		Name:          types.Slug(*v.Name),
		Prompt:        *v.Prompt,
		Description:   v.Description,
		Arguments:     v.Arguments,
		Engine:        *v.Engine,
		Kind:          *v.Kind,
		CreatedAt:     *v.CreatedAt,
		UpdatedAt:     *v.UpdatedAt,
	}
	res.ToolsHint = make([]string, len(v.ToolsHint))
	for i, val := range v.ToolsHint {
		res.ToolsHint[i] = val
	}

	return res
}

// unmarshalSecurityVariableResponseBodyToTypesSecurityVariable builds a value
// of type *types.SecurityVariable from a value of type
// *SecurityVariableResponseBody.
func unmarshalSecurityVariableResponseBodyToTypesSecurityVariable(v *SecurityVariableResponseBody) *types.SecurityVariable {
	if v == nil {
		return nil
	}
	res := &types.SecurityVariable{
		Type:         v.Type,
		Name:         *v.Name,
		InPlacement:  *v.InPlacement,
		Scheme:       *v.Scheme,
		BearerFormat: v.BearerFormat,
		OauthFlows:   v.OauthFlows,
	}
	if v.OauthTypes != nil {
		res.OauthTypes = make([]string, len(v.OauthTypes))
		for i, val := range v.OauthTypes {
			res.OauthTypes[i] = val
		}
	}
	res.EnvVariables = make([]string, len(v.EnvVariables))
	for i, val := range v.EnvVariables {
		res.EnvVariables[i] = val
	}

	return res
}

// unmarshalServerVariableResponseBodyToTypesServerVariable builds a value of
// type *types.ServerVariable from a value of type *ServerVariableResponseBody.
func unmarshalServerVariableResponseBodyToTypesServerVariable(v *ServerVariableResponseBody) *types.ServerVariable {
	if v == nil {
		return nil
	}
	res := &types.ServerVariable{
		Description: *v.Description,
	}
	res.EnvVariables = make([]string, len(v.EnvVariables))
	for i, val := range v.EnvVariables {
		res.EnvVariables[i] = val
	}

	return res
}

// unmarshalEnvironmentResponseBodyToTypesEnvironment builds a value of type
// *types.Environment from a value of type *EnvironmentResponseBody.
func unmarshalEnvironmentResponseBodyToTypesEnvironment(v *EnvironmentResponseBody) *types.Environment {
	res := &types.Environment{
		ID:             *v.ID,
		OrganizationID: *v.OrganizationID,
		ProjectID:      *v.ProjectID,
		Name:           *v.Name,
		Slug:           types.Slug(*v.Slug),
		Description:    v.Description,
		CreatedAt:      *v.CreatedAt,
		UpdatedAt:      *v.UpdatedAt,
	}
	res.Entries = make([]*types.EnvironmentEntry, len(v.Entries))
	for i, val := range v.Entries {
		res.Entries[i] = unmarshalEnvironmentEntryResponseBodyToTypesEnvironmentEntry(val)
	}

	return res
}

// unmarshalEnvironmentEntryResponseBodyToTypesEnvironmentEntry builds a value
// of type *types.EnvironmentEntry from a value of type
// *EnvironmentEntryResponseBody.
func unmarshalEnvironmentEntryResponseBodyToTypesEnvironmentEntry(v *EnvironmentEntryResponseBody) *types.EnvironmentEntry {
	res := &types.EnvironmentEntry{
		Name:      *v.Name,
		Value:     *v.Value,
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
	}

	return res
}
