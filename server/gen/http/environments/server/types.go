// Code generated by goa v3.22.2, DO NOT EDIT.
//
// environments HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	environments "github.com/speakeasy-api/gram/server/gen/environments"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
)

// CreateEnvironmentRequestBody is the type of the "environments" service
// "createEnvironment" endpoint HTTP request body.
type CreateEnvironmentRequestBody struct {
	// The organization ID this environment belongs to
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The name of the environment
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Optional description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment variable entries
	Entries []*EnvironmentEntryInputRequestBody `form:"entries,omitempty" json:"entries,omitempty" xml:"entries,omitempty"`
}

// UpdateEnvironmentRequestBody is the type of the "environments" service
// "updateEnvironment" endpoint HTTP request body.
type UpdateEnvironmentRequestBody struct {
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The name of the environment
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// List of environment entries to update or create
	EntriesToUpdate []*EnvironmentEntryInputRequestBody `form:"entries_to_update,omitempty" json:"entries_to_update,omitempty" xml:"entries_to_update,omitempty"`
	// List of environment entry names to remove
	EntriesToRemove []string `form:"entries_to_remove,omitempty" json:"entries_to_remove,omitempty" xml:"entries_to_remove,omitempty"`
}

// CreateEnvironmentResponseBody is the type of the "environments" service
// "createEnvironment" endpoint HTTP response body.
type CreateEnvironmentResponseBody struct {
	// The ID of the environment
	ID string `form:"id" json:"id" xml:"id"`
	// The organization ID this environment belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The project ID this environment belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The name of the environment
	Name string `form:"name" json:"name" xml:"name"`
	// The slug identifier for the environment
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment entries
	Entries []*EnvironmentEntryResponseBody `form:"entries" json:"entries" xml:"entries"`
	// The creation date of the environment
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ListEnvironmentsResponseBody is the type of the "environments" service
// "listEnvironments" endpoint HTTP response body.
type ListEnvironmentsResponseBody struct {
	Environments []*EnvironmentResponseBody `form:"environments" json:"environments" xml:"environments"`
}

// UpdateEnvironmentResponseBody is the type of the "environments" service
// "updateEnvironment" endpoint HTTP response body.
type UpdateEnvironmentResponseBody struct {
	// The ID of the environment
	ID string `form:"id" json:"id" xml:"id"`
	// The organization ID this environment belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The project ID this environment belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The name of the environment
	Name string `form:"name" json:"name" xml:"name"`
	// The slug identifier for the environment
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment entries
	Entries []*EnvironmentEntryResponseBody `form:"entries" json:"entries" xml:"entries"`
	// The creation date of the environment
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// CreateEnvironmentUnauthorizedResponseBody is the type of the "environments"
// service "createEnvironment" endpoint HTTP response body for the
// "unauthorized" error.
type CreateEnvironmentUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateEnvironmentForbiddenResponseBody is the type of the "environments"
// service "createEnvironment" endpoint HTTP response body for the "forbidden"
// error.
type CreateEnvironmentForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateEnvironmentBadRequestResponseBody is the type of the "environments"
// service "createEnvironment" endpoint HTTP response body for the
// "bad_request" error.
type CreateEnvironmentBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateEnvironmentNotFoundResponseBody is the type of the "environments"
// service "createEnvironment" endpoint HTTP response body for the "not_found"
// error.
type CreateEnvironmentNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateEnvironmentConflictResponseBody is the type of the "environments"
// service "createEnvironment" endpoint HTTP response body for the "conflict"
// error.
type CreateEnvironmentConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateEnvironmentUnsupportedMediaResponseBody is the type of the
// "environments" service "createEnvironment" endpoint HTTP response body for
// the "unsupported_media" error.
type CreateEnvironmentUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateEnvironmentInvalidResponseBody is the type of the "environments"
// service "createEnvironment" endpoint HTTP response body for the "invalid"
// error.
type CreateEnvironmentInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateEnvironmentInvariantViolationResponseBody is the type of the
// "environments" service "createEnvironment" endpoint HTTP response body for
// the "invariant_violation" error.
type CreateEnvironmentInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateEnvironmentUnexpectedResponseBody is the type of the "environments"
// service "createEnvironment" endpoint HTTP response body for the "unexpected"
// error.
type CreateEnvironmentUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateEnvironmentGatewayErrorResponseBody is the type of the "environments"
// service "createEnvironment" endpoint HTTP response body for the
// "gateway_error" error.
type CreateEnvironmentGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListEnvironmentsUnauthorizedResponseBody is the type of the "environments"
// service "listEnvironments" endpoint HTTP response body for the
// "unauthorized" error.
type ListEnvironmentsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListEnvironmentsForbiddenResponseBody is the type of the "environments"
// service "listEnvironments" endpoint HTTP response body for the "forbidden"
// error.
type ListEnvironmentsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListEnvironmentsBadRequestResponseBody is the type of the "environments"
// service "listEnvironments" endpoint HTTP response body for the "bad_request"
// error.
type ListEnvironmentsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListEnvironmentsNotFoundResponseBody is the type of the "environments"
// service "listEnvironments" endpoint HTTP response body for the "not_found"
// error.
type ListEnvironmentsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListEnvironmentsConflictResponseBody is the type of the "environments"
// service "listEnvironments" endpoint HTTP response body for the "conflict"
// error.
type ListEnvironmentsConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListEnvironmentsUnsupportedMediaResponseBody is the type of the
// "environments" service "listEnvironments" endpoint HTTP response body for
// the "unsupported_media" error.
type ListEnvironmentsUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListEnvironmentsInvalidResponseBody is the type of the "environments"
// service "listEnvironments" endpoint HTTP response body for the "invalid"
// error.
type ListEnvironmentsInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListEnvironmentsInvariantViolationResponseBody is the type of the
// "environments" service "listEnvironments" endpoint HTTP response body for
// the "invariant_violation" error.
type ListEnvironmentsInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListEnvironmentsUnexpectedResponseBody is the type of the "environments"
// service "listEnvironments" endpoint HTTP response body for the "unexpected"
// error.
type ListEnvironmentsUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListEnvironmentsGatewayErrorResponseBody is the type of the "environments"
// service "listEnvironments" endpoint HTTP response body for the
// "gateway_error" error.
type ListEnvironmentsGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateEnvironmentUnauthorizedResponseBody is the type of the "environments"
// service "updateEnvironment" endpoint HTTP response body for the
// "unauthorized" error.
type UpdateEnvironmentUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateEnvironmentForbiddenResponseBody is the type of the "environments"
// service "updateEnvironment" endpoint HTTP response body for the "forbidden"
// error.
type UpdateEnvironmentForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateEnvironmentBadRequestResponseBody is the type of the "environments"
// service "updateEnvironment" endpoint HTTP response body for the
// "bad_request" error.
type UpdateEnvironmentBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateEnvironmentNotFoundResponseBody is the type of the "environments"
// service "updateEnvironment" endpoint HTTP response body for the "not_found"
// error.
type UpdateEnvironmentNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateEnvironmentConflictResponseBody is the type of the "environments"
// service "updateEnvironment" endpoint HTTP response body for the "conflict"
// error.
type UpdateEnvironmentConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateEnvironmentUnsupportedMediaResponseBody is the type of the
// "environments" service "updateEnvironment" endpoint HTTP response body for
// the "unsupported_media" error.
type UpdateEnvironmentUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateEnvironmentInvalidResponseBody is the type of the "environments"
// service "updateEnvironment" endpoint HTTP response body for the "invalid"
// error.
type UpdateEnvironmentInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateEnvironmentInvariantViolationResponseBody is the type of the
// "environments" service "updateEnvironment" endpoint HTTP response body for
// the "invariant_violation" error.
type UpdateEnvironmentInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateEnvironmentUnexpectedResponseBody is the type of the "environments"
// service "updateEnvironment" endpoint HTTP response body for the "unexpected"
// error.
type UpdateEnvironmentUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateEnvironmentGatewayErrorResponseBody is the type of the "environments"
// service "updateEnvironment" endpoint HTTP response body for the
// "gateway_error" error.
type UpdateEnvironmentGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteEnvironmentUnauthorizedResponseBody is the type of the "environments"
// service "deleteEnvironment" endpoint HTTP response body for the
// "unauthorized" error.
type DeleteEnvironmentUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteEnvironmentForbiddenResponseBody is the type of the "environments"
// service "deleteEnvironment" endpoint HTTP response body for the "forbidden"
// error.
type DeleteEnvironmentForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteEnvironmentBadRequestResponseBody is the type of the "environments"
// service "deleteEnvironment" endpoint HTTP response body for the
// "bad_request" error.
type DeleteEnvironmentBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteEnvironmentNotFoundResponseBody is the type of the "environments"
// service "deleteEnvironment" endpoint HTTP response body for the "not_found"
// error.
type DeleteEnvironmentNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteEnvironmentConflictResponseBody is the type of the "environments"
// service "deleteEnvironment" endpoint HTTP response body for the "conflict"
// error.
type DeleteEnvironmentConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteEnvironmentUnsupportedMediaResponseBody is the type of the
// "environments" service "deleteEnvironment" endpoint HTTP response body for
// the "unsupported_media" error.
type DeleteEnvironmentUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteEnvironmentInvalidResponseBody is the type of the "environments"
// service "deleteEnvironment" endpoint HTTP response body for the "invalid"
// error.
type DeleteEnvironmentInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteEnvironmentInvariantViolationResponseBody is the type of the
// "environments" service "deleteEnvironment" endpoint HTTP response body for
// the "invariant_violation" error.
type DeleteEnvironmentInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteEnvironmentUnexpectedResponseBody is the type of the "environments"
// service "deleteEnvironment" endpoint HTTP response body for the "unexpected"
// error.
type DeleteEnvironmentUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteEnvironmentGatewayErrorResponseBody is the type of the "environments"
// service "deleteEnvironment" endpoint HTTP response body for the
// "gateway_error" error.
type DeleteEnvironmentGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EnvironmentEntryResponseBody is used to define fields on response body types.
type EnvironmentEntryResponseBody struct {
	// The name of the environment variable
	Name string `form:"name" json:"name" xml:"name"`
	// Redacted values of the environment variable
	Value string `form:"value" json:"value" xml:"value"`
	// The creation date of the environment entry
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment entry was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// EnvironmentResponseBody is used to define fields on response body types.
type EnvironmentResponseBody struct {
	// The ID of the environment
	ID string `form:"id" json:"id" xml:"id"`
	// The organization ID this environment belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The project ID this environment belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The name of the environment
	Name string `form:"name" json:"name" xml:"name"`
	// The slug identifier for the environment
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment entries
	Entries []*EnvironmentEntryResponseBody `form:"entries" json:"entries" xml:"entries"`
	// The creation date of the environment
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// EnvironmentEntryInputRequestBody is used to define fields on request body
// types.
type EnvironmentEntryInputRequestBody struct {
	// The name of the environment variable
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The value of the environment variable
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// NewCreateEnvironmentResponseBody builds the HTTP response body from the
// result of the "createEnvironment" endpoint of the "environments" service.
func NewCreateEnvironmentResponseBody(res *types.Environment) *CreateEnvironmentResponseBody {
	body := &CreateEnvironmentResponseBody{
		ID:             res.ID,
		OrganizationID: res.OrganizationID,
		ProjectID:      res.ProjectID,
		Name:           res.Name,
		Slug:           string(res.Slug),
		Description:    res.Description,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.Entries != nil {
		body.Entries = make([]*EnvironmentEntryResponseBody, len(res.Entries))
		for i, val := range res.Entries {
			body.Entries[i] = marshalTypesEnvironmentEntryToEnvironmentEntryResponseBody(val)
		}
	} else {
		body.Entries = []*EnvironmentEntryResponseBody{}
	}
	return body
}

// NewListEnvironmentsResponseBody builds the HTTP response body from the
// result of the "listEnvironments" endpoint of the "environments" service.
func NewListEnvironmentsResponseBody(res *environments.ListEnvironmentsResult) *ListEnvironmentsResponseBody {
	body := &ListEnvironmentsResponseBody{}
	if res.Environments != nil {
		body.Environments = make([]*EnvironmentResponseBody, len(res.Environments))
		for i, val := range res.Environments {
			body.Environments[i] = marshalTypesEnvironmentToEnvironmentResponseBody(val)
		}
	} else {
		body.Environments = []*EnvironmentResponseBody{}
	}
	return body
}

// NewUpdateEnvironmentResponseBody builds the HTTP response body from the
// result of the "updateEnvironment" endpoint of the "environments" service.
func NewUpdateEnvironmentResponseBody(res *types.Environment) *UpdateEnvironmentResponseBody {
	body := &UpdateEnvironmentResponseBody{
		ID:             res.ID,
		OrganizationID: res.OrganizationID,
		ProjectID:      res.ProjectID,
		Name:           res.Name,
		Slug:           string(res.Slug),
		Description:    res.Description,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.Entries != nil {
		body.Entries = make([]*EnvironmentEntryResponseBody, len(res.Entries))
		for i, val := range res.Entries {
			body.Entries[i] = marshalTypesEnvironmentEntryToEnvironmentEntryResponseBody(val)
		}
	} else {
		body.Entries = []*EnvironmentEntryResponseBody{}
	}
	return body
}

// NewCreateEnvironmentUnauthorizedResponseBody builds the HTTP response body
// from the result of the "createEnvironment" endpoint of the "environments"
// service.
func NewCreateEnvironmentUnauthorizedResponseBody(res *goa.ServiceError) *CreateEnvironmentUnauthorizedResponseBody {
	body := &CreateEnvironmentUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateEnvironmentForbiddenResponseBody builds the HTTP response body from
// the result of the "createEnvironment" endpoint of the "environments" service.
func NewCreateEnvironmentForbiddenResponseBody(res *goa.ServiceError) *CreateEnvironmentForbiddenResponseBody {
	body := &CreateEnvironmentForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateEnvironmentBadRequestResponseBody builds the HTTP response body
// from the result of the "createEnvironment" endpoint of the "environments"
// service.
func NewCreateEnvironmentBadRequestResponseBody(res *goa.ServiceError) *CreateEnvironmentBadRequestResponseBody {
	body := &CreateEnvironmentBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateEnvironmentNotFoundResponseBody builds the HTTP response body from
// the result of the "createEnvironment" endpoint of the "environments" service.
func NewCreateEnvironmentNotFoundResponseBody(res *goa.ServiceError) *CreateEnvironmentNotFoundResponseBody {
	body := &CreateEnvironmentNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateEnvironmentConflictResponseBody builds the HTTP response body from
// the result of the "createEnvironment" endpoint of the "environments" service.
func NewCreateEnvironmentConflictResponseBody(res *goa.ServiceError) *CreateEnvironmentConflictResponseBody {
	body := &CreateEnvironmentConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateEnvironmentUnsupportedMediaResponseBody builds the HTTP response
// body from the result of the "createEnvironment" endpoint of the
// "environments" service.
func NewCreateEnvironmentUnsupportedMediaResponseBody(res *goa.ServiceError) *CreateEnvironmentUnsupportedMediaResponseBody {
	body := &CreateEnvironmentUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateEnvironmentInvalidResponseBody builds the HTTP response body from
// the result of the "createEnvironment" endpoint of the "environments" service.
func NewCreateEnvironmentInvalidResponseBody(res *goa.ServiceError) *CreateEnvironmentInvalidResponseBody {
	body := &CreateEnvironmentInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateEnvironmentInvariantViolationResponseBody builds the HTTP response
// body from the result of the "createEnvironment" endpoint of the
// "environments" service.
func NewCreateEnvironmentInvariantViolationResponseBody(res *goa.ServiceError) *CreateEnvironmentInvariantViolationResponseBody {
	body := &CreateEnvironmentInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateEnvironmentUnexpectedResponseBody builds the HTTP response body
// from the result of the "createEnvironment" endpoint of the "environments"
// service.
func NewCreateEnvironmentUnexpectedResponseBody(res *goa.ServiceError) *CreateEnvironmentUnexpectedResponseBody {
	body := &CreateEnvironmentUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateEnvironmentGatewayErrorResponseBody builds the HTTP response body
// from the result of the "createEnvironment" endpoint of the "environments"
// service.
func NewCreateEnvironmentGatewayErrorResponseBody(res *goa.ServiceError) *CreateEnvironmentGatewayErrorResponseBody {
	body := &CreateEnvironmentGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListEnvironmentsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "listEnvironments" endpoint of the "environments"
// service.
func NewListEnvironmentsUnauthorizedResponseBody(res *goa.ServiceError) *ListEnvironmentsUnauthorizedResponseBody {
	body := &ListEnvironmentsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListEnvironmentsForbiddenResponseBody builds the HTTP response body from
// the result of the "listEnvironments" endpoint of the "environments" service.
func NewListEnvironmentsForbiddenResponseBody(res *goa.ServiceError) *ListEnvironmentsForbiddenResponseBody {
	body := &ListEnvironmentsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListEnvironmentsBadRequestResponseBody builds the HTTP response body from
// the result of the "listEnvironments" endpoint of the "environments" service.
func NewListEnvironmentsBadRequestResponseBody(res *goa.ServiceError) *ListEnvironmentsBadRequestResponseBody {
	body := &ListEnvironmentsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListEnvironmentsNotFoundResponseBody builds the HTTP response body from
// the result of the "listEnvironments" endpoint of the "environments" service.
func NewListEnvironmentsNotFoundResponseBody(res *goa.ServiceError) *ListEnvironmentsNotFoundResponseBody {
	body := &ListEnvironmentsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListEnvironmentsConflictResponseBody builds the HTTP response body from
// the result of the "listEnvironments" endpoint of the "environments" service.
func NewListEnvironmentsConflictResponseBody(res *goa.ServiceError) *ListEnvironmentsConflictResponseBody {
	body := &ListEnvironmentsConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListEnvironmentsUnsupportedMediaResponseBody builds the HTTP response
// body from the result of the "listEnvironments" endpoint of the
// "environments" service.
func NewListEnvironmentsUnsupportedMediaResponseBody(res *goa.ServiceError) *ListEnvironmentsUnsupportedMediaResponseBody {
	body := &ListEnvironmentsUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListEnvironmentsInvalidResponseBody builds the HTTP response body from
// the result of the "listEnvironments" endpoint of the "environments" service.
func NewListEnvironmentsInvalidResponseBody(res *goa.ServiceError) *ListEnvironmentsInvalidResponseBody {
	body := &ListEnvironmentsInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListEnvironmentsInvariantViolationResponseBody builds the HTTP response
// body from the result of the "listEnvironments" endpoint of the
// "environments" service.
func NewListEnvironmentsInvariantViolationResponseBody(res *goa.ServiceError) *ListEnvironmentsInvariantViolationResponseBody {
	body := &ListEnvironmentsInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListEnvironmentsUnexpectedResponseBody builds the HTTP response body from
// the result of the "listEnvironments" endpoint of the "environments" service.
func NewListEnvironmentsUnexpectedResponseBody(res *goa.ServiceError) *ListEnvironmentsUnexpectedResponseBody {
	body := &ListEnvironmentsUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListEnvironmentsGatewayErrorResponseBody builds the HTTP response body
// from the result of the "listEnvironments" endpoint of the "environments"
// service.
func NewListEnvironmentsGatewayErrorResponseBody(res *goa.ServiceError) *ListEnvironmentsGatewayErrorResponseBody {
	body := &ListEnvironmentsGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateEnvironmentUnauthorizedResponseBody builds the HTTP response body
// from the result of the "updateEnvironment" endpoint of the "environments"
// service.
func NewUpdateEnvironmentUnauthorizedResponseBody(res *goa.ServiceError) *UpdateEnvironmentUnauthorizedResponseBody {
	body := &UpdateEnvironmentUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateEnvironmentForbiddenResponseBody builds the HTTP response body from
// the result of the "updateEnvironment" endpoint of the "environments" service.
func NewUpdateEnvironmentForbiddenResponseBody(res *goa.ServiceError) *UpdateEnvironmentForbiddenResponseBody {
	body := &UpdateEnvironmentForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateEnvironmentBadRequestResponseBody builds the HTTP response body
// from the result of the "updateEnvironment" endpoint of the "environments"
// service.
func NewUpdateEnvironmentBadRequestResponseBody(res *goa.ServiceError) *UpdateEnvironmentBadRequestResponseBody {
	body := &UpdateEnvironmentBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateEnvironmentNotFoundResponseBody builds the HTTP response body from
// the result of the "updateEnvironment" endpoint of the "environments" service.
func NewUpdateEnvironmentNotFoundResponseBody(res *goa.ServiceError) *UpdateEnvironmentNotFoundResponseBody {
	body := &UpdateEnvironmentNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateEnvironmentConflictResponseBody builds the HTTP response body from
// the result of the "updateEnvironment" endpoint of the "environments" service.
func NewUpdateEnvironmentConflictResponseBody(res *goa.ServiceError) *UpdateEnvironmentConflictResponseBody {
	body := &UpdateEnvironmentConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateEnvironmentUnsupportedMediaResponseBody builds the HTTP response
// body from the result of the "updateEnvironment" endpoint of the
// "environments" service.
func NewUpdateEnvironmentUnsupportedMediaResponseBody(res *goa.ServiceError) *UpdateEnvironmentUnsupportedMediaResponseBody {
	body := &UpdateEnvironmentUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateEnvironmentInvalidResponseBody builds the HTTP response body from
// the result of the "updateEnvironment" endpoint of the "environments" service.
func NewUpdateEnvironmentInvalidResponseBody(res *goa.ServiceError) *UpdateEnvironmentInvalidResponseBody {
	body := &UpdateEnvironmentInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateEnvironmentInvariantViolationResponseBody builds the HTTP response
// body from the result of the "updateEnvironment" endpoint of the
// "environments" service.
func NewUpdateEnvironmentInvariantViolationResponseBody(res *goa.ServiceError) *UpdateEnvironmentInvariantViolationResponseBody {
	body := &UpdateEnvironmentInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateEnvironmentUnexpectedResponseBody builds the HTTP response body
// from the result of the "updateEnvironment" endpoint of the "environments"
// service.
func NewUpdateEnvironmentUnexpectedResponseBody(res *goa.ServiceError) *UpdateEnvironmentUnexpectedResponseBody {
	body := &UpdateEnvironmentUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateEnvironmentGatewayErrorResponseBody builds the HTTP response body
// from the result of the "updateEnvironment" endpoint of the "environments"
// service.
func NewUpdateEnvironmentGatewayErrorResponseBody(res *goa.ServiceError) *UpdateEnvironmentGatewayErrorResponseBody {
	body := &UpdateEnvironmentGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteEnvironmentUnauthorizedResponseBody builds the HTTP response body
// from the result of the "deleteEnvironment" endpoint of the "environments"
// service.
func NewDeleteEnvironmentUnauthorizedResponseBody(res *goa.ServiceError) *DeleteEnvironmentUnauthorizedResponseBody {
	body := &DeleteEnvironmentUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteEnvironmentForbiddenResponseBody builds the HTTP response body from
// the result of the "deleteEnvironment" endpoint of the "environments" service.
func NewDeleteEnvironmentForbiddenResponseBody(res *goa.ServiceError) *DeleteEnvironmentForbiddenResponseBody {
	body := &DeleteEnvironmentForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteEnvironmentBadRequestResponseBody builds the HTTP response body
// from the result of the "deleteEnvironment" endpoint of the "environments"
// service.
func NewDeleteEnvironmentBadRequestResponseBody(res *goa.ServiceError) *DeleteEnvironmentBadRequestResponseBody {
	body := &DeleteEnvironmentBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteEnvironmentNotFoundResponseBody builds the HTTP response body from
// the result of the "deleteEnvironment" endpoint of the "environments" service.
func NewDeleteEnvironmentNotFoundResponseBody(res *goa.ServiceError) *DeleteEnvironmentNotFoundResponseBody {
	body := &DeleteEnvironmentNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteEnvironmentConflictResponseBody builds the HTTP response body from
// the result of the "deleteEnvironment" endpoint of the "environments" service.
func NewDeleteEnvironmentConflictResponseBody(res *goa.ServiceError) *DeleteEnvironmentConflictResponseBody {
	body := &DeleteEnvironmentConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteEnvironmentUnsupportedMediaResponseBody builds the HTTP response
// body from the result of the "deleteEnvironment" endpoint of the
// "environments" service.
func NewDeleteEnvironmentUnsupportedMediaResponseBody(res *goa.ServiceError) *DeleteEnvironmentUnsupportedMediaResponseBody {
	body := &DeleteEnvironmentUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteEnvironmentInvalidResponseBody builds the HTTP response body from
// the result of the "deleteEnvironment" endpoint of the "environments" service.
func NewDeleteEnvironmentInvalidResponseBody(res *goa.ServiceError) *DeleteEnvironmentInvalidResponseBody {
	body := &DeleteEnvironmentInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteEnvironmentInvariantViolationResponseBody builds the HTTP response
// body from the result of the "deleteEnvironment" endpoint of the
// "environments" service.
func NewDeleteEnvironmentInvariantViolationResponseBody(res *goa.ServiceError) *DeleteEnvironmentInvariantViolationResponseBody {
	body := &DeleteEnvironmentInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteEnvironmentUnexpectedResponseBody builds the HTTP response body
// from the result of the "deleteEnvironment" endpoint of the "environments"
// service.
func NewDeleteEnvironmentUnexpectedResponseBody(res *goa.ServiceError) *DeleteEnvironmentUnexpectedResponseBody {
	body := &DeleteEnvironmentUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteEnvironmentGatewayErrorResponseBody builds the HTTP response body
// from the result of the "deleteEnvironment" endpoint of the "environments"
// service.
func NewDeleteEnvironmentGatewayErrorResponseBody(res *goa.ServiceError) *DeleteEnvironmentGatewayErrorResponseBody {
	body := &DeleteEnvironmentGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateEnvironmentPayload builds a environments service createEnvironment
// endpoint payload.
func NewCreateEnvironmentPayload(body *CreateEnvironmentRequestBody, sessionToken *string, projectSlugInput *string) *environments.CreateEnvironmentPayload {
	v := &environments.CreateEnvironmentPayload{
		OrganizationID: *body.OrganizationID,
		Name:           *body.Name,
		Description:    body.Description,
	}
	v.Entries = make([]*environments.EnvironmentEntryInput, len(body.Entries))
	for i, val := range body.Entries {
		v.Entries[i] = unmarshalEnvironmentEntryInputRequestBodyToEnvironmentsEnvironmentEntryInput(val)
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewListEnvironmentsPayload builds a environments service listEnvironments
// endpoint payload.
func NewListEnvironmentsPayload(sessionToken *string, projectSlugInput *string) *environments.ListEnvironmentsPayload {
	v := &environments.ListEnvironmentsPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewUpdateEnvironmentPayload builds a environments service updateEnvironment
// endpoint payload.
func NewUpdateEnvironmentPayload(body *UpdateEnvironmentRequestBody, slug string, sessionToken *string, projectSlugInput *string) *environments.UpdateEnvironmentPayload {
	v := &environments.UpdateEnvironmentPayload{
		Description: body.Description,
		Name:        body.Name,
	}
	v.EntriesToUpdate = make([]*environments.EnvironmentEntryInput, len(body.EntriesToUpdate))
	for i, val := range body.EntriesToUpdate {
		v.EntriesToUpdate[i] = unmarshalEnvironmentEntryInputRequestBodyToEnvironmentsEnvironmentEntryInput(val)
	}
	v.EntriesToRemove = make([]string, len(body.EntriesToRemove))
	for i, val := range body.EntriesToRemove {
		v.EntriesToRemove[i] = val
	}
	v.Slug = types.Slug(slug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewDeleteEnvironmentPayload builds a environments service deleteEnvironment
// endpoint payload.
func NewDeleteEnvironmentPayload(slug string, sessionToken *string, projectSlugInput *string) *environments.DeleteEnvironmentPayload {
	v := &environments.DeleteEnvironmentPayload{}
	v.Slug = types.Slug(slug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// ValidateCreateEnvironmentRequestBody runs the validations defined on
// CreateEnvironmentRequestBody
func ValidateCreateEnvironmentRequestBody(body *CreateEnvironmentRequestBody) (err error) {
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Entries == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("entries", "body"))
	}
	for _, e := range body.Entries {
		if e != nil {
			if err2 := ValidateEnvironmentEntryInputRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateEnvironmentRequestBody runs the validations defined on
// UpdateEnvironmentRequestBody
func ValidateUpdateEnvironmentRequestBody(body *UpdateEnvironmentRequestBody) (err error) {
	if body.EntriesToUpdate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("entries_to_update", "body"))
	}
	if body.EntriesToRemove == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("entries_to_remove", "body"))
	}
	for _, e := range body.EntriesToUpdate {
		if e != nil {
			if err2 := ValidateEnvironmentEntryInputRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateEnvironmentEntryInputRequestBody runs the validations defined on
// EnvironmentEntryInputRequestBody
func ValidateEnvironmentEntryInputRequestBody(body *EnvironmentEntryInputRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	return
}
