// Code generated by goa v3.22.2, DO NOT EDIT.
//
// environments client HTTP transport
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the environments service endpoint HTTP clients.
type Client struct {
	// CreateEnvironment Doer is the HTTP client used to make requests to the
	// createEnvironment endpoint.
	CreateEnvironmentDoer goahttp.Doer

	// ListEnvironments Doer is the HTTP client used to make requests to the
	// listEnvironments endpoint.
	ListEnvironmentsDoer goahttp.Doer

	// UpdateEnvironment Doer is the HTTP client used to make requests to the
	// updateEnvironment endpoint.
	UpdateEnvironmentDoer goahttp.Doer

	// DeleteEnvironment Doer is the HTTP client used to make requests to the
	// deleteEnvironment endpoint.
	DeleteEnvironmentDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the environments service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateEnvironmentDoer: doer,
		ListEnvironmentsDoer:  doer,
		UpdateEnvironmentDoer: doer,
		DeleteEnvironmentDoer: doer,
		RestoreResponseBody:   restoreBody,
		scheme:                scheme,
		host:                  host,
		decoder:               dec,
		encoder:               enc,
	}
}

// CreateEnvironment returns an endpoint that makes HTTP requests to the
// environments service createEnvironment server.
func (c *Client) CreateEnvironment() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateEnvironmentRequest(c.encoder)
		decodeResponse = DecodeCreateEnvironmentResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateEnvironmentRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateEnvironmentDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("environments", "createEnvironment", err)
		}
		return decodeResponse(resp)
	}
}

// ListEnvironments returns an endpoint that makes HTTP requests to the
// environments service listEnvironments server.
func (c *Client) ListEnvironments() goa.Endpoint {
	var (
		encodeRequest  = EncodeListEnvironmentsRequest(c.encoder)
		decodeResponse = DecodeListEnvironmentsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListEnvironmentsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListEnvironmentsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("environments", "listEnvironments", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateEnvironment returns an endpoint that makes HTTP requests to the
// environments service updateEnvironment server.
func (c *Client) UpdateEnvironment() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateEnvironmentRequest(c.encoder)
		decodeResponse = DecodeUpdateEnvironmentResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateEnvironmentRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateEnvironmentDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("environments", "updateEnvironment", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteEnvironment returns an endpoint that makes HTTP requests to the
// environments service deleteEnvironment server.
func (c *Client) DeleteEnvironment() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteEnvironmentRequest(c.encoder)
		decodeResponse = DecodeDeleteEnvironmentResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteEnvironmentRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteEnvironmentDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("environments", "deleteEnvironment", err)
		}
		return decodeResponse(resp)
	}
}
