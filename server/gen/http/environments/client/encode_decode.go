// Code generated by goa v3.22.2, DO NOT EDIT.
//
// environments HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	environments "github.com/speakeasy-api/gram/server/gen/environments"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateEnvironmentRequest instantiates a HTTP request object with method
// and path set to call the "environments" service "createEnvironment" endpoint
func (c *Client) BuildCreateEnvironmentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateEnvironmentEnvironmentsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("environments", "createEnvironment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateEnvironmentRequest returns an encoder for requests sent to the
// environments createEnvironment server.
func EncodeCreateEnvironmentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*environments.CreateEnvironmentPayload)
		if !ok {
			return goahttp.ErrInvalidType("environments", "createEnvironment", "*environments.CreateEnvironmentPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewCreateEnvironmentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("environments", "createEnvironment", err)
		}
		return nil
	}
}

// DecodeCreateEnvironmentResponse returns a decoder for responses returned by
// the environments createEnvironment endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeCreateEnvironmentResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeCreateEnvironmentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateEnvironmentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "createEnvironment", err)
			}
			err = ValidateCreateEnvironmentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "createEnvironment", err)
			}
			res := NewCreateEnvironmentEnvironmentOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CreateEnvironmentUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "createEnvironment", err)
			}
			err = ValidateCreateEnvironmentUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "createEnvironment", err)
			}
			return nil, NewCreateEnvironmentUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CreateEnvironmentForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "createEnvironment", err)
			}
			err = ValidateCreateEnvironmentForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "createEnvironment", err)
			}
			return nil, NewCreateEnvironmentForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CreateEnvironmentBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "createEnvironment", err)
			}
			err = ValidateCreateEnvironmentBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "createEnvironment", err)
			}
			return nil, NewCreateEnvironmentBadRequest(&body)
		case http.StatusNotFound:
			var (
				body CreateEnvironmentNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "createEnvironment", err)
			}
			err = ValidateCreateEnvironmentNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "createEnvironment", err)
			}
			return nil, NewCreateEnvironmentNotFound(&body)
		case http.StatusConflict:
			var (
				body CreateEnvironmentConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "createEnvironment", err)
			}
			err = ValidateCreateEnvironmentConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "createEnvironment", err)
			}
			return nil, NewCreateEnvironmentConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body CreateEnvironmentUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "createEnvironment", err)
			}
			err = ValidateCreateEnvironmentUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "createEnvironment", err)
			}
			return nil, NewCreateEnvironmentUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body CreateEnvironmentInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "createEnvironment", err)
			}
			err = ValidateCreateEnvironmentInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "createEnvironment", err)
			}
			return nil, NewCreateEnvironmentInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body CreateEnvironmentInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("environments", "createEnvironment", err)
				}
				err = ValidateCreateEnvironmentInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("environments", "createEnvironment", err)
				}
				return nil, NewCreateEnvironmentInvariantViolation(&body)
			case "unexpected":
				var (
					body CreateEnvironmentUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("environments", "createEnvironment", err)
				}
				err = ValidateCreateEnvironmentUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("environments", "createEnvironment", err)
				}
				return nil, NewCreateEnvironmentUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("environments", "createEnvironment", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body CreateEnvironmentGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "createEnvironment", err)
			}
			err = ValidateCreateEnvironmentGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "createEnvironment", err)
			}
			return nil, NewCreateEnvironmentGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("environments", "createEnvironment", resp.StatusCode, string(body))
		}
	}
}

// BuildListEnvironmentsRequest instantiates a HTTP request object with method
// and path set to call the "environments" service "listEnvironments" endpoint
func (c *Client) BuildListEnvironmentsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListEnvironmentsEnvironmentsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("environments", "listEnvironments", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListEnvironmentsRequest returns an encoder for requests sent to the
// environments listEnvironments server.
func EncodeListEnvironmentsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*environments.ListEnvironmentsPayload)
		if !ok {
			return goahttp.ErrInvalidType("environments", "listEnvironments", "*environments.ListEnvironmentsPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		return nil
	}
}

// DecodeListEnvironmentsResponse returns a decoder for responses returned by
// the environments listEnvironments endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeListEnvironmentsResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeListEnvironmentsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListEnvironmentsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "listEnvironments", err)
			}
			err = ValidateListEnvironmentsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "listEnvironments", err)
			}
			res := NewListEnvironmentsResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListEnvironmentsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "listEnvironments", err)
			}
			err = ValidateListEnvironmentsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "listEnvironments", err)
			}
			return nil, NewListEnvironmentsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListEnvironmentsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "listEnvironments", err)
			}
			err = ValidateListEnvironmentsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "listEnvironments", err)
			}
			return nil, NewListEnvironmentsForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ListEnvironmentsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "listEnvironments", err)
			}
			err = ValidateListEnvironmentsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "listEnvironments", err)
			}
			return nil, NewListEnvironmentsBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ListEnvironmentsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "listEnvironments", err)
			}
			err = ValidateListEnvironmentsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "listEnvironments", err)
			}
			return nil, NewListEnvironmentsNotFound(&body)
		case http.StatusConflict:
			var (
				body ListEnvironmentsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "listEnvironments", err)
			}
			err = ValidateListEnvironmentsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "listEnvironments", err)
			}
			return nil, NewListEnvironmentsConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ListEnvironmentsUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "listEnvironments", err)
			}
			err = ValidateListEnvironmentsUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "listEnvironments", err)
			}
			return nil, NewListEnvironmentsUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ListEnvironmentsInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "listEnvironments", err)
			}
			err = ValidateListEnvironmentsInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "listEnvironments", err)
			}
			return nil, NewListEnvironmentsInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ListEnvironmentsInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("environments", "listEnvironments", err)
				}
				err = ValidateListEnvironmentsInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("environments", "listEnvironments", err)
				}
				return nil, NewListEnvironmentsInvariantViolation(&body)
			case "unexpected":
				var (
					body ListEnvironmentsUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("environments", "listEnvironments", err)
				}
				err = ValidateListEnvironmentsUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("environments", "listEnvironments", err)
				}
				return nil, NewListEnvironmentsUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("environments", "listEnvironments", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ListEnvironmentsGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "listEnvironments", err)
			}
			err = ValidateListEnvironmentsGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "listEnvironments", err)
			}
			return nil, NewListEnvironmentsGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("environments", "listEnvironments", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateEnvironmentRequest instantiates a HTTP request object with method
// and path set to call the "environments" service "updateEnvironment" endpoint
func (c *Client) BuildUpdateEnvironmentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateEnvironmentEnvironmentsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("environments", "updateEnvironment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateEnvironmentRequest returns an encoder for requests sent to the
// environments updateEnvironment server.
func EncodeUpdateEnvironmentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*environments.UpdateEnvironmentPayload)
		if !ok {
			return goahttp.ErrInvalidType("environments", "updateEnvironment", "*environments.UpdateEnvironmentPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("slug", string(p.Slug))
		req.URL.RawQuery = values.Encode()
		body := NewUpdateEnvironmentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("environments", "updateEnvironment", err)
		}
		return nil
	}
}

// DecodeUpdateEnvironmentResponse returns a decoder for responses returned by
// the environments updateEnvironment endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeUpdateEnvironmentResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeUpdateEnvironmentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateEnvironmentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "updateEnvironment", err)
			}
			err = ValidateUpdateEnvironmentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "updateEnvironment", err)
			}
			res := NewUpdateEnvironmentEnvironmentOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateEnvironmentUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "updateEnvironment", err)
			}
			err = ValidateUpdateEnvironmentUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "updateEnvironment", err)
			}
			return nil, NewUpdateEnvironmentUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UpdateEnvironmentForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "updateEnvironment", err)
			}
			err = ValidateUpdateEnvironmentForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "updateEnvironment", err)
			}
			return nil, NewUpdateEnvironmentForbidden(&body)
		case http.StatusBadRequest:
			var (
				body UpdateEnvironmentBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "updateEnvironment", err)
			}
			err = ValidateUpdateEnvironmentBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "updateEnvironment", err)
			}
			return nil, NewUpdateEnvironmentBadRequest(&body)
		case http.StatusNotFound:
			var (
				body UpdateEnvironmentNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "updateEnvironment", err)
			}
			err = ValidateUpdateEnvironmentNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "updateEnvironment", err)
			}
			return nil, NewUpdateEnvironmentNotFound(&body)
		case http.StatusConflict:
			var (
				body UpdateEnvironmentConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "updateEnvironment", err)
			}
			err = ValidateUpdateEnvironmentConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "updateEnvironment", err)
			}
			return nil, NewUpdateEnvironmentConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body UpdateEnvironmentUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "updateEnvironment", err)
			}
			err = ValidateUpdateEnvironmentUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "updateEnvironment", err)
			}
			return nil, NewUpdateEnvironmentUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body UpdateEnvironmentInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "updateEnvironment", err)
			}
			err = ValidateUpdateEnvironmentInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "updateEnvironment", err)
			}
			return nil, NewUpdateEnvironmentInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body UpdateEnvironmentInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("environments", "updateEnvironment", err)
				}
				err = ValidateUpdateEnvironmentInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("environments", "updateEnvironment", err)
				}
				return nil, NewUpdateEnvironmentInvariantViolation(&body)
			case "unexpected":
				var (
					body UpdateEnvironmentUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("environments", "updateEnvironment", err)
				}
				err = ValidateUpdateEnvironmentUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("environments", "updateEnvironment", err)
				}
				return nil, NewUpdateEnvironmentUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("environments", "updateEnvironment", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body UpdateEnvironmentGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "updateEnvironment", err)
			}
			err = ValidateUpdateEnvironmentGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "updateEnvironment", err)
			}
			return nil, NewUpdateEnvironmentGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("environments", "updateEnvironment", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteEnvironmentRequest instantiates a HTTP request object with method
// and path set to call the "environments" service "deleteEnvironment" endpoint
func (c *Client) BuildDeleteEnvironmentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteEnvironmentEnvironmentsPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("environments", "deleteEnvironment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteEnvironmentRequest returns an encoder for requests sent to the
// environments deleteEnvironment server.
func EncodeDeleteEnvironmentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*environments.DeleteEnvironmentPayload)
		if !ok {
			return goahttp.ErrInvalidType("environments", "deleteEnvironment", "*environments.DeleteEnvironmentPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("slug", string(p.Slug))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDeleteEnvironmentResponse returns a decoder for responses returned by
// the environments deleteEnvironment endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeDeleteEnvironmentResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeDeleteEnvironmentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body DeleteEnvironmentUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "deleteEnvironment", err)
			}
			err = ValidateDeleteEnvironmentUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "deleteEnvironment", err)
			}
			return nil, NewDeleteEnvironmentUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteEnvironmentForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "deleteEnvironment", err)
			}
			err = ValidateDeleteEnvironmentForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "deleteEnvironment", err)
			}
			return nil, NewDeleteEnvironmentForbidden(&body)
		case http.StatusBadRequest:
			var (
				body DeleteEnvironmentBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "deleteEnvironment", err)
			}
			err = ValidateDeleteEnvironmentBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "deleteEnvironment", err)
			}
			return nil, NewDeleteEnvironmentBadRequest(&body)
		case http.StatusNotFound:
			var (
				body DeleteEnvironmentNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "deleteEnvironment", err)
			}
			err = ValidateDeleteEnvironmentNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "deleteEnvironment", err)
			}
			return nil, NewDeleteEnvironmentNotFound(&body)
		case http.StatusConflict:
			var (
				body DeleteEnvironmentConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "deleteEnvironment", err)
			}
			err = ValidateDeleteEnvironmentConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "deleteEnvironment", err)
			}
			return nil, NewDeleteEnvironmentConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body DeleteEnvironmentUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "deleteEnvironment", err)
			}
			err = ValidateDeleteEnvironmentUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "deleteEnvironment", err)
			}
			return nil, NewDeleteEnvironmentUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body DeleteEnvironmentInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "deleteEnvironment", err)
			}
			err = ValidateDeleteEnvironmentInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "deleteEnvironment", err)
			}
			return nil, NewDeleteEnvironmentInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body DeleteEnvironmentInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("environments", "deleteEnvironment", err)
				}
				err = ValidateDeleteEnvironmentInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("environments", "deleteEnvironment", err)
				}
				return nil, NewDeleteEnvironmentInvariantViolation(&body)
			case "unexpected":
				var (
					body DeleteEnvironmentUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("environments", "deleteEnvironment", err)
				}
				err = ValidateDeleteEnvironmentUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("environments", "deleteEnvironment", err)
				}
				return nil, NewDeleteEnvironmentUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("environments", "deleteEnvironment", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body DeleteEnvironmentGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "deleteEnvironment", err)
			}
			err = ValidateDeleteEnvironmentGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "deleteEnvironment", err)
			}
			return nil, NewDeleteEnvironmentGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("environments", "deleteEnvironment", resp.StatusCode, string(body))
		}
	}
}

// marshalEnvironmentsEnvironmentEntryInputToEnvironmentEntryInputRequestBody
// builds a value of type *EnvironmentEntryInputRequestBody from a value of
// type *environments.EnvironmentEntryInput.
func marshalEnvironmentsEnvironmentEntryInputToEnvironmentEntryInputRequestBody(v *environments.EnvironmentEntryInput) *EnvironmentEntryInputRequestBody {
	res := &EnvironmentEntryInputRequestBody{
		Name:  v.Name,
		Value: v.Value,
	}

	return res
}

// marshalEnvironmentEntryInputRequestBodyToEnvironmentsEnvironmentEntryInput
// builds a value of type *environments.EnvironmentEntryInput from a value of
// type *EnvironmentEntryInputRequestBody.
func marshalEnvironmentEntryInputRequestBodyToEnvironmentsEnvironmentEntryInput(v *EnvironmentEntryInputRequestBody) *environments.EnvironmentEntryInput {
	res := &environments.EnvironmentEntryInput{
		Name:  v.Name,
		Value: v.Value,
	}

	return res
}

// unmarshalEnvironmentEntryResponseBodyToTypesEnvironmentEntry builds a value
// of type *types.EnvironmentEntry from a value of type
// *EnvironmentEntryResponseBody.
func unmarshalEnvironmentEntryResponseBodyToTypesEnvironmentEntry(v *EnvironmentEntryResponseBody) *types.EnvironmentEntry {
	res := &types.EnvironmentEntry{
		Name:      *v.Name,
		Value:     *v.Value,
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
	}

	return res
}

// unmarshalEnvironmentResponseBodyToTypesEnvironment builds a value of type
// *types.Environment from a value of type *EnvironmentResponseBody.
func unmarshalEnvironmentResponseBodyToTypesEnvironment(v *EnvironmentResponseBody) *types.Environment {
	res := &types.Environment{
		ID:             *v.ID,
		OrganizationID: *v.OrganizationID,
		ProjectID:      *v.ProjectID,
		Name:           *v.Name,
		Slug:           types.Slug(*v.Slug),
		Description:    v.Description,
		CreatedAt:      *v.CreatedAt,
		UpdatedAt:      *v.UpdatedAt,
	}
	res.Entries = make([]*types.EnvironmentEntry, len(v.Entries))
	for i, val := range v.Entries {
		res.Entries[i] = unmarshalEnvironmentEntryResponseBodyToTypesEnvironmentEntry(val)
	}

	return res
}
