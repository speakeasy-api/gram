// Code generated by goa v3.22.2, DO NOT EDIT.
//
// about HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildOpenapiRequest instantiates a HTTP request object with method and path
// set to call the "about" service "openapi" endpoint
func (c *Client) BuildOpenapiRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: OpenapiAboutPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("about", "openapi", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeOpenapiResponse returns a decoder for responses returned by the about
// openapi endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeOpenapiResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeOpenapiResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				contentLength int64
				contentType   string
				err           error
			)
			{
				contentLengthRaw := resp.Header.Get("Content-Length")
				if contentLengthRaw == "" {
					return nil, goahttp.ErrValidationError("about", "openapi", goa.MissingFieldError("contentLength", "header"))
				}
				v, err2 := strconv.ParseInt(contentLengthRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("contentLength", contentLengthRaw, "integer"))
				}
				contentLength = v
			}
			contentTypeRaw := resp.Header.Get("Content-Type")
			if contentTypeRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("contentType", "header"))
			}
			contentType = contentTypeRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("about", "openapi", err)
			}
			res := NewOpenapiResultOK(contentLength, contentType)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body OpenapiUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("about", "openapi", err)
			}
			err = ValidateOpenapiUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("about", "openapi", err)
			}
			return nil, NewOpenapiUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body OpenapiForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("about", "openapi", err)
			}
			err = ValidateOpenapiForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("about", "openapi", err)
			}
			return nil, NewOpenapiForbidden(&body)
		case http.StatusBadRequest:
			var (
				body OpenapiBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("about", "openapi", err)
			}
			err = ValidateOpenapiBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("about", "openapi", err)
			}
			return nil, NewOpenapiBadRequest(&body)
		case http.StatusNotFound:
			var (
				body OpenapiNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("about", "openapi", err)
			}
			err = ValidateOpenapiNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("about", "openapi", err)
			}
			return nil, NewOpenapiNotFound(&body)
		case http.StatusConflict:
			var (
				body OpenapiConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("about", "openapi", err)
			}
			err = ValidateOpenapiConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("about", "openapi", err)
			}
			return nil, NewOpenapiConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body OpenapiUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("about", "openapi", err)
			}
			err = ValidateOpenapiUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("about", "openapi", err)
			}
			return nil, NewOpenapiUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body OpenapiInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("about", "openapi", err)
			}
			err = ValidateOpenapiInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("about", "openapi", err)
			}
			return nil, NewOpenapiInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body OpenapiInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("about", "openapi", err)
				}
				err = ValidateOpenapiInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("about", "openapi", err)
				}
				return nil, NewOpenapiInvariantViolation(&body)
			case "unexpected":
				var (
					body OpenapiUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("about", "openapi", err)
				}
				err = ValidateOpenapiUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("about", "openapi", err)
				}
				return nil, NewOpenapiUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("about", "openapi", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body OpenapiGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("about", "openapi", err)
			}
			err = ValidateOpenapiGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("about", "openapi", err)
			}
			return nil, NewOpenapiGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("about", "openapi", resp.StatusCode, string(body))
		}
	}
}
