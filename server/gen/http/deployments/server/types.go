// Code generated by goa v3.22.2, DO NOT EDIT.
//
// deployments HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	"unicode/utf8"

	deployments "github.com/speakeasy-api/gram/server/gen/deployments"
	goa "goa.design/goa/v3/pkg"
)

// CreateDeploymentRequestBody is the type of the "deployments" service
// "createDeployment" endpoint HTTP request body.
type CreateDeploymentRequestBody struct {
	// The github repository in the form of "owner/repo".
	GithubRepo *string `form:"github_repo,omitempty" json:"github_repo,omitempty" xml:"github_repo,omitempty"`
	// The github pull request that resulted in the deployment.
	GithubPr *string `form:"github_pr,omitempty" json:"github_pr,omitempty" xml:"github_pr,omitempty"`
	// The commit hash that triggered the deployment.
	GithubSha *string `form:"github_sha,omitempty" json:"github_sha,omitempty" xml:"github_sha,omitempty"`
	// The external ID to refer to the deployment. This can be a git commit hash
	// for example.
	ExternalID *string `form:"external_id,omitempty" json:"external_id,omitempty" xml:"external_id,omitempty"`
	// The upstream URL a deployment can refer to. This can be a github url to a
	// commit hash or pull request.
	ExternalURL     *string                                       `form:"external_url,omitempty" json:"external_url,omitempty" xml:"external_url,omitempty"`
	Openapiv3Assets []*AddOpenAPIv3DeploymentAssetFormRequestBody `form:"openapiv3_assets,omitempty" json:"openapiv3_assets,omitempty" xml:"openapiv3_assets,omitempty"`
	Packages        []*AddDeploymentPackageFormRequestBody        `form:"packages,omitempty" json:"packages,omitempty" xml:"packages,omitempty"`
}

// EvolveRequestBody is the type of the "deployments" service "evolve" endpoint
// HTTP request body.
type EvolveRequestBody struct {
	// The ID of the deployment to evolve. If omitted, the latest deployment will
	// be used.
	DeploymentID *string `form:"deployment_id,omitempty" json:"deployment_id,omitempty" xml:"deployment_id,omitempty"`
	// The OpenAPI 3.x documents to upsert in the new deployment.
	UpsertOpenapiv3Assets []*AddOpenAPIv3DeploymentAssetFormRequestBody `form:"upsert_openapiv3_assets,omitempty" json:"upsert_openapiv3_assets,omitempty" xml:"upsert_openapiv3_assets,omitempty"`
	// The packages to upsert in the new deployment.
	UpsertPackages []*AddPackageFormRequestBody `form:"upsert_packages,omitempty" json:"upsert_packages,omitempty" xml:"upsert_packages,omitempty"`
	// The OpenAPI 3.x documents to exclude from the new deployment when cloning a
	// previous deployment.
	ExcludeOpenapiv3Assets []string `form:"exclude_openapiv3_assets,omitempty" json:"exclude_openapiv3_assets,omitempty" xml:"exclude_openapiv3_assets,omitempty"`
	// The packages to exclude from the new deployment when cloning a previous
	// deployment.
	ExcludePackages []string `form:"exclude_packages,omitempty" json:"exclude_packages,omitempty" xml:"exclude_packages,omitempty"`
}

// RedeployRequestBody is the type of the "deployments" service "redeploy"
// endpoint HTTP request body.
type RedeployRequestBody struct {
	// The ID of the deployment to redeploy.
	DeploymentID *string `form:"deployment_id,omitempty" json:"deployment_id,omitempty" xml:"deployment_id,omitempty"`
}

// GetDeploymentResponseBody is the type of the "deployments" service
// "getDeployment" endpoint HTTP response body.
type GetDeploymentResponseBody struct {
	// The ID to of the deployment.
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the organization that the deployment belongs to.
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The ID of the project that the deployment belongs to.
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The ID of the user that created the deployment.
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// The creation date of the deployment.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The status of the deployment.
	Status string `form:"status" json:"status" xml:"status"`
	// A unique identifier that will mitigate against duplicate deployments.
	IdempotencyKey *string `form:"idempotency_key,omitempty" json:"idempotency_key,omitempty" xml:"idempotency_key,omitempty"`
	// The github repository in the form of "owner/repo".
	GithubRepo *string `form:"github_repo,omitempty" json:"github_repo,omitempty" xml:"github_repo,omitempty"`
	// The github pull request that resulted in the deployment.
	GithubPr *string `form:"github_pr,omitempty" json:"github_pr,omitempty" xml:"github_pr,omitempty"`
	// The commit hash that triggered the deployment.
	GithubSha *string `form:"github_sha,omitempty" json:"github_sha,omitempty" xml:"github_sha,omitempty"`
	// The external ID to refer to the deployment. This can be a git commit hash
	// for example.
	ExternalID *string `form:"external_id,omitempty" json:"external_id,omitempty" xml:"external_id,omitempty"`
	// The upstream URL a deployment can refer to. This can be a github url to a
	// commit hash or pull request.
	ExternalURL *string `form:"external_url,omitempty" json:"external_url,omitempty" xml:"external_url,omitempty"`
	// The ID of the deployment that this deployment was cloned from.
	ClonedFrom *string `form:"cloned_from,omitempty" json:"cloned_from,omitempty" xml:"cloned_from,omitempty"`
	// The number of tools in the deployment.
	ToolCount int64 `form:"tool_count" json:"tool_count" xml:"tool_count"`
	// The IDs, as returned from the assets upload service, to uploaded OpenAPI 3.x
	// documents whose operations will become tool definitions.
	Openapiv3Assets []*OpenAPIv3DeploymentAssetResponseBody `form:"openapiv3_assets" json:"openapiv3_assets" xml:"openapiv3_assets"`
	// The packages that were deployed.
	Packages []*DeploymentPackageResponseBody `form:"packages" json:"packages" xml:"packages"`
}

// GetLatestDeploymentResponseBody is the type of the "deployments" service
// "getLatestDeployment" endpoint HTTP response body.
type GetLatestDeploymentResponseBody struct {
	// The latest deployment for a project if available.
	Deployment *DeploymentResponseBody `form:"deployment,omitempty" json:"deployment,omitempty" xml:"deployment,omitempty"`
}

// CreateDeploymentResponseBody is the type of the "deployments" service
// "createDeployment" endpoint HTTP response body.
type CreateDeploymentResponseBody struct {
	// A deployment that was successfully created.
	Deployment *DeploymentResponseBody `form:"deployment,omitempty" json:"deployment,omitempty" xml:"deployment,omitempty"`
}

// EvolveResponseBody is the type of the "deployments" service "evolve"
// endpoint HTTP response body.
type EvolveResponseBody struct {
	// A deployment that was successfully created.
	Deployment *DeploymentResponseBody `form:"deployment,omitempty" json:"deployment,omitempty" xml:"deployment,omitempty"`
}

// RedeployResponseBody is the type of the "deployments" service "redeploy"
// endpoint HTTP response body.
type RedeployResponseBody struct {
	// A deployment that was successfully created.
	Deployment *DeploymentResponseBody `form:"deployment,omitempty" json:"deployment,omitempty" xml:"deployment,omitempty"`
}

// ListDeploymentsResponseBody is the type of the "deployments" service
// "listDeployments" endpoint HTTP response body.
type ListDeploymentsResponseBody struct {
	// The cursor to fetch results from
	NextCursor *string `form:"next_cursor,omitempty" json:"next_cursor,omitempty" xml:"next_cursor,omitempty"`
	// A list of deployments
	Items []*DeploymentSummaryResponseBody `form:"items" json:"items" xml:"items"`
}

// GetDeploymentLogsResponseBody is the type of the "deployments" service
// "getDeploymentLogs" endpoint HTTP response body.
type GetDeploymentLogsResponseBody struct {
	// The cursor to fetch results from
	NextCursor *string `form:"next_cursor,omitempty" json:"next_cursor,omitempty" xml:"next_cursor,omitempty"`
	// The status of the deployment
	Status string `form:"status" json:"status" xml:"status"`
	// The logs for the deployment
	Events []*DeploymentLogEventResponseBody `form:"events" json:"events" xml:"events"`
}

// GetDeploymentUnauthorizedResponseBody is the type of the "deployments"
// service "getDeployment" endpoint HTTP response body for the "unauthorized"
// error.
type GetDeploymentUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentForbiddenResponseBody is the type of the "deployments" service
// "getDeployment" endpoint HTTP response body for the "forbidden" error.
type GetDeploymentForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentBadRequestResponseBody is the type of the "deployments" service
// "getDeployment" endpoint HTTP response body for the "bad_request" error.
type GetDeploymentBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentNotFoundResponseBody is the type of the "deployments" service
// "getDeployment" endpoint HTTP response body for the "not_found" error.
type GetDeploymentNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentConflictResponseBody is the type of the "deployments" service
// "getDeployment" endpoint HTTP response body for the "conflict" error.
type GetDeploymentConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentUnsupportedMediaResponseBody is the type of the "deployments"
// service "getDeployment" endpoint HTTP response body for the
// "unsupported_media" error.
type GetDeploymentUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentInvalidResponseBody is the type of the "deployments" service
// "getDeployment" endpoint HTTP response body for the "invalid" error.
type GetDeploymentInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentInvariantViolationResponseBody is the type of the "deployments"
// service "getDeployment" endpoint HTTP response body for the
// "invariant_violation" error.
type GetDeploymentInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentUnexpectedResponseBody is the type of the "deployments" service
// "getDeployment" endpoint HTTP response body for the "unexpected" error.
type GetDeploymentUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentGatewayErrorResponseBody is the type of the "deployments"
// service "getDeployment" endpoint HTTP response body for the "gateway_error"
// error.
type GetDeploymentGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetLatestDeploymentUnauthorizedResponseBody is the type of the "deployments"
// service "getLatestDeployment" endpoint HTTP response body for the
// "unauthorized" error.
type GetLatestDeploymentUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetLatestDeploymentForbiddenResponseBody is the type of the "deployments"
// service "getLatestDeployment" endpoint HTTP response body for the
// "forbidden" error.
type GetLatestDeploymentForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetLatestDeploymentBadRequestResponseBody is the type of the "deployments"
// service "getLatestDeployment" endpoint HTTP response body for the
// "bad_request" error.
type GetLatestDeploymentBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetLatestDeploymentNotFoundResponseBody is the type of the "deployments"
// service "getLatestDeployment" endpoint HTTP response body for the
// "not_found" error.
type GetLatestDeploymentNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetLatestDeploymentConflictResponseBody is the type of the "deployments"
// service "getLatestDeployment" endpoint HTTP response body for the "conflict"
// error.
type GetLatestDeploymentConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetLatestDeploymentUnsupportedMediaResponseBody is the type of the
// "deployments" service "getLatestDeployment" endpoint HTTP response body for
// the "unsupported_media" error.
type GetLatestDeploymentUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetLatestDeploymentInvalidResponseBody is the type of the "deployments"
// service "getLatestDeployment" endpoint HTTP response body for the "invalid"
// error.
type GetLatestDeploymentInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetLatestDeploymentInvariantViolationResponseBody is the type of the
// "deployments" service "getLatestDeployment" endpoint HTTP response body for
// the "invariant_violation" error.
type GetLatestDeploymentInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetLatestDeploymentUnexpectedResponseBody is the type of the "deployments"
// service "getLatestDeployment" endpoint HTTP response body for the
// "unexpected" error.
type GetLatestDeploymentUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetLatestDeploymentGatewayErrorResponseBody is the type of the "deployments"
// service "getLatestDeployment" endpoint HTTP response body for the
// "gateway_error" error.
type GetLatestDeploymentGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDeploymentUnauthorizedResponseBody is the type of the "deployments"
// service "createDeployment" endpoint HTTP response body for the
// "unauthorized" error.
type CreateDeploymentUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDeploymentForbiddenResponseBody is the type of the "deployments"
// service "createDeployment" endpoint HTTP response body for the "forbidden"
// error.
type CreateDeploymentForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDeploymentBadRequestResponseBody is the type of the "deployments"
// service "createDeployment" endpoint HTTP response body for the "bad_request"
// error.
type CreateDeploymentBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDeploymentNotFoundResponseBody is the type of the "deployments"
// service "createDeployment" endpoint HTTP response body for the "not_found"
// error.
type CreateDeploymentNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDeploymentConflictResponseBody is the type of the "deployments"
// service "createDeployment" endpoint HTTP response body for the "conflict"
// error.
type CreateDeploymentConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDeploymentUnsupportedMediaResponseBody is the type of the
// "deployments" service "createDeployment" endpoint HTTP response body for the
// "unsupported_media" error.
type CreateDeploymentUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDeploymentInvalidResponseBody is the type of the "deployments" service
// "createDeployment" endpoint HTTP response body for the "invalid" error.
type CreateDeploymentInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDeploymentInvariantViolationResponseBody is the type of the
// "deployments" service "createDeployment" endpoint HTTP response body for the
// "invariant_violation" error.
type CreateDeploymentInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDeploymentUnexpectedResponseBody is the type of the "deployments"
// service "createDeployment" endpoint HTTP response body for the "unexpected"
// error.
type CreateDeploymentUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDeploymentGatewayErrorResponseBody is the type of the "deployments"
// service "createDeployment" endpoint HTTP response body for the
// "gateway_error" error.
type CreateDeploymentGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvolveUnauthorizedResponseBody is the type of the "deployments" service
// "evolve" endpoint HTTP response body for the "unauthorized" error.
type EvolveUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvolveForbiddenResponseBody is the type of the "deployments" service
// "evolve" endpoint HTTP response body for the "forbidden" error.
type EvolveForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvolveBadRequestResponseBody is the type of the "deployments" service
// "evolve" endpoint HTTP response body for the "bad_request" error.
type EvolveBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvolveNotFoundResponseBody is the type of the "deployments" service "evolve"
// endpoint HTTP response body for the "not_found" error.
type EvolveNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvolveConflictResponseBody is the type of the "deployments" service "evolve"
// endpoint HTTP response body for the "conflict" error.
type EvolveConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvolveUnsupportedMediaResponseBody is the type of the "deployments" service
// "evolve" endpoint HTTP response body for the "unsupported_media" error.
type EvolveUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvolveInvalidResponseBody is the type of the "deployments" service "evolve"
// endpoint HTTP response body for the "invalid" error.
type EvolveInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvolveInvariantViolationResponseBody is the type of the "deployments"
// service "evolve" endpoint HTTP response body for the "invariant_violation"
// error.
type EvolveInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvolveUnexpectedResponseBody is the type of the "deployments" service
// "evolve" endpoint HTTP response body for the "unexpected" error.
type EvolveUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvolveGatewayErrorResponseBody is the type of the "deployments" service
// "evolve" endpoint HTTP response body for the "gateway_error" error.
type EvolveGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RedeployUnauthorizedResponseBody is the type of the "deployments" service
// "redeploy" endpoint HTTP response body for the "unauthorized" error.
type RedeployUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RedeployForbiddenResponseBody is the type of the "deployments" service
// "redeploy" endpoint HTTP response body for the "forbidden" error.
type RedeployForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RedeployBadRequestResponseBody is the type of the "deployments" service
// "redeploy" endpoint HTTP response body for the "bad_request" error.
type RedeployBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RedeployNotFoundResponseBody is the type of the "deployments" service
// "redeploy" endpoint HTTP response body for the "not_found" error.
type RedeployNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RedeployConflictResponseBody is the type of the "deployments" service
// "redeploy" endpoint HTTP response body for the "conflict" error.
type RedeployConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RedeployUnsupportedMediaResponseBody is the type of the "deployments"
// service "redeploy" endpoint HTTP response body for the "unsupported_media"
// error.
type RedeployUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RedeployInvalidResponseBody is the type of the "deployments" service
// "redeploy" endpoint HTTP response body for the "invalid" error.
type RedeployInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RedeployInvariantViolationResponseBody is the type of the "deployments"
// service "redeploy" endpoint HTTP response body for the "invariant_violation"
// error.
type RedeployInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RedeployUnexpectedResponseBody is the type of the "deployments" service
// "redeploy" endpoint HTTP response body for the "unexpected" error.
type RedeployUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RedeployGatewayErrorResponseBody is the type of the "deployments" service
// "redeploy" endpoint HTTP response body for the "gateway_error" error.
type RedeployGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListDeploymentsUnauthorizedResponseBody is the type of the "deployments"
// service "listDeployments" endpoint HTTP response body for the "unauthorized"
// error.
type ListDeploymentsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListDeploymentsForbiddenResponseBody is the type of the "deployments"
// service "listDeployments" endpoint HTTP response body for the "forbidden"
// error.
type ListDeploymentsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListDeploymentsBadRequestResponseBody is the type of the "deployments"
// service "listDeployments" endpoint HTTP response body for the "bad_request"
// error.
type ListDeploymentsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListDeploymentsNotFoundResponseBody is the type of the "deployments" service
// "listDeployments" endpoint HTTP response body for the "not_found" error.
type ListDeploymentsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListDeploymentsConflictResponseBody is the type of the "deployments" service
// "listDeployments" endpoint HTTP response body for the "conflict" error.
type ListDeploymentsConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListDeploymentsUnsupportedMediaResponseBody is the type of the "deployments"
// service "listDeployments" endpoint HTTP response body for the
// "unsupported_media" error.
type ListDeploymentsUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListDeploymentsInvalidResponseBody is the type of the "deployments" service
// "listDeployments" endpoint HTTP response body for the "invalid" error.
type ListDeploymentsInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListDeploymentsInvariantViolationResponseBody is the type of the
// "deployments" service "listDeployments" endpoint HTTP response body for the
// "invariant_violation" error.
type ListDeploymentsInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListDeploymentsUnexpectedResponseBody is the type of the "deployments"
// service "listDeployments" endpoint HTTP response body for the "unexpected"
// error.
type ListDeploymentsUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListDeploymentsGatewayErrorResponseBody is the type of the "deployments"
// service "listDeployments" endpoint HTTP response body for the
// "gateway_error" error.
type ListDeploymentsGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentLogsUnauthorizedResponseBody is the type of the "deployments"
// service "getDeploymentLogs" endpoint HTTP response body for the
// "unauthorized" error.
type GetDeploymentLogsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentLogsForbiddenResponseBody is the type of the "deployments"
// service "getDeploymentLogs" endpoint HTTP response body for the "forbidden"
// error.
type GetDeploymentLogsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentLogsBadRequestResponseBody is the type of the "deployments"
// service "getDeploymentLogs" endpoint HTTP response body for the
// "bad_request" error.
type GetDeploymentLogsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentLogsNotFoundResponseBody is the type of the "deployments"
// service "getDeploymentLogs" endpoint HTTP response body for the "not_found"
// error.
type GetDeploymentLogsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentLogsConflictResponseBody is the type of the "deployments"
// service "getDeploymentLogs" endpoint HTTP response body for the "conflict"
// error.
type GetDeploymentLogsConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentLogsUnsupportedMediaResponseBody is the type of the
// "deployments" service "getDeploymentLogs" endpoint HTTP response body for
// the "unsupported_media" error.
type GetDeploymentLogsUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentLogsInvalidResponseBody is the type of the "deployments"
// service "getDeploymentLogs" endpoint HTTP response body for the "invalid"
// error.
type GetDeploymentLogsInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentLogsInvariantViolationResponseBody is the type of the
// "deployments" service "getDeploymentLogs" endpoint HTTP response body for
// the "invariant_violation" error.
type GetDeploymentLogsInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentLogsUnexpectedResponseBody is the type of the "deployments"
// service "getDeploymentLogs" endpoint HTTP response body for the "unexpected"
// error.
type GetDeploymentLogsUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDeploymentLogsGatewayErrorResponseBody is the type of the "deployments"
// service "getDeploymentLogs" endpoint HTTP response body for the
// "gateway_error" error.
type GetDeploymentLogsGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// OpenAPIv3DeploymentAssetResponseBody is used to define fields on response
// body types.
type OpenAPIv3DeploymentAssetResponseBody struct {
	// The ID of the deployment asset.
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the uploaded asset.
	AssetID string `form:"asset_id" json:"asset_id" xml:"asset_id"`
	// The name to give the document as it will be displayed in UIs.
	Name string `form:"name" json:"name" xml:"name"`
	// The slug to give the document as it will be displayed in URLs.
	Slug string `form:"slug" json:"slug" xml:"slug"`
}

// DeploymentPackageResponseBody is used to define fields on response body
// types.
type DeploymentPackageResponseBody struct {
	// The ID of the deployment package.
	ID string `form:"id" json:"id" xml:"id"`
	// The name of the package.
	Name string `form:"name" json:"name" xml:"name"`
	// The version of the package.
	Version string `form:"version" json:"version" xml:"version"`
}

// DeploymentResponseBody is used to define fields on response body types.
type DeploymentResponseBody struct {
	// The ID to of the deployment.
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the organization that the deployment belongs to.
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The ID of the project that the deployment belongs to.
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The ID of the user that created the deployment.
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// The creation date of the deployment.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The status of the deployment.
	Status string `form:"status" json:"status" xml:"status"`
	// A unique identifier that will mitigate against duplicate deployments.
	IdempotencyKey *string `form:"idempotency_key,omitempty" json:"idempotency_key,omitempty" xml:"idempotency_key,omitempty"`
	// The github repository in the form of "owner/repo".
	GithubRepo *string `form:"github_repo,omitempty" json:"github_repo,omitempty" xml:"github_repo,omitempty"`
	// The github pull request that resulted in the deployment.
	GithubPr *string `form:"github_pr,omitempty" json:"github_pr,omitempty" xml:"github_pr,omitempty"`
	// The commit hash that triggered the deployment.
	GithubSha *string `form:"github_sha,omitempty" json:"github_sha,omitempty" xml:"github_sha,omitempty"`
	// The external ID to refer to the deployment. This can be a git commit hash
	// for example.
	ExternalID *string `form:"external_id,omitempty" json:"external_id,omitempty" xml:"external_id,omitempty"`
	// The upstream URL a deployment can refer to. This can be a github url to a
	// commit hash or pull request.
	ExternalURL *string `form:"external_url,omitempty" json:"external_url,omitempty" xml:"external_url,omitempty"`
	// The ID of the deployment that this deployment was cloned from.
	ClonedFrom *string `form:"cloned_from,omitempty" json:"cloned_from,omitempty" xml:"cloned_from,omitempty"`
	// The number of tools in the deployment.
	ToolCount int64 `form:"tool_count" json:"tool_count" xml:"tool_count"`
	// The IDs, as returned from the assets upload service, to uploaded OpenAPI 3.x
	// documents whose operations will become tool definitions.
	Openapiv3Assets []*OpenAPIv3DeploymentAssetResponseBody `form:"openapiv3_assets" json:"openapiv3_assets" xml:"openapiv3_assets"`
	// The packages that were deployed.
	Packages []*DeploymentPackageResponseBody `form:"packages" json:"packages" xml:"packages"`
}

// DeploymentSummaryResponseBody is used to define fields on response body
// types.
type DeploymentSummaryResponseBody struct {
	// The ID to of the deployment.
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the user that created the deployment.
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// The status of the deployment.
	Status string `form:"status" json:"status" xml:"status"`
	// The creation date of the deployment.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The number of upstream assets.
	AssetCount int64 `form:"asset_count" json:"asset_count" xml:"asset_count"`
	// The number of tools in the deployment.
	ToolCount int64 `form:"tool_count" json:"tool_count" xml:"tool_count"`
}

// DeploymentLogEventResponseBody is used to define fields on response body
// types.
type DeploymentLogEventResponseBody struct {
	// The ID of the log event
	ID string `form:"id" json:"id" xml:"id"`
	// The creation date of the log event
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The type of event that occurred
	Event string `form:"event" json:"event" xml:"event"`
	// The message of the log event
	Message string `form:"message" json:"message" xml:"message"`
}

// AddOpenAPIv3DeploymentAssetFormRequestBody is used to define fields on
// request body types.
type AddOpenAPIv3DeploymentAssetFormRequestBody struct {
	// The ID of the uploaded asset.
	AssetID *string `form:"asset_id,omitempty" json:"asset_id,omitempty" xml:"asset_id,omitempty"`
	// The name to give the document as it will be displayed in UIs.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The slug to give the document as it will be displayed in URLs.
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
}

// AddDeploymentPackageFormRequestBody is used to define fields on request body
// types.
type AddDeploymentPackageFormRequestBody struct {
	// The name of the package.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The version of the package.
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
}

// AddPackageFormRequestBody is used to define fields on request body types.
type AddPackageFormRequestBody struct {
	// The name of the package to add.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The version of the package to add. If omitted, the latest version will be
	// used.
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
}

// NewGetDeploymentResponseBody builds the HTTP response body from the result
// of the "getDeployment" endpoint of the "deployments" service.
func NewGetDeploymentResponseBody(res *deployments.GetDeploymentResult) *GetDeploymentResponseBody {
	body := &GetDeploymentResponseBody{
		ID:             res.ID,
		OrganizationID: res.OrganizationID,
		ProjectID:      res.ProjectID,
		UserID:         res.UserID,
		CreatedAt:      res.CreatedAt,
		Status:         res.Status,
		IdempotencyKey: res.IdempotencyKey,
		GithubRepo:     res.GithubRepo,
		GithubPr:       res.GithubPr,
		GithubSha:      res.GithubSha,
		ExternalID:     res.ExternalID,
		ExternalURL:    res.ExternalURL,
		ClonedFrom:     res.ClonedFrom,
		ToolCount:      res.ToolCount,
	}
	if res.Openapiv3Assets != nil {
		body.Openapiv3Assets = make([]*OpenAPIv3DeploymentAssetResponseBody, len(res.Openapiv3Assets))
		for i, val := range res.Openapiv3Assets {
			body.Openapiv3Assets[i] = marshalTypesOpenAPIv3DeploymentAssetToOpenAPIv3DeploymentAssetResponseBody(val)
		}
	} else {
		body.Openapiv3Assets = []*OpenAPIv3DeploymentAssetResponseBody{}
	}
	if res.Packages != nil {
		body.Packages = make([]*DeploymentPackageResponseBody, len(res.Packages))
		for i, val := range res.Packages {
			body.Packages[i] = marshalTypesDeploymentPackageToDeploymentPackageResponseBody(val)
		}
	} else {
		body.Packages = []*DeploymentPackageResponseBody{}
	}
	return body
}

// NewGetLatestDeploymentResponseBody builds the HTTP response body from the
// result of the "getLatestDeployment" endpoint of the "deployments" service.
func NewGetLatestDeploymentResponseBody(res *deployments.GetLatestDeploymentResult) *GetLatestDeploymentResponseBody {
	body := &GetLatestDeploymentResponseBody{}
	if res.Deployment != nil {
		body.Deployment = marshalTypesDeploymentToDeploymentResponseBody(res.Deployment)
	}
	return body
}

// NewCreateDeploymentResponseBody builds the HTTP response body from the
// result of the "createDeployment" endpoint of the "deployments" service.
func NewCreateDeploymentResponseBody(res *deployments.CreateDeploymentResult) *CreateDeploymentResponseBody {
	body := &CreateDeploymentResponseBody{}
	if res.Deployment != nil {
		body.Deployment = marshalTypesDeploymentToDeploymentResponseBody(res.Deployment)
	}
	return body
}

// NewEvolveResponseBody builds the HTTP response body from the result of the
// "evolve" endpoint of the "deployments" service.
func NewEvolveResponseBody(res *deployments.EvolveResult) *EvolveResponseBody {
	body := &EvolveResponseBody{}
	if res.Deployment != nil {
		body.Deployment = marshalTypesDeploymentToDeploymentResponseBody(res.Deployment)
	}
	return body
}

// NewRedeployResponseBody builds the HTTP response body from the result of the
// "redeploy" endpoint of the "deployments" service.
func NewRedeployResponseBody(res *deployments.RedeployResult) *RedeployResponseBody {
	body := &RedeployResponseBody{}
	if res.Deployment != nil {
		body.Deployment = marshalTypesDeploymentToDeploymentResponseBody(res.Deployment)
	}
	return body
}

// NewListDeploymentsResponseBody builds the HTTP response body from the result
// of the "listDeployments" endpoint of the "deployments" service.
func NewListDeploymentsResponseBody(res *deployments.ListDeploymentResult) *ListDeploymentsResponseBody {
	body := &ListDeploymentsResponseBody{
		NextCursor: res.NextCursor,
	}
	if res.Items != nil {
		body.Items = make([]*DeploymentSummaryResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalDeploymentsDeploymentSummaryToDeploymentSummaryResponseBody(val)
		}
	} else {
		body.Items = []*DeploymentSummaryResponseBody{}
	}
	return body
}

// NewGetDeploymentLogsResponseBody builds the HTTP response body from the
// result of the "getDeploymentLogs" endpoint of the "deployments" service.
func NewGetDeploymentLogsResponseBody(res *deployments.GetDeploymentLogsResult) *GetDeploymentLogsResponseBody {
	body := &GetDeploymentLogsResponseBody{
		NextCursor: res.NextCursor,
		Status:     res.Status,
	}
	if res.Events != nil {
		body.Events = make([]*DeploymentLogEventResponseBody, len(res.Events))
		for i, val := range res.Events {
			body.Events[i] = marshalDeploymentsDeploymentLogEventToDeploymentLogEventResponseBody(val)
		}
	} else {
		body.Events = []*DeploymentLogEventResponseBody{}
	}
	return body
}

// NewGetDeploymentUnauthorizedResponseBody builds the HTTP response body from
// the result of the "getDeployment" endpoint of the "deployments" service.
func NewGetDeploymentUnauthorizedResponseBody(res *goa.ServiceError) *GetDeploymentUnauthorizedResponseBody {
	body := &GetDeploymentUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentForbiddenResponseBody builds the HTTP response body from the
// result of the "getDeployment" endpoint of the "deployments" service.
func NewGetDeploymentForbiddenResponseBody(res *goa.ServiceError) *GetDeploymentForbiddenResponseBody {
	body := &GetDeploymentForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentBadRequestResponseBody builds the HTTP response body from
// the result of the "getDeployment" endpoint of the "deployments" service.
func NewGetDeploymentBadRequestResponseBody(res *goa.ServiceError) *GetDeploymentBadRequestResponseBody {
	body := &GetDeploymentBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentNotFoundResponseBody builds the HTTP response body from the
// result of the "getDeployment" endpoint of the "deployments" service.
func NewGetDeploymentNotFoundResponseBody(res *goa.ServiceError) *GetDeploymentNotFoundResponseBody {
	body := &GetDeploymentNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentConflictResponseBody builds the HTTP response body from the
// result of the "getDeployment" endpoint of the "deployments" service.
func NewGetDeploymentConflictResponseBody(res *goa.ServiceError) *GetDeploymentConflictResponseBody {
	body := &GetDeploymentConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "getDeployment" endpoint of the "deployments" service.
func NewGetDeploymentUnsupportedMediaResponseBody(res *goa.ServiceError) *GetDeploymentUnsupportedMediaResponseBody {
	body := &GetDeploymentUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentInvalidResponseBody builds the HTTP response body from the
// result of the "getDeployment" endpoint of the "deployments" service.
func NewGetDeploymentInvalidResponseBody(res *goa.ServiceError) *GetDeploymentInvalidResponseBody {
	body := &GetDeploymentInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentInvariantViolationResponseBody builds the HTTP response body
// from the result of the "getDeployment" endpoint of the "deployments" service.
func NewGetDeploymentInvariantViolationResponseBody(res *goa.ServiceError) *GetDeploymentInvariantViolationResponseBody {
	body := &GetDeploymentInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentUnexpectedResponseBody builds the HTTP response body from
// the result of the "getDeployment" endpoint of the "deployments" service.
func NewGetDeploymentUnexpectedResponseBody(res *goa.ServiceError) *GetDeploymentUnexpectedResponseBody {
	body := &GetDeploymentUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentGatewayErrorResponseBody builds the HTTP response body from
// the result of the "getDeployment" endpoint of the "deployments" service.
func NewGetDeploymentGatewayErrorResponseBody(res *goa.ServiceError) *GetDeploymentGatewayErrorResponseBody {
	body := &GetDeploymentGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetLatestDeploymentUnauthorizedResponseBody builds the HTTP response body
// from the result of the "getLatestDeployment" endpoint of the "deployments"
// service.
func NewGetLatestDeploymentUnauthorizedResponseBody(res *goa.ServiceError) *GetLatestDeploymentUnauthorizedResponseBody {
	body := &GetLatestDeploymentUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetLatestDeploymentForbiddenResponseBody builds the HTTP response body
// from the result of the "getLatestDeployment" endpoint of the "deployments"
// service.
func NewGetLatestDeploymentForbiddenResponseBody(res *goa.ServiceError) *GetLatestDeploymentForbiddenResponseBody {
	body := &GetLatestDeploymentForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetLatestDeploymentBadRequestResponseBody builds the HTTP response body
// from the result of the "getLatestDeployment" endpoint of the "deployments"
// service.
func NewGetLatestDeploymentBadRequestResponseBody(res *goa.ServiceError) *GetLatestDeploymentBadRequestResponseBody {
	body := &GetLatestDeploymentBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetLatestDeploymentNotFoundResponseBody builds the HTTP response body
// from the result of the "getLatestDeployment" endpoint of the "deployments"
// service.
func NewGetLatestDeploymentNotFoundResponseBody(res *goa.ServiceError) *GetLatestDeploymentNotFoundResponseBody {
	body := &GetLatestDeploymentNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetLatestDeploymentConflictResponseBody builds the HTTP response body
// from the result of the "getLatestDeployment" endpoint of the "deployments"
// service.
func NewGetLatestDeploymentConflictResponseBody(res *goa.ServiceError) *GetLatestDeploymentConflictResponseBody {
	body := &GetLatestDeploymentConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetLatestDeploymentUnsupportedMediaResponseBody builds the HTTP response
// body from the result of the "getLatestDeployment" endpoint of the
// "deployments" service.
func NewGetLatestDeploymentUnsupportedMediaResponseBody(res *goa.ServiceError) *GetLatestDeploymentUnsupportedMediaResponseBody {
	body := &GetLatestDeploymentUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetLatestDeploymentInvalidResponseBody builds the HTTP response body from
// the result of the "getLatestDeployment" endpoint of the "deployments"
// service.
func NewGetLatestDeploymentInvalidResponseBody(res *goa.ServiceError) *GetLatestDeploymentInvalidResponseBody {
	body := &GetLatestDeploymentInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetLatestDeploymentInvariantViolationResponseBody builds the HTTP
// response body from the result of the "getLatestDeployment" endpoint of the
// "deployments" service.
func NewGetLatestDeploymentInvariantViolationResponseBody(res *goa.ServiceError) *GetLatestDeploymentInvariantViolationResponseBody {
	body := &GetLatestDeploymentInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetLatestDeploymentUnexpectedResponseBody builds the HTTP response body
// from the result of the "getLatestDeployment" endpoint of the "deployments"
// service.
func NewGetLatestDeploymentUnexpectedResponseBody(res *goa.ServiceError) *GetLatestDeploymentUnexpectedResponseBody {
	body := &GetLatestDeploymentUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetLatestDeploymentGatewayErrorResponseBody builds the HTTP response body
// from the result of the "getLatestDeployment" endpoint of the "deployments"
// service.
func NewGetLatestDeploymentGatewayErrorResponseBody(res *goa.ServiceError) *GetLatestDeploymentGatewayErrorResponseBody {
	body := &GetLatestDeploymentGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDeploymentUnauthorizedResponseBody builds the HTTP response body
// from the result of the "createDeployment" endpoint of the "deployments"
// service.
func NewCreateDeploymentUnauthorizedResponseBody(res *goa.ServiceError) *CreateDeploymentUnauthorizedResponseBody {
	body := &CreateDeploymentUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDeploymentForbiddenResponseBody builds the HTTP response body from
// the result of the "createDeployment" endpoint of the "deployments" service.
func NewCreateDeploymentForbiddenResponseBody(res *goa.ServiceError) *CreateDeploymentForbiddenResponseBody {
	body := &CreateDeploymentForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDeploymentBadRequestResponseBody builds the HTTP response body from
// the result of the "createDeployment" endpoint of the "deployments" service.
func NewCreateDeploymentBadRequestResponseBody(res *goa.ServiceError) *CreateDeploymentBadRequestResponseBody {
	body := &CreateDeploymentBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDeploymentNotFoundResponseBody builds the HTTP response body from
// the result of the "createDeployment" endpoint of the "deployments" service.
func NewCreateDeploymentNotFoundResponseBody(res *goa.ServiceError) *CreateDeploymentNotFoundResponseBody {
	body := &CreateDeploymentNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDeploymentConflictResponseBody builds the HTTP response body from
// the result of the "createDeployment" endpoint of the "deployments" service.
func NewCreateDeploymentConflictResponseBody(res *goa.ServiceError) *CreateDeploymentConflictResponseBody {
	body := &CreateDeploymentConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDeploymentUnsupportedMediaResponseBody builds the HTTP response
// body from the result of the "createDeployment" endpoint of the "deployments"
// service.
func NewCreateDeploymentUnsupportedMediaResponseBody(res *goa.ServiceError) *CreateDeploymentUnsupportedMediaResponseBody {
	body := &CreateDeploymentUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDeploymentInvalidResponseBody builds the HTTP response body from
// the result of the "createDeployment" endpoint of the "deployments" service.
func NewCreateDeploymentInvalidResponseBody(res *goa.ServiceError) *CreateDeploymentInvalidResponseBody {
	body := &CreateDeploymentInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDeploymentInvariantViolationResponseBody builds the HTTP response
// body from the result of the "createDeployment" endpoint of the "deployments"
// service.
func NewCreateDeploymentInvariantViolationResponseBody(res *goa.ServiceError) *CreateDeploymentInvariantViolationResponseBody {
	body := &CreateDeploymentInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDeploymentUnexpectedResponseBody builds the HTTP response body from
// the result of the "createDeployment" endpoint of the "deployments" service.
func NewCreateDeploymentUnexpectedResponseBody(res *goa.ServiceError) *CreateDeploymentUnexpectedResponseBody {
	body := &CreateDeploymentUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDeploymentGatewayErrorResponseBody builds the HTTP response body
// from the result of the "createDeployment" endpoint of the "deployments"
// service.
func NewCreateDeploymentGatewayErrorResponseBody(res *goa.ServiceError) *CreateDeploymentGatewayErrorResponseBody {
	body := &CreateDeploymentGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvolveUnauthorizedResponseBody builds the HTTP response body from the
// result of the "evolve" endpoint of the "deployments" service.
func NewEvolveUnauthorizedResponseBody(res *goa.ServiceError) *EvolveUnauthorizedResponseBody {
	body := &EvolveUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvolveForbiddenResponseBody builds the HTTP response body from the result
// of the "evolve" endpoint of the "deployments" service.
func NewEvolveForbiddenResponseBody(res *goa.ServiceError) *EvolveForbiddenResponseBody {
	body := &EvolveForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvolveBadRequestResponseBody builds the HTTP response body from the
// result of the "evolve" endpoint of the "deployments" service.
func NewEvolveBadRequestResponseBody(res *goa.ServiceError) *EvolveBadRequestResponseBody {
	body := &EvolveBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvolveNotFoundResponseBody builds the HTTP response body from the result
// of the "evolve" endpoint of the "deployments" service.
func NewEvolveNotFoundResponseBody(res *goa.ServiceError) *EvolveNotFoundResponseBody {
	body := &EvolveNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvolveConflictResponseBody builds the HTTP response body from the result
// of the "evolve" endpoint of the "deployments" service.
func NewEvolveConflictResponseBody(res *goa.ServiceError) *EvolveConflictResponseBody {
	body := &EvolveConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvolveUnsupportedMediaResponseBody builds the HTTP response body from the
// result of the "evolve" endpoint of the "deployments" service.
func NewEvolveUnsupportedMediaResponseBody(res *goa.ServiceError) *EvolveUnsupportedMediaResponseBody {
	body := &EvolveUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvolveInvalidResponseBody builds the HTTP response body from the result
// of the "evolve" endpoint of the "deployments" service.
func NewEvolveInvalidResponseBody(res *goa.ServiceError) *EvolveInvalidResponseBody {
	body := &EvolveInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvolveInvariantViolationResponseBody builds the HTTP response body from
// the result of the "evolve" endpoint of the "deployments" service.
func NewEvolveInvariantViolationResponseBody(res *goa.ServiceError) *EvolveInvariantViolationResponseBody {
	body := &EvolveInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvolveUnexpectedResponseBody builds the HTTP response body from the
// result of the "evolve" endpoint of the "deployments" service.
func NewEvolveUnexpectedResponseBody(res *goa.ServiceError) *EvolveUnexpectedResponseBody {
	body := &EvolveUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvolveGatewayErrorResponseBody builds the HTTP response body from the
// result of the "evolve" endpoint of the "deployments" service.
func NewEvolveGatewayErrorResponseBody(res *goa.ServiceError) *EvolveGatewayErrorResponseBody {
	body := &EvolveGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRedeployUnauthorizedResponseBody builds the HTTP response body from the
// result of the "redeploy" endpoint of the "deployments" service.
func NewRedeployUnauthorizedResponseBody(res *goa.ServiceError) *RedeployUnauthorizedResponseBody {
	body := &RedeployUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRedeployForbiddenResponseBody builds the HTTP response body from the
// result of the "redeploy" endpoint of the "deployments" service.
func NewRedeployForbiddenResponseBody(res *goa.ServiceError) *RedeployForbiddenResponseBody {
	body := &RedeployForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRedeployBadRequestResponseBody builds the HTTP response body from the
// result of the "redeploy" endpoint of the "deployments" service.
func NewRedeployBadRequestResponseBody(res *goa.ServiceError) *RedeployBadRequestResponseBody {
	body := &RedeployBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRedeployNotFoundResponseBody builds the HTTP response body from the
// result of the "redeploy" endpoint of the "deployments" service.
func NewRedeployNotFoundResponseBody(res *goa.ServiceError) *RedeployNotFoundResponseBody {
	body := &RedeployNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRedeployConflictResponseBody builds the HTTP response body from the
// result of the "redeploy" endpoint of the "deployments" service.
func NewRedeployConflictResponseBody(res *goa.ServiceError) *RedeployConflictResponseBody {
	body := &RedeployConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRedeployUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "redeploy" endpoint of the "deployments" service.
func NewRedeployUnsupportedMediaResponseBody(res *goa.ServiceError) *RedeployUnsupportedMediaResponseBody {
	body := &RedeployUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRedeployInvalidResponseBody builds the HTTP response body from the result
// of the "redeploy" endpoint of the "deployments" service.
func NewRedeployInvalidResponseBody(res *goa.ServiceError) *RedeployInvalidResponseBody {
	body := &RedeployInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRedeployInvariantViolationResponseBody builds the HTTP response body from
// the result of the "redeploy" endpoint of the "deployments" service.
func NewRedeployInvariantViolationResponseBody(res *goa.ServiceError) *RedeployInvariantViolationResponseBody {
	body := &RedeployInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRedeployUnexpectedResponseBody builds the HTTP response body from the
// result of the "redeploy" endpoint of the "deployments" service.
func NewRedeployUnexpectedResponseBody(res *goa.ServiceError) *RedeployUnexpectedResponseBody {
	body := &RedeployUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRedeployGatewayErrorResponseBody builds the HTTP response body from the
// result of the "redeploy" endpoint of the "deployments" service.
func NewRedeployGatewayErrorResponseBody(res *goa.ServiceError) *RedeployGatewayErrorResponseBody {
	body := &RedeployGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListDeploymentsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "listDeployments" endpoint of the "deployments"
// service.
func NewListDeploymentsUnauthorizedResponseBody(res *goa.ServiceError) *ListDeploymentsUnauthorizedResponseBody {
	body := &ListDeploymentsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListDeploymentsForbiddenResponseBody builds the HTTP response body from
// the result of the "listDeployments" endpoint of the "deployments" service.
func NewListDeploymentsForbiddenResponseBody(res *goa.ServiceError) *ListDeploymentsForbiddenResponseBody {
	body := &ListDeploymentsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListDeploymentsBadRequestResponseBody builds the HTTP response body from
// the result of the "listDeployments" endpoint of the "deployments" service.
func NewListDeploymentsBadRequestResponseBody(res *goa.ServiceError) *ListDeploymentsBadRequestResponseBody {
	body := &ListDeploymentsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListDeploymentsNotFoundResponseBody builds the HTTP response body from
// the result of the "listDeployments" endpoint of the "deployments" service.
func NewListDeploymentsNotFoundResponseBody(res *goa.ServiceError) *ListDeploymentsNotFoundResponseBody {
	body := &ListDeploymentsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListDeploymentsConflictResponseBody builds the HTTP response body from
// the result of the "listDeployments" endpoint of the "deployments" service.
func NewListDeploymentsConflictResponseBody(res *goa.ServiceError) *ListDeploymentsConflictResponseBody {
	body := &ListDeploymentsConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListDeploymentsUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "listDeployments" endpoint of the "deployments"
// service.
func NewListDeploymentsUnsupportedMediaResponseBody(res *goa.ServiceError) *ListDeploymentsUnsupportedMediaResponseBody {
	body := &ListDeploymentsUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListDeploymentsInvalidResponseBody builds the HTTP response body from the
// result of the "listDeployments" endpoint of the "deployments" service.
func NewListDeploymentsInvalidResponseBody(res *goa.ServiceError) *ListDeploymentsInvalidResponseBody {
	body := &ListDeploymentsInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListDeploymentsInvariantViolationResponseBody builds the HTTP response
// body from the result of the "listDeployments" endpoint of the "deployments"
// service.
func NewListDeploymentsInvariantViolationResponseBody(res *goa.ServiceError) *ListDeploymentsInvariantViolationResponseBody {
	body := &ListDeploymentsInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListDeploymentsUnexpectedResponseBody builds the HTTP response body from
// the result of the "listDeployments" endpoint of the "deployments" service.
func NewListDeploymentsUnexpectedResponseBody(res *goa.ServiceError) *ListDeploymentsUnexpectedResponseBody {
	body := &ListDeploymentsUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListDeploymentsGatewayErrorResponseBody builds the HTTP response body
// from the result of the "listDeployments" endpoint of the "deployments"
// service.
func NewListDeploymentsGatewayErrorResponseBody(res *goa.ServiceError) *ListDeploymentsGatewayErrorResponseBody {
	body := &ListDeploymentsGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentLogsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "getDeploymentLogs" endpoint of the "deployments"
// service.
func NewGetDeploymentLogsUnauthorizedResponseBody(res *goa.ServiceError) *GetDeploymentLogsUnauthorizedResponseBody {
	body := &GetDeploymentLogsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentLogsForbiddenResponseBody builds the HTTP response body from
// the result of the "getDeploymentLogs" endpoint of the "deployments" service.
func NewGetDeploymentLogsForbiddenResponseBody(res *goa.ServiceError) *GetDeploymentLogsForbiddenResponseBody {
	body := &GetDeploymentLogsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentLogsBadRequestResponseBody builds the HTTP response body
// from the result of the "getDeploymentLogs" endpoint of the "deployments"
// service.
func NewGetDeploymentLogsBadRequestResponseBody(res *goa.ServiceError) *GetDeploymentLogsBadRequestResponseBody {
	body := &GetDeploymentLogsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentLogsNotFoundResponseBody builds the HTTP response body from
// the result of the "getDeploymentLogs" endpoint of the "deployments" service.
func NewGetDeploymentLogsNotFoundResponseBody(res *goa.ServiceError) *GetDeploymentLogsNotFoundResponseBody {
	body := &GetDeploymentLogsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentLogsConflictResponseBody builds the HTTP response body from
// the result of the "getDeploymentLogs" endpoint of the "deployments" service.
func NewGetDeploymentLogsConflictResponseBody(res *goa.ServiceError) *GetDeploymentLogsConflictResponseBody {
	body := &GetDeploymentLogsConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentLogsUnsupportedMediaResponseBody builds the HTTP response
// body from the result of the "getDeploymentLogs" endpoint of the
// "deployments" service.
func NewGetDeploymentLogsUnsupportedMediaResponseBody(res *goa.ServiceError) *GetDeploymentLogsUnsupportedMediaResponseBody {
	body := &GetDeploymentLogsUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentLogsInvalidResponseBody builds the HTTP response body from
// the result of the "getDeploymentLogs" endpoint of the "deployments" service.
func NewGetDeploymentLogsInvalidResponseBody(res *goa.ServiceError) *GetDeploymentLogsInvalidResponseBody {
	body := &GetDeploymentLogsInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentLogsInvariantViolationResponseBody builds the HTTP response
// body from the result of the "getDeploymentLogs" endpoint of the
// "deployments" service.
func NewGetDeploymentLogsInvariantViolationResponseBody(res *goa.ServiceError) *GetDeploymentLogsInvariantViolationResponseBody {
	body := &GetDeploymentLogsInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentLogsUnexpectedResponseBody builds the HTTP response body
// from the result of the "getDeploymentLogs" endpoint of the "deployments"
// service.
func NewGetDeploymentLogsUnexpectedResponseBody(res *goa.ServiceError) *GetDeploymentLogsUnexpectedResponseBody {
	body := &GetDeploymentLogsUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentLogsGatewayErrorResponseBody builds the HTTP response body
// from the result of the "getDeploymentLogs" endpoint of the "deployments"
// service.
func NewGetDeploymentLogsGatewayErrorResponseBody(res *goa.ServiceError) *GetDeploymentLogsGatewayErrorResponseBody {
	body := &GetDeploymentLogsGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDeploymentPayload builds a deployments service getDeployment endpoint
// payload.
func NewGetDeploymentPayload(id string, apikeyToken *string, sessionToken *string, projectSlugInput *string) *deployments.GetDeploymentPayload {
	v := &deployments.GetDeploymentPayload{}
	v.ID = id
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewGetLatestDeploymentPayload builds a deployments service
// getLatestDeployment endpoint payload.
func NewGetLatestDeploymentPayload(apikeyToken *string, sessionToken *string, projectSlugInput *string) *deployments.GetLatestDeploymentPayload {
	v := &deployments.GetLatestDeploymentPayload{}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewCreateDeploymentPayload builds a deployments service createDeployment
// endpoint payload.
func NewCreateDeploymentPayload(body *CreateDeploymentRequestBody, apikeyToken *string, sessionToken *string, projectSlugInput *string, idempotencyKey string) *deployments.CreateDeploymentPayload {
	v := &deployments.CreateDeploymentPayload{
		GithubRepo:  body.GithubRepo,
		GithubPr:    body.GithubPr,
		GithubSha:   body.GithubSha,
		ExternalID:  body.ExternalID,
		ExternalURL: body.ExternalURL,
	}
	if body.Openapiv3Assets != nil {
		v.Openapiv3Assets = make([]*deployments.AddOpenAPIv3DeploymentAssetForm, len(body.Openapiv3Assets))
		for i, val := range body.Openapiv3Assets {
			v.Openapiv3Assets[i] = unmarshalAddOpenAPIv3DeploymentAssetFormRequestBodyToDeploymentsAddOpenAPIv3DeploymentAssetForm(val)
		}
	}
	if body.Packages != nil {
		v.Packages = make([]*deployments.AddDeploymentPackageForm, len(body.Packages))
		for i, val := range body.Packages {
			v.Packages[i] = unmarshalAddDeploymentPackageFormRequestBodyToDeploymentsAddDeploymentPackageForm(val)
		}
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput
	v.IdempotencyKey = idempotencyKey

	return v
}

// NewEvolvePayload builds a deployments service evolve endpoint payload.
func NewEvolvePayload(body *EvolveRequestBody, apikeyToken *string, sessionToken *string, projectSlugInput *string) *deployments.EvolvePayload {
	v := &deployments.EvolvePayload{
		DeploymentID: body.DeploymentID,
	}
	if body.UpsertOpenapiv3Assets != nil {
		v.UpsertOpenapiv3Assets = make([]*deployments.AddOpenAPIv3DeploymentAssetForm, len(body.UpsertOpenapiv3Assets))
		for i, val := range body.UpsertOpenapiv3Assets {
			v.UpsertOpenapiv3Assets[i] = unmarshalAddOpenAPIv3DeploymentAssetFormRequestBodyToDeploymentsAddOpenAPIv3DeploymentAssetForm(val)
		}
	}
	if body.UpsertPackages != nil {
		v.UpsertPackages = make([]*deployments.AddPackageForm, len(body.UpsertPackages))
		for i, val := range body.UpsertPackages {
			v.UpsertPackages[i] = unmarshalAddPackageFormRequestBodyToDeploymentsAddPackageForm(val)
		}
	}
	if body.ExcludeOpenapiv3Assets != nil {
		v.ExcludeOpenapiv3Assets = make([]string, len(body.ExcludeOpenapiv3Assets))
		for i, val := range body.ExcludeOpenapiv3Assets {
			v.ExcludeOpenapiv3Assets[i] = val
		}
	}
	if body.ExcludePackages != nil {
		v.ExcludePackages = make([]string, len(body.ExcludePackages))
		for i, val := range body.ExcludePackages {
			v.ExcludePackages[i] = val
		}
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewRedeployPayload builds a deployments service redeploy endpoint payload.
func NewRedeployPayload(body *RedeployRequestBody, apikeyToken *string, sessionToken *string, projectSlugInput *string) *deployments.RedeployPayload {
	v := &deployments.RedeployPayload{
		DeploymentID: *body.DeploymentID,
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewListDeploymentsPayload builds a deployments service listDeployments
// endpoint payload.
func NewListDeploymentsPayload(cursor *string, apikeyToken *string, sessionToken *string, projectSlugInput *string) *deployments.ListDeploymentsPayload {
	v := &deployments.ListDeploymentsPayload{}
	v.Cursor = cursor
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewGetDeploymentLogsPayload builds a deployments service getDeploymentLogs
// endpoint payload.
func NewGetDeploymentLogsPayload(deploymentID string, cursor *string, apikeyToken *string, sessionToken *string, projectSlugInput *string) *deployments.GetDeploymentLogsPayload {
	v := &deployments.GetDeploymentLogsPayload{}
	v.DeploymentID = deploymentID
	v.Cursor = cursor
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// ValidateCreateDeploymentRequestBody runs the validations defined on
// CreateDeploymentRequestBody
func ValidateCreateDeploymentRequestBody(body *CreateDeploymentRequestBody) (err error) {
	for _, e := range body.Openapiv3Assets {
		if e != nil {
			if err2 := ValidateAddOpenAPIv3DeploymentAssetFormRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Packages {
		if e != nil {
			if err2 := ValidateAddDeploymentPackageFormRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateEvolveRequestBody runs the validations defined on EvolveRequestBody
func ValidateEvolveRequestBody(body *EvolveRequestBody) (err error) {
	for _, e := range body.UpsertOpenapiv3Assets {
		if e != nil {
			if err2 := ValidateAddOpenAPIv3DeploymentAssetFormRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.UpsertPackages {
		if e != nil {
			if err2 := ValidateAddPackageFormRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateRedeployRequestBody runs the validations defined on
// RedeployRequestBody
func ValidateRedeployRequestBody(body *RedeployRequestBody) (err error) {
	if body.DeploymentID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deployment_id", "body"))
	}
	return
}

// ValidateAddOpenAPIv3DeploymentAssetFormRequestBody runs the validations
// defined on AddOpenAPIv3DeploymentAssetFormRequestBody
func ValidateAddOpenAPIv3DeploymentAssetFormRequestBody(body *AddOpenAPIv3DeploymentAssetFormRequestBody) (err error) {
	if body.AssetID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("asset_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z0-9]+(?:[a-z0-9_-]*[a-z0-9])?$"))
	}
	if body.Slug != nil {
		if utf8.RuneCountInString(*body.Slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.slug", *body.Slug, utf8.RuneCountInString(*body.Slug), 40, false))
		}
	}
	return
}

// ValidateAddDeploymentPackageFormRequestBody runs the validations defined on
// AddDeploymentPackageFormRequestBody
func ValidateAddDeploymentPackageFormRequestBody(body *AddDeploymentPackageFormRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateAddPackageFormRequestBody runs the validations defined on
// AddPackageFormRequestBody
func ValidateAddPackageFormRequestBody(body *AddPackageFormRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
