// Code generated by goa v3.22.2, DO NOT EDIT.
//
// deployments HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	deployments "github.com/speakeasy-api/gram/server/gen/deployments"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetDeploymentRequest instantiates a HTTP request object with method and
// path set to call the "deployments" service "getDeployment" endpoint
func (c *Client) BuildGetDeploymentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetDeploymentDeploymentsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "getDeployment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetDeploymentRequest returns an encoder for requests sent to the
// deployments getDeployment server.
func EncodeGetDeploymentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*deployments.GetDeploymentPayload)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "getDeployment", "*deployments.GetDeploymentPayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("id", p.ID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetDeploymentResponse returns a decoder for responses returned by the
// deployments getDeployment endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetDeploymentResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeGetDeploymentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetDeploymentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeployment", err)
			}
			err = ValidateGetDeploymentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeployment", err)
			}
			res := NewGetDeploymentResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetDeploymentUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeployment", err)
			}
			err = ValidateGetDeploymentUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeployment", err)
			}
			return nil, NewGetDeploymentUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetDeploymentForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeployment", err)
			}
			err = ValidateGetDeploymentForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeployment", err)
			}
			return nil, NewGetDeploymentForbidden(&body)
		case http.StatusBadRequest:
			var (
				body GetDeploymentBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeployment", err)
			}
			err = ValidateGetDeploymentBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeployment", err)
			}
			return nil, NewGetDeploymentBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetDeploymentNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeployment", err)
			}
			err = ValidateGetDeploymentNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeployment", err)
			}
			return nil, NewGetDeploymentNotFound(&body)
		case http.StatusConflict:
			var (
				body GetDeploymentConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeployment", err)
			}
			err = ValidateGetDeploymentConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeployment", err)
			}
			return nil, NewGetDeploymentConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body GetDeploymentUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeployment", err)
			}
			err = ValidateGetDeploymentUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeployment", err)
			}
			return nil, NewGetDeploymentUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body GetDeploymentInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeployment", err)
			}
			err = ValidateGetDeploymentInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeployment", err)
			}
			return nil, NewGetDeploymentInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body GetDeploymentInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("deployments", "getDeployment", err)
				}
				err = ValidateGetDeploymentInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("deployments", "getDeployment", err)
				}
				return nil, NewGetDeploymentInvariantViolation(&body)
			case "unexpected":
				var (
					body GetDeploymentUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("deployments", "getDeployment", err)
				}
				err = ValidateGetDeploymentUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("deployments", "getDeployment", err)
				}
				return nil, NewGetDeploymentUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("deployments", "getDeployment", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body GetDeploymentGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeployment", err)
			}
			err = ValidateGetDeploymentGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeployment", err)
			}
			return nil, NewGetDeploymentGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "getDeployment", resp.StatusCode, string(body))
		}
	}
}

// BuildGetLatestDeploymentRequest instantiates a HTTP request object with
// method and path set to call the "deployments" service "getLatestDeployment"
// endpoint
func (c *Client) BuildGetLatestDeploymentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetLatestDeploymentDeploymentsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "getLatestDeployment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetLatestDeploymentRequest returns an encoder for requests sent to the
// deployments getLatestDeployment server.
func EncodeGetLatestDeploymentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*deployments.GetLatestDeploymentPayload)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "getLatestDeployment", "*deployments.GetLatestDeploymentPayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		return nil
	}
}

// DecodeGetLatestDeploymentResponse returns a decoder for responses returned
// by the deployments getLatestDeployment endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeGetLatestDeploymentResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeGetLatestDeploymentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetLatestDeploymentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getLatestDeployment", err)
			}
			err = ValidateGetLatestDeploymentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getLatestDeployment", err)
			}
			res := NewGetLatestDeploymentResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetLatestDeploymentUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getLatestDeployment", err)
			}
			err = ValidateGetLatestDeploymentUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getLatestDeployment", err)
			}
			return nil, NewGetLatestDeploymentUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetLatestDeploymentForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getLatestDeployment", err)
			}
			err = ValidateGetLatestDeploymentForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getLatestDeployment", err)
			}
			return nil, NewGetLatestDeploymentForbidden(&body)
		case http.StatusBadRequest:
			var (
				body GetLatestDeploymentBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getLatestDeployment", err)
			}
			err = ValidateGetLatestDeploymentBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getLatestDeployment", err)
			}
			return nil, NewGetLatestDeploymentBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetLatestDeploymentNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getLatestDeployment", err)
			}
			err = ValidateGetLatestDeploymentNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getLatestDeployment", err)
			}
			return nil, NewGetLatestDeploymentNotFound(&body)
		case http.StatusConflict:
			var (
				body GetLatestDeploymentConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getLatestDeployment", err)
			}
			err = ValidateGetLatestDeploymentConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getLatestDeployment", err)
			}
			return nil, NewGetLatestDeploymentConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body GetLatestDeploymentUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getLatestDeployment", err)
			}
			err = ValidateGetLatestDeploymentUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getLatestDeployment", err)
			}
			return nil, NewGetLatestDeploymentUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body GetLatestDeploymentInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getLatestDeployment", err)
			}
			err = ValidateGetLatestDeploymentInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getLatestDeployment", err)
			}
			return nil, NewGetLatestDeploymentInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body GetLatestDeploymentInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("deployments", "getLatestDeployment", err)
				}
				err = ValidateGetLatestDeploymentInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("deployments", "getLatestDeployment", err)
				}
				return nil, NewGetLatestDeploymentInvariantViolation(&body)
			case "unexpected":
				var (
					body GetLatestDeploymentUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("deployments", "getLatestDeployment", err)
				}
				err = ValidateGetLatestDeploymentUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("deployments", "getLatestDeployment", err)
				}
				return nil, NewGetLatestDeploymentUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("deployments", "getLatestDeployment", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body GetLatestDeploymentGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getLatestDeployment", err)
			}
			err = ValidateGetLatestDeploymentGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getLatestDeployment", err)
			}
			return nil, NewGetLatestDeploymentGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "getLatestDeployment", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateDeploymentRequest instantiates a HTTP request object with method
// and path set to call the "deployments" service "createDeployment" endpoint
func (c *Client) BuildCreateDeploymentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateDeploymentDeploymentsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "createDeployment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateDeploymentRequest returns an encoder for requests sent to the
// deployments createDeployment server.
func EncodeCreateDeploymentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*deployments.CreateDeploymentPayload)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "createDeployment", "*deployments.CreateDeploymentPayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		{
			head := p.IdempotencyKey
			req.Header.Set("Idempotency-Key", head)
		}
		body := NewCreateDeploymentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("deployments", "createDeployment", err)
		}
		return nil
	}
}

// DecodeCreateDeploymentResponse returns a decoder for responses returned by
// the deployments createDeployment endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateDeploymentResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeCreateDeploymentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateDeploymentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "createDeployment", err)
			}
			err = ValidateCreateDeploymentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "createDeployment", err)
			}
			res := NewCreateDeploymentResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CreateDeploymentUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "createDeployment", err)
			}
			err = ValidateCreateDeploymentUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "createDeployment", err)
			}
			return nil, NewCreateDeploymentUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CreateDeploymentForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "createDeployment", err)
			}
			err = ValidateCreateDeploymentForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "createDeployment", err)
			}
			return nil, NewCreateDeploymentForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CreateDeploymentBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "createDeployment", err)
			}
			err = ValidateCreateDeploymentBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "createDeployment", err)
			}
			return nil, NewCreateDeploymentBadRequest(&body)
		case http.StatusNotFound:
			var (
				body CreateDeploymentNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "createDeployment", err)
			}
			err = ValidateCreateDeploymentNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "createDeployment", err)
			}
			return nil, NewCreateDeploymentNotFound(&body)
		case http.StatusConflict:
			var (
				body CreateDeploymentConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "createDeployment", err)
			}
			err = ValidateCreateDeploymentConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "createDeployment", err)
			}
			return nil, NewCreateDeploymentConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body CreateDeploymentUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "createDeployment", err)
			}
			err = ValidateCreateDeploymentUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "createDeployment", err)
			}
			return nil, NewCreateDeploymentUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body CreateDeploymentInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "createDeployment", err)
			}
			err = ValidateCreateDeploymentInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "createDeployment", err)
			}
			return nil, NewCreateDeploymentInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body CreateDeploymentInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("deployments", "createDeployment", err)
				}
				err = ValidateCreateDeploymentInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("deployments", "createDeployment", err)
				}
				return nil, NewCreateDeploymentInvariantViolation(&body)
			case "unexpected":
				var (
					body CreateDeploymentUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("deployments", "createDeployment", err)
				}
				err = ValidateCreateDeploymentUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("deployments", "createDeployment", err)
				}
				return nil, NewCreateDeploymentUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("deployments", "createDeployment", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body CreateDeploymentGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "createDeployment", err)
			}
			err = ValidateCreateDeploymentGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "createDeployment", err)
			}
			return nil, NewCreateDeploymentGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "createDeployment", resp.StatusCode, string(body))
		}
	}
}

// BuildEvolveRequest instantiates a HTTP request object with method and path
// set to call the "deployments" service "evolve" endpoint
func (c *Client) BuildEvolveRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EvolveDeploymentsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "evolve", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeEvolveRequest returns an encoder for requests sent to the deployments
// evolve server.
func EncodeEvolveRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*deployments.EvolvePayload)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "evolve", "*deployments.EvolvePayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewEvolveRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("deployments", "evolve", err)
		}
		return nil
	}
}

// DecodeEvolveResponse returns a decoder for responses returned by the
// deployments evolve endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeEvolveResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeEvolveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body EvolveResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "evolve", err)
			}
			err = ValidateEvolveResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "evolve", err)
			}
			res := NewEvolveResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body EvolveUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "evolve", err)
			}
			err = ValidateEvolveUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "evolve", err)
			}
			return nil, NewEvolveUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body EvolveForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "evolve", err)
			}
			err = ValidateEvolveForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "evolve", err)
			}
			return nil, NewEvolveForbidden(&body)
		case http.StatusBadRequest:
			var (
				body EvolveBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "evolve", err)
			}
			err = ValidateEvolveBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "evolve", err)
			}
			return nil, NewEvolveBadRequest(&body)
		case http.StatusNotFound:
			var (
				body EvolveNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "evolve", err)
			}
			err = ValidateEvolveNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "evolve", err)
			}
			return nil, NewEvolveNotFound(&body)
		case http.StatusConflict:
			var (
				body EvolveConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "evolve", err)
			}
			err = ValidateEvolveConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "evolve", err)
			}
			return nil, NewEvolveConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body EvolveUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "evolve", err)
			}
			err = ValidateEvolveUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "evolve", err)
			}
			return nil, NewEvolveUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body EvolveInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "evolve", err)
			}
			err = ValidateEvolveInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "evolve", err)
			}
			return nil, NewEvolveInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body EvolveInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("deployments", "evolve", err)
				}
				err = ValidateEvolveInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("deployments", "evolve", err)
				}
				return nil, NewEvolveInvariantViolation(&body)
			case "unexpected":
				var (
					body EvolveUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("deployments", "evolve", err)
				}
				err = ValidateEvolveUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("deployments", "evolve", err)
				}
				return nil, NewEvolveUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("deployments", "evolve", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body EvolveGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "evolve", err)
			}
			err = ValidateEvolveGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "evolve", err)
			}
			return nil, NewEvolveGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "evolve", resp.StatusCode, string(body))
		}
	}
}

// BuildRedeployRequest instantiates a HTTP request object with method and path
// set to call the "deployments" service "redeploy" endpoint
func (c *Client) BuildRedeployRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RedeployDeploymentsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "redeploy", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRedeployRequest returns an encoder for requests sent to the
// deployments redeploy server.
func EncodeRedeployRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*deployments.RedeployPayload)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "redeploy", "*deployments.RedeployPayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewRedeployRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("deployments", "redeploy", err)
		}
		return nil
	}
}

// DecodeRedeployResponse returns a decoder for responses returned by the
// deployments redeploy endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeRedeployResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeRedeployResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RedeployResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "redeploy", err)
			}
			err = ValidateRedeployResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "redeploy", err)
			}
			res := NewRedeployResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body RedeployUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "redeploy", err)
			}
			err = ValidateRedeployUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "redeploy", err)
			}
			return nil, NewRedeployUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body RedeployForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "redeploy", err)
			}
			err = ValidateRedeployForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "redeploy", err)
			}
			return nil, NewRedeployForbidden(&body)
		case http.StatusBadRequest:
			var (
				body RedeployBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "redeploy", err)
			}
			err = ValidateRedeployBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "redeploy", err)
			}
			return nil, NewRedeployBadRequest(&body)
		case http.StatusNotFound:
			var (
				body RedeployNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "redeploy", err)
			}
			err = ValidateRedeployNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "redeploy", err)
			}
			return nil, NewRedeployNotFound(&body)
		case http.StatusConflict:
			var (
				body RedeployConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "redeploy", err)
			}
			err = ValidateRedeployConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "redeploy", err)
			}
			return nil, NewRedeployConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body RedeployUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "redeploy", err)
			}
			err = ValidateRedeployUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "redeploy", err)
			}
			return nil, NewRedeployUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body RedeployInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "redeploy", err)
			}
			err = ValidateRedeployInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "redeploy", err)
			}
			return nil, NewRedeployInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body RedeployInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("deployments", "redeploy", err)
				}
				err = ValidateRedeployInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("deployments", "redeploy", err)
				}
				return nil, NewRedeployInvariantViolation(&body)
			case "unexpected":
				var (
					body RedeployUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("deployments", "redeploy", err)
				}
				err = ValidateRedeployUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("deployments", "redeploy", err)
				}
				return nil, NewRedeployUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("deployments", "redeploy", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body RedeployGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "redeploy", err)
			}
			err = ValidateRedeployGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "redeploy", err)
			}
			return nil, NewRedeployGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "redeploy", resp.StatusCode, string(body))
		}
	}
}

// BuildListDeploymentsRequest instantiates a HTTP request object with method
// and path set to call the "deployments" service "listDeployments" endpoint
func (c *Client) BuildListDeploymentsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListDeploymentsDeploymentsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "listDeployments", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListDeploymentsRequest returns an encoder for requests sent to the
// deployments listDeployments server.
func EncodeListDeploymentsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*deployments.ListDeploymentsPayload)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "listDeployments", "*deployments.ListDeploymentsPayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		if p.Cursor != nil {
			values.Add("cursor", *p.Cursor)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListDeploymentsResponse returns a decoder for responses returned by
// the deployments listDeployments endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeListDeploymentsResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeListDeploymentsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListDeploymentsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "listDeployments", err)
			}
			err = ValidateListDeploymentsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "listDeployments", err)
			}
			res := NewListDeploymentsListDeploymentResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListDeploymentsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "listDeployments", err)
			}
			err = ValidateListDeploymentsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "listDeployments", err)
			}
			return nil, NewListDeploymentsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListDeploymentsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "listDeployments", err)
			}
			err = ValidateListDeploymentsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "listDeployments", err)
			}
			return nil, NewListDeploymentsForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ListDeploymentsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "listDeployments", err)
			}
			err = ValidateListDeploymentsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "listDeployments", err)
			}
			return nil, NewListDeploymentsBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ListDeploymentsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "listDeployments", err)
			}
			err = ValidateListDeploymentsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "listDeployments", err)
			}
			return nil, NewListDeploymentsNotFound(&body)
		case http.StatusConflict:
			var (
				body ListDeploymentsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "listDeployments", err)
			}
			err = ValidateListDeploymentsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "listDeployments", err)
			}
			return nil, NewListDeploymentsConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ListDeploymentsUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "listDeployments", err)
			}
			err = ValidateListDeploymentsUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "listDeployments", err)
			}
			return nil, NewListDeploymentsUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ListDeploymentsInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "listDeployments", err)
			}
			err = ValidateListDeploymentsInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "listDeployments", err)
			}
			return nil, NewListDeploymentsInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ListDeploymentsInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("deployments", "listDeployments", err)
				}
				err = ValidateListDeploymentsInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("deployments", "listDeployments", err)
				}
				return nil, NewListDeploymentsInvariantViolation(&body)
			case "unexpected":
				var (
					body ListDeploymentsUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("deployments", "listDeployments", err)
				}
				err = ValidateListDeploymentsUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("deployments", "listDeployments", err)
				}
				return nil, NewListDeploymentsUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("deployments", "listDeployments", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ListDeploymentsGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "listDeployments", err)
			}
			err = ValidateListDeploymentsGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "listDeployments", err)
			}
			return nil, NewListDeploymentsGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "listDeployments", resp.StatusCode, string(body))
		}
	}
}

// BuildGetDeploymentLogsRequest instantiates a HTTP request object with method
// and path set to call the "deployments" service "getDeploymentLogs" endpoint
func (c *Client) BuildGetDeploymentLogsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetDeploymentLogsDeploymentsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "getDeploymentLogs", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetDeploymentLogsRequest returns an encoder for requests sent to the
// deployments getDeploymentLogs server.
func EncodeGetDeploymentLogsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*deployments.GetDeploymentLogsPayload)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "getDeploymentLogs", "*deployments.GetDeploymentLogsPayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("deployment_id", p.DeploymentID)
		if p.Cursor != nil {
			values.Add("cursor", *p.Cursor)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetDeploymentLogsResponse returns a decoder for responses returned by
// the deployments getDeploymentLogs endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetDeploymentLogsResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeGetDeploymentLogsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetDeploymentLogsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeploymentLogs", err)
			}
			err = ValidateGetDeploymentLogsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeploymentLogs", err)
			}
			res := NewGetDeploymentLogsResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetDeploymentLogsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeploymentLogs", err)
			}
			err = ValidateGetDeploymentLogsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeploymentLogs", err)
			}
			return nil, NewGetDeploymentLogsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetDeploymentLogsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeploymentLogs", err)
			}
			err = ValidateGetDeploymentLogsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeploymentLogs", err)
			}
			return nil, NewGetDeploymentLogsForbidden(&body)
		case http.StatusBadRequest:
			var (
				body GetDeploymentLogsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeploymentLogs", err)
			}
			err = ValidateGetDeploymentLogsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeploymentLogs", err)
			}
			return nil, NewGetDeploymentLogsBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetDeploymentLogsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeploymentLogs", err)
			}
			err = ValidateGetDeploymentLogsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeploymentLogs", err)
			}
			return nil, NewGetDeploymentLogsNotFound(&body)
		case http.StatusConflict:
			var (
				body GetDeploymentLogsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeploymentLogs", err)
			}
			err = ValidateGetDeploymentLogsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeploymentLogs", err)
			}
			return nil, NewGetDeploymentLogsConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body GetDeploymentLogsUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeploymentLogs", err)
			}
			err = ValidateGetDeploymentLogsUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeploymentLogs", err)
			}
			return nil, NewGetDeploymentLogsUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body GetDeploymentLogsInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeploymentLogs", err)
			}
			err = ValidateGetDeploymentLogsInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeploymentLogs", err)
			}
			return nil, NewGetDeploymentLogsInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body GetDeploymentLogsInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("deployments", "getDeploymentLogs", err)
				}
				err = ValidateGetDeploymentLogsInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("deployments", "getDeploymentLogs", err)
				}
				return nil, NewGetDeploymentLogsInvariantViolation(&body)
			case "unexpected":
				var (
					body GetDeploymentLogsUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("deployments", "getDeploymentLogs", err)
				}
				err = ValidateGetDeploymentLogsUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("deployments", "getDeploymentLogs", err)
				}
				return nil, NewGetDeploymentLogsUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("deployments", "getDeploymentLogs", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body GetDeploymentLogsGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeploymentLogs", err)
			}
			err = ValidateGetDeploymentLogsGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeploymentLogs", err)
			}
			return nil, NewGetDeploymentLogsGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "getDeploymentLogs", resp.StatusCode, string(body))
		}
	}
}

// unmarshalOpenAPIv3DeploymentAssetResponseBodyToTypesOpenAPIv3DeploymentAsset
// builds a value of type *types.OpenAPIv3DeploymentAsset from a value of type
// *OpenAPIv3DeploymentAssetResponseBody.
func unmarshalOpenAPIv3DeploymentAssetResponseBodyToTypesOpenAPIv3DeploymentAsset(v *OpenAPIv3DeploymentAssetResponseBody) *types.OpenAPIv3DeploymentAsset {
	res := &types.OpenAPIv3DeploymentAsset{
		ID:      *v.ID,
		AssetID: *v.AssetID,
		Name:    *v.Name,
		Slug:    types.Slug(*v.Slug),
	}

	return res
}

// unmarshalDeploymentPackageResponseBodyToTypesDeploymentPackage builds a
// value of type *types.DeploymentPackage from a value of type
// *DeploymentPackageResponseBody.
func unmarshalDeploymentPackageResponseBodyToTypesDeploymentPackage(v *DeploymentPackageResponseBody) *types.DeploymentPackage {
	res := &types.DeploymentPackage{
		ID:      *v.ID,
		Name:    *v.Name,
		Version: *v.Version,
	}

	return res
}

// unmarshalDeploymentResponseBodyToTypesDeployment builds a value of type
// *types.Deployment from a value of type *DeploymentResponseBody.
func unmarshalDeploymentResponseBodyToTypesDeployment(v *DeploymentResponseBody) *types.Deployment {
	if v == nil {
		return nil
	}
	res := &types.Deployment{
		ID:             *v.ID,
		OrganizationID: *v.OrganizationID,
		ProjectID:      *v.ProjectID,
		UserID:         *v.UserID,
		CreatedAt:      *v.CreatedAt,
		Status:         *v.Status,
		IdempotencyKey: v.IdempotencyKey,
		GithubRepo:     v.GithubRepo,
		GithubPr:       v.GithubPr,
		GithubSha:      v.GithubSha,
		ExternalID:     v.ExternalID,
		ExternalURL:    v.ExternalURL,
		ClonedFrom:     v.ClonedFrom,
		ToolCount:      *v.ToolCount,
	}
	res.Openapiv3Assets = make([]*types.OpenAPIv3DeploymentAsset, len(v.Openapiv3Assets))
	for i, val := range v.Openapiv3Assets {
		res.Openapiv3Assets[i] = unmarshalOpenAPIv3DeploymentAssetResponseBodyToTypesOpenAPIv3DeploymentAsset(val)
	}
	res.Packages = make([]*types.DeploymentPackage, len(v.Packages))
	for i, val := range v.Packages {
		res.Packages[i] = unmarshalDeploymentPackageResponseBodyToTypesDeploymentPackage(val)
	}

	return res
}

// marshalDeploymentsAddOpenAPIv3DeploymentAssetFormToAddOpenAPIv3DeploymentAssetFormRequestBody
// builds a value of type *AddOpenAPIv3DeploymentAssetFormRequestBody from a
// value of type *deployments.AddOpenAPIv3DeploymentAssetForm.
func marshalDeploymentsAddOpenAPIv3DeploymentAssetFormToAddOpenAPIv3DeploymentAssetFormRequestBody(v *deployments.AddOpenAPIv3DeploymentAssetForm) *AddOpenAPIv3DeploymentAssetFormRequestBody {
	if v == nil {
		return nil
	}
	res := &AddOpenAPIv3DeploymentAssetFormRequestBody{
		AssetID: v.AssetID,
		Name:    v.Name,
		Slug:    string(v.Slug),
	}

	return res
}

// marshalDeploymentsAddDeploymentPackageFormToAddDeploymentPackageFormRequestBody
// builds a value of type *AddDeploymentPackageFormRequestBody from a value of
// type *deployments.AddDeploymentPackageForm.
func marshalDeploymentsAddDeploymentPackageFormToAddDeploymentPackageFormRequestBody(v *deployments.AddDeploymentPackageForm) *AddDeploymentPackageFormRequestBody {
	if v == nil {
		return nil
	}
	res := &AddDeploymentPackageFormRequestBody{
		Name:    v.Name,
		Version: v.Version,
	}

	return res
}

// marshalAddOpenAPIv3DeploymentAssetFormRequestBodyToDeploymentsAddOpenAPIv3DeploymentAssetForm
// builds a value of type *deployments.AddOpenAPIv3DeploymentAssetForm from a
// value of type *AddOpenAPIv3DeploymentAssetFormRequestBody.
func marshalAddOpenAPIv3DeploymentAssetFormRequestBodyToDeploymentsAddOpenAPIv3DeploymentAssetForm(v *AddOpenAPIv3DeploymentAssetFormRequestBody) *deployments.AddOpenAPIv3DeploymentAssetForm {
	if v == nil {
		return nil
	}
	res := &deployments.AddOpenAPIv3DeploymentAssetForm{
		AssetID: v.AssetID,
		Name:    v.Name,
		Slug:    types.Slug(v.Slug),
	}

	return res
}

// marshalAddDeploymentPackageFormRequestBodyToDeploymentsAddDeploymentPackageForm
// builds a value of type *deployments.AddDeploymentPackageForm from a value of
// type *AddDeploymentPackageFormRequestBody.
func marshalAddDeploymentPackageFormRequestBodyToDeploymentsAddDeploymentPackageForm(v *AddDeploymentPackageFormRequestBody) *deployments.AddDeploymentPackageForm {
	if v == nil {
		return nil
	}
	res := &deployments.AddDeploymentPackageForm{
		Name:    v.Name,
		Version: v.Version,
	}

	return res
}

// marshalDeploymentsAddPackageFormToAddPackageFormRequestBody builds a value
// of type *AddPackageFormRequestBody from a value of type
// *deployments.AddPackageForm.
func marshalDeploymentsAddPackageFormToAddPackageFormRequestBody(v *deployments.AddPackageForm) *AddPackageFormRequestBody {
	if v == nil {
		return nil
	}
	res := &AddPackageFormRequestBody{
		Name:    v.Name,
		Version: v.Version,
	}

	return res
}

// marshalAddPackageFormRequestBodyToDeploymentsAddPackageForm builds a value
// of type *deployments.AddPackageForm from a value of type
// *AddPackageFormRequestBody.
func marshalAddPackageFormRequestBodyToDeploymentsAddPackageForm(v *AddPackageFormRequestBody) *deployments.AddPackageForm {
	if v == nil {
		return nil
	}
	res := &deployments.AddPackageForm{
		Name:    v.Name,
		Version: v.Version,
	}

	return res
}

// unmarshalDeploymentSummaryResponseBodyToDeploymentsDeploymentSummary builds
// a value of type *deployments.DeploymentSummary from a value of type
// *DeploymentSummaryResponseBody.
func unmarshalDeploymentSummaryResponseBodyToDeploymentsDeploymentSummary(v *DeploymentSummaryResponseBody) *deployments.DeploymentSummary {
	res := &deployments.DeploymentSummary{
		ID:         *v.ID,
		UserID:     *v.UserID,
		Status:     *v.Status,
		CreatedAt:  *v.CreatedAt,
		AssetCount: *v.AssetCount,
		ToolCount:  *v.ToolCount,
	}

	return res
}

// unmarshalDeploymentLogEventResponseBodyToDeploymentsDeploymentLogEvent
// builds a value of type *deployments.DeploymentLogEvent from a value of type
// *DeploymentLogEventResponseBody.
func unmarshalDeploymentLogEventResponseBodyToDeploymentsDeploymentLogEvent(v *DeploymentLogEventResponseBody) *deployments.DeploymentLogEvent {
	res := &deployments.DeploymentLogEvent{
		ID:             *v.ID,
		AttachmentID:   v.AttachmentID,
		AttachmentType: v.AttachmentType,
		CreatedAt:      *v.CreatedAt,
		Event:          *v.Event,
		Message:        *v.Message,
	}

	return res
}
