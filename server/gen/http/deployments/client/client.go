// Code generated by goa v3.22.2, DO NOT EDIT.
//
// deployments client HTTP transport
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the deployments service endpoint HTTP clients.
type Client struct {
	// GetDeployment Doer is the HTTP client used to make requests to the
	// getDeployment endpoint.
	GetDeploymentDoer goahttp.Doer

	// GetLatestDeployment Doer is the HTTP client used to make requests to the
	// getLatestDeployment endpoint.
	GetLatestDeploymentDoer goahttp.Doer

	// CreateDeployment Doer is the HTTP client used to make requests to the
	// createDeployment endpoint.
	CreateDeploymentDoer goahttp.Doer

	// Evolve Doer is the HTTP client used to make requests to the evolve endpoint.
	EvolveDoer goahttp.Doer

	// Redeploy Doer is the HTTP client used to make requests to the redeploy
	// endpoint.
	RedeployDoer goahttp.Doer

	// ListDeployments Doer is the HTTP client used to make requests to the
	// listDeployments endpoint.
	ListDeploymentsDoer goahttp.Doer

	// GetDeploymentLogs Doer is the HTTP client used to make requests to the
	// getDeploymentLogs endpoint.
	GetDeploymentLogsDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the deployments service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GetDeploymentDoer:       doer,
		GetLatestDeploymentDoer: doer,
		CreateDeploymentDoer:    doer,
		EvolveDoer:              doer,
		RedeployDoer:            doer,
		ListDeploymentsDoer:     doer,
		GetDeploymentLogsDoer:   doer,
		RestoreResponseBody:     restoreBody,
		scheme:                  scheme,
		host:                    host,
		decoder:                 dec,
		encoder:                 enc,
	}
}

// GetDeployment returns an endpoint that makes HTTP requests to the
// deployments service getDeployment server.
func (c *Client) GetDeployment() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetDeploymentRequest(c.encoder)
		decodeResponse = DecodeGetDeploymentResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetDeploymentRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetDeploymentDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("deployments", "getDeployment", err)
		}
		return decodeResponse(resp)
	}
}

// GetLatestDeployment returns an endpoint that makes HTTP requests to the
// deployments service getLatestDeployment server.
func (c *Client) GetLatestDeployment() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetLatestDeploymentRequest(c.encoder)
		decodeResponse = DecodeGetLatestDeploymentResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetLatestDeploymentRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetLatestDeploymentDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("deployments", "getLatestDeployment", err)
		}
		return decodeResponse(resp)
	}
}

// CreateDeployment returns an endpoint that makes HTTP requests to the
// deployments service createDeployment server.
func (c *Client) CreateDeployment() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateDeploymentRequest(c.encoder)
		decodeResponse = DecodeCreateDeploymentResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateDeploymentRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateDeploymentDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("deployments", "createDeployment", err)
		}
		return decodeResponse(resp)
	}
}

// Evolve returns an endpoint that makes HTTP requests to the deployments
// service evolve server.
func (c *Client) Evolve() goa.Endpoint {
	var (
		encodeRequest  = EncodeEvolveRequest(c.encoder)
		decodeResponse = DecodeEvolveResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildEvolveRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.EvolveDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("deployments", "evolve", err)
		}
		return decodeResponse(resp)
	}
}

// Redeploy returns an endpoint that makes HTTP requests to the deployments
// service redeploy server.
func (c *Client) Redeploy() goa.Endpoint {
	var (
		encodeRequest  = EncodeRedeployRequest(c.encoder)
		decodeResponse = DecodeRedeployResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRedeployRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RedeployDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("deployments", "redeploy", err)
		}
		return decodeResponse(resp)
	}
}

// ListDeployments returns an endpoint that makes HTTP requests to the
// deployments service listDeployments server.
func (c *Client) ListDeployments() goa.Endpoint {
	var (
		encodeRequest  = EncodeListDeploymentsRequest(c.encoder)
		decodeResponse = DecodeListDeploymentsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListDeploymentsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListDeploymentsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("deployments", "listDeployments", err)
		}
		return decodeResponse(resp)
	}
}

// GetDeploymentLogs returns an endpoint that makes HTTP requests to the
// deployments service getDeploymentLogs server.
func (c *Client) GetDeploymentLogs() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetDeploymentLogsRequest(c.encoder)
		decodeResponse = DecodeGetDeploymentLogsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetDeploymentLogsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetDeploymentLogsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("deployments", "getDeploymentLogs", err)
		}
		return decodeResponse(resp)
	}
}
