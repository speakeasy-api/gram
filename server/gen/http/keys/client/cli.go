// Code generated by goa v3.22.2, DO NOT EDIT.
//
// keys HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"encoding/json"
	"fmt"

	keys "github.com/speakeasy-api/gram/server/gen/keys"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateKeyPayload builds the payload for the keys createKey endpoint
// from CLI flags.
func BuildCreateKeyPayload(keysCreateKeyBody string, keysCreateKeySessionToken string) (*keys.CreateKeyPayload, error) {
	var err error
	var body CreateKeyRequestBody
	{
		err = json.Unmarshal([]byte(keysCreateKeyBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Aliquam reiciendis.\",\n      \"scopes\": [\n         \"Ut asperiores suscipit illum delectus sit.\",\n         \"Debitis aliquam ut corporis.\",\n         \"Repudiandae quidem est quaerat facere eaque doloribus.\"\n      ]\n   }'")
		}
		if body.Scopes == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("scopes", "body"))
		}
		if len(body.Scopes) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.scopes", body.Scopes, len(body.Scopes), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if keysCreateKeySessionToken != "" {
			sessionToken = &keysCreateKeySessionToken
		}
	}
	v := &keys.CreateKeyPayload{
		Name: body.Name,
	}
	if body.Scopes != nil {
		v.Scopes = make([]string, len(body.Scopes))
		for i, val := range body.Scopes {
			v.Scopes[i] = val
		}
	} else {
		v.Scopes = []string{}
	}
	v.SessionToken = sessionToken

	return v, nil
}

// BuildListKeysPayload builds the payload for the keys listKeys endpoint from
// CLI flags.
func BuildListKeysPayload(keysListKeysSessionToken string) (*keys.ListKeysPayload, error) {
	var sessionToken *string
	{
		if keysListKeysSessionToken != "" {
			sessionToken = &keysListKeysSessionToken
		}
	}
	v := &keys.ListKeysPayload{}
	v.SessionToken = sessionToken

	return v, nil
}

// BuildRevokeKeyPayload builds the payload for the keys revokeKey endpoint
// from CLI flags.
func BuildRevokeKeyPayload(keysRevokeKeyID string, keysRevokeKeySessionToken string) (*keys.RevokeKeyPayload, error) {
	var id string
	{
		id = keysRevokeKeyID
	}
	var sessionToken *string
	{
		if keysRevokeKeySessionToken != "" {
			sessionToken = &keysRevokeKeySessionToken
		}
	}
	v := &keys.RevokeKeyPayload{}
	v.ID = id
	v.SessionToken = sessionToken

	return v, nil
}
