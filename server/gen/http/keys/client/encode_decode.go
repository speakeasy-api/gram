// Code generated by goa v3.22.2, DO NOT EDIT.
//
// keys HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	keys "github.com/speakeasy-api/gram/server/gen/keys"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateKeyRequest instantiates a HTTP request object with method and
// path set to call the "keys" service "createKey" endpoint
func (c *Client) BuildCreateKeyRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateKeyKeysPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("keys", "createKey", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateKeyRequest returns an encoder for requests sent to the keys
// createKey server.
func EncodeCreateKeyRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*keys.CreateKeyPayload)
		if !ok {
			return goahttp.ErrInvalidType("keys", "createKey", "*keys.CreateKeyPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		body := NewCreateKeyRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("keys", "createKey", err)
		}
		return nil
	}
}

// DecodeCreateKeyResponse returns a decoder for responses returned by the keys
// createKey endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCreateKeyResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeCreateKeyResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateKeyResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "createKey", err)
			}
			err = ValidateCreateKeyResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "createKey", err)
			}
			res := NewCreateKeyKeyOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CreateKeyUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "createKey", err)
			}
			err = ValidateCreateKeyUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "createKey", err)
			}
			return nil, NewCreateKeyUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CreateKeyForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "createKey", err)
			}
			err = ValidateCreateKeyForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "createKey", err)
			}
			return nil, NewCreateKeyForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CreateKeyBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "createKey", err)
			}
			err = ValidateCreateKeyBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "createKey", err)
			}
			return nil, NewCreateKeyBadRequest(&body)
		case http.StatusNotFound:
			var (
				body CreateKeyNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "createKey", err)
			}
			err = ValidateCreateKeyNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "createKey", err)
			}
			return nil, NewCreateKeyNotFound(&body)
		case http.StatusConflict:
			var (
				body CreateKeyConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "createKey", err)
			}
			err = ValidateCreateKeyConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "createKey", err)
			}
			return nil, NewCreateKeyConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body CreateKeyUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "createKey", err)
			}
			err = ValidateCreateKeyUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "createKey", err)
			}
			return nil, NewCreateKeyUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body CreateKeyInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "createKey", err)
			}
			err = ValidateCreateKeyInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "createKey", err)
			}
			return nil, NewCreateKeyInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body CreateKeyInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("keys", "createKey", err)
				}
				err = ValidateCreateKeyInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("keys", "createKey", err)
				}
				return nil, NewCreateKeyInvariantViolation(&body)
			case "unexpected":
				var (
					body CreateKeyUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("keys", "createKey", err)
				}
				err = ValidateCreateKeyUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("keys", "createKey", err)
				}
				return nil, NewCreateKeyUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("keys", "createKey", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body CreateKeyGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "createKey", err)
			}
			err = ValidateCreateKeyGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "createKey", err)
			}
			return nil, NewCreateKeyGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("keys", "createKey", resp.StatusCode, string(body))
		}
	}
}

// BuildListKeysRequest instantiates a HTTP request object with method and path
// set to call the "keys" service "listKeys" endpoint
func (c *Client) BuildListKeysRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListKeysKeysPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("keys", "listKeys", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListKeysRequest returns an encoder for requests sent to the keys
// listKeys server.
func EncodeListKeysRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*keys.ListKeysPayload)
		if !ok {
			return goahttp.ErrInvalidType("keys", "listKeys", "*keys.ListKeysPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		return nil
	}
}

// DecodeListKeysResponse returns a decoder for responses returned by the keys
// listKeys endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeListKeysResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeListKeysResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListKeysResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "listKeys", err)
			}
			err = ValidateListKeysResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "listKeys", err)
			}
			res := NewListKeysResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListKeysUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "listKeys", err)
			}
			err = ValidateListKeysUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "listKeys", err)
			}
			return nil, NewListKeysUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListKeysForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "listKeys", err)
			}
			err = ValidateListKeysForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "listKeys", err)
			}
			return nil, NewListKeysForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ListKeysBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "listKeys", err)
			}
			err = ValidateListKeysBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "listKeys", err)
			}
			return nil, NewListKeysBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ListKeysNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "listKeys", err)
			}
			err = ValidateListKeysNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "listKeys", err)
			}
			return nil, NewListKeysNotFound(&body)
		case http.StatusConflict:
			var (
				body ListKeysConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "listKeys", err)
			}
			err = ValidateListKeysConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "listKeys", err)
			}
			return nil, NewListKeysConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ListKeysUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "listKeys", err)
			}
			err = ValidateListKeysUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "listKeys", err)
			}
			return nil, NewListKeysUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ListKeysInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "listKeys", err)
			}
			err = ValidateListKeysInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "listKeys", err)
			}
			return nil, NewListKeysInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ListKeysInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("keys", "listKeys", err)
				}
				err = ValidateListKeysInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("keys", "listKeys", err)
				}
				return nil, NewListKeysInvariantViolation(&body)
			case "unexpected":
				var (
					body ListKeysUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("keys", "listKeys", err)
				}
				err = ValidateListKeysUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("keys", "listKeys", err)
				}
				return nil, NewListKeysUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("keys", "listKeys", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ListKeysGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "listKeys", err)
			}
			err = ValidateListKeysGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "listKeys", err)
			}
			return nil, NewListKeysGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("keys", "listKeys", resp.StatusCode, string(body))
		}
	}
}

// BuildRevokeKeyRequest instantiates a HTTP request object with method and
// path set to call the "keys" service "revokeKey" endpoint
func (c *Client) BuildRevokeKeyRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RevokeKeyKeysPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("keys", "revokeKey", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRevokeKeyRequest returns an encoder for requests sent to the keys
// revokeKey server.
func EncodeRevokeKeyRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*keys.RevokeKeyPayload)
		if !ok {
			return goahttp.ErrInvalidType("keys", "revokeKey", "*keys.RevokeKeyPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		values := req.URL.Query()
		values.Add("id", p.ID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeRevokeKeyResponse returns a decoder for responses returned by the keys
// revokeKey endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeRevokeKeyResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeRevokeKeyResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body RevokeKeyUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "revokeKey", err)
			}
			err = ValidateRevokeKeyUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "revokeKey", err)
			}
			return nil, NewRevokeKeyUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body RevokeKeyForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "revokeKey", err)
			}
			err = ValidateRevokeKeyForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "revokeKey", err)
			}
			return nil, NewRevokeKeyForbidden(&body)
		case http.StatusBadRequest:
			var (
				body RevokeKeyBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "revokeKey", err)
			}
			err = ValidateRevokeKeyBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "revokeKey", err)
			}
			return nil, NewRevokeKeyBadRequest(&body)
		case http.StatusNotFound:
			var (
				body RevokeKeyNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "revokeKey", err)
			}
			err = ValidateRevokeKeyNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "revokeKey", err)
			}
			return nil, NewRevokeKeyNotFound(&body)
		case http.StatusConflict:
			var (
				body RevokeKeyConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "revokeKey", err)
			}
			err = ValidateRevokeKeyConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "revokeKey", err)
			}
			return nil, NewRevokeKeyConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body RevokeKeyUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "revokeKey", err)
			}
			err = ValidateRevokeKeyUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "revokeKey", err)
			}
			return nil, NewRevokeKeyUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body RevokeKeyInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "revokeKey", err)
			}
			err = ValidateRevokeKeyInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "revokeKey", err)
			}
			return nil, NewRevokeKeyInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body RevokeKeyInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("keys", "revokeKey", err)
				}
				err = ValidateRevokeKeyInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("keys", "revokeKey", err)
				}
				return nil, NewRevokeKeyInvariantViolation(&body)
			case "unexpected":
				var (
					body RevokeKeyUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("keys", "revokeKey", err)
				}
				err = ValidateRevokeKeyUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("keys", "revokeKey", err)
				}
				return nil, NewRevokeKeyUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("keys", "revokeKey", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body RevokeKeyGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "revokeKey", err)
			}
			err = ValidateRevokeKeyGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "revokeKey", err)
			}
			return nil, NewRevokeKeyGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("keys", "revokeKey", resp.StatusCode, string(body))
		}
	}
}

// unmarshalKeyResponseBodyToKeysKey builds a value of type *keys.Key from a
// value of type *KeyResponseBody.
func unmarshalKeyResponseBodyToKeysKey(v *KeyResponseBody) *keys.Key {
	res := &keys.Key{
		ID:              *v.ID,
		OrganizationID:  *v.OrganizationID,
		ProjectID:       v.ProjectID,
		CreatedByUserID: *v.CreatedByUserID,
		Name:            *v.Name,
		KeyPrefix:       *v.KeyPrefix,
		Key:             v.Key,
		CreatedAt:       *v.CreatedAt,
		UpdatedAt:       *v.UpdatedAt,
	}
	res.Scopes = make([]string, len(v.Scopes))
	for i, val := range v.Scopes {
		res.Scopes[i] = val
	}

	return res
}
