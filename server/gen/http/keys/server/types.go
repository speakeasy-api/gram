// Code generated by goa v3.22.3, DO NOT EDIT.
//
// keys HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	keys "github.com/speakeasy-api/gram/server/gen/keys"
	goa "goa.design/goa/v3/pkg"
)

// CreateKeyRequestBody is the type of the "keys" service "createKey" endpoint
// HTTP request body.
type CreateKeyRequestBody struct {
	// The name of the key
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The scopes of the key that determines its permissions.
	Scopes []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
}

// CreateKeyResponseBody is the type of the "keys" service "createKey" endpoint
// HTTP response body.
type CreateKeyResponseBody struct {
	// The ID of the key
	ID string `form:"id" json:"id" xml:"id"`
	// The organization ID this key belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The optional project ID this key is scoped to
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The ID of the user who created this key
	CreatedByUserID string `form:"created_by_user_id" json:"created_by_user_id" xml:"created_by_user_id"`
	// The name of the key
	Name string `form:"name" json:"name" xml:"name"`
	// The store prefix of the api key for recognition
	KeyPrefix string `form:"key_prefix" json:"key_prefix" xml:"key_prefix"`
	// The token of the api key (only returned on key creation)
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	// List of permission scopes for this key
	Scopes []string `form:"scopes" json:"scopes" xml:"scopes"`
	// The creation date of the key.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the key was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ListKeysResponseBody is the type of the "keys" service "listKeys" endpoint
// HTTP response body.
type ListKeysResponseBody struct {
	Keys []*KeyResponseBody `form:"keys" json:"keys" xml:"keys"`
}

// VerifyKeyResponseBody is the type of the "keys" service "verifyKey" endpoint
// HTTP response body.
type VerifyKeyResponseBody struct {
	// The organization the key belongs to
	Organization *ValidateKeyOrganizationResponseBody `form:"organization" json:"organization" xml:"organization"`
	// The projects accessible with this key
	Projects []*ValidateKeyProjectResponseBody `form:"projects" json:"projects" xml:"projects"`
	// List of permission scopes for this key
	Scopes []string `form:"scopes" json:"scopes" xml:"scopes"`
}

// CreateKeyUnauthorizedResponseBody is the type of the "keys" service
// "createKey" endpoint HTTP response body for the "unauthorized" error.
type CreateKeyUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateKeyForbiddenResponseBody is the type of the "keys" service "createKey"
// endpoint HTTP response body for the "forbidden" error.
type CreateKeyForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateKeyBadRequestResponseBody is the type of the "keys" service
// "createKey" endpoint HTTP response body for the "bad_request" error.
type CreateKeyBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateKeyNotFoundResponseBody is the type of the "keys" service "createKey"
// endpoint HTTP response body for the "not_found" error.
type CreateKeyNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateKeyConflictResponseBody is the type of the "keys" service "createKey"
// endpoint HTTP response body for the "conflict" error.
type CreateKeyConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateKeyUnsupportedMediaResponseBody is the type of the "keys" service
// "createKey" endpoint HTTP response body for the "unsupported_media" error.
type CreateKeyUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateKeyInvalidResponseBody is the type of the "keys" service "createKey"
// endpoint HTTP response body for the "invalid" error.
type CreateKeyInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateKeyInvariantViolationResponseBody is the type of the "keys" service
// "createKey" endpoint HTTP response body for the "invariant_violation" error.
type CreateKeyInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateKeyUnexpectedResponseBody is the type of the "keys" service
// "createKey" endpoint HTTP response body for the "unexpected" error.
type CreateKeyUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateKeyGatewayErrorResponseBody is the type of the "keys" service
// "createKey" endpoint HTTP response body for the "gateway_error" error.
type CreateKeyGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListKeysUnauthorizedResponseBody is the type of the "keys" service
// "listKeys" endpoint HTTP response body for the "unauthorized" error.
type ListKeysUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListKeysForbiddenResponseBody is the type of the "keys" service "listKeys"
// endpoint HTTP response body for the "forbidden" error.
type ListKeysForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListKeysBadRequestResponseBody is the type of the "keys" service "listKeys"
// endpoint HTTP response body for the "bad_request" error.
type ListKeysBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListKeysNotFoundResponseBody is the type of the "keys" service "listKeys"
// endpoint HTTP response body for the "not_found" error.
type ListKeysNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListKeysConflictResponseBody is the type of the "keys" service "listKeys"
// endpoint HTTP response body for the "conflict" error.
type ListKeysConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListKeysUnsupportedMediaResponseBody is the type of the "keys" service
// "listKeys" endpoint HTTP response body for the "unsupported_media" error.
type ListKeysUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListKeysInvalidResponseBody is the type of the "keys" service "listKeys"
// endpoint HTTP response body for the "invalid" error.
type ListKeysInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListKeysInvariantViolationResponseBody is the type of the "keys" service
// "listKeys" endpoint HTTP response body for the "invariant_violation" error.
type ListKeysInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListKeysUnexpectedResponseBody is the type of the "keys" service "listKeys"
// endpoint HTTP response body for the "unexpected" error.
type ListKeysUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListKeysGatewayErrorResponseBody is the type of the "keys" service
// "listKeys" endpoint HTTP response body for the "gateway_error" error.
type ListKeysGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RevokeKeyUnauthorizedResponseBody is the type of the "keys" service
// "revokeKey" endpoint HTTP response body for the "unauthorized" error.
type RevokeKeyUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RevokeKeyForbiddenResponseBody is the type of the "keys" service "revokeKey"
// endpoint HTTP response body for the "forbidden" error.
type RevokeKeyForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RevokeKeyBadRequestResponseBody is the type of the "keys" service
// "revokeKey" endpoint HTTP response body for the "bad_request" error.
type RevokeKeyBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RevokeKeyNotFoundResponseBody is the type of the "keys" service "revokeKey"
// endpoint HTTP response body for the "not_found" error.
type RevokeKeyNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RevokeKeyConflictResponseBody is the type of the "keys" service "revokeKey"
// endpoint HTTP response body for the "conflict" error.
type RevokeKeyConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RevokeKeyUnsupportedMediaResponseBody is the type of the "keys" service
// "revokeKey" endpoint HTTP response body for the "unsupported_media" error.
type RevokeKeyUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RevokeKeyInvalidResponseBody is the type of the "keys" service "revokeKey"
// endpoint HTTP response body for the "invalid" error.
type RevokeKeyInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RevokeKeyInvariantViolationResponseBody is the type of the "keys" service
// "revokeKey" endpoint HTTP response body for the "invariant_violation" error.
type RevokeKeyInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RevokeKeyUnexpectedResponseBody is the type of the "keys" service
// "revokeKey" endpoint HTTP response body for the "unexpected" error.
type RevokeKeyUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RevokeKeyGatewayErrorResponseBody is the type of the "keys" service
// "revokeKey" endpoint HTTP response body for the "gateway_error" error.
type RevokeKeyGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VerifyKeyUnauthorizedResponseBody is the type of the "keys" service
// "verifyKey" endpoint HTTP response body for the "unauthorized" error.
type VerifyKeyUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VerifyKeyForbiddenResponseBody is the type of the "keys" service "verifyKey"
// endpoint HTTP response body for the "forbidden" error.
type VerifyKeyForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VerifyKeyBadRequestResponseBody is the type of the "keys" service
// "verifyKey" endpoint HTTP response body for the "bad_request" error.
type VerifyKeyBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VerifyKeyNotFoundResponseBody is the type of the "keys" service "verifyKey"
// endpoint HTTP response body for the "not_found" error.
type VerifyKeyNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VerifyKeyConflictResponseBody is the type of the "keys" service "verifyKey"
// endpoint HTTP response body for the "conflict" error.
type VerifyKeyConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VerifyKeyUnsupportedMediaResponseBody is the type of the "keys" service
// "verifyKey" endpoint HTTP response body for the "unsupported_media" error.
type VerifyKeyUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VerifyKeyInvalidResponseBody is the type of the "keys" service "verifyKey"
// endpoint HTTP response body for the "invalid" error.
type VerifyKeyInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VerifyKeyInvariantViolationResponseBody is the type of the "keys" service
// "verifyKey" endpoint HTTP response body for the "invariant_violation" error.
type VerifyKeyInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VerifyKeyUnexpectedResponseBody is the type of the "keys" service
// "verifyKey" endpoint HTTP response body for the "unexpected" error.
type VerifyKeyUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VerifyKeyGatewayErrorResponseBody is the type of the "keys" service
// "verifyKey" endpoint HTTP response body for the "gateway_error" error.
type VerifyKeyGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// KeyResponseBody is used to define fields on response body types.
type KeyResponseBody struct {
	// The ID of the key
	ID string `form:"id" json:"id" xml:"id"`
	// The organization ID this key belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The optional project ID this key is scoped to
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The ID of the user who created this key
	CreatedByUserID string `form:"created_by_user_id" json:"created_by_user_id" xml:"created_by_user_id"`
	// The name of the key
	Name string `form:"name" json:"name" xml:"name"`
	// The store prefix of the api key for recognition
	KeyPrefix string `form:"key_prefix" json:"key_prefix" xml:"key_prefix"`
	// The token of the api key (only returned on key creation)
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	// List of permission scopes for this key
	Scopes []string `form:"scopes" json:"scopes" xml:"scopes"`
	// The creation date of the key.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the key was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ValidateKeyOrganizationResponseBody is used to define fields on response
// body types.
type ValidateKeyOrganizationResponseBody struct {
	// The ID of the organization
	ID string `form:"id" json:"id" xml:"id"`
	// The name of the organization
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the organization
	Slug string `form:"slug" json:"slug" xml:"slug"`
}

// ValidateKeyProjectResponseBody is used to define fields on response body
// types.
type ValidateKeyProjectResponseBody struct {
	// The ID of the project
	ID string `form:"id" json:"id" xml:"id"`
	// The name of the project
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the project
	Slug string `form:"slug" json:"slug" xml:"slug"`
}

// NewCreateKeyResponseBody builds the HTTP response body from the result of
// the "createKey" endpoint of the "keys" service.
func NewCreateKeyResponseBody(res *keys.Key) *CreateKeyResponseBody {
	body := &CreateKeyResponseBody{
		ID:              res.ID,
		OrganizationID:  res.OrganizationID,
		ProjectID:       res.ProjectID,
		CreatedByUserID: res.CreatedByUserID,
		Name:            res.Name,
		KeyPrefix:       res.KeyPrefix,
		Key:             res.Key,
		CreatedAt:       res.CreatedAt,
		UpdatedAt:       res.UpdatedAt,
	}
	if res.Scopes != nil {
		body.Scopes = make([]string, len(res.Scopes))
		for i, val := range res.Scopes {
			body.Scopes[i] = val
		}
	} else {
		body.Scopes = []string{}
	}
	return body
}

// NewListKeysResponseBody builds the HTTP response body from the result of the
// "listKeys" endpoint of the "keys" service.
func NewListKeysResponseBody(res *keys.ListKeysResult) *ListKeysResponseBody {
	body := &ListKeysResponseBody{}
	if res.Keys != nil {
		body.Keys = make([]*KeyResponseBody, len(res.Keys))
		for i, val := range res.Keys {
			body.Keys[i] = marshalKeysKeyToKeyResponseBody(val)
		}
	} else {
		body.Keys = []*KeyResponseBody{}
	}
	return body
}

// NewVerifyKeyResponseBody builds the HTTP response body from the result of
// the "verifyKey" endpoint of the "keys" service.
func NewVerifyKeyResponseBody(res *keys.ValidateKeyResult) *VerifyKeyResponseBody {
	body := &VerifyKeyResponseBody{}
	if res.Organization != nil {
		body.Organization = marshalKeysValidateKeyOrganizationToValidateKeyOrganizationResponseBody(res.Organization)
	}
	if res.Projects != nil {
		body.Projects = make([]*ValidateKeyProjectResponseBody, len(res.Projects))
		for i, val := range res.Projects {
			body.Projects[i] = marshalKeysValidateKeyProjectToValidateKeyProjectResponseBody(val)
		}
	} else {
		body.Projects = []*ValidateKeyProjectResponseBody{}
	}
	if res.Scopes != nil {
		body.Scopes = make([]string, len(res.Scopes))
		for i, val := range res.Scopes {
			body.Scopes[i] = val
		}
	} else {
		body.Scopes = []string{}
	}
	return body
}

// NewCreateKeyUnauthorizedResponseBody builds the HTTP response body from the
// result of the "createKey" endpoint of the "keys" service.
func NewCreateKeyUnauthorizedResponseBody(res *goa.ServiceError) *CreateKeyUnauthorizedResponseBody {
	body := &CreateKeyUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateKeyForbiddenResponseBody builds the HTTP response body from the
// result of the "createKey" endpoint of the "keys" service.
func NewCreateKeyForbiddenResponseBody(res *goa.ServiceError) *CreateKeyForbiddenResponseBody {
	body := &CreateKeyForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateKeyBadRequestResponseBody builds the HTTP response body from the
// result of the "createKey" endpoint of the "keys" service.
func NewCreateKeyBadRequestResponseBody(res *goa.ServiceError) *CreateKeyBadRequestResponseBody {
	body := &CreateKeyBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateKeyNotFoundResponseBody builds the HTTP response body from the
// result of the "createKey" endpoint of the "keys" service.
func NewCreateKeyNotFoundResponseBody(res *goa.ServiceError) *CreateKeyNotFoundResponseBody {
	body := &CreateKeyNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateKeyConflictResponseBody builds the HTTP response body from the
// result of the "createKey" endpoint of the "keys" service.
func NewCreateKeyConflictResponseBody(res *goa.ServiceError) *CreateKeyConflictResponseBody {
	body := &CreateKeyConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateKeyUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "createKey" endpoint of the "keys" service.
func NewCreateKeyUnsupportedMediaResponseBody(res *goa.ServiceError) *CreateKeyUnsupportedMediaResponseBody {
	body := &CreateKeyUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateKeyInvalidResponseBody builds the HTTP response body from the
// result of the "createKey" endpoint of the "keys" service.
func NewCreateKeyInvalidResponseBody(res *goa.ServiceError) *CreateKeyInvalidResponseBody {
	body := &CreateKeyInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateKeyInvariantViolationResponseBody builds the HTTP response body
// from the result of the "createKey" endpoint of the "keys" service.
func NewCreateKeyInvariantViolationResponseBody(res *goa.ServiceError) *CreateKeyInvariantViolationResponseBody {
	body := &CreateKeyInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateKeyUnexpectedResponseBody builds the HTTP response body from the
// result of the "createKey" endpoint of the "keys" service.
func NewCreateKeyUnexpectedResponseBody(res *goa.ServiceError) *CreateKeyUnexpectedResponseBody {
	body := &CreateKeyUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateKeyGatewayErrorResponseBody builds the HTTP response body from the
// result of the "createKey" endpoint of the "keys" service.
func NewCreateKeyGatewayErrorResponseBody(res *goa.ServiceError) *CreateKeyGatewayErrorResponseBody {
	body := &CreateKeyGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListKeysUnauthorizedResponseBody builds the HTTP response body from the
// result of the "listKeys" endpoint of the "keys" service.
func NewListKeysUnauthorizedResponseBody(res *goa.ServiceError) *ListKeysUnauthorizedResponseBody {
	body := &ListKeysUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListKeysForbiddenResponseBody builds the HTTP response body from the
// result of the "listKeys" endpoint of the "keys" service.
func NewListKeysForbiddenResponseBody(res *goa.ServiceError) *ListKeysForbiddenResponseBody {
	body := &ListKeysForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListKeysBadRequestResponseBody builds the HTTP response body from the
// result of the "listKeys" endpoint of the "keys" service.
func NewListKeysBadRequestResponseBody(res *goa.ServiceError) *ListKeysBadRequestResponseBody {
	body := &ListKeysBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListKeysNotFoundResponseBody builds the HTTP response body from the
// result of the "listKeys" endpoint of the "keys" service.
func NewListKeysNotFoundResponseBody(res *goa.ServiceError) *ListKeysNotFoundResponseBody {
	body := &ListKeysNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListKeysConflictResponseBody builds the HTTP response body from the
// result of the "listKeys" endpoint of the "keys" service.
func NewListKeysConflictResponseBody(res *goa.ServiceError) *ListKeysConflictResponseBody {
	body := &ListKeysConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListKeysUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "listKeys" endpoint of the "keys" service.
func NewListKeysUnsupportedMediaResponseBody(res *goa.ServiceError) *ListKeysUnsupportedMediaResponseBody {
	body := &ListKeysUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListKeysInvalidResponseBody builds the HTTP response body from the result
// of the "listKeys" endpoint of the "keys" service.
func NewListKeysInvalidResponseBody(res *goa.ServiceError) *ListKeysInvalidResponseBody {
	body := &ListKeysInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListKeysInvariantViolationResponseBody builds the HTTP response body from
// the result of the "listKeys" endpoint of the "keys" service.
func NewListKeysInvariantViolationResponseBody(res *goa.ServiceError) *ListKeysInvariantViolationResponseBody {
	body := &ListKeysInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListKeysUnexpectedResponseBody builds the HTTP response body from the
// result of the "listKeys" endpoint of the "keys" service.
func NewListKeysUnexpectedResponseBody(res *goa.ServiceError) *ListKeysUnexpectedResponseBody {
	body := &ListKeysUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListKeysGatewayErrorResponseBody builds the HTTP response body from the
// result of the "listKeys" endpoint of the "keys" service.
func NewListKeysGatewayErrorResponseBody(res *goa.ServiceError) *ListKeysGatewayErrorResponseBody {
	body := &ListKeysGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRevokeKeyUnauthorizedResponseBody builds the HTTP response body from the
// result of the "revokeKey" endpoint of the "keys" service.
func NewRevokeKeyUnauthorizedResponseBody(res *goa.ServiceError) *RevokeKeyUnauthorizedResponseBody {
	body := &RevokeKeyUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRevokeKeyForbiddenResponseBody builds the HTTP response body from the
// result of the "revokeKey" endpoint of the "keys" service.
func NewRevokeKeyForbiddenResponseBody(res *goa.ServiceError) *RevokeKeyForbiddenResponseBody {
	body := &RevokeKeyForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRevokeKeyBadRequestResponseBody builds the HTTP response body from the
// result of the "revokeKey" endpoint of the "keys" service.
func NewRevokeKeyBadRequestResponseBody(res *goa.ServiceError) *RevokeKeyBadRequestResponseBody {
	body := &RevokeKeyBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRevokeKeyNotFoundResponseBody builds the HTTP response body from the
// result of the "revokeKey" endpoint of the "keys" service.
func NewRevokeKeyNotFoundResponseBody(res *goa.ServiceError) *RevokeKeyNotFoundResponseBody {
	body := &RevokeKeyNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRevokeKeyConflictResponseBody builds the HTTP response body from the
// result of the "revokeKey" endpoint of the "keys" service.
func NewRevokeKeyConflictResponseBody(res *goa.ServiceError) *RevokeKeyConflictResponseBody {
	body := &RevokeKeyConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRevokeKeyUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "revokeKey" endpoint of the "keys" service.
func NewRevokeKeyUnsupportedMediaResponseBody(res *goa.ServiceError) *RevokeKeyUnsupportedMediaResponseBody {
	body := &RevokeKeyUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRevokeKeyInvalidResponseBody builds the HTTP response body from the
// result of the "revokeKey" endpoint of the "keys" service.
func NewRevokeKeyInvalidResponseBody(res *goa.ServiceError) *RevokeKeyInvalidResponseBody {
	body := &RevokeKeyInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRevokeKeyInvariantViolationResponseBody builds the HTTP response body
// from the result of the "revokeKey" endpoint of the "keys" service.
func NewRevokeKeyInvariantViolationResponseBody(res *goa.ServiceError) *RevokeKeyInvariantViolationResponseBody {
	body := &RevokeKeyInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRevokeKeyUnexpectedResponseBody builds the HTTP response body from the
// result of the "revokeKey" endpoint of the "keys" service.
func NewRevokeKeyUnexpectedResponseBody(res *goa.ServiceError) *RevokeKeyUnexpectedResponseBody {
	body := &RevokeKeyUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRevokeKeyGatewayErrorResponseBody builds the HTTP response body from the
// result of the "revokeKey" endpoint of the "keys" service.
func NewRevokeKeyGatewayErrorResponseBody(res *goa.ServiceError) *RevokeKeyGatewayErrorResponseBody {
	body := &RevokeKeyGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVerifyKeyUnauthorizedResponseBody builds the HTTP response body from the
// result of the "verifyKey" endpoint of the "keys" service.
func NewVerifyKeyUnauthorizedResponseBody(res *goa.ServiceError) *VerifyKeyUnauthorizedResponseBody {
	body := &VerifyKeyUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVerifyKeyForbiddenResponseBody builds the HTTP response body from the
// result of the "verifyKey" endpoint of the "keys" service.
func NewVerifyKeyForbiddenResponseBody(res *goa.ServiceError) *VerifyKeyForbiddenResponseBody {
	body := &VerifyKeyForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVerifyKeyBadRequestResponseBody builds the HTTP response body from the
// result of the "verifyKey" endpoint of the "keys" service.
func NewVerifyKeyBadRequestResponseBody(res *goa.ServiceError) *VerifyKeyBadRequestResponseBody {
	body := &VerifyKeyBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVerifyKeyNotFoundResponseBody builds the HTTP response body from the
// result of the "verifyKey" endpoint of the "keys" service.
func NewVerifyKeyNotFoundResponseBody(res *goa.ServiceError) *VerifyKeyNotFoundResponseBody {
	body := &VerifyKeyNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVerifyKeyConflictResponseBody builds the HTTP response body from the
// result of the "verifyKey" endpoint of the "keys" service.
func NewVerifyKeyConflictResponseBody(res *goa.ServiceError) *VerifyKeyConflictResponseBody {
	body := &VerifyKeyConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVerifyKeyUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "verifyKey" endpoint of the "keys" service.
func NewVerifyKeyUnsupportedMediaResponseBody(res *goa.ServiceError) *VerifyKeyUnsupportedMediaResponseBody {
	body := &VerifyKeyUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVerifyKeyInvalidResponseBody builds the HTTP response body from the
// result of the "verifyKey" endpoint of the "keys" service.
func NewVerifyKeyInvalidResponseBody(res *goa.ServiceError) *VerifyKeyInvalidResponseBody {
	body := &VerifyKeyInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVerifyKeyInvariantViolationResponseBody builds the HTTP response body
// from the result of the "verifyKey" endpoint of the "keys" service.
func NewVerifyKeyInvariantViolationResponseBody(res *goa.ServiceError) *VerifyKeyInvariantViolationResponseBody {
	body := &VerifyKeyInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVerifyKeyUnexpectedResponseBody builds the HTTP response body from the
// result of the "verifyKey" endpoint of the "keys" service.
func NewVerifyKeyUnexpectedResponseBody(res *goa.ServiceError) *VerifyKeyUnexpectedResponseBody {
	body := &VerifyKeyUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVerifyKeyGatewayErrorResponseBody builds the HTTP response body from the
// result of the "verifyKey" endpoint of the "keys" service.
func NewVerifyKeyGatewayErrorResponseBody(res *goa.ServiceError) *VerifyKeyGatewayErrorResponseBody {
	body := &VerifyKeyGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateKeyPayload builds a keys service createKey endpoint payload.
func NewCreateKeyPayload(body *CreateKeyRequestBody, sessionToken *string) *keys.CreateKeyPayload {
	v := &keys.CreateKeyPayload{
		Name: *body.Name,
	}
	v.Scopes = make([]string, len(body.Scopes))
	for i, val := range body.Scopes {
		v.Scopes[i] = val
	}
	v.SessionToken = sessionToken

	return v
}

// NewListKeysPayload builds a keys service listKeys endpoint payload.
func NewListKeysPayload(sessionToken *string) *keys.ListKeysPayload {
	v := &keys.ListKeysPayload{}
	v.SessionToken = sessionToken

	return v
}

// NewRevokeKeyPayload builds a keys service revokeKey endpoint payload.
func NewRevokeKeyPayload(id string, sessionToken *string) *keys.RevokeKeyPayload {
	v := &keys.RevokeKeyPayload{}
	v.ID = id
	v.SessionToken = sessionToken

	return v
}

// NewVerifyKeyPayload builds a keys service verifyKey endpoint payload.
func NewVerifyKeyPayload(apikeyToken *string) *keys.VerifyKeyPayload {
	v := &keys.VerifyKeyPayload{}
	v.ApikeyToken = apikeyToken

	return v
}

// ValidateCreateKeyRequestBody runs the validations defined on
// CreateKeyRequestBody
func ValidateCreateKeyRequestBody(body *CreateKeyRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Scopes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("scopes", "body"))
	}
	if len(body.Scopes) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.scopes", body.Scopes, len(body.Scopes), 1, true))
	}
	return
}
