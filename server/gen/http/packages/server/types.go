// Code generated by goa v3.22.2, DO NOT EDIT.
//
// packages HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	"unicode/utf8"

	packages "github.com/speakeasy-api/gram/server/gen/packages"
	goa "goa.design/goa/v3/pkg"
)

// CreatePackageRequestBody is the type of the "packages" service
// "createPackage" endpoint HTTP request body.
type CreatePackageRequestBody struct {
	// The name of the package
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The title of the package
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The summary of the package
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// The description of the package. Limited markdown syntax is supported.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// External URL for the package owner
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// The keywords of the package
	Keywords []string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// The asset ID of the image to show for this package
	ImageAssetID *string `form:"image_asset_id,omitempty" json:"image_asset_id,omitempty" xml:"image_asset_id,omitempty"`
}

// UpdatePackageRequestBody is the type of the "packages" service
// "updatePackage" endpoint HTTP request body.
type UpdatePackageRequestBody struct {
	// The id of the package to update
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The title of the package
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The summary of the package
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// The description of the package. Limited markdown syntax is supported.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// External URL for the package owner
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// The keywords of the package
	Keywords []string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// The asset ID of the image to show for this package
	ImageAssetID *string `form:"image_asset_id,omitempty" json:"image_asset_id,omitempty" xml:"image_asset_id,omitempty"`
}

// PublishRequestBody is the type of the "packages" service "publish" endpoint
// HTTP request body.
type PublishRequestBody struct {
	// The name of the package
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The new semantic version of the package to publish
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// The deployment ID to associate with the package version
	DeploymentID *string `form:"deployment_id,omitempty" json:"deployment_id,omitempty" xml:"deployment_id,omitempty"`
	// The visibility of the package version
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
}

// CreatePackageResponseBody is the type of the "packages" service
// "createPackage" endpoint HTTP response body.
type CreatePackageResponseBody struct {
	// The newly created package
	Package *PackageResponseBody `form:"package" json:"package" xml:"package"`
}

// UpdatePackageResponseBody is the type of the "packages" service
// "updatePackage" endpoint HTTP response body.
type UpdatePackageResponseBody struct {
	// The newly created package
	Package *PackageResponseBody `form:"package" json:"package" xml:"package"`
}

// ListPackagesResponseBody is the type of the "packages" service
// "listPackages" endpoint HTTP response body.
type ListPackagesResponseBody struct {
	// The list of packages
	Packages []*PackageResponseBody `form:"packages" json:"packages" xml:"packages"`
}

// ListVersionsResponseBody is the type of the "packages" service
// "listVersions" endpoint HTTP response body.
type ListVersionsResponseBody struct {
	Package  *PackageResponseBody          `form:"package" json:"package" xml:"package"`
	Versions []*PackageVersionResponseBody `form:"versions" json:"versions" xml:"versions"`
}

// PublishResponseBody is the type of the "packages" service "publish" endpoint
// HTTP response body.
type PublishResponseBody struct {
	// The published package
	Package *PackageResponseBody `form:"package" json:"package" xml:"package"`
	// The published package version
	Version *PackageVersionResponseBody `form:"version" json:"version" xml:"version"`
}

// CreatePackageUnauthorizedResponseBody is the type of the "packages" service
// "createPackage" endpoint HTTP response body for the "unauthorized" error.
type CreatePackageUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatePackageForbiddenResponseBody is the type of the "packages" service
// "createPackage" endpoint HTTP response body for the "forbidden" error.
type CreatePackageForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatePackageBadRequestResponseBody is the type of the "packages" service
// "createPackage" endpoint HTTP response body for the "bad_request" error.
type CreatePackageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatePackageNotFoundResponseBody is the type of the "packages" service
// "createPackage" endpoint HTTP response body for the "not_found" error.
type CreatePackageNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatePackageConflictResponseBody is the type of the "packages" service
// "createPackage" endpoint HTTP response body for the "conflict" error.
type CreatePackageConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatePackageUnsupportedMediaResponseBody is the type of the "packages"
// service "createPackage" endpoint HTTP response body for the
// "unsupported_media" error.
type CreatePackageUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatePackageInvalidResponseBody is the type of the "packages" service
// "createPackage" endpoint HTTP response body for the "invalid" error.
type CreatePackageInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatePackageInvariantViolationResponseBody is the type of the "packages"
// service "createPackage" endpoint HTTP response body for the
// "invariant_violation" error.
type CreatePackageInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatePackageUnexpectedResponseBody is the type of the "packages" service
// "createPackage" endpoint HTTP response body for the "unexpected" error.
type CreatePackageUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatePackageGatewayErrorResponseBody is the type of the "packages" service
// "createPackage" endpoint HTTP response body for the "gateway_error" error.
type CreatePackageGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdatePackageUnauthorizedResponseBody is the type of the "packages" service
// "updatePackage" endpoint HTTP response body for the "unauthorized" error.
type UpdatePackageUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdatePackageForbiddenResponseBody is the type of the "packages" service
// "updatePackage" endpoint HTTP response body for the "forbidden" error.
type UpdatePackageForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdatePackageBadRequestResponseBody is the type of the "packages" service
// "updatePackage" endpoint HTTP response body for the "bad_request" error.
type UpdatePackageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdatePackageNotFoundResponseBody is the type of the "packages" service
// "updatePackage" endpoint HTTP response body for the "not_found" error.
type UpdatePackageNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdatePackageConflictResponseBody is the type of the "packages" service
// "updatePackage" endpoint HTTP response body for the "conflict" error.
type UpdatePackageConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdatePackageUnsupportedMediaResponseBody is the type of the "packages"
// service "updatePackage" endpoint HTTP response body for the
// "unsupported_media" error.
type UpdatePackageUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdatePackageInvalidResponseBody is the type of the "packages" service
// "updatePackage" endpoint HTTP response body for the "invalid" error.
type UpdatePackageInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdatePackageInvariantViolationResponseBody is the type of the "packages"
// service "updatePackage" endpoint HTTP response body for the
// "invariant_violation" error.
type UpdatePackageInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdatePackageUnexpectedResponseBody is the type of the "packages" service
// "updatePackage" endpoint HTTP response body for the "unexpected" error.
type UpdatePackageUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdatePackageGatewayErrorResponseBody is the type of the "packages" service
// "updatePackage" endpoint HTTP response body for the "gateway_error" error.
type UpdatePackageGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdatePackageNotModifiedResponseBody is the type of the "packages" service
// "updatePackage" endpoint HTTP response body for the "not_modified" error.
type UpdatePackageNotModifiedResponseBody struct {
	Location string `form:"location" json:"location" xml:"location"`
}

// ListPackagesUnauthorizedResponseBody is the type of the "packages" service
// "listPackages" endpoint HTTP response body for the "unauthorized" error.
type ListPackagesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListPackagesForbiddenResponseBody is the type of the "packages" service
// "listPackages" endpoint HTTP response body for the "forbidden" error.
type ListPackagesForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListPackagesBadRequestResponseBody is the type of the "packages" service
// "listPackages" endpoint HTTP response body for the "bad_request" error.
type ListPackagesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListPackagesNotFoundResponseBody is the type of the "packages" service
// "listPackages" endpoint HTTP response body for the "not_found" error.
type ListPackagesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListPackagesConflictResponseBody is the type of the "packages" service
// "listPackages" endpoint HTTP response body for the "conflict" error.
type ListPackagesConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListPackagesUnsupportedMediaResponseBody is the type of the "packages"
// service "listPackages" endpoint HTTP response body for the
// "unsupported_media" error.
type ListPackagesUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListPackagesInvalidResponseBody is the type of the "packages" service
// "listPackages" endpoint HTTP response body for the "invalid" error.
type ListPackagesInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListPackagesInvariantViolationResponseBody is the type of the "packages"
// service "listPackages" endpoint HTTP response body for the
// "invariant_violation" error.
type ListPackagesInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListPackagesUnexpectedResponseBody is the type of the "packages" service
// "listPackages" endpoint HTTP response body for the "unexpected" error.
type ListPackagesUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListPackagesGatewayErrorResponseBody is the type of the "packages" service
// "listPackages" endpoint HTTP response body for the "gateway_error" error.
type ListPackagesGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListVersionsUnauthorizedResponseBody is the type of the "packages" service
// "listVersions" endpoint HTTP response body for the "unauthorized" error.
type ListVersionsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListVersionsForbiddenResponseBody is the type of the "packages" service
// "listVersions" endpoint HTTP response body for the "forbidden" error.
type ListVersionsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListVersionsBadRequestResponseBody is the type of the "packages" service
// "listVersions" endpoint HTTP response body for the "bad_request" error.
type ListVersionsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListVersionsNotFoundResponseBody is the type of the "packages" service
// "listVersions" endpoint HTTP response body for the "not_found" error.
type ListVersionsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListVersionsConflictResponseBody is the type of the "packages" service
// "listVersions" endpoint HTTP response body for the "conflict" error.
type ListVersionsConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListVersionsUnsupportedMediaResponseBody is the type of the "packages"
// service "listVersions" endpoint HTTP response body for the
// "unsupported_media" error.
type ListVersionsUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListVersionsInvalidResponseBody is the type of the "packages" service
// "listVersions" endpoint HTTP response body for the "invalid" error.
type ListVersionsInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListVersionsInvariantViolationResponseBody is the type of the "packages"
// service "listVersions" endpoint HTTP response body for the
// "invariant_violation" error.
type ListVersionsInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListVersionsUnexpectedResponseBody is the type of the "packages" service
// "listVersions" endpoint HTTP response body for the "unexpected" error.
type ListVersionsUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListVersionsGatewayErrorResponseBody is the type of the "packages" service
// "listVersions" endpoint HTTP response body for the "gateway_error" error.
type ListVersionsGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PublishUnauthorizedResponseBody is the type of the "packages" service
// "publish" endpoint HTTP response body for the "unauthorized" error.
type PublishUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PublishForbiddenResponseBody is the type of the "packages" service "publish"
// endpoint HTTP response body for the "forbidden" error.
type PublishForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PublishBadRequestResponseBody is the type of the "packages" service
// "publish" endpoint HTTP response body for the "bad_request" error.
type PublishBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PublishNotFoundResponseBody is the type of the "packages" service "publish"
// endpoint HTTP response body for the "not_found" error.
type PublishNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PublishConflictResponseBody is the type of the "packages" service "publish"
// endpoint HTTP response body for the "conflict" error.
type PublishConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PublishUnsupportedMediaResponseBody is the type of the "packages" service
// "publish" endpoint HTTP response body for the "unsupported_media" error.
type PublishUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PublishInvalidResponseBody is the type of the "packages" service "publish"
// endpoint HTTP response body for the "invalid" error.
type PublishInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PublishInvariantViolationResponseBody is the type of the "packages" service
// "publish" endpoint HTTP response body for the "invariant_violation" error.
type PublishInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PublishUnexpectedResponseBody is the type of the "packages" service
// "publish" endpoint HTTP response body for the "unexpected" error.
type PublishUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PublishGatewayErrorResponseBody is the type of the "packages" service
// "publish" endpoint HTTP response body for the "gateway_error" error.
type PublishGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PackageResponseBody is used to define fields on response body types.
type PackageResponseBody struct {
	// The ID of the package
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the project that owns the package
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The ID of the organization that owns the package
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The name of the package
	Name string `form:"name" json:"name" xml:"name"`
	// The title of the package
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The summary of the package
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// The description of the package. This contains HTML content.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The unsanitized, user-supplied description of the package. Limited markdown
	// syntax is supported.
	DescriptionRaw *string `form:"description_raw,omitempty" json:"description_raw,omitempty" xml:"description_raw,omitempty"`
	// The keywords of the package
	Keywords []string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// External URL for the package owner
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// The asset ID of the image to show for this package
	ImageAssetID *string `form:"image_asset_id,omitempty" json:"image_asset_id,omitempty" xml:"image_asset_id,omitempty"`
	// The latest version of the package
	LatestVersion *string `form:"latest_version,omitempty" json:"latest_version,omitempty" xml:"latest_version,omitempty"`
	// The creation date of the package
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the package
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
	// The deletion date of the package
	DeletedAt *string `form:"deleted_at,omitempty" json:"deleted_at,omitempty" xml:"deleted_at,omitempty"`
}

// PackageVersionResponseBody is used to define fields on response body types.
type PackageVersionResponseBody struct {
	// The ID of the package version
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the package that the version belongs to
	PackageID string `form:"package_id" json:"package_id" xml:"package_id"`
	// The ID of the deployment that the version belongs to
	DeploymentID string `form:"deployment_id" json:"deployment_id" xml:"deployment_id"`
	// The visibility of the package version
	Visibility string `form:"visibility" json:"visibility" xml:"visibility"`
	// The semantic version value
	Semver string `form:"semver" json:"semver" xml:"semver"`
	// The creation date of the package version
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
}

// NewCreatePackageResponseBody builds the HTTP response body from the result
// of the "createPackage" endpoint of the "packages" service.
func NewCreatePackageResponseBody(res *packages.CreatePackageResult) *CreatePackageResponseBody {
	body := &CreatePackageResponseBody{}
	if res.Package != nil {
		body.Package = marshalPackagesPackageToPackageResponseBody(res.Package)
	}
	return body
}

// NewUpdatePackageResponseBody builds the HTTP response body from the result
// of the "updatePackage" endpoint of the "packages" service.
func NewUpdatePackageResponseBody(res *packages.UpdatePackageResult) *UpdatePackageResponseBody {
	body := &UpdatePackageResponseBody{}
	if res.Package != nil {
		body.Package = marshalPackagesPackageToPackageResponseBody(res.Package)
	}
	return body
}

// NewListPackagesResponseBody builds the HTTP response body from the result of
// the "listPackages" endpoint of the "packages" service.
func NewListPackagesResponseBody(res *packages.ListPackagesResult) *ListPackagesResponseBody {
	body := &ListPackagesResponseBody{}
	if res.Packages != nil {
		body.Packages = make([]*PackageResponseBody, len(res.Packages))
		for i, val := range res.Packages {
			body.Packages[i] = marshalPackagesPackageToPackageResponseBody(val)
		}
	} else {
		body.Packages = []*PackageResponseBody{}
	}
	return body
}

// NewListVersionsResponseBody builds the HTTP response body from the result of
// the "listVersions" endpoint of the "packages" service.
func NewListVersionsResponseBody(res *packages.ListVersionsResult) *ListVersionsResponseBody {
	body := &ListVersionsResponseBody{}
	if res.Package != nil {
		body.Package = marshalPackagesPackageToPackageResponseBody(res.Package)
	}
	if res.Versions != nil {
		body.Versions = make([]*PackageVersionResponseBody, len(res.Versions))
		for i, val := range res.Versions {
			body.Versions[i] = marshalPackagesPackageVersionToPackageVersionResponseBody(val)
		}
	} else {
		body.Versions = []*PackageVersionResponseBody{}
	}
	return body
}

// NewPublishResponseBody builds the HTTP response body from the result of the
// "publish" endpoint of the "packages" service.
func NewPublishResponseBody(res *packages.PublishPackageResult) *PublishResponseBody {
	body := &PublishResponseBody{}
	if res.Package != nil {
		body.Package = marshalPackagesPackageToPackageResponseBody(res.Package)
	}
	if res.Version != nil {
		body.Version = marshalPackagesPackageVersionToPackageVersionResponseBody(res.Version)
	}
	return body
}

// NewCreatePackageUnauthorizedResponseBody builds the HTTP response body from
// the result of the "createPackage" endpoint of the "packages" service.
func NewCreatePackageUnauthorizedResponseBody(res *goa.ServiceError) *CreatePackageUnauthorizedResponseBody {
	body := &CreatePackageUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePackageForbiddenResponseBody builds the HTTP response body from the
// result of the "createPackage" endpoint of the "packages" service.
func NewCreatePackageForbiddenResponseBody(res *goa.ServiceError) *CreatePackageForbiddenResponseBody {
	body := &CreatePackageForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePackageBadRequestResponseBody builds the HTTP response body from
// the result of the "createPackage" endpoint of the "packages" service.
func NewCreatePackageBadRequestResponseBody(res *goa.ServiceError) *CreatePackageBadRequestResponseBody {
	body := &CreatePackageBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePackageNotFoundResponseBody builds the HTTP response body from the
// result of the "createPackage" endpoint of the "packages" service.
func NewCreatePackageNotFoundResponseBody(res *goa.ServiceError) *CreatePackageNotFoundResponseBody {
	body := &CreatePackageNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePackageConflictResponseBody builds the HTTP response body from the
// result of the "createPackage" endpoint of the "packages" service.
func NewCreatePackageConflictResponseBody(res *goa.ServiceError) *CreatePackageConflictResponseBody {
	body := &CreatePackageConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePackageUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "createPackage" endpoint of the "packages" service.
func NewCreatePackageUnsupportedMediaResponseBody(res *goa.ServiceError) *CreatePackageUnsupportedMediaResponseBody {
	body := &CreatePackageUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePackageInvalidResponseBody builds the HTTP response body from the
// result of the "createPackage" endpoint of the "packages" service.
func NewCreatePackageInvalidResponseBody(res *goa.ServiceError) *CreatePackageInvalidResponseBody {
	body := &CreatePackageInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePackageInvariantViolationResponseBody builds the HTTP response body
// from the result of the "createPackage" endpoint of the "packages" service.
func NewCreatePackageInvariantViolationResponseBody(res *goa.ServiceError) *CreatePackageInvariantViolationResponseBody {
	body := &CreatePackageInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePackageUnexpectedResponseBody builds the HTTP response body from
// the result of the "createPackage" endpoint of the "packages" service.
func NewCreatePackageUnexpectedResponseBody(res *goa.ServiceError) *CreatePackageUnexpectedResponseBody {
	body := &CreatePackageUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePackageGatewayErrorResponseBody builds the HTTP response body from
// the result of the "createPackage" endpoint of the "packages" service.
func NewCreatePackageGatewayErrorResponseBody(res *goa.ServiceError) *CreatePackageGatewayErrorResponseBody {
	body := &CreatePackageGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePackageUnauthorizedResponseBody builds the HTTP response body from
// the result of the "updatePackage" endpoint of the "packages" service.
func NewUpdatePackageUnauthorizedResponseBody(res *goa.ServiceError) *UpdatePackageUnauthorizedResponseBody {
	body := &UpdatePackageUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePackageForbiddenResponseBody builds the HTTP response body from the
// result of the "updatePackage" endpoint of the "packages" service.
func NewUpdatePackageForbiddenResponseBody(res *goa.ServiceError) *UpdatePackageForbiddenResponseBody {
	body := &UpdatePackageForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePackageBadRequestResponseBody builds the HTTP response body from
// the result of the "updatePackage" endpoint of the "packages" service.
func NewUpdatePackageBadRequestResponseBody(res *goa.ServiceError) *UpdatePackageBadRequestResponseBody {
	body := &UpdatePackageBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePackageNotFoundResponseBody builds the HTTP response body from the
// result of the "updatePackage" endpoint of the "packages" service.
func NewUpdatePackageNotFoundResponseBody(res *goa.ServiceError) *UpdatePackageNotFoundResponseBody {
	body := &UpdatePackageNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePackageConflictResponseBody builds the HTTP response body from the
// result of the "updatePackage" endpoint of the "packages" service.
func NewUpdatePackageConflictResponseBody(res *goa.ServiceError) *UpdatePackageConflictResponseBody {
	body := &UpdatePackageConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePackageUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "updatePackage" endpoint of the "packages" service.
func NewUpdatePackageUnsupportedMediaResponseBody(res *goa.ServiceError) *UpdatePackageUnsupportedMediaResponseBody {
	body := &UpdatePackageUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePackageInvalidResponseBody builds the HTTP response body from the
// result of the "updatePackage" endpoint of the "packages" service.
func NewUpdatePackageInvalidResponseBody(res *goa.ServiceError) *UpdatePackageInvalidResponseBody {
	body := &UpdatePackageInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePackageInvariantViolationResponseBody builds the HTTP response body
// from the result of the "updatePackage" endpoint of the "packages" service.
func NewUpdatePackageInvariantViolationResponseBody(res *goa.ServiceError) *UpdatePackageInvariantViolationResponseBody {
	body := &UpdatePackageInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePackageUnexpectedResponseBody builds the HTTP response body from
// the result of the "updatePackage" endpoint of the "packages" service.
func NewUpdatePackageUnexpectedResponseBody(res *goa.ServiceError) *UpdatePackageUnexpectedResponseBody {
	body := &UpdatePackageUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePackageGatewayErrorResponseBody builds the HTTP response body from
// the result of the "updatePackage" endpoint of the "packages" service.
func NewUpdatePackageGatewayErrorResponseBody(res *goa.ServiceError) *UpdatePackageGatewayErrorResponseBody {
	body := &UpdatePackageGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePackageNotModifiedResponseBody builds the HTTP response body from
// the result of the "updatePackage" endpoint of the "packages" service.
func NewUpdatePackageNotModifiedResponseBody(res *packages.NotModified) *UpdatePackageNotModifiedResponseBody {
	body := &UpdatePackageNotModifiedResponseBody{
		Location: res.Location,
	}
	return body
}

// NewListPackagesUnauthorizedResponseBody builds the HTTP response body from
// the result of the "listPackages" endpoint of the "packages" service.
func NewListPackagesUnauthorizedResponseBody(res *goa.ServiceError) *ListPackagesUnauthorizedResponseBody {
	body := &ListPackagesUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPackagesForbiddenResponseBody builds the HTTP response body from the
// result of the "listPackages" endpoint of the "packages" service.
func NewListPackagesForbiddenResponseBody(res *goa.ServiceError) *ListPackagesForbiddenResponseBody {
	body := &ListPackagesForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPackagesBadRequestResponseBody builds the HTTP response body from the
// result of the "listPackages" endpoint of the "packages" service.
func NewListPackagesBadRequestResponseBody(res *goa.ServiceError) *ListPackagesBadRequestResponseBody {
	body := &ListPackagesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPackagesNotFoundResponseBody builds the HTTP response body from the
// result of the "listPackages" endpoint of the "packages" service.
func NewListPackagesNotFoundResponseBody(res *goa.ServiceError) *ListPackagesNotFoundResponseBody {
	body := &ListPackagesNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPackagesConflictResponseBody builds the HTTP response body from the
// result of the "listPackages" endpoint of the "packages" service.
func NewListPackagesConflictResponseBody(res *goa.ServiceError) *ListPackagesConflictResponseBody {
	body := &ListPackagesConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPackagesUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "listPackages" endpoint of the "packages" service.
func NewListPackagesUnsupportedMediaResponseBody(res *goa.ServiceError) *ListPackagesUnsupportedMediaResponseBody {
	body := &ListPackagesUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPackagesInvalidResponseBody builds the HTTP response body from the
// result of the "listPackages" endpoint of the "packages" service.
func NewListPackagesInvalidResponseBody(res *goa.ServiceError) *ListPackagesInvalidResponseBody {
	body := &ListPackagesInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPackagesInvariantViolationResponseBody builds the HTTP response body
// from the result of the "listPackages" endpoint of the "packages" service.
func NewListPackagesInvariantViolationResponseBody(res *goa.ServiceError) *ListPackagesInvariantViolationResponseBody {
	body := &ListPackagesInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPackagesUnexpectedResponseBody builds the HTTP response body from the
// result of the "listPackages" endpoint of the "packages" service.
func NewListPackagesUnexpectedResponseBody(res *goa.ServiceError) *ListPackagesUnexpectedResponseBody {
	body := &ListPackagesUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPackagesGatewayErrorResponseBody builds the HTTP response body from
// the result of the "listPackages" endpoint of the "packages" service.
func NewListPackagesGatewayErrorResponseBody(res *goa.ServiceError) *ListPackagesGatewayErrorResponseBody {
	body := &ListPackagesGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListVersionsUnauthorizedResponseBody builds the HTTP response body from
// the result of the "listVersions" endpoint of the "packages" service.
func NewListVersionsUnauthorizedResponseBody(res *goa.ServiceError) *ListVersionsUnauthorizedResponseBody {
	body := &ListVersionsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListVersionsForbiddenResponseBody builds the HTTP response body from the
// result of the "listVersions" endpoint of the "packages" service.
func NewListVersionsForbiddenResponseBody(res *goa.ServiceError) *ListVersionsForbiddenResponseBody {
	body := &ListVersionsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListVersionsBadRequestResponseBody builds the HTTP response body from the
// result of the "listVersions" endpoint of the "packages" service.
func NewListVersionsBadRequestResponseBody(res *goa.ServiceError) *ListVersionsBadRequestResponseBody {
	body := &ListVersionsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListVersionsNotFoundResponseBody builds the HTTP response body from the
// result of the "listVersions" endpoint of the "packages" service.
func NewListVersionsNotFoundResponseBody(res *goa.ServiceError) *ListVersionsNotFoundResponseBody {
	body := &ListVersionsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListVersionsConflictResponseBody builds the HTTP response body from the
// result of the "listVersions" endpoint of the "packages" service.
func NewListVersionsConflictResponseBody(res *goa.ServiceError) *ListVersionsConflictResponseBody {
	body := &ListVersionsConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListVersionsUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "listVersions" endpoint of the "packages" service.
func NewListVersionsUnsupportedMediaResponseBody(res *goa.ServiceError) *ListVersionsUnsupportedMediaResponseBody {
	body := &ListVersionsUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListVersionsInvalidResponseBody builds the HTTP response body from the
// result of the "listVersions" endpoint of the "packages" service.
func NewListVersionsInvalidResponseBody(res *goa.ServiceError) *ListVersionsInvalidResponseBody {
	body := &ListVersionsInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListVersionsInvariantViolationResponseBody builds the HTTP response body
// from the result of the "listVersions" endpoint of the "packages" service.
func NewListVersionsInvariantViolationResponseBody(res *goa.ServiceError) *ListVersionsInvariantViolationResponseBody {
	body := &ListVersionsInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListVersionsUnexpectedResponseBody builds the HTTP response body from the
// result of the "listVersions" endpoint of the "packages" service.
func NewListVersionsUnexpectedResponseBody(res *goa.ServiceError) *ListVersionsUnexpectedResponseBody {
	body := &ListVersionsUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListVersionsGatewayErrorResponseBody builds the HTTP response body from
// the result of the "listVersions" endpoint of the "packages" service.
func NewListVersionsGatewayErrorResponseBody(res *goa.ServiceError) *ListVersionsGatewayErrorResponseBody {
	body := &ListVersionsGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPublishUnauthorizedResponseBody builds the HTTP response body from the
// result of the "publish" endpoint of the "packages" service.
func NewPublishUnauthorizedResponseBody(res *goa.ServiceError) *PublishUnauthorizedResponseBody {
	body := &PublishUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPublishForbiddenResponseBody builds the HTTP response body from the
// result of the "publish" endpoint of the "packages" service.
func NewPublishForbiddenResponseBody(res *goa.ServiceError) *PublishForbiddenResponseBody {
	body := &PublishForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPublishBadRequestResponseBody builds the HTTP response body from the
// result of the "publish" endpoint of the "packages" service.
func NewPublishBadRequestResponseBody(res *goa.ServiceError) *PublishBadRequestResponseBody {
	body := &PublishBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPublishNotFoundResponseBody builds the HTTP response body from the result
// of the "publish" endpoint of the "packages" service.
func NewPublishNotFoundResponseBody(res *goa.ServiceError) *PublishNotFoundResponseBody {
	body := &PublishNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPublishConflictResponseBody builds the HTTP response body from the result
// of the "publish" endpoint of the "packages" service.
func NewPublishConflictResponseBody(res *goa.ServiceError) *PublishConflictResponseBody {
	body := &PublishConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPublishUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "publish" endpoint of the "packages" service.
func NewPublishUnsupportedMediaResponseBody(res *goa.ServiceError) *PublishUnsupportedMediaResponseBody {
	body := &PublishUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPublishInvalidResponseBody builds the HTTP response body from the result
// of the "publish" endpoint of the "packages" service.
func NewPublishInvalidResponseBody(res *goa.ServiceError) *PublishInvalidResponseBody {
	body := &PublishInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPublishInvariantViolationResponseBody builds the HTTP response body from
// the result of the "publish" endpoint of the "packages" service.
func NewPublishInvariantViolationResponseBody(res *goa.ServiceError) *PublishInvariantViolationResponseBody {
	body := &PublishInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPublishUnexpectedResponseBody builds the HTTP response body from the
// result of the "publish" endpoint of the "packages" service.
func NewPublishUnexpectedResponseBody(res *goa.ServiceError) *PublishUnexpectedResponseBody {
	body := &PublishUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPublishGatewayErrorResponseBody builds the HTTP response body from the
// result of the "publish" endpoint of the "packages" service.
func NewPublishGatewayErrorResponseBody(res *goa.ServiceError) *PublishGatewayErrorResponseBody {
	body := &PublishGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePackagePayload builds a packages service createPackage endpoint
// payload.
func NewCreatePackagePayload(body *CreatePackageRequestBody, apikeyToken *string, sessionToken *string, projectSlugInput *string) *packages.CreatePackagePayload {
	v := &packages.CreatePackagePayload{
		Name:         *body.Name,
		Title:        *body.Title,
		Summary:      *body.Summary,
		Description:  body.Description,
		URL:          body.URL,
		ImageAssetID: body.ImageAssetID,
	}
	if body.Keywords != nil {
		v.Keywords = make([]string, len(body.Keywords))
		for i, val := range body.Keywords {
			v.Keywords[i] = val
		}
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewUpdatePackagePayload builds a packages service updatePackage endpoint
// payload.
func NewUpdatePackagePayload(body *UpdatePackageRequestBody, apikeyToken *string, sessionToken *string, projectSlugInput *string) *packages.UpdatePackagePayload {
	v := &packages.UpdatePackagePayload{
		ID:           *body.ID,
		Title:        body.Title,
		Summary:      body.Summary,
		Description:  body.Description,
		URL:          body.URL,
		ImageAssetID: body.ImageAssetID,
	}
	if body.Keywords != nil {
		v.Keywords = make([]string, len(body.Keywords))
		for i, val := range body.Keywords {
			v.Keywords[i] = val
		}
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewListPackagesPayload builds a packages service listPackages endpoint
// payload.
func NewListPackagesPayload(apikeyToken *string, sessionToken *string, projectSlugInput *string) *packages.ListPackagesPayload {
	v := &packages.ListPackagesPayload{}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewListVersionsPayload builds a packages service listVersions endpoint
// payload.
func NewListVersionsPayload(name string, apikeyToken *string, sessionToken *string, projectSlugInput *string) *packages.ListVersionsPayload {
	v := &packages.ListVersionsPayload{}
	v.Name = name
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewPublishPayload builds a packages service publish endpoint payload.
func NewPublishPayload(body *PublishRequestBody, apikeyToken *string, sessionToken *string, projectSlugInput *string) *packages.PublishPayload {
	v := &packages.PublishPayload{
		Name:         *body.Name,
		Version:      *body.Version,
		DeploymentID: *body.DeploymentID,
		Visibility:   *body.Visibility,
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// ValidateCreatePackageRequestBody runs the validations defined on
// CreatePackageRequestBody
func ValidateCreatePackageRequestBody(body *CreatePackageRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Summary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("summary", "body"))
	}
	if body.Name != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.name", *body.Name, "^[a-z0-9]+(?:[a-z0-9_-]*[a-z0-9])?$"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 100, false))
		}
	}
	if body.Summary != nil {
		if utf8.RuneCountInString(*body.Summary) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.summary", *body.Summary, utf8.RuneCountInString(*body.Summary), 80, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 10000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 10000, false))
		}
	}
	if body.URL != nil {
		if utf8.RuneCountInString(*body.URL) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.url", *body.URL, utf8.RuneCountInString(*body.URL), 100, false))
		}
	}
	if len(body.Keywords) > 5 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.keywords", body.Keywords, len(body.Keywords), 5, false))
	}
	if body.ImageAssetID != nil {
		if utf8.RuneCountInString(*body.ImageAssetID) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.image_asset_id", *body.ImageAssetID, utf8.RuneCountInString(*body.ImageAssetID), 50, false))
		}
	}
	return
}

// ValidateUpdatePackageRequestBody runs the validations defined on
// UpdatePackageRequestBody
func ValidateUpdatePackageRequestBody(body *UpdatePackageRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 50, false))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 100, false))
		}
	}
	if body.Summary != nil {
		if utf8.RuneCountInString(*body.Summary) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.summary", *body.Summary, utf8.RuneCountInString(*body.Summary), 80, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 10000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 10000, false))
		}
	}
	if body.URL != nil {
		if utf8.RuneCountInString(*body.URL) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.url", *body.URL, utf8.RuneCountInString(*body.URL), 100, false))
		}
	}
	if len(body.Keywords) > 5 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.keywords", body.Keywords, len(body.Keywords), 5, false))
	}
	if body.ImageAssetID != nil {
		if utf8.RuneCountInString(*body.ImageAssetID) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.image_asset_id", *body.ImageAssetID, utf8.RuneCountInString(*body.ImageAssetID), 50, false))
		}
	}
	return
}

// ValidatePublishRequestBody runs the validations defined on PublishRequestBody
func ValidatePublishRequestBody(body *PublishRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	if body.DeploymentID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deployment_id", "body"))
	}
	if body.Visibility == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("visibility", "body"))
	}
	if body.Visibility != nil {
		if !(*body.Visibility == "public" || *body.Visibility == "private") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.visibility", *body.Visibility, []any{"public", "private"}))
		}
	}
	return
}
