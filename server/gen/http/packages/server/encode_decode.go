// Code generated by goa v3.22.2, DO NOT EDIT.
//
// packages HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strings"

	packages "github.com/speakeasy-api/gram/server/gen/packages"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreatePackageResponse returns an encoder for responses returned by the
// packages createPackage endpoint.
func EncodeCreatePackageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*packages.CreatePackageResult)
		enc := encoder(ctx, w)
		body := NewCreatePackageResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreatePackageRequest returns a decoder for requests sent to the
// packages createPackage endpoint.
func DecodeCreatePackageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*packages.CreatePackagePayload, error) {
	return func(r *http.Request) (*packages.CreatePackagePayload, error) {
		var (
			body CreatePackageRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreatePackageRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			apikeyToken      *string
			sessionToken     *string
			projectSlugInput *string
		)
		apikeyTokenRaw := r.Header.Get("Gram-Key")
		if apikeyTokenRaw != "" {
			apikeyToken = &apikeyTokenRaw
		}
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugInputRaw := r.Header.Get("Gram-Project")
		if projectSlugInputRaw != "" {
			projectSlugInput = &projectSlugInputRaw
		}
		payload := NewCreatePackagePayload(&body, apikeyToken, sessionToken, projectSlugInput)
		if payload.ApikeyToken != nil {
			if strings.Contains(*payload.ApikeyToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ApikeyToken, " ", 2)[1]
				payload.ApikeyToken = &cred
			}
		}
		if payload.ProjectSlugInput != nil {
			if strings.Contains(*payload.ProjectSlugInput, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlugInput, " ", 2)[1]
				payload.ProjectSlugInput = &cred
			}
		}
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeCreatePackageError returns an encoder for errors returned by the
// createPackage packages endpoint.
func EncodeCreatePackageError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreatePackageUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreatePackageForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreatePackageBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreatePackageNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "conflict":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreatePackageConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "unsupported_media":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreatePackageUnsupportedMediaResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnsupportedMediaType)
			return enc.Encode(body)
		case "invalid":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreatePackageInvalidResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnprocessableEntity)
			return enc.Encode(body)
		case "invariant_violation":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreatePackageInvariantViolationResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "unexpected":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreatePackageUnexpectedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "gateway_error":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreatePackageGatewayErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdatePackageResponse returns an encoder for responses returned by the
// packages updatePackage endpoint.
func EncodeUpdatePackageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*packages.UpdatePackageResult)
		enc := encoder(ctx, w)
		body := NewUpdatePackageResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdatePackageRequest returns a decoder for requests sent to the
// packages updatePackage endpoint.
func DecodeUpdatePackageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*packages.UpdatePackagePayload, error) {
	return func(r *http.Request) (*packages.UpdatePackagePayload, error) {
		var (
			body UpdatePackageRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdatePackageRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			apikeyToken      *string
			sessionToken     *string
			projectSlugInput *string
		)
		apikeyTokenRaw := r.Header.Get("Gram-Key")
		if apikeyTokenRaw != "" {
			apikeyToken = &apikeyTokenRaw
		}
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugInputRaw := r.Header.Get("Gram-Project")
		if projectSlugInputRaw != "" {
			projectSlugInput = &projectSlugInputRaw
		}
		payload := NewUpdatePackagePayload(&body, apikeyToken, sessionToken, projectSlugInput)
		if payload.ApikeyToken != nil {
			if strings.Contains(*payload.ApikeyToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ApikeyToken, " ", 2)[1]
				payload.ApikeyToken = &cred
			}
		}
		if payload.ProjectSlugInput != nil {
			if strings.Contains(*payload.ProjectSlugInput, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlugInput, " ", 2)[1]
				payload.ProjectSlugInput = &cred
			}
		}
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdatePackageError returns an encoder for errors returned by the
// updatePackage packages endpoint.
func EncodeUpdatePackageError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdatePackageUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdatePackageForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdatePackageBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdatePackageNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "conflict":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdatePackageConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "unsupported_media":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdatePackageUnsupportedMediaResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnsupportedMediaType)
			return enc.Encode(body)
		case "invalid":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdatePackageInvalidResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnprocessableEntity)
			return enc.Encode(body)
		case "invariant_violation":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdatePackageInvariantViolationResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "unexpected":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdatePackageUnexpectedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "gateway_error":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdatePackageGatewayErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "not_modified":
			var res *packages.NotModified
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdatePackageNotModifiedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotModified)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListPackagesResponse returns an encoder for responses returned by the
// packages listPackages endpoint.
func EncodeListPackagesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*packages.ListPackagesResult)
		enc := encoder(ctx, w)
		body := NewListPackagesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListPackagesRequest returns a decoder for requests sent to the
// packages listPackages endpoint.
func DecodeListPackagesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*packages.ListPackagesPayload, error) {
	return func(r *http.Request) (*packages.ListPackagesPayload, error) {
		var (
			apikeyToken      *string
			sessionToken     *string
			projectSlugInput *string
		)
		apikeyTokenRaw := r.Header.Get("Gram-Key")
		if apikeyTokenRaw != "" {
			apikeyToken = &apikeyTokenRaw
		}
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugInputRaw := r.Header.Get("Gram-Project")
		if projectSlugInputRaw != "" {
			projectSlugInput = &projectSlugInputRaw
		}
		payload := NewListPackagesPayload(apikeyToken, sessionToken, projectSlugInput)
		if payload.ApikeyToken != nil {
			if strings.Contains(*payload.ApikeyToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ApikeyToken, " ", 2)[1]
				payload.ApikeyToken = &cred
			}
		}
		if payload.ProjectSlugInput != nil {
			if strings.Contains(*payload.ProjectSlugInput, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlugInput, " ", 2)[1]
				payload.ProjectSlugInput = &cred
			}
		}
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListPackagesError returns an encoder for errors returned by the
// listPackages packages endpoint.
func EncodeListPackagesError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListPackagesUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListPackagesForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListPackagesBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListPackagesNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "conflict":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListPackagesConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "unsupported_media":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListPackagesUnsupportedMediaResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnsupportedMediaType)
			return enc.Encode(body)
		case "invalid":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListPackagesInvalidResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnprocessableEntity)
			return enc.Encode(body)
		case "invariant_violation":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListPackagesInvariantViolationResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "unexpected":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListPackagesUnexpectedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "gateway_error":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListPackagesGatewayErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListVersionsResponse returns an encoder for responses returned by the
// packages listVersions endpoint.
func EncodeListVersionsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*packages.ListVersionsResult)
		enc := encoder(ctx, w)
		body := NewListVersionsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListVersionsRequest returns a decoder for requests sent to the
// packages listVersions endpoint.
func DecodeListVersionsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*packages.ListVersionsPayload, error) {
	return func(r *http.Request) (*packages.ListVersionsPayload, error) {
		var (
			name             string
			apikeyToken      *string
			sessionToken     *string
			projectSlugInput *string
			err              error
		)
		name = r.URL.Query().Get("name")
		if name == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("name", "query string"))
		}
		apikeyTokenRaw := r.Header.Get("Gram-Key")
		if apikeyTokenRaw != "" {
			apikeyToken = &apikeyTokenRaw
		}
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugInputRaw := r.Header.Get("Gram-Project")
		if projectSlugInputRaw != "" {
			projectSlugInput = &projectSlugInputRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewListVersionsPayload(name, apikeyToken, sessionToken, projectSlugInput)
		if payload.ApikeyToken != nil {
			if strings.Contains(*payload.ApikeyToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ApikeyToken, " ", 2)[1]
				payload.ApikeyToken = &cred
			}
		}
		if payload.ProjectSlugInput != nil {
			if strings.Contains(*payload.ProjectSlugInput, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlugInput, " ", 2)[1]
				payload.ProjectSlugInput = &cred
			}
		}
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListVersionsError returns an encoder for errors returned by the
// listVersions packages endpoint.
func EncodeListVersionsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListVersionsUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListVersionsForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListVersionsBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListVersionsNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "conflict":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListVersionsConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "unsupported_media":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListVersionsUnsupportedMediaResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnsupportedMediaType)
			return enc.Encode(body)
		case "invalid":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListVersionsInvalidResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnprocessableEntity)
			return enc.Encode(body)
		case "invariant_violation":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListVersionsInvariantViolationResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "unexpected":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListVersionsUnexpectedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "gateway_error":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListVersionsGatewayErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodePublishResponse returns an encoder for responses returned by the
// packages publish endpoint.
func EncodePublishResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*packages.PublishPackageResult)
		enc := encoder(ctx, w)
		body := NewPublishResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodePublishRequest returns a decoder for requests sent to the packages
// publish endpoint.
func DecodePublishRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*packages.PublishPayload, error) {
	return func(r *http.Request) (*packages.PublishPayload, error) {
		var (
			body PublishRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidatePublishRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			apikeyToken      *string
			sessionToken     *string
			projectSlugInput *string
		)
		apikeyTokenRaw := r.Header.Get("Gram-Key")
		if apikeyTokenRaw != "" {
			apikeyToken = &apikeyTokenRaw
		}
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugInputRaw := r.Header.Get("Gram-Project")
		if projectSlugInputRaw != "" {
			projectSlugInput = &projectSlugInputRaw
		}
		payload := NewPublishPayload(&body, apikeyToken, sessionToken, projectSlugInput)
		if payload.ApikeyToken != nil {
			if strings.Contains(*payload.ApikeyToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ApikeyToken, " ", 2)[1]
				payload.ApikeyToken = &cred
			}
		}
		if payload.ProjectSlugInput != nil {
			if strings.Contains(*payload.ProjectSlugInput, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlugInput, " ", 2)[1]
				payload.ProjectSlugInput = &cred
			}
		}
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodePublishError returns an encoder for errors returned by the publish
// packages endpoint.
func EncodePublishError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewPublishUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewPublishForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewPublishBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewPublishNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "conflict":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewPublishConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "unsupported_media":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewPublishUnsupportedMediaResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnsupportedMediaType)
			return enc.Encode(body)
		case "invalid":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewPublishInvalidResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnprocessableEntity)
			return enc.Encode(body)
		case "invariant_violation":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewPublishInvariantViolationResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "unexpected":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewPublishUnexpectedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "gateway_error":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewPublishGatewayErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalPackagesPackageToPackageResponseBody builds a value of type
// *PackageResponseBody from a value of type *packages.Package.
func marshalPackagesPackageToPackageResponseBody(v *packages.Package) *PackageResponseBody {
	res := &PackageResponseBody{
		ID:             v.ID,
		ProjectID:      v.ProjectID,
		OrganizationID: v.OrganizationID,
		Name:           v.Name,
		Title:          v.Title,
		Summary:        v.Summary,
		Description:    v.Description,
		DescriptionRaw: v.DescriptionRaw,
		URL:            v.URL,
		ImageAssetID:   v.ImageAssetID,
		LatestVersion:  v.LatestVersion,
		CreatedAt:      v.CreatedAt,
		UpdatedAt:      v.UpdatedAt,
		DeletedAt:      v.DeletedAt,
	}
	if v.Keywords != nil {
		res.Keywords = make([]string, len(v.Keywords))
		for i, val := range v.Keywords {
			res.Keywords[i] = val
		}
	}

	return res
}

// marshalPackagesPackageVersionToPackageVersionResponseBody builds a value of
// type *PackageVersionResponseBody from a value of type
// *packages.PackageVersion.
func marshalPackagesPackageVersionToPackageVersionResponseBody(v *packages.PackageVersion) *PackageVersionResponseBody {
	res := &PackageVersionResponseBody{
		ID:           v.ID,
		PackageID:    v.PackageID,
		DeploymentID: v.DeploymentID,
		Visibility:   v.Visibility,
		Semver:       v.Semver,
		CreatedAt:    v.CreatedAt,
	}

	return res
}
