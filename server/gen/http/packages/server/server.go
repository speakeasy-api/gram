// Code generated by goa v3.22.2, DO NOT EDIT.
//
// packages HTTP server
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	"context"
	"net/http"

	packages "github.com/speakeasy-api/gram/server/gen/packages"
	otelhttp "go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the packages service endpoint HTTP handlers.
type Server struct {
	Mounts        []*MountPoint
	CreatePackage http.Handler
	UpdatePackage http.Handler
	ListPackages  http.Handler
	ListVersions  http.Handler
	Publish       http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the packages service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *packages.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreatePackage", "POST", "/rpc/packages.create"},
			{"UpdatePackage", "PUT", "/rpc/packages.update"},
			{"ListPackages", "GET", "/rpc/packages.list"},
			{"ListVersions", "GET", "/rpc/packages.listVersions"},
			{"Publish", "POST", "/rpc/packages.publish"},
		},
		CreatePackage: NewCreatePackageHandler(e.CreatePackage, mux, decoder, encoder, errhandler, formatter),
		UpdatePackage: NewUpdatePackageHandler(e.UpdatePackage, mux, decoder, encoder, errhandler, formatter),
		ListPackages:  NewListPackagesHandler(e.ListPackages, mux, decoder, encoder, errhandler, formatter),
		ListVersions:  NewListVersionsHandler(e.ListVersions, mux, decoder, encoder, errhandler, formatter),
		Publish:       NewPublishHandler(e.Publish, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "packages" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreatePackage = m(s.CreatePackage)
	s.UpdatePackage = m(s.UpdatePackage)
	s.ListPackages = m(s.ListPackages)
	s.ListVersions = m(s.ListVersions)
	s.Publish = m(s.Publish)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return packages.MethodNames[:] }

// Mount configures the mux to serve the packages endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreatePackageHandler(mux, h.CreatePackage)
	MountUpdatePackageHandler(mux, h.UpdatePackage)
	MountListPackagesHandler(mux, h.ListPackages)
	MountListVersionsHandler(mux, h.ListVersions)
	MountPublishHandler(mux, h.Publish)
}

// Mount configures the mux to serve the packages endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreatePackageHandler configures the mux to serve the "packages" service
// "createPackage" endpoint.
func MountCreatePackageHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/packages.create", otelhttp.WithRouteTag("/rpc/packages.create", f).ServeHTTP)
}

// NewCreatePackageHandler creates a HTTP handler which loads the HTTP request
// and calls the "packages" service "createPackage" endpoint.
func NewCreatePackageHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreatePackageRequest(mux, decoder)
		encodeResponse = EncodeCreatePackageResponse(encoder)
		encodeError    = EncodeCreatePackageError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createPackage")
		ctx = context.WithValue(ctx, goa.ServiceKey, "packages")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountUpdatePackageHandler configures the mux to serve the "packages" service
// "updatePackage" endpoint.
func MountUpdatePackageHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/rpc/packages.update", otelhttp.WithRouteTag("/rpc/packages.update", f).ServeHTTP)
}

// NewUpdatePackageHandler creates a HTTP handler which loads the HTTP request
// and calls the "packages" service "updatePackage" endpoint.
func NewUpdatePackageHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdatePackageRequest(mux, decoder)
		encodeResponse = EncodeUpdatePackageResponse(encoder)
		encodeError    = EncodeUpdatePackageError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updatePackage")
		ctx = context.WithValue(ctx, goa.ServiceKey, "packages")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountListPackagesHandler configures the mux to serve the "packages" service
// "listPackages" endpoint.
func MountListPackagesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/rpc/packages.list", otelhttp.WithRouteTag("/rpc/packages.list", f).ServeHTTP)
}

// NewListPackagesHandler creates a HTTP handler which loads the HTTP request
// and calls the "packages" service "listPackages" endpoint.
func NewListPackagesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListPackagesRequest(mux, decoder)
		encodeResponse = EncodeListPackagesResponse(encoder)
		encodeError    = EncodeListPackagesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listPackages")
		ctx = context.WithValue(ctx, goa.ServiceKey, "packages")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountListVersionsHandler configures the mux to serve the "packages" service
// "listVersions" endpoint.
func MountListVersionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/rpc/packages.listVersions", otelhttp.WithRouteTag("/rpc/packages.listVersions", f).ServeHTTP)
}

// NewListVersionsHandler creates a HTTP handler which loads the HTTP request
// and calls the "packages" service "listVersions" endpoint.
func NewListVersionsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListVersionsRequest(mux, decoder)
		encodeResponse = EncodeListVersionsResponse(encoder)
		encodeError    = EncodeListVersionsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listVersions")
		ctx = context.WithValue(ctx, goa.ServiceKey, "packages")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountPublishHandler configures the mux to serve the "packages" service
// "publish" endpoint.
func MountPublishHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/packages.publish", otelhttp.WithRouteTag("/rpc/packages.publish", f).ServeHTTP)
}

// NewPublishHandler creates a HTTP handler which loads the HTTP request and
// calls the "packages" service "publish" endpoint.
func NewPublishHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodePublishRequest(mux, decoder)
		encodeResponse = EncodePublishResponse(encoder)
		encodeError    = EncodePublishError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "publish")
		ctx = context.WithValue(ctx, goa.ServiceKey, "packages")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}
