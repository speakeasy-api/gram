// Code generated by goa v3.22.2, DO NOT EDIT.
//
// packages client HTTP transport
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the packages service endpoint HTTP clients.
type Client struct {
	// CreatePackage Doer is the HTTP client used to make requests to the
	// createPackage endpoint.
	CreatePackageDoer goahttp.Doer

	// UpdatePackage Doer is the HTTP client used to make requests to the
	// updatePackage endpoint.
	UpdatePackageDoer goahttp.Doer

	// ListPackages Doer is the HTTP client used to make requests to the
	// listPackages endpoint.
	ListPackagesDoer goahttp.Doer

	// ListVersions Doer is the HTTP client used to make requests to the
	// listVersions endpoint.
	ListVersionsDoer goahttp.Doer

	// Publish Doer is the HTTP client used to make requests to the publish
	// endpoint.
	PublishDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the packages service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreatePackageDoer:   doer,
		UpdatePackageDoer:   doer,
		ListPackagesDoer:    doer,
		ListVersionsDoer:    doer,
		PublishDoer:         doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// CreatePackage returns an endpoint that makes HTTP requests to the packages
// service createPackage server.
func (c *Client) CreatePackage() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreatePackageRequest(c.encoder)
		decodeResponse = DecodeCreatePackageResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreatePackageRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreatePackageDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("packages", "createPackage", err)
		}
		return decodeResponse(resp)
	}
}

// UpdatePackage returns an endpoint that makes HTTP requests to the packages
// service updatePackage server.
func (c *Client) UpdatePackage() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdatePackageRequest(c.encoder)
		decodeResponse = DecodeUpdatePackageResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdatePackageRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdatePackageDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("packages", "updatePackage", err)
		}
		return decodeResponse(resp)
	}
}

// ListPackages returns an endpoint that makes HTTP requests to the packages
// service listPackages server.
func (c *Client) ListPackages() goa.Endpoint {
	var (
		encodeRequest  = EncodeListPackagesRequest(c.encoder)
		decodeResponse = DecodeListPackagesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListPackagesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListPackagesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("packages", "listPackages", err)
		}
		return decodeResponse(resp)
	}
}

// ListVersions returns an endpoint that makes HTTP requests to the packages
// service listVersions server.
func (c *Client) ListVersions() goa.Endpoint {
	var (
		encodeRequest  = EncodeListVersionsRequest(c.encoder)
		decodeResponse = DecodeListVersionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListVersionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListVersionsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("packages", "listVersions", err)
		}
		return decodeResponse(resp)
	}
}

// Publish returns an endpoint that makes HTTP requests to the packages service
// publish server.
func (c *Client) Publish() goa.Endpoint {
	var (
		encodeRequest  = EncodePublishRequest(c.encoder)
		decodeResponse = DecodePublishResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildPublishRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PublishDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("packages", "publish", err)
		}
		return decodeResponse(resp)
	}
}
