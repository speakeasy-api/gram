// Code generated by goa v3.22.2, DO NOT EDIT.
//
// variations HTTP server
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	"context"
	"net/http"

	variations "github.com/speakeasy-api/gram/server/gen/variations"
	otelhttp "go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the variations service endpoint HTTP handlers.
type Server struct {
	Mounts       []*MountPoint
	UpsertGlobal http.Handler
	DeleteGlobal http.Handler
	ListGlobal   http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the variations service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *variations.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"UpsertGlobal", "POST", "/rpc/variations.upsertGlobal"},
			{"DeleteGlobal", "DELETE", "/rpc/variations.deleteGlobal"},
			{"ListGlobal", "GET", "/rpc/variations.listGlobal"},
		},
		UpsertGlobal: NewUpsertGlobalHandler(e.UpsertGlobal, mux, decoder, encoder, errhandler, formatter),
		DeleteGlobal: NewDeleteGlobalHandler(e.DeleteGlobal, mux, decoder, encoder, errhandler, formatter),
		ListGlobal:   NewListGlobalHandler(e.ListGlobal, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "variations" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.UpsertGlobal = m(s.UpsertGlobal)
	s.DeleteGlobal = m(s.DeleteGlobal)
	s.ListGlobal = m(s.ListGlobal)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return variations.MethodNames[:] }

// Mount configures the mux to serve the variations endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountUpsertGlobalHandler(mux, h.UpsertGlobal)
	MountDeleteGlobalHandler(mux, h.DeleteGlobal)
	MountListGlobalHandler(mux, h.ListGlobal)
}

// Mount configures the mux to serve the variations endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountUpsertGlobalHandler configures the mux to serve the "variations"
// service "upsertGlobal" endpoint.
func MountUpsertGlobalHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/variations.upsertGlobal", otelhttp.WithRouteTag("/rpc/variations.upsertGlobal", f).ServeHTTP)
}

// NewUpsertGlobalHandler creates a HTTP handler which loads the HTTP request
// and calls the "variations" service "upsertGlobal" endpoint.
func NewUpsertGlobalHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpsertGlobalRequest(mux, decoder)
		encodeResponse = EncodeUpsertGlobalResponse(encoder)
		encodeError    = EncodeUpsertGlobalError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "upsertGlobal")
		ctx = context.WithValue(ctx, goa.ServiceKey, "variations")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountDeleteGlobalHandler configures the mux to serve the "variations"
// service "deleteGlobal" endpoint.
func MountDeleteGlobalHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/rpc/variations.deleteGlobal", otelhttp.WithRouteTag("/rpc/variations.deleteGlobal", f).ServeHTTP)
}

// NewDeleteGlobalHandler creates a HTTP handler which loads the HTTP request
// and calls the "variations" service "deleteGlobal" endpoint.
func NewDeleteGlobalHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteGlobalRequest(mux, decoder)
		encodeResponse = EncodeDeleteGlobalResponse(encoder)
		encodeError    = EncodeDeleteGlobalError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteGlobal")
		ctx = context.WithValue(ctx, goa.ServiceKey, "variations")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountListGlobalHandler configures the mux to serve the "variations" service
// "listGlobal" endpoint.
func MountListGlobalHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/rpc/variations.listGlobal", otelhttp.WithRouteTag("/rpc/variations.listGlobal", f).ServeHTTP)
}

// NewListGlobalHandler creates a HTTP handler which loads the HTTP request and
// calls the "variations" service "listGlobal" endpoint.
func NewListGlobalHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListGlobalRequest(mux, decoder)
		encodeResponse = EncodeListGlobalResponse(encoder)
		encodeError    = EncodeListGlobalError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listGlobal")
		ctx = context.WithValue(ctx, goa.ServiceKey, "variations")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}
