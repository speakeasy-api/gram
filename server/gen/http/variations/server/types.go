// Code generated by goa v3.22.2, DO NOT EDIT.
//
// variations HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	variations "github.com/speakeasy-api/gram/server/gen/variations"
	goa "goa.design/goa/v3/pkg"
)

// UpsertGlobalRequestBody is the type of the "variations" service
// "upsertGlobal" endpoint HTTP request body.
type UpsertGlobalRequestBody struct {
	// The name of the source tool
	SrcToolName *string `form:"src_tool_name,omitempty" json:"src_tool_name,omitempty" xml:"src_tool_name,omitempty"`
	// The confirmation mode for the tool variation
	Confirm *string `form:"confirm,omitempty" json:"confirm,omitempty" xml:"confirm,omitempty"`
	// The confirmation prompt for the tool variation
	ConfirmPrompt *string `form:"confirm_prompt,omitempty" json:"confirm_prompt,omitempty" xml:"confirm_prompt,omitempty"`
	// The name of the tool variation
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The summary of the tool variation
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// The description of the tool variation
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The tags of the tool variation
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// The summarizer of the tool variation
	Summarizer *string `form:"summarizer,omitempty" json:"summarizer,omitempty" xml:"summarizer,omitempty"`
}

// UpsertGlobalResponseBody is the type of the "variations" service
// "upsertGlobal" endpoint HTTP response body.
type UpsertGlobalResponseBody struct {
	Variation *ToolVariationResponseBody `form:"variation" json:"variation" xml:"variation"`
}

// DeleteGlobalResponseBody is the type of the "variations" service
// "deleteGlobal" endpoint HTTP response body.
type DeleteGlobalResponseBody struct {
	// The ID of the variation that was deleted
	VariationID string `form:"variation_id" json:"variation_id" xml:"variation_id"`
}

// ListGlobalResponseBody is the type of the "variations" service "listGlobal"
// endpoint HTTP response body.
type ListGlobalResponseBody struct {
	Variations []*ToolVariationResponseBody `form:"variations" json:"variations" xml:"variations"`
}

// UpsertGlobalUnauthorizedResponseBody is the type of the "variations" service
// "upsertGlobal" endpoint HTTP response body for the "unauthorized" error.
type UpsertGlobalUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpsertGlobalForbiddenResponseBody is the type of the "variations" service
// "upsertGlobal" endpoint HTTP response body for the "forbidden" error.
type UpsertGlobalForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpsertGlobalBadRequestResponseBody is the type of the "variations" service
// "upsertGlobal" endpoint HTTP response body for the "bad_request" error.
type UpsertGlobalBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpsertGlobalNotFoundResponseBody is the type of the "variations" service
// "upsertGlobal" endpoint HTTP response body for the "not_found" error.
type UpsertGlobalNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpsertGlobalConflictResponseBody is the type of the "variations" service
// "upsertGlobal" endpoint HTTP response body for the "conflict" error.
type UpsertGlobalConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpsertGlobalUnsupportedMediaResponseBody is the type of the "variations"
// service "upsertGlobal" endpoint HTTP response body for the
// "unsupported_media" error.
type UpsertGlobalUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpsertGlobalInvalidResponseBody is the type of the "variations" service
// "upsertGlobal" endpoint HTTP response body for the "invalid" error.
type UpsertGlobalInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpsertGlobalInvariantViolationResponseBody is the type of the "variations"
// service "upsertGlobal" endpoint HTTP response body for the
// "invariant_violation" error.
type UpsertGlobalInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpsertGlobalUnexpectedResponseBody is the type of the "variations" service
// "upsertGlobal" endpoint HTTP response body for the "unexpected" error.
type UpsertGlobalUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpsertGlobalGatewayErrorResponseBody is the type of the "variations" service
// "upsertGlobal" endpoint HTTP response body for the "gateway_error" error.
type UpsertGlobalGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteGlobalUnauthorizedResponseBody is the type of the "variations" service
// "deleteGlobal" endpoint HTTP response body for the "unauthorized" error.
type DeleteGlobalUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteGlobalForbiddenResponseBody is the type of the "variations" service
// "deleteGlobal" endpoint HTTP response body for the "forbidden" error.
type DeleteGlobalForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteGlobalBadRequestResponseBody is the type of the "variations" service
// "deleteGlobal" endpoint HTTP response body for the "bad_request" error.
type DeleteGlobalBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteGlobalNotFoundResponseBody is the type of the "variations" service
// "deleteGlobal" endpoint HTTP response body for the "not_found" error.
type DeleteGlobalNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteGlobalConflictResponseBody is the type of the "variations" service
// "deleteGlobal" endpoint HTTP response body for the "conflict" error.
type DeleteGlobalConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteGlobalUnsupportedMediaResponseBody is the type of the "variations"
// service "deleteGlobal" endpoint HTTP response body for the
// "unsupported_media" error.
type DeleteGlobalUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteGlobalInvalidResponseBody is the type of the "variations" service
// "deleteGlobal" endpoint HTTP response body for the "invalid" error.
type DeleteGlobalInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteGlobalInvariantViolationResponseBody is the type of the "variations"
// service "deleteGlobal" endpoint HTTP response body for the
// "invariant_violation" error.
type DeleteGlobalInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteGlobalUnexpectedResponseBody is the type of the "variations" service
// "deleteGlobal" endpoint HTTP response body for the "unexpected" error.
type DeleteGlobalUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteGlobalGatewayErrorResponseBody is the type of the "variations" service
// "deleteGlobal" endpoint HTTP response body for the "gateway_error" error.
type DeleteGlobalGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListGlobalUnauthorizedResponseBody is the type of the "variations" service
// "listGlobal" endpoint HTTP response body for the "unauthorized" error.
type ListGlobalUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListGlobalForbiddenResponseBody is the type of the "variations" service
// "listGlobal" endpoint HTTP response body for the "forbidden" error.
type ListGlobalForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListGlobalBadRequestResponseBody is the type of the "variations" service
// "listGlobal" endpoint HTTP response body for the "bad_request" error.
type ListGlobalBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListGlobalNotFoundResponseBody is the type of the "variations" service
// "listGlobal" endpoint HTTP response body for the "not_found" error.
type ListGlobalNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListGlobalConflictResponseBody is the type of the "variations" service
// "listGlobal" endpoint HTTP response body for the "conflict" error.
type ListGlobalConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListGlobalUnsupportedMediaResponseBody is the type of the "variations"
// service "listGlobal" endpoint HTTP response body for the "unsupported_media"
// error.
type ListGlobalUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListGlobalInvalidResponseBody is the type of the "variations" service
// "listGlobal" endpoint HTTP response body for the "invalid" error.
type ListGlobalInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListGlobalInvariantViolationResponseBody is the type of the "variations"
// service "listGlobal" endpoint HTTP response body for the
// "invariant_violation" error.
type ListGlobalInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListGlobalUnexpectedResponseBody is the type of the "variations" service
// "listGlobal" endpoint HTTP response body for the "unexpected" error.
type ListGlobalUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListGlobalGatewayErrorResponseBody is the type of the "variations" service
// "listGlobal" endpoint HTTP response body for the "gateway_error" error.
type ListGlobalGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ToolVariationResponseBody is used to define fields on response body types.
type ToolVariationResponseBody struct {
	// The ID of the tool variation
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the tool variation group
	GroupID string `form:"group_id" json:"group_id" xml:"group_id"`
	// The name of the source tool
	SrcToolName string `form:"src_tool_name" json:"src_tool_name" xml:"src_tool_name"`
	// The confirmation mode for the tool variation
	Confirm *string `form:"confirm,omitempty" json:"confirm,omitempty" xml:"confirm,omitempty"`
	// The confirmation prompt for the tool variation
	ConfirmPrompt *string `form:"confirm_prompt,omitempty" json:"confirm_prompt,omitempty" xml:"confirm_prompt,omitempty"`
	// The name of the tool variation
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The summary of the tool variation
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// The description of the tool variation
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The tags of the tool variation
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// The summarizer of the tool variation
	Summarizer *string `form:"summarizer,omitempty" json:"summarizer,omitempty" xml:"summarizer,omitempty"`
	// The creation date of the tool variation
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the tool variation
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewUpsertGlobalResponseBody builds the HTTP response body from the result of
// the "upsertGlobal" endpoint of the "variations" service.
func NewUpsertGlobalResponseBody(res *variations.UpsertGlobalToolVariationResult) *UpsertGlobalResponseBody {
	body := &UpsertGlobalResponseBody{}
	if res.Variation != nil {
		body.Variation = marshalTypesToolVariationToToolVariationResponseBody(res.Variation)
	}
	return body
}

// NewDeleteGlobalResponseBody builds the HTTP response body from the result of
// the "deleteGlobal" endpoint of the "variations" service.
func NewDeleteGlobalResponseBody(res *variations.DeleteGlobalToolVariationResult) *DeleteGlobalResponseBody {
	body := &DeleteGlobalResponseBody{
		VariationID: res.VariationID,
	}
	return body
}

// NewListGlobalResponseBody builds the HTTP response body from the result of
// the "listGlobal" endpoint of the "variations" service.
func NewListGlobalResponseBody(res *variations.ListVariationsResult) *ListGlobalResponseBody {
	body := &ListGlobalResponseBody{}
	if res.Variations != nil {
		body.Variations = make([]*ToolVariationResponseBody, len(res.Variations))
		for i, val := range res.Variations {
			body.Variations[i] = marshalTypesToolVariationToToolVariationResponseBody(val)
		}
	} else {
		body.Variations = []*ToolVariationResponseBody{}
	}
	return body
}

// NewUpsertGlobalUnauthorizedResponseBody builds the HTTP response body from
// the result of the "upsertGlobal" endpoint of the "variations" service.
func NewUpsertGlobalUnauthorizedResponseBody(res *goa.ServiceError) *UpsertGlobalUnauthorizedResponseBody {
	body := &UpsertGlobalUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpsertGlobalForbiddenResponseBody builds the HTTP response body from the
// result of the "upsertGlobal" endpoint of the "variations" service.
func NewUpsertGlobalForbiddenResponseBody(res *goa.ServiceError) *UpsertGlobalForbiddenResponseBody {
	body := &UpsertGlobalForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpsertGlobalBadRequestResponseBody builds the HTTP response body from the
// result of the "upsertGlobal" endpoint of the "variations" service.
func NewUpsertGlobalBadRequestResponseBody(res *goa.ServiceError) *UpsertGlobalBadRequestResponseBody {
	body := &UpsertGlobalBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpsertGlobalNotFoundResponseBody builds the HTTP response body from the
// result of the "upsertGlobal" endpoint of the "variations" service.
func NewUpsertGlobalNotFoundResponseBody(res *goa.ServiceError) *UpsertGlobalNotFoundResponseBody {
	body := &UpsertGlobalNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpsertGlobalConflictResponseBody builds the HTTP response body from the
// result of the "upsertGlobal" endpoint of the "variations" service.
func NewUpsertGlobalConflictResponseBody(res *goa.ServiceError) *UpsertGlobalConflictResponseBody {
	body := &UpsertGlobalConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpsertGlobalUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "upsertGlobal" endpoint of the "variations" service.
func NewUpsertGlobalUnsupportedMediaResponseBody(res *goa.ServiceError) *UpsertGlobalUnsupportedMediaResponseBody {
	body := &UpsertGlobalUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpsertGlobalInvalidResponseBody builds the HTTP response body from the
// result of the "upsertGlobal" endpoint of the "variations" service.
func NewUpsertGlobalInvalidResponseBody(res *goa.ServiceError) *UpsertGlobalInvalidResponseBody {
	body := &UpsertGlobalInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpsertGlobalInvariantViolationResponseBody builds the HTTP response body
// from the result of the "upsertGlobal" endpoint of the "variations" service.
func NewUpsertGlobalInvariantViolationResponseBody(res *goa.ServiceError) *UpsertGlobalInvariantViolationResponseBody {
	body := &UpsertGlobalInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpsertGlobalUnexpectedResponseBody builds the HTTP response body from the
// result of the "upsertGlobal" endpoint of the "variations" service.
func NewUpsertGlobalUnexpectedResponseBody(res *goa.ServiceError) *UpsertGlobalUnexpectedResponseBody {
	body := &UpsertGlobalUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpsertGlobalGatewayErrorResponseBody builds the HTTP response body from
// the result of the "upsertGlobal" endpoint of the "variations" service.
func NewUpsertGlobalGatewayErrorResponseBody(res *goa.ServiceError) *UpsertGlobalGatewayErrorResponseBody {
	body := &UpsertGlobalGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteGlobalUnauthorizedResponseBody builds the HTTP response body from
// the result of the "deleteGlobal" endpoint of the "variations" service.
func NewDeleteGlobalUnauthorizedResponseBody(res *goa.ServiceError) *DeleteGlobalUnauthorizedResponseBody {
	body := &DeleteGlobalUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteGlobalForbiddenResponseBody builds the HTTP response body from the
// result of the "deleteGlobal" endpoint of the "variations" service.
func NewDeleteGlobalForbiddenResponseBody(res *goa.ServiceError) *DeleteGlobalForbiddenResponseBody {
	body := &DeleteGlobalForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteGlobalBadRequestResponseBody builds the HTTP response body from the
// result of the "deleteGlobal" endpoint of the "variations" service.
func NewDeleteGlobalBadRequestResponseBody(res *goa.ServiceError) *DeleteGlobalBadRequestResponseBody {
	body := &DeleteGlobalBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteGlobalNotFoundResponseBody builds the HTTP response body from the
// result of the "deleteGlobal" endpoint of the "variations" service.
func NewDeleteGlobalNotFoundResponseBody(res *goa.ServiceError) *DeleteGlobalNotFoundResponseBody {
	body := &DeleteGlobalNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteGlobalConflictResponseBody builds the HTTP response body from the
// result of the "deleteGlobal" endpoint of the "variations" service.
func NewDeleteGlobalConflictResponseBody(res *goa.ServiceError) *DeleteGlobalConflictResponseBody {
	body := &DeleteGlobalConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteGlobalUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "deleteGlobal" endpoint of the "variations" service.
func NewDeleteGlobalUnsupportedMediaResponseBody(res *goa.ServiceError) *DeleteGlobalUnsupportedMediaResponseBody {
	body := &DeleteGlobalUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteGlobalInvalidResponseBody builds the HTTP response body from the
// result of the "deleteGlobal" endpoint of the "variations" service.
func NewDeleteGlobalInvalidResponseBody(res *goa.ServiceError) *DeleteGlobalInvalidResponseBody {
	body := &DeleteGlobalInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteGlobalInvariantViolationResponseBody builds the HTTP response body
// from the result of the "deleteGlobal" endpoint of the "variations" service.
func NewDeleteGlobalInvariantViolationResponseBody(res *goa.ServiceError) *DeleteGlobalInvariantViolationResponseBody {
	body := &DeleteGlobalInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteGlobalUnexpectedResponseBody builds the HTTP response body from the
// result of the "deleteGlobal" endpoint of the "variations" service.
func NewDeleteGlobalUnexpectedResponseBody(res *goa.ServiceError) *DeleteGlobalUnexpectedResponseBody {
	body := &DeleteGlobalUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteGlobalGatewayErrorResponseBody builds the HTTP response body from
// the result of the "deleteGlobal" endpoint of the "variations" service.
func NewDeleteGlobalGatewayErrorResponseBody(res *goa.ServiceError) *DeleteGlobalGatewayErrorResponseBody {
	body := &DeleteGlobalGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListGlobalUnauthorizedResponseBody builds the HTTP response body from the
// result of the "listGlobal" endpoint of the "variations" service.
func NewListGlobalUnauthorizedResponseBody(res *goa.ServiceError) *ListGlobalUnauthorizedResponseBody {
	body := &ListGlobalUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListGlobalForbiddenResponseBody builds the HTTP response body from the
// result of the "listGlobal" endpoint of the "variations" service.
func NewListGlobalForbiddenResponseBody(res *goa.ServiceError) *ListGlobalForbiddenResponseBody {
	body := &ListGlobalForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListGlobalBadRequestResponseBody builds the HTTP response body from the
// result of the "listGlobal" endpoint of the "variations" service.
func NewListGlobalBadRequestResponseBody(res *goa.ServiceError) *ListGlobalBadRequestResponseBody {
	body := &ListGlobalBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListGlobalNotFoundResponseBody builds the HTTP response body from the
// result of the "listGlobal" endpoint of the "variations" service.
func NewListGlobalNotFoundResponseBody(res *goa.ServiceError) *ListGlobalNotFoundResponseBody {
	body := &ListGlobalNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListGlobalConflictResponseBody builds the HTTP response body from the
// result of the "listGlobal" endpoint of the "variations" service.
func NewListGlobalConflictResponseBody(res *goa.ServiceError) *ListGlobalConflictResponseBody {
	body := &ListGlobalConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListGlobalUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "listGlobal" endpoint of the "variations" service.
func NewListGlobalUnsupportedMediaResponseBody(res *goa.ServiceError) *ListGlobalUnsupportedMediaResponseBody {
	body := &ListGlobalUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListGlobalInvalidResponseBody builds the HTTP response body from the
// result of the "listGlobal" endpoint of the "variations" service.
func NewListGlobalInvalidResponseBody(res *goa.ServiceError) *ListGlobalInvalidResponseBody {
	body := &ListGlobalInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListGlobalInvariantViolationResponseBody builds the HTTP response body
// from the result of the "listGlobal" endpoint of the "variations" service.
func NewListGlobalInvariantViolationResponseBody(res *goa.ServiceError) *ListGlobalInvariantViolationResponseBody {
	body := &ListGlobalInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListGlobalUnexpectedResponseBody builds the HTTP response body from the
// result of the "listGlobal" endpoint of the "variations" service.
func NewListGlobalUnexpectedResponseBody(res *goa.ServiceError) *ListGlobalUnexpectedResponseBody {
	body := &ListGlobalUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListGlobalGatewayErrorResponseBody builds the HTTP response body from the
// result of the "listGlobal" endpoint of the "variations" service.
func NewListGlobalGatewayErrorResponseBody(res *goa.ServiceError) *ListGlobalGatewayErrorResponseBody {
	body := &ListGlobalGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpsertGlobalPayload builds a variations service upsertGlobal endpoint
// payload.
func NewUpsertGlobalPayload(body *UpsertGlobalRequestBody, sessionToken *string, apikeyToken *string, projectSlugInput *string) *variations.UpsertGlobalPayload {
	v := &variations.UpsertGlobalPayload{
		SrcToolName:   *body.SrcToolName,
		Confirm:       body.Confirm,
		ConfirmPrompt: body.ConfirmPrompt,
		Name:          body.Name,
		Summary:       body.Summary,
		Description:   body.Description,
		Summarizer:    body.Summarizer,
	}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}
	v.SessionToken = sessionToken
	v.ApikeyToken = apikeyToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewDeleteGlobalPayload builds a variations service deleteGlobal endpoint
// payload.
func NewDeleteGlobalPayload(variationID string, sessionToken *string, apikeyToken *string, projectSlugInput *string) *variations.DeleteGlobalPayload {
	v := &variations.DeleteGlobalPayload{}
	v.VariationID = variationID
	v.SessionToken = sessionToken
	v.ApikeyToken = apikeyToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewListGlobalPayload builds a variations service listGlobal endpoint payload.
func NewListGlobalPayload(sessionToken *string, apikeyToken *string, projectSlugInput *string) *variations.ListGlobalPayload {
	v := &variations.ListGlobalPayload{}
	v.SessionToken = sessionToken
	v.ApikeyToken = apikeyToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// ValidateUpsertGlobalRequestBody runs the validations defined on
// UpsertGlobalRequestBody
func ValidateUpsertGlobalRequestBody(body *UpsertGlobalRequestBody) (err error) {
	if body.SrcToolName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("src_tool_name", "body"))
	}
	if body.Confirm != nil {
		if !(*body.Confirm == "always" || *body.Confirm == "never" || *body.Confirm == "session") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.confirm", *body.Confirm, []any{"always", "never", "session"}))
		}
	}
	return
}
