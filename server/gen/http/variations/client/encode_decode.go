// Code generated by goa v3.22.2, DO NOT EDIT.
//
// variations HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	types "github.com/speakeasy-api/gram/server/gen/types"
	variations "github.com/speakeasy-api/gram/server/gen/variations"
	goahttp "goa.design/goa/v3/http"
)

// BuildUpsertGlobalRequest instantiates a HTTP request object with method and
// path set to call the "variations" service "upsertGlobal" endpoint
func (c *Client) BuildUpsertGlobalRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpsertGlobalVariationsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("variations", "upsertGlobal", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpsertGlobalRequest returns an encoder for requests sent to the
// variations upsertGlobal server.
func EncodeUpsertGlobalRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*variations.UpsertGlobalPayload)
		if !ok {
			return goahttp.ErrInvalidType("variations", "upsertGlobal", "*variations.UpsertGlobalPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewUpsertGlobalRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("variations", "upsertGlobal", err)
		}
		return nil
	}
}

// DecodeUpsertGlobalResponse returns a decoder for responses returned by the
// variations upsertGlobal endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpsertGlobalResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeUpsertGlobalResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpsertGlobalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "upsertGlobal", err)
			}
			err = ValidateUpsertGlobalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "upsertGlobal", err)
			}
			res := NewUpsertGlobalToolVariationResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpsertGlobalUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "upsertGlobal", err)
			}
			err = ValidateUpsertGlobalUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "upsertGlobal", err)
			}
			return nil, NewUpsertGlobalUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UpsertGlobalForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "upsertGlobal", err)
			}
			err = ValidateUpsertGlobalForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "upsertGlobal", err)
			}
			return nil, NewUpsertGlobalForbidden(&body)
		case http.StatusBadRequest:
			var (
				body UpsertGlobalBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "upsertGlobal", err)
			}
			err = ValidateUpsertGlobalBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "upsertGlobal", err)
			}
			return nil, NewUpsertGlobalBadRequest(&body)
		case http.StatusNotFound:
			var (
				body UpsertGlobalNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "upsertGlobal", err)
			}
			err = ValidateUpsertGlobalNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "upsertGlobal", err)
			}
			return nil, NewUpsertGlobalNotFound(&body)
		case http.StatusConflict:
			var (
				body UpsertGlobalConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "upsertGlobal", err)
			}
			err = ValidateUpsertGlobalConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "upsertGlobal", err)
			}
			return nil, NewUpsertGlobalConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body UpsertGlobalUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "upsertGlobal", err)
			}
			err = ValidateUpsertGlobalUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "upsertGlobal", err)
			}
			return nil, NewUpsertGlobalUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body UpsertGlobalInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "upsertGlobal", err)
			}
			err = ValidateUpsertGlobalInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "upsertGlobal", err)
			}
			return nil, NewUpsertGlobalInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body UpsertGlobalInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("variations", "upsertGlobal", err)
				}
				err = ValidateUpsertGlobalInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("variations", "upsertGlobal", err)
				}
				return nil, NewUpsertGlobalInvariantViolation(&body)
			case "unexpected":
				var (
					body UpsertGlobalUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("variations", "upsertGlobal", err)
				}
				err = ValidateUpsertGlobalUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("variations", "upsertGlobal", err)
				}
				return nil, NewUpsertGlobalUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("variations", "upsertGlobal", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body UpsertGlobalGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "upsertGlobal", err)
			}
			err = ValidateUpsertGlobalGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "upsertGlobal", err)
			}
			return nil, NewUpsertGlobalGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("variations", "upsertGlobal", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteGlobalRequest instantiates a HTTP request object with method and
// path set to call the "variations" service "deleteGlobal" endpoint
func (c *Client) BuildDeleteGlobalRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteGlobalVariationsPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("variations", "deleteGlobal", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteGlobalRequest returns an encoder for requests sent to the
// variations deleteGlobal server.
func EncodeDeleteGlobalRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*variations.DeleteGlobalPayload)
		if !ok {
			return goahttp.ErrInvalidType("variations", "deleteGlobal", "*variations.DeleteGlobalPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("variation_id", p.VariationID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDeleteGlobalResponse returns a decoder for responses returned by the
// variations deleteGlobal endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteGlobalResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeDeleteGlobalResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteGlobalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "deleteGlobal", err)
			}
			err = ValidateDeleteGlobalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "deleteGlobal", err)
			}
			res := NewDeleteGlobalToolVariationResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body DeleteGlobalUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "deleteGlobal", err)
			}
			err = ValidateDeleteGlobalUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "deleteGlobal", err)
			}
			return nil, NewDeleteGlobalUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteGlobalForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "deleteGlobal", err)
			}
			err = ValidateDeleteGlobalForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "deleteGlobal", err)
			}
			return nil, NewDeleteGlobalForbidden(&body)
		case http.StatusBadRequest:
			var (
				body DeleteGlobalBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "deleteGlobal", err)
			}
			err = ValidateDeleteGlobalBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "deleteGlobal", err)
			}
			return nil, NewDeleteGlobalBadRequest(&body)
		case http.StatusNotFound:
			var (
				body DeleteGlobalNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "deleteGlobal", err)
			}
			err = ValidateDeleteGlobalNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "deleteGlobal", err)
			}
			return nil, NewDeleteGlobalNotFound(&body)
		case http.StatusConflict:
			var (
				body DeleteGlobalConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "deleteGlobal", err)
			}
			err = ValidateDeleteGlobalConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "deleteGlobal", err)
			}
			return nil, NewDeleteGlobalConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body DeleteGlobalUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "deleteGlobal", err)
			}
			err = ValidateDeleteGlobalUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "deleteGlobal", err)
			}
			return nil, NewDeleteGlobalUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body DeleteGlobalInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "deleteGlobal", err)
			}
			err = ValidateDeleteGlobalInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "deleteGlobal", err)
			}
			return nil, NewDeleteGlobalInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body DeleteGlobalInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("variations", "deleteGlobal", err)
				}
				err = ValidateDeleteGlobalInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("variations", "deleteGlobal", err)
				}
				return nil, NewDeleteGlobalInvariantViolation(&body)
			case "unexpected":
				var (
					body DeleteGlobalUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("variations", "deleteGlobal", err)
				}
				err = ValidateDeleteGlobalUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("variations", "deleteGlobal", err)
				}
				return nil, NewDeleteGlobalUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("variations", "deleteGlobal", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body DeleteGlobalGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "deleteGlobal", err)
			}
			err = ValidateDeleteGlobalGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "deleteGlobal", err)
			}
			return nil, NewDeleteGlobalGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("variations", "deleteGlobal", resp.StatusCode, string(body))
		}
	}
}

// BuildListGlobalRequest instantiates a HTTP request object with method and
// path set to call the "variations" service "listGlobal" endpoint
func (c *Client) BuildListGlobalRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListGlobalVariationsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("variations", "listGlobal", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListGlobalRequest returns an encoder for requests sent to the
// variations listGlobal server.
func EncodeListGlobalRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*variations.ListGlobalPayload)
		if !ok {
			return goahttp.ErrInvalidType("variations", "listGlobal", "*variations.ListGlobalPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		return nil
	}
}

// DecodeListGlobalResponse returns a decoder for responses returned by the
// variations listGlobal endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListGlobalResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeListGlobalResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListGlobalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "listGlobal", err)
			}
			err = ValidateListGlobalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "listGlobal", err)
			}
			res := NewListGlobalListVariationsResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListGlobalUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "listGlobal", err)
			}
			err = ValidateListGlobalUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "listGlobal", err)
			}
			return nil, NewListGlobalUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListGlobalForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "listGlobal", err)
			}
			err = ValidateListGlobalForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "listGlobal", err)
			}
			return nil, NewListGlobalForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ListGlobalBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "listGlobal", err)
			}
			err = ValidateListGlobalBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "listGlobal", err)
			}
			return nil, NewListGlobalBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ListGlobalNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "listGlobal", err)
			}
			err = ValidateListGlobalNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "listGlobal", err)
			}
			return nil, NewListGlobalNotFound(&body)
		case http.StatusConflict:
			var (
				body ListGlobalConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "listGlobal", err)
			}
			err = ValidateListGlobalConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "listGlobal", err)
			}
			return nil, NewListGlobalConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ListGlobalUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "listGlobal", err)
			}
			err = ValidateListGlobalUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "listGlobal", err)
			}
			return nil, NewListGlobalUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ListGlobalInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "listGlobal", err)
			}
			err = ValidateListGlobalInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "listGlobal", err)
			}
			return nil, NewListGlobalInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ListGlobalInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("variations", "listGlobal", err)
				}
				err = ValidateListGlobalInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("variations", "listGlobal", err)
				}
				return nil, NewListGlobalInvariantViolation(&body)
			case "unexpected":
				var (
					body ListGlobalUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("variations", "listGlobal", err)
				}
				err = ValidateListGlobalUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("variations", "listGlobal", err)
				}
				return nil, NewListGlobalUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("variations", "listGlobal", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ListGlobalGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("variations", "listGlobal", err)
			}
			err = ValidateListGlobalGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("variations", "listGlobal", err)
			}
			return nil, NewListGlobalGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("variations", "listGlobal", resp.StatusCode, string(body))
		}
	}
}

// unmarshalToolVariationResponseBodyToTypesToolVariation builds a value of
// type *types.ToolVariation from a value of type *ToolVariationResponseBody.
func unmarshalToolVariationResponseBodyToTypesToolVariation(v *ToolVariationResponseBody) *types.ToolVariation {
	res := &types.ToolVariation{
		ID:            *v.ID,
		GroupID:       *v.GroupID,
		SrcToolName:   *v.SrcToolName,
		Confirm:       v.Confirm,
		ConfirmPrompt: v.ConfirmPrompt,
		Name:          v.Name,
		Summary:       v.Summary,
		Description:   v.Description,
		Summarizer:    v.Summarizer,
		CreatedAt:     *v.CreatedAt,
		UpdatedAt:     *v.UpdatedAt,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}

	return res
}
