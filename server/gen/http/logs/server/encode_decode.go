// Code generated by goa v3.22.3, DO NOT EDIT.
//
// logs HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	"context"
	"errors"
	"net/http"
	"strconv"
	"strings"

	logs "github.com/speakeasy-api/gram/server/gen/logs"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListLogsResponse returns an encoder for responses returned by the logs
// listLogs endpoint.
func EncodeListLogsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*logs.ListToolLogResponse)
		enc := encoder(ctx, w)
		body := NewListLogsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListLogsRequest returns a decoder for requests sent to the logs
// listLogs endpoint.
func DecodeListLogsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*logs.ListLogsPayload, error) {
	return func(r *http.Request) (*logs.ListLogsPayload, error) {
		var (
			toolID           *string
			tsStart          *string
			tsEnd            *string
			cursor           *string
			perPage          int
			direction        string
			sort             string
			apikeyToken      *string
			sessionToken     *string
			projectSlugInput *string
			err              error
		)
		qp := r.URL.Query()
		toolIDRaw := qp.Get("tool_id")
		if toolIDRaw != "" {
			toolID = &toolIDRaw
		}
		if toolID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("tool_id", *toolID, goa.FormatUUID))
		}
		tsStartRaw := qp.Get("ts_start")
		if tsStartRaw != "" {
			tsStart = &tsStartRaw
		}
		if tsStart != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("ts_start", *tsStart, goa.FormatDateTime))
		}
		tsEndRaw := qp.Get("ts_end")
		if tsEndRaw != "" {
			tsEnd = &tsEndRaw
		}
		if tsEnd != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("ts_end", *tsEnd, goa.FormatDateTime))
		}
		cursorRaw := qp.Get("cursor")
		if cursorRaw != "" {
			cursor = &cursorRaw
		}
		if cursor != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("cursor", *cursor, goa.FormatUUID))
		}
		{
			perPageRaw := qp.Get("per_page")
			if perPageRaw == "" {
				perPage = 20
			} else {
				v, err2 := strconv.ParseInt(perPageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("per_page", perPageRaw, "integer"))
				}
				perPage = int(v)
			}
		}
		if perPage < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("per_page", perPage, 1, true))
		}
		if perPage > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("per_page", perPage, 100, false))
		}
		directionRaw := qp.Get("direction")
		if directionRaw != "" {
			direction = directionRaw
		} else {
			direction = "next"
		}
		if !(direction == "next" || direction == "prev") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("direction", direction, []any{"next", "prev"}))
		}
		sortRaw := qp.Get("sort")
		if sortRaw != "" {
			sort = sortRaw
		} else {
			sort = "DESC"
		}
		if !(sort == "ASC" || sort == "DESC") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("sort", sort, []any{"ASC", "DESC"}))
		}
		apikeyTokenRaw := r.Header.Get("Gram-Key")
		if apikeyTokenRaw != "" {
			apikeyToken = &apikeyTokenRaw
		}
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugInputRaw := r.Header.Get("Gram-Project")
		if projectSlugInputRaw != "" {
			projectSlugInput = &projectSlugInputRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewListLogsPayload(toolID, tsStart, tsEnd, cursor, perPage, direction, sort, apikeyToken, sessionToken, projectSlugInput)
		if payload.ApikeyToken != nil {
			if strings.Contains(*payload.ApikeyToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ApikeyToken, " ", 2)[1]
				payload.ApikeyToken = &cred
			}
		}
		if payload.ProjectSlugInput != nil {
			if strings.Contains(*payload.ProjectSlugInput, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlugInput, " ", 2)[1]
				payload.ProjectSlugInput = &cred
			}
		}
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListLogsError returns an encoder for errors returned by the listLogs
// logs endpoint.
func EncodeListLogsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListLogsUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListLogsForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListLogsBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListLogsNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "conflict":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListLogsConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "unsupported_media":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListLogsUnsupportedMediaResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnsupportedMediaType)
			return enc.Encode(body)
		case "invalid":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListLogsInvalidResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnprocessableEntity)
			return enc.Encode(body)
		case "invariant_violation":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListLogsInvariantViolationResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "unexpected":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListLogsUnexpectedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "gateway_error":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListLogsGatewayErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalLogsHTTPToolLogToHTTPToolLogResponseBody builds a value of type
// *HTTPToolLogResponseBody from a value of type *logs.HTTPToolLog.
func marshalLogsHTTPToolLogToHTTPToolLogResponseBody(v *logs.HTTPToolLog) *HTTPToolLogResponseBody {
	res := &HTTPToolLogResponseBody{
		ID:                v.ID,
		Ts:                v.Ts,
		OrganizationID:    v.OrganizationID,
		ProjectID:         v.ProjectID,
		DeploymentID:      v.DeploymentID,
		ToolID:            v.ToolID,
		ToolUrn:           v.ToolUrn,
		ToolType:          string(v.ToolType),
		TraceID:           v.TraceID,
		SpanID:            v.SpanID,
		HTTPMethod:        v.HTTPMethod,
		HTTPRoute:         v.HTTPRoute,
		StatusCode:        v.StatusCode,
		DurationMs:        v.DurationMs,
		UserAgent:         v.UserAgent,
		RequestBodyBytes:  v.RequestBodyBytes,
		ResponseBodyBytes: v.ResponseBodyBytes,
	}
	if v.RequestHeaders != nil {
		res.RequestHeaders = make(map[string]string, len(v.RequestHeaders))
		for key, val := range v.RequestHeaders {
			tk := key
			tv := val
			res.RequestHeaders[tk] = tv
		}
	}
	if v.ResponseHeaders != nil {
		res.ResponseHeaders = make(map[string]string, len(v.ResponseHeaders))
		for key, val := range v.ResponseHeaders {
			tk := key
			tv := val
			res.ResponseHeaders[tk] = tv
		}
	}

	return res
}

// marshalLogsPaginationResponseToPaginationResponseResponseBody builds a value
// of type *PaginationResponseResponseBody from a value of type
// *logs.PaginationResponse.
func marshalLogsPaginationResponseToPaginationResponseResponseBody(v *logs.PaginationResponse) *PaginationResponseResponseBody {
	res := &PaginationResponseResponseBody{
		PerPage:        v.PerPage,
		HasNextPage:    v.HasNextPage,
		NextPageCursor: v.NextPageCursor,
	}

	return res
}
