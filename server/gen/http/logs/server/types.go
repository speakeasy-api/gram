// Code generated by goa v3.22.3, DO NOT EDIT.
//
// logs HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	logs "github.com/speakeasy-api/gram/server/gen/logs"
	goa "goa.design/goa/v3/pkg"
)

// ListLogsResponseBody is the type of the "logs" service "listLogs" endpoint
// HTTP response body.
type ListLogsResponseBody struct {
	Logs []*HTTPToolLogResponseBody `form:"logs" json:"logs" xml:"logs"`
}

// ListLogsUnauthorizedResponseBody is the type of the "logs" service
// "listLogs" endpoint HTTP response body for the "unauthorized" error.
type ListLogsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListLogsForbiddenResponseBody is the type of the "logs" service "listLogs"
// endpoint HTTP response body for the "forbidden" error.
type ListLogsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListLogsBadRequestResponseBody is the type of the "logs" service "listLogs"
// endpoint HTTP response body for the "bad_request" error.
type ListLogsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListLogsNotFoundResponseBody is the type of the "logs" service "listLogs"
// endpoint HTTP response body for the "not_found" error.
type ListLogsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListLogsConflictResponseBody is the type of the "logs" service "listLogs"
// endpoint HTTP response body for the "conflict" error.
type ListLogsConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListLogsUnsupportedMediaResponseBody is the type of the "logs" service
// "listLogs" endpoint HTTP response body for the "unsupported_media" error.
type ListLogsUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListLogsInvalidResponseBody is the type of the "logs" service "listLogs"
// endpoint HTTP response body for the "invalid" error.
type ListLogsInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListLogsInvariantViolationResponseBody is the type of the "logs" service
// "listLogs" endpoint HTTP response body for the "invariant_violation" error.
type ListLogsInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListLogsUnexpectedResponseBody is the type of the "logs" service "listLogs"
// endpoint HTTP response body for the "unexpected" error.
type ListLogsUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListLogsGatewayErrorResponseBody is the type of the "logs" service
// "listLogs" endpoint HTTP response body for the "gateway_error" error.
type ListLogsGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// HTTPToolLogResponseBody is used to define fields on response body types.
type HTTPToolLogResponseBody struct {
	// Timestamp of the request
	Ts string `form:"ts" json:"ts" xml:"ts"`
	// Organization UUID
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// Project UUID
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// Deployment UUID
	DeploymentID string `form:"deployment_id" json:"deployment_id" xml:"deployment_id"`
	// Tool UUID
	ToolID string `form:"tool_id" json:"tool_id" xml:"tool_id"`
	// Tool URN
	ToolUrn string `form:"tool_urn" json:"tool_urn" xml:"tool_urn"`
	// Tool type
	ToolType string `form:"tool_type" json:"tool_type" xml:"tool_type"`
	// Trace ID for correlation
	TraceID string `form:"trace_id" json:"trace_id" xml:"trace_id"`
	// Span ID for correlation
	SpanID string `form:"span_id" json:"span_id" xml:"span_id"`
	// HTTP method
	HTTPMethod string `form:"http_method" json:"http_method" xml:"http_method"`
	// HTTP route
	HTTPRoute string `form:"http_route" json:"http_route" xml:"http_route"`
	// HTTP status code
	StatusCode uint32 `form:"status_code" json:"status_code" xml:"status_code"`
	// Duration in milliseconds
	DurationMs float64 `form:"duration_ms" json:"duration_ms" xml:"duration_ms"`
	// User agent
	UserAgent string `form:"user_agent" json:"user_agent" xml:"user_agent"`
	// Client IPv4 address
	ClientIpv4 string `form:"client_ipv4" json:"client_ipv4" xml:"client_ipv4"`
	// Request headers
	RequestHeaders map[string]string `form:"request_headers,omitempty" json:"request_headers,omitempty" xml:"request_headers,omitempty"`
	// Request body
	RequestBody *string `form:"request_body,omitempty" json:"request_body,omitempty" xml:"request_body,omitempty"`
	// Reason for skipping request body
	RequestBodySkip *string `form:"request_body_skip,omitempty" json:"request_body_skip,omitempty" xml:"request_body_skip,omitempty"`
	// Request body size in bytes
	RequestBodyBytes *uint64 `form:"request_body_bytes,omitempty" json:"request_body_bytes,omitempty" xml:"request_body_bytes,omitempty"`
	// Response headers
	ResponseHeaders map[string]string `form:"response_headers,omitempty" json:"response_headers,omitempty" xml:"response_headers,omitempty"`
	// Response body
	ResponseBody *string `form:"response_body,omitempty" json:"response_body,omitempty" xml:"response_body,omitempty"`
	// Reason for skipping response body
	ResponseBodySkip *string `form:"response_body_skip,omitempty" json:"response_body_skip,omitempty" xml:"response_body_skip,omitempty"`
	// Response body size in bytes
	ResponseBodyBytes *uint64 `form:"response_body_bytes,omitempty" json:"response_body_bytes,omitempty" xml:"response_body_bytes,omitempty"`
}

// NewListLogsResponseBody builds the HTTP response body from the result of the
// "listLogs" endpoint of the "logs" service.
func NewListLogsResponseBody(res *logs.ListToolLogResult) *ListLogsResponseBody {
	body := &ListLogsResponseBody{}
	if res.Logs != nil {
		body.Logs = make([]*HTTPToolLogResponseBody, len(res.Logs))
		for i, val := range res.Logs {
			body.Logs[i] = marshalLogsHTTPToolLogToHTTPToolLogResponseBody(val)
		}
	} else {
		body.Logs = []*HTTPToolLogResponseBody{}
	}
	return body
}

// NewListLogsUnauthorizedResponseBody builds the HTTP response body from the
// result of the "listLogs" endpoint of the "logs" service.
func NewListLogsUnauthorizedResponseBody(res *goa.ServiceError) *ListLogsUnauthorizedResponseBody {
	body := &ListLogsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListLogsForbiddenResponseBody builds the HTTP response body from the
// result of the "listLogs" endpoint of the "logs" service.
func NewListLogsForbiddenResponseBody(res *goa.ServiceError) *ListLogsForbiddenResponseBody {
	body := &ListLogsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListLogsBadRequestResponseBody builds the HTTP response body from the
// result of the "listLogs" endpoint of the "logs" service.
func NewListLogsBadRequestResponseBody(res *goa.ServiceError) *ListLogsBadRequestResponseBody {
	body := &ListLogsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListLogsNotFoundResponseBody builds the HTTP response body from the
// result of the "listLogs" endpoint of the "logs" service.
func NewListLogsNotFoundResponseBody(res *goa.ServiceError) *ListLogsNotFoundResponseBody {
	body := &ListLogsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListLogsConflictResponseBody builds the HTTP response body from the
// result of the "listLogs" endpoint of the "logs" service.
func NewListLogsConflictResponseBody(res *goa.ServiceError) *ListLogsConflictResponseBody {
	body := &ListLogsConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListLogsUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "listLogs" endpoint of the "logs" service.
func NewListLogsUnsupportedMediaResponseBody(res *goa.ServiceError) *ListLogsUnsupportedMediaResponseBody {
	body := &ListLogsUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListLogsInvalidResponseBody builds the HTTP response body from the result
// of the "listLogs" endpoint of the "logs" service.
func NewListLogsInvalidResponseBody(res *goa.ServiceError) *ListLogsInvalidResponseBody {
	body := &ListLogsInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListLogsInvariantViolationResponseBody builds the HTTP response body from
// the result of the "listLogs" endpoint of the "logs" service.
func NewListLogsInvariantViolationResponseBody(res *goa.ServiceError) *ListLogsInvariantViolationResponseBody {
	body := &ListLogsInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListLogsUnexpectedResponseBody builds the HTTP response body from the
// result of the "listLogs" endpoint of the "logs" service.
func NewListLogsUnexpectedResponseBody(res *goa.ServiceError) *ListLogsUnexpectedResponseBody {
	body := &ListLogsUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListLogsGatewayErrorResponseBody builds the HTTP response body from the
// result of the "listLogs" endpoint of the "logs" service.
func NewListLogsGatewayErrorResponseBody(res *goa.ServiceError) *ListLogsGatewayErrorResponseBody {
	body := &ListLogsGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListLogsPayload builds a logs service listLogs endpoint payload.
func NewListLogsPayload(projectID string, toolID string, tsStart *string, tsEnd *string, cursor *string, perPage int, direction string, sort string, sessionToken *string, apikeyToken *string, projectSlugInput *string) *logs.ListLogsPayload {
	v := &logs.ListLogsPayload{}
	v.ProjectID = projectID
	v.ToolID = toolID
	v.TsStart = tsStart
	v.TsEnd = tsEnd
	v.Cursor = cursor
	v.PerPage = perPage
	v.Direction = direction
	v.Sort = sort
	v.SessionToken = sessionToken
	v.ApikeyToken = apikeyToken
	v.ProjectSlugInput = projectSlugInput

	return v
}
