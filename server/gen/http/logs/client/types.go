// Code generated by goa v3.22.3, DO NOT EDIT.
//
// logs HTTP client types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	logs "github.com/speakeasy-api/gram/server/gen/logs"
	goa "goa.design/goa/v3/pkg"
)

// ListLogsResponseBody is the type of the "logs" service "listLogs" endpoint
// HTTP response body.
type ListLogsResponseBody struct {
	Logs       []*HTTPToolLogResponseBody      `form:"logs,omitempty" json:"logs,omitempty" xml:"logs,omitempty"`
	Pagination *PaginationResponseResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// ListLogsUnauthorizedResponseBody is the type of the "logs" service
// "listLogs" endpoint HTTP response body for the "unauthorized" error.
type ListLogsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListLogsForbiddenResponseBody is the type of the "logs" service "listLogs"
// endpoint HTTP response body for the "forbidden" error.
type ListLogsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListLogsBadRequestResponseBody is the type of the "logs" service "listLogs"
// endpoint HTTP response body for the "bad_request" error.
type ListLogsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListLogsNotFoundResponseBody is the type of the "logs" service "listLogs"
// endpoint HTTP response body for the "not_found" error.
type ListLogsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListLogsConflictResponseBody is the type of the "logs" service "listLogs"
// endpoint HTTP response body for the "conflict" error.
type ListLogsConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListLogsUnsupportedMediaResponseBody is the type of the "logs" service
// "listLogs" endpoint HTTP response body for the "unsupported_media" error.
type ListLogsUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListLogsInvalidResponseBody is the type of the "logs" service "listLogs"
// endpoint HTTP response body for the "invalid" error.
type ListLogsInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListLogsInvariantViolationResponseBody is the type of the "logs" service
// "listLogs" endpoint HTTP response body for the "invariant_violation" error.
type ListLogsInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListLogsUnexpectedResponseBody is the type of the "logs" service "listLogs"
// endpoint HTTP response body for the "unexpected" error.
type ListLogsUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListLogsGatewayErrorResponseBody is the type of the "logs" service
// "listLogs" endpoint HTTP response body for the "gateway_error" error.
type ListLogsGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// HTTPToolLogResponseBody is used to define fields on response body types.
type HTTPToolLogResponseBody struct {
	// Id of the request
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Timestamp of the request
	Ts *string `form:"ts,omitempty" json:"ts,omitempty" xml:"ts,omitempty"`
	// Organization UUID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Project UUID
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// Deployment UUID
	DeploymentID *string `form:"deployment_id,omitempty" json:"deployment_id,omitempty" xml:"deployment_id,omitempty"`
	// Tool UUID
	ToolID *string `form:"tool_id,omitempty" json:"tool_id,omitempty" xml:"tool_id,omitempty"`
	// Tool URN
	ToolUrn *string `form:"tool_urn,omitempty" json:"tool_urn,omitempty" xml:"tool_urn,omitempty"`
	// Tool type
	ToolType *string `form:"tool_type,omitempty" json:"tool_type,omitempty" xml:"tool_type,omitempty"`
	// Trace ID for correlation
	TraceID *string `form:"trace_id,omitempty" json:"trace_id,omitempty" xml:"trace_id,omitempty"`
	// Span ID for correlation
	SpanID *string `form:"span_id,omitempty" json:"span_id,omitempty" xml:"span_id,omitempty"`
	// HTTP method
	HTTPMethod *string `form:"http_method,omitempty" json:"http_method,omitempty" xml:"http_method,omitempty"`
	// HTTP route
	HTTPRoute *string `form:"http_route,omitempty" json:"http_route,omitempty" xml:"http_route,omitempty"`
	// HTTP status code
	StatusCode *int64 `form:"status_code,omitempty" json:"status_code,omitempty" xml:"status_code,omitempty"`
	// Duration in milliseconds
	DurationMs *float64 `form:"duration_ms,omitempty" json:"duration_ms,omitempty" xml:"duration_ms,omitempty"`
	// User agent
	UserAgent *string `form:"user_agent,omitempty" json:"user_agent,omitempty" xml:"user_agent,omitempty"`
	// Request headers
	RequestHeaders map[string]string `form:"request_headers,omitempty" json:"request_headers,omitempty" xml:"request_headers,omitempty"`
	// Request body size in bytes
	RequestBodyBytes *int64 `form:"request_body_bytes,omitempty" json:"request_body_bytes,omitempty" xml:"request_body_bytes,omitempty"`
	// Response headers
	ResponseHeaders map[string]string `form:"response_headers,omitempty" json:"response_headers,omitempty" xml:"response_headers,omitempty"`
	// Response body size in bytes
	ResponseBodyBytes *int64 `form:"response_body_bytes,omitempty" json:"response_body_bytes,omitempty" xml:"response_body_bytes,omitempty"`
}

// PaginationResponseResponseBody is used to define fields on response body
// types.
type PaginationResponseResponseBody struct {
	// Number of items per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty" xml:"per_page,omitempty"`
	// Whether there is a next page
	HasNextPage *bool `form:"has_next_page,omitempty" json:"has_next_page,omitempty" xml:"has_next_page,omitempty"`
	// Cursor for next page
	NextPageCursor *string `form:"next_page_cursor,omitempty" json:"next_page_cursor,omitempty" xml:"next_page_cursor,omitempty"`
}

// NewListLogsListToolLogResponseOK builds a "logs" service "listLogs" endpoint
// result from a HTTP "OK" response.
func NewListLogsListToolLogResponseOK(body *ListLogsResponseBody) *logs.ListToolLogResponse {
	v := &logs.ListToolLogResponse{}
	v.Logs = make([]*logs.HTTPToolLog, len(body.Logs))
	for i, val := range body.Logs {
		v.Logs[i] = unmarshalHTTPToolLogResponseBodyToLogsHTTPToolLog(val)
	}
	v.Pagination = unmarshalPaginationResponseResponseBodyToLogsPaginationResponse(body.Pagination)

	return v
}

// NewListLogsUnauthorized builds a logs service listLogs endpoint unauthorized
// error.
func NewListLogsUnauthorized(body *ListLogsUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListLogsForbidden builds a logs service listLogs endpoint forbidden error.
func NewListLogsForbidden(body *ListLogsForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListLogsBadRequest builds a logs service listLogs endpoint bad_request
// error.
func NewListLogsBadRequest(body *ListLogsBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListLogsNotFound builds a logs service listLogs endpoint not_found error.
func NewListLogsNotFound(body *ListLogsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListLogsConflict builds a logs service listLogs endpoint conflict error.
func NewListLogsConflict(body *ListLogsConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListLogsUnsupportedMedia builds a logs service listLogs endpoint
// unsupported_media error.
func NewListLogsUnsupportedMedia(body *ListLogsUnsupportedMediaResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListLogsInvalid builds a logs service listLogs endpoint invalid error.
func NewListLogsInvalid(body *ListLogsInvalidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListLogsInvariantViolation builds a logs service listLogs endpoint
// invariant_violation error.
func NewListLogsInvariantViolation(body *ListLogsInvariantViolationResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListLogsUnexpected builds a logs service listLogs endpoint unexpected
// error.
func NewListLogsUnexpected(body *ListLogsUnexpectedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListLogsGatewayError builds a logs service listLogs endpoint
// gateway_error error.
func NewListLogsGatewayError(body *ListLogsGatewayErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateListLogsResponseBody runs the validations defined on
// ListLogsResponseBody
func ValidateListLogsResponseBody(body *ListLogsResponseBody) (err error) {
	if body.Logs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("logs", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	for _, e := range body.Logs {
		if e != nil {
			if err2 := ValidateHTTPToolLogResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Pagination != nil {
		if err2 := ValidatePaginationResponseResponseBody(body.Pagination); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListLogsUnauthorizedResponseBody runs the validations defined on
// listLogs_unauthorized_response_body
func ValidateListLogsUnauthorizedResponseBody(body *ListLogsUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListLogsForbiddenResponseBody runs the validations defined on
// listLogs_forbidden_response_body
func ValidateListLogsForbiddenResponseBody(body *ListLogsForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListLogsBadRequestResponseBody runs the validations defined on
// listLogs_bad_request_response_body
func ValidateListLogsBadRequestResponseBody(body *ListLogsBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListLogsNotFoundResponseBody runs the validations defined on
// listLogs_not_found_response_body
func ValidateListLogsNotFoundResponseBody(body *ListLogsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListLogsConflictResponseBody runs the validations defined on
// listLogs_conflict_response_body
func ValidateListLogsConflictResponseBody(body *ListLogsConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListLogsUnsupportedMediaResponseBody runs the validations defined on
// listLogs_unsupported_media_response_body
func ValidateListLogsUnsupportedMediaResponseBody(body *ListLogsUnsupportedMediaResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListLogsInvalidResponseBody runs the validations defined on
// listLogs_invalid_response_body
func ValidateListLogsInvalidResponseBody(body *ListLogsInvalidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListLogsInvariantViolationResponseBody runs the validations defined
// on listLogs_invariant_violation_response_body
func ValidateListLogsInvariantViolationResponseBody(body *ListLogsInvariantViolationResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListLogsUnexpectedResponseBody runs the validations defined on
// listLogs_unexpected_response_body
func ValidateListLogsUnexpectedResponseBody(body *ListLogsUnexpectedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListLogsGatewayErrorResponseBody runs the validations defined on
// listLogs_gateway_error_response_body
func ValidateListLogsGatewayErrorResponseBody(body *ListLogsGatewayErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateHTTPToolLogResponseBody runs the validations defined on
// HTTPToolLogResponseBody
func ValidateHTTPToolLogResponseBody(body *HTTPToolLogResponseBody) (err error) {
	if body.Ts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ts", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.DeploymentID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deployment_id", "body"))
	}
	if body.ToolID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tool_id", "body"))
	}
	if body.ToolUrn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tool_urn", "body"))
	}
	if body.ToolType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tool_type", "body"))
	}
	if body.TraceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("trace_id", "body"))
	}
	if body.SpanID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("span_id", "body"))
	}
	if body.HTTPMethod == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("http_method", "body"))
	}
	if body.HTTPRoute == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("http_route", "body"))
	}
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status_code", "body"))
	}
	if body.DurationMs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("duration_ms", "body"))
	}
	if body.UserAgent == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_agent", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Ts != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.ts", *body.Ts, goa.FormatDateTime))
	}
	if body.OrganizationID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.organization_id", *body.OrganizationID, goa.FormatUUID))
	}
	if body.ProjectID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_id", *body.ProjectID, goa.FormatUUID))
	}
	if body.DeploymentID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.deployment_id", *body.DeploymentID, goa.FormatUUID))
	}
	if body.ToolID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.tool_id", *body.ToolID, goa.FormatUUID))
	}
	if body.ToolType != nil {
		if !(*body.ToolType == "http" || *body.ToolType == "function" || *body.ToolType == "prompt") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.tool_type", *body.ToolType, []any{"http", "function", "prompt"}))
		}
	}
	return
}

// ValidatePaginationResponseResponseBody runs the validations defined on
// PaginationResponseResponseBody
func ValidatePaginationResponseResponseBody(body *PaginationResponseResponseBody) (err error) {
	if body.NextPageCursor != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.next_page_cursor", *body.NextPageCursor, goa.FormatDateTime))
	}
	return
}
