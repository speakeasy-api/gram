// Code generated by goa v3.22.3, DO NOT EDIT.
//
// logs HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"

	logs "github.com/speakeasy-api/gram/server/gen/logs"
	goahttp "goa.design/goa/v3/http"
)

// BuildListLogsRequest instantiates a HTTP request object with method and path
// set to call the "logs" service "listLogs" endpoint
func (c *Client) BuildListLogsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListLogsLogsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("logs", "listLogs", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListLogsRequest returns an encoder for requests sent to the logs
// listLogs server.
func EncodeListLogsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*logs.ListLogsPayload)
		if !ok {
			return goahttp.ErrInvalidType("logs", "listLogs", "*logs.ListLogsPayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		if p.ToolID != nil {
			values.Add("tool_id", *p.ToolID)
		}
		if p.TsStart != nil {
			values.Add("ts_start", *p.TsStart)
		}
		if p.TsEnd != nil {
			values.Add("ts_end", *p.TsEnd)
		}
		if p.Cursor != nil {
			values.Add("cursor", *p.Cursor)
		}
		values.Add("per_page", fmt.Sprintf("%v", p.PerPage))
		values.Add("direction", p.Direction)
		values.Add("sort", p.Sort)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListLogsResponse returns a decoder for responses returned by the logs
// listLogs endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeListLogsResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeListLogsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListLogsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("logs", "listLogs", err)
			}
			err = ValidateListLogsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("logs", "listLogs", err)
			}
			res := NewListLogsListToolLogResponseOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListLogsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("logs", "listLogs", err)
			}
			err = ValidateListLogsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("logs", "listLogs", err)
			}
			return nil, NewListLogsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListLogsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("logs", "listLogs", err)
			}
			err = ValidateListLogsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("logs", "listLogs", err)
			}
			return nil, NewListLogsForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ListLogsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("logs", "listLogs", err)
			}
			err = ValidateListLogsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("logs", "listLogs", err)
			}
			return nil, NewListLogsBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ListLogsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("logs", "listLogs", err)
			}
			err = ValidateListLogsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("logs", "listLogs", err)
			}
			return nil, NewListLogsNotFound(&body)
		case http.StatusConflict:
			var (
				body ListLogsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("logs", "listLogs", err)
			}
			err = ValidateListLogsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("logs", "listLogs", err)
			}
			return nil, NewListLogsConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ListLogsUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("logs", "listLogs", err)
			}
			err = ValidateListLogsUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("logs", "listLogs", err)
			}
			return nil, NewListLogsUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ListLogsInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("logs", "listLogs", err)
			}
			err = ValidateListLogsInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("logs", "listLogs", err)
			}
			return nil, NewListLogsInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ListLogsInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("logs", "listLogs", err)
				}
				err = ValidateListLogsInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("logs", "listLogs", err)
				}
				return nil, NewListLogsInvariantViolation(&body)
			case "unexpected":
				var (
					body ListLogsUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("logs", "listLogs", err)
				}
				err = ValidateListLogsUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("logs", "listLogs", err)
				}
				return nil, NewListLogsUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("logs", "listLogs", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ListLogsGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("logs", "listLogs", err)
			}
			err = ValidateListLogsGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("logs", "listLogs", err)
			}
			return nil, NewListLogsGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("logs", "listLogs", resp.StatusCode, string(body))
		}
	}
}

// unmarshalHTTPToolLogResponseBodyToLogsHTTPToolLog builds a value of type
// *logs.HTTPToolLog from a value of type *HTTPToolLogResponseBody.
func unmarshalHTTPToolLogResponseBodyToLogsHTTPToolLog(v *HTTPToolLogResponseBody) *logs.HTTPToolLog {
	res := &logs.HTTPToolLog{
		ID:                v.ID,
		Ts:                *v.Ts,
		OrganizationID:    *v.OrganizationID,
		ProjectID:         v.ProjectID,
		DeploymentID:      *v.DeploymentID,
		ToolID:            *v.ToolID,
		ToolUrn:           *v.ToolUrn,
		ToolType:          logs.ToolType(*v.ToolType),
		TraceID:           *v.TraceID,
		SpanID:            *v.SpanID,
		HTTPMethod:        *v.HTTPMethod,
		HTTPRoute:         *v.HTTPRoute,
		StatusCode:        *v.StatusCode,
		DurationMs:        *v.DurationMs,
		UserAgent:         *v.UserAgent,
		RequestBodyBytes:  v.RequestBodyBytes,
		ResponseBodyBytes: v.ResponseBodyBytes,
	}
	if v.RequestHeaders != nil {
		res.RequestHeaders = make(map[string]string, len(v.RequestHeaders))
		for key, val := range v.RequestHeaders {
			tk := key
			tv := val
			res.RequestHeaders[tk] = tv
		}
	}
	if v.ResponseHeaders != nil {
		res.ResponseHeaders = make(map[string]string, len(v.ResponseHeaders))
		for key, val := range v.ResponseHeaders {
			tk := key
			tv := val
			res.ResponseHeaders[tk] = tv
		}
	}

	return res
}

// unmarshalPaginationResponseResponseBodyToLogsPaginationResponse builds a
// value of type *logs.PaginationResponse from a value of type
// *PaginationResponseResponseBody.
func unmarshalPaginationResponseResponseBodyToLogsPaginationResponse(v *PaginationResponseResponseBody) *logs.PaginationResponse {
	res := &logs.PaginationResponse{
		PerPage:        v.PerPage,
		HasNextPage:    v.HasNextPage,
		NextPageCursor: v.NextPageCursor,
	}

	return res
}
