// Code generated by goa v3.21.5, DO NOT EDIT.
//
// auth HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"encoding/json"
	"fmt"

	auth "github.com/speakeasy-api/gram/server/gen/auth"
)

// BuildCallbackPayload builds the payload for the auth callback endpoint from
// CLI flags.
func BuildCallbackPayload(authCallbackBody string, authCallbackIDToken string) (*auth.CallbackPayload, error) {
	var err error
	var body CallbackRequestBody
	{
		err = json.Unmarshal([]byte(authCallbackBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"code\": \"Quos delectus.\"\n   }'")
		}
	}
	var idToken *string
	{
		if authCallbackIDToken != "" {
			idToken = &authCallbackIDToken
		}
	}
	v := &auth.CallbackPayload{
		Code: body.Code,
	}
	v.IDToken = idToken

	return v, nil
}

// BuildSwitchScopesPayload builds the payload for the auth switchScopes
// endpoint from CLI flags.
func BuildSwitchScopesPayload(authSwitchScopesOrganizationID string, authSwitchScopesProjectID string, authSwitchScopesSessionToken string) (*auth.SwitchScopesPayload, error) {
	var organizationID *string
	{
		if authSwitchScopesOrganizationID != "" {
			organizationID = &authSwitchScopesOrganizationID
		}
	}
	var projectID *string
	{
		if authSwitchScopesProjectID != "" {
			projectID = &authSwitchScopesProjectID
		}
	}
	var sessionToken *string
	{
		if authSwitchScopesSessionToken != "" {
			sessionToken = &authSwitchScopesSessionToken
		}
	}
	v := &auth.SwitchScopesPayload{}
	v.OrganizationID = organizationID
	v.ProjectID = projectID
	v.SessionToken = sessionToken

	return v, nil
}

// BuildLogoutPayload builds the payload for the auth logout endpoint from CLI
// flags.
func BuildLogoutPayload(authLogoutSessionToken string) (*auth.LogoutPayload, error) {
	var sessionToken *string
	{
		if authLogoutSessionToken != "" {
			sessionToken = &authLogoutSessionToken
		}
	}
	v := &auth.LogoutPayload{}
	v.SessionToken = sessionToken

	return v, nil
}

// BuildRegisterPayload builds the payload for the auth register endpoint from
// CLI flags.
func BuildRegisterPayload(authRegisterBody string, authRegisterSessionToken string) (*auth.RegisterPayload, error) {
	var err error
	var body RegisterRequestBody
	{
		err = json.Unmarshal([]byte(authRegisterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"org_name\": \"Quis qui cumque dolor et molestiae doloremque.\"\n   }'")
		}
	}
	var sessionToken *string
	{
		if authRegisterSessionToken != "" {
			sessionToken = &authRegisterSessionToken
		}
	}
	v := &auth.RegisterPayload{
		OrgName: body.OrgName,
	}
	v.SessionToken = sessionToken

	return v, nil
}

// BuildInfoPayload builds the payload for the auth info endpoint from CLI
// flags.
func BuildInfoPayload(authInfoSessionToken string) (*auth.InfoPayload, error) {
	var sessionToken *string
	{
		if authInfoSessionToken != "" {
			sessionToken = &authInfoSessionToken
		}
	}
	v := &auth.InfoPayload{}
	v.SessionToken = sessionToken

	return v, nil
}
