// Code generated by goa v3.22.2, DO NOT EDIT.
//
// auth HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	auth "github.com/speakeasy-api/gram/server/gen/auth"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildCallbackRequest instantiates a HTTP request object with method and path
// set to call the "auth" service "callback" endpoint
func (c *Client) BuildCallbackRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CallbackAuthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "callback", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCallbackRequest returns an encoder for requests sent to the auth
// callback server.
func EncodeCallbackRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*auth.CallbackPayload)
		if !ok {
			return goahttp.ErrInvalidType("auth", "callback", "*auth.CallbackPayload", v)
		}
		values := req.URL.Query()
		values.Add("code", p.Code)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeCallbackResponse returns a decoder for responses returned by the auth
// callback endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCallbackResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeCallbackResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusTemporaryRedirect:
			var (
				location     string
				sessionToken string
				err          error
			)
			locationRaw := resp.Header.Get("Location")
			if locationRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("location", "header"))
			}
			location = locationRaw
			sessionTokenRaw := resp.Header.Get("Gram-Session")
			if sessionTokenRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "header"))
			}
			sessionToken = sessionTokenRaw
			var (
				sessionCookie    string
				sessionCookieRaw string

				cookies = resp.Cookies()
			)
			for _, c := range cookies {
				switch c.Name {
				case "gram_session":
					sessionCookieRaw = c.Value
				}
			}
			if sessionCookieRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("session_cookie", "cookie"))
			}
			sessionCookie = sessionCookieRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "callback", err)
			}
			res := NewCallbackResultTemporaryRedirect(location, sessionToken, sessionCookie)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CallbackUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "callback", err)
			}
			err = ValidateCallbackUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "callback", err)
			}
			return nil, NewCallbackUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CallbackForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "callback", err)
			}
			err = ValidateCallbackForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "callback", err)
			}
			return nil, NewCallbackForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CallbackBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "callback", err)
			}
			err = ValidateCallbackBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "callback", err)
			}
			return nil, NewCallbackBadRequest(&body)
		case http.StatusNotFound:
			var (
				body CallbackNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "callback", err)
			}
			err = ValidateCallbackNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "callback", err)
			}
			return nil, NewCallbackNotFound(&body)
		case http.StatusConflict:
			var (
				body CallbackConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "callback", err)
			}
			err = ValidateCallbackConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "callback", err)
			}
			return nil, NewCallbackConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body CallbackUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "callback", err)
			}
			err = ValidateCallbackUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "callback", err)
			}
			return nil, NewCallbackUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body CallbackInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "callback", err)
			}
			err = ValidateCallbackInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "callback", err)
			}
			return nil, NewCallbackInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body CallbackInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("auth", "callback", err)
				}
				err = ValidateCallbackInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("auth", "callback", err)
				}
				return nil, NewCallbackInvariantViolation(&body)
			case "unexpected":
				var (
					body CallbackUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("auth", "callback", err)
				}
				err = ValidateCallbackUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("auth", "callback", err)
				}
				return nil, NewCallbackUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("auth", "callback", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body CallbackGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "callback", err)
			}
			err = ValidateCallbackGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "callback", err)
			}
			return nil, NewCallbackGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "callback", resp.StatusCode, string(body))
		}
	}
}

// BuildLoginRequest instantiates a HTTP request object with method and path
// set to call the "auth" service "login" endpoint
func (c *Client) BuildLoginRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LoginAuthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "login", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeLoginResponse returns a decoder for responses returned by the auth
// login endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeLoginResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeLoginResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusTemporaryRedirect:
			var (
				location string
				err      error
			)
			locationRaw := resp.Header.Get("Location")
			if locationRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("location", "header"))
			}
			location = locationRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "login", err)
			}
			res := NewLoginResultTemporaryRedirect(location)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body LoginUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "login", err)
			}
			err = ValidateLoginUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "login", err)
			}
			return nil, NewLoginUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body LoginForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "login", err)
			}
			err = ValidateLoginForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "login", err)
			}
			return nil, NewLoginForbidden(&body)
		case http.StatusBadRequest:
			var (
				body LoginBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "login", err)
			}
			err = ValidateLoginBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "login", err)
			}
			return nil, NewLoginBadRequest(&body)
		case http.StatusNotFound:
			var (
				body LoginNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "login", err)
			}
			err = ValidateLoginNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "login", err)
			}
			return nil, NewLoginNotFound(&body)
		case http.StatusConflict:
			var (
				body LoginConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "login", err)
			}
			err = ValidateLoginConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "login", err)
			}
			return nil, NewLoginConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body LoginUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "login", err)
			}
			err = ValidateLoginUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "login", err)
			}
			return nil, NewLoginUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body LoginInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "login", err)
			}
			err = ValidateLoginInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "login", err)
			}
			return nil, NewLoginInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body LoginInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("auth", "login", err)
				}
				err = ValidateLoginInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("auth", "login", err)
				}
				return nil, NewLoginInvariantViolation(&body)
			case "unexpected":
				var (
					body LoginUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("auth", "login", err)
				}
				err = ValidateLoginUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("auth", "login", err)
				}
				return nil, NewLoginUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("auth", "login", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body LoginGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "login", err)
			}
			err = ValidateLoginGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "login", err)
			}
			return nil, NewLoginGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "login", resp.StatusCode, string(body))
		}
	}
}

// BuildSwitchScopesRequest instantiates a HTTP request object with method and
// path set to call the "auth" service "switchScopes" endpoint
func (c *Client) BuildSwitchScopesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SwitchScopesAuthPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "switchScopes", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSwitchScopesRequest returns an encoder for requests sent to the auth
// switchScopes server.
func EncodeSwitchScopesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*auth.SwitchScopesPayload)
		if !ok {
			return goahttp.ErrInvalidType("auth", "switchScopes", "*auth.SwitchScopesPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		values := req.URL.Query()
		if p.OrganizationID != nil {
			values.Add("organization_id", *p.OrganizationID)
		}
		if p.ProjectID != nil {
			values.Add("project_id", *p.ProjectID)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeSwitchScopesResponse returns a decoder for responses returned by the
// auth switchScopes endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeSwitchScopesResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeSwitchScopesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				sessionToken string
				err          error
			)
			sessionTokenRaw := resp.Header.Get("Gram-Session")
			if sessionTokenRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "header"))
			}
			sessionToken = sessionTokenRaw
			var (
				sessionCookie    string
				sessionCookieRaw string

				cookies = resp.Cookies()
			)
			for _, c := range cookies {
				switch c.Name {
				case "gram_session":
					sessionCookieRaw = c.Value
				}
			}
			if sessionCookieRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("session_cookie", "cookie"))
			}
			sessionCookie = sessionCookieRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "switchScopes", err)
			}
			res := NewSwitchScopesResultOK(sessionToken, sessionCookie)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body SwitchScopesUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "switchScopes", err)
			}
			err = ValidateSwitchScopesUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "switchScopes", err)
			}
			return nil, NewSwitchScopesUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body SwitchScopesForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "switchScopes", err)
			}
			err = ValidateSwitchScopesForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "switchScopes", err)
			}
			return nil, NewSwitchScopesForbidden(&body)
		case http.StatusBadRequest:
			var (
				body SwitchScopesBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "switchScopes", err)
			}
			err = ValidateSwitchScopesBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "switchScopes", err)
			}
			return nil, NewSwitchScopesBadRequest(&body)
		case http.StatusNotFound:
			var (
				body SwitchScopesNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "switchScopes", err)
			}
			err = ValidateSwitchScopesNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "switchScopes", err)
			}
			return nil, NewSwitchScopesNotFound(&body)
		case http.StatusConflict:
			var (
				body SwitchScopesConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "switchScopes", err)
			}
			err = ValidateSwitchScopesConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "switchScopes", err)
			}
			return nil, NewSwitchScopesConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body SwitchScopesUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "switchScopes", err)
			}
			err = ValidateSwitchScopesUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "switchScopes", err)
			}
			return nil, NewSwitchScopesUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body SwitchScopesInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "switchScopes", err)
			}
			err = ValidateSwitchScopesInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "switchScopes", err)
			}
			return nil, NewSwitchScopesInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body SwitchScopesInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("auth", "switchScopes", err)
				}
				err = ValidateSwitchScopesInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("auth", "switchScopes", err)
				}
				return nil, NewSwitchScopesInvariantViolation(&body)
			case "unexpected":
				var (
					body SwitchScopesUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("auth", "switchScopes", err)
				}
				err = ValidateSwitchScopesUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("auth", "switchScopes", err)
				}
				return nil, NewSwitchScopesUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("auth", "switchScopes", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body SwitchScopesGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "switchScopes", err)
			}
			err = ValidateSwitchScopesGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "switchScopes", err)
			}
			return nil, NewSwitchScopesGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "switchScopes", resp.StatusCode, string(body))
		}
	}
}

// BuildLogoutRequest instantiates a HTTP request object with method and path
// set to call the "auth" service "logout" endpoint
func (c *Client) BuildLogoutRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LogoutAuthPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "logout", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLogoutRequest returns an encoder for requests sent to the auth logout
// server.
func EncodeLogoutRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*auth.LogoutPayload)
		if !ok {
			return goahttp.ErrInvalidType("auth", "logout", "*auth.LogoutPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		return nil
	}
}

// DecodeLogoutResponse returns a decoder for responses returned by the auth
// logout endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeLogoutResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeLogoutResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				sessionCookie    string
				sessionCookieRaw string

				cookies = resp.Cookies()
				err     error
			)
			for _, c := range cookies {
				switch c.Name {
				case "gram_session":
					sessionCookieRaw = c.Value
				}
			}
			if sessionCookieRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("session_cookie", "cookie"))
			}
			sessionCookie = sessionCookieRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "logout", err)
			}
			res := NewLogoutResultOK(sessionCookie)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body LogoutUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "logout", err)
			}
			err = ValidateLogoutUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "logout", err)
			}
			return nil, NewLogoutUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body LogoutForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "logout", err)
			}
			err = ValidateLogoutForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "logout", err)
			}
			return nil, NewLogoutForbidden(&body)
		case http.StatusBadRequest:
			var (
				body LogoutBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "logout", err)
			}
			err = ValidateLogoutBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "logout", err)
			}
			return nil, NewLogoutBadRequest(&body)
		case http.StatusNotFound:
			var (
				body LogoutNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "logout", err)
			}
			err = ValidateLogoutNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "logout", err)
			}
			return nil, NewLogoutNotFound(&body)
		case http.StatusConflict:
			var (
				body LogoutConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "logout", err)
			}
			err = ValidateLogoutConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "logout", err)
			}
			return nil, NewLogoutConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body LogoutUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "logout", err)
			}
			err = ValidateLogoutUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "logout", err)
			}
			return nil, NewLogoutUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body LogoutInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "logout", err)
			}
			err = ValidateLogoutInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "logout", err)
			}
			return nil, NewLogoutInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body LogoutInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("auth", "logout", err)
				}
				err = ValidateLogoutInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("auth", "logout", err)
				}
				return nil, NewLogoutInvariantViolation(&body)
			case "unexpected":
				var (
					body LogoutUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("auth", "logout", err)
				}
				err = ValidateLogoutUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("auth", "logout", err)
				}
				return nil, NewLogoutUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("auth", "logout", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body LogoutGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "logout", err)
			}
			err = ValidateLogoutGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "logout", err)
			}
			return nil, NewLogoutGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "logout", resp.StatusCode, string(body))
		}
	}
}

// BuildRegisterRequest instantiates a HTTP request object with method and path
// set to call the "auth" service "register" endpoint
func (c *Client) BuildRegisterRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RegisterAuthPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "register", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRegisterRequest returns an encoder for requests sent to the auth
// register server.
func EncodeRegisterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*auth.RegisterPayload)
		if !ok {
			return goahttp.ErrInvalidType("auth", "register", "*auth.RegisterPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		body := NewRegisterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("auth", "register", err)
		}
		return nil
	}
}

// DecodeRegisterResponse returns a decoder for responses returned by the auth
// register endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeRegisterResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeRegisterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body RegisterUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "register", err)
			}
			err = ValidateRegisterUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "register", err)
			}
			return nil, NewRegisterUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body RegisterForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "register", err)
			}
			err = ValidateRegisterForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "register", err)
			}
			return nil, NewRegisterForbidden(&body)
		case http.StatusBadRequest:
			var (
				body RegisterBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "register", err)
			}
			err = ValidateRegisterBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "register", err)
			}
			return nil, NewRegisterBadRequest(&body)
		case http.StatusNotFound:
			var (
				body RegisterNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "register", err)
			}
			err = ValidateRegisterNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "register", err)
			}
			return nil, NewRegisterNotFound(&body)
		case http.StatusConflict:
			var (
				body RegisterConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "register", err)
			}
			err = ValidateRegisterConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "register", err)
			}
			return nil, NewRegisterConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body RegisterUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "register", err)
			}
			err = ValidateRegisterUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "register", err)
			}
			return nil, NewRegisterUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body RegisterInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "register", err)
			}
			err = ValidateRegisterInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "register", err)
			}
			return nil, NewRegisterInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body RegisterInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("auth", "register", err)
				}
				err = ValidateRegisterInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("auth", "register", err)
				}
				return nil, NewRegisterInvariantViolation(&body)
			case "unexpected":
				var (
					body RegisterUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("auth", "register", err)
				}
				err = ValidateRegisterUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("auth", "register", err)
				}
				return nil, NewRegisterUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("auth", "register", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body RegisterGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "register", err)
			}
			err = ValidateRegisterGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "register", err)
			}
			return nil, NewRegisterGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "register", resp.StatusCode, string(body))
		}
	}
}

// BuildInfoRequest instantiates a HTTP request object with method and path set
// to call the "auth" service "info" endpoint
func (c *Client) BuildInfoRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: InfoAuthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "info", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeInfoRequest returns an encoder for requests sent to the auth info
// server.
func EncodeInfoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*auth.InfoPayload)
		if !ok {
			return goahttp.ErrInvalidType("auth", "info", "*auth.InfoPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		return nil
	}
}

// DecodeInfoResponse returns a decoder for responses returned by the auth info
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeInfoResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeInfoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body InfoResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "info", err)
			}
			err = ValidateInfoResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "info", err)
			}
			var (
				sessionToken string
			)
			sessionTokenRaw := resp.Header.Get("Gram-Session")
			if sessionTokenRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "header"))
			}
			sessionToken = sessionTokenRaw
			var (
				sessionCookie    string
				sessionCookieRaw string

				cookies = resp.Cookies()
			)
			for _, c := range cookies {
				switch c.Name {
				case "gram_session":
					sessionCookieRaw = c.Value
				}
			}
			if sessionCookieRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("session_cookie", "cookie"))
			}
			sessionCookie = sessionCookieRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "info", err)
			}
			res := NewInfoResultOK(&body, sessionToken, sessionCookie)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body InfoUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "info", err)
			}
			err = ValidateInfoUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "info", err)
			}
			return nil, NewInfoUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body InfoForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "info", err)
			}
			err = ValidateInfoForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "info", err)
			}
			return nil, NewInfoForbidden(&body)
		case http.StatusBadRequest:
			var (
				body InfoBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "info", err)
			}
			err = ValidateInfoBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "info", err)
			}
			return nil, NewInfoBadRequest(&body)
		case http.StatusNotFound:
			var (
				body InfoNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "info", err)
			}
			err = ValidateInfoNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "info", err)
			}
			return nil, NewInfoNotFound(&body)
		case http.StatusConflict:
			var (
				body InfoConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "info", err)
			}
			err = ValidateInfoConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "info", err)
			}
			return nil, NewInfoConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body InfoUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "info", err)
			}
			err = ValidateInfoUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "info", err)
			}
			return nil, NewInfoUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body InfoInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "info", err)
			}
			err = ValidateInfoInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "info", err)
			}
			return nil, NewInfoInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body InfoInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("auth", "info", err)
				}
				err = ValidateInfoInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("auth", "info", err)
				}
				return nil, NewInfoInvariantViolation(&body)
			case "unexpected":
				var (
					body InfoUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("auth", "info", err)
				}
				err = ValidateInfoUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("auth", "info", err)
				}
				return nil, NewInfoUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("auth", "info", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body InfoGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "info", err)
			}
			err = ValidateInfoGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "info", err)
			}
			return nil, NewInfoGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "info", resp.StatusCode, string(body))
		}
	}
}

// unmarshalOrganizationEntryResponseBodyToAuthOrganizationEntry builds a value
// of type *auth.OrganizationEntry from a value of type
// *OrganizationEntryResponseBody.
func unmarshalOrganizationEntryResponseBodyToAuthOrganizationEntry(v *OrganizationEntryResponseBody) *auth.OrganizationEntry {
	res := &auth.OrganizationEntry{
		ID:              *v.ID,
		Name:            *v.Name,
		Slug:            *v.Slug,
		SsoConnectionID: v.SsoConnectionID,
	}
	res.Projects = make([]*auth.ProjectEntry, len(v.Projects))
	for i, val := range v.Projects {
		res.Projects[i] = unmarshalProjectEntryResponseBodyToAuthProjectEntry(val)
	}
	if v.UserWorkspaceSlugs != nil {
		res.UserWorkspaceSlugs = make([]string, len(v.UserWorkspaceSlugs))
		for i, val := range v.UserWorkspaceSlugs {
			res.UserWorkspaceSlugs[i] = val
		}
	}

	return res
}

// unmarshalProjectEntryResponseBodyToAuthProjectEntry builds a value of type
// *auth.ProjectEntry from a value of type *ProjectEntryResponseBody.
func unmarshalProjectEntryResponseBodyToAuthProjectEntry(v *ProjectEntryResponseBody) *auth.ProjectEntry {
	res := &auth.ProjectEntry{
		ID:   *v.ID,
		Name: *v.Name,
		Slug: types.Slug(*v.Slug),
	}

	return res
}
