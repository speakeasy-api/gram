// Code generated by goa v3.22.2, DO NOT EDIT.
//
// domains HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	domains "github.com/speakeasy-api/gram/server/gen/domains"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetDomainRequest instantiates a HTTP request object with method and
// path set to call the "domains" service "getDomain" endpoint
func (c *Client) BuildGetDomainRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetDomainDomainsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("domains", "getDomain", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetDomainRequest returns an encoder for requests sent to the domains
// getDomain server.
func EncodeGetDomainRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*domains.GetDomainPayload)
		if !ok {
			return goahttp.ErrInvalidType("domains", "getDomain", "*domains.GetDomainPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		return nil
	}
}

// DecodeGetDomainResponse returns a decoder for responses returned by the
// domains getDomain endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetDomainResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeGetDomainResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetDomainResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "getDomain", err)
			}
			err = ValidateGetDomainResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "getDomain", err)
			}
			res := NewGetDomainCustomDomainOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetDomainUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "getDomain", err)
			}
			err = ValidateGetDomainUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "getDomain", err)
			}
			return nil, NewGetDomainUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetDomainForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "getDomain", err)
			}
			err = ValidateGetDomainForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "getDomain", err)
			}
			return nil, NewGetDomainForbidden(&body)
		case http.StatusBadRequest:
			var (
				body GetDomainBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "getDomain", err)
			}
			err = ValidateGetDomainBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "getDomain", err)
			}
			return nil, NewGetDomainBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetDomainNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "getDomain", err)
			}
			err = ValidateGetDomainNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "getDomain", err)
			}
			return nil, NewGetDomainNotFound(&body)
		case http.StatusConflict:
			var (
				body GetDomainConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "getDomain", err)
			}
			err = ValidateGetDomainConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "getDomain", err)
			}
			return nil, NewGetDomainConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body GetDomainUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "getDomain", err)
			}
			err = ValidateGetDomainUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "getDomain", err)
			}
			return nil, NewGetDomainUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body GetDomainInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "getDomain", err)
			}
			err = ValidateGetDomainInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "getDomain", err)
			}
			return nil, NewGetDomainInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body GetDomainInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("domains", "getDomain", err)
				}
				err = ValidateGetDomainInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("domains", "getDomain", err)
				}
				return nil, NewGetDomainInvariantViolation(&body)
			case "unexpected":
				var (
					body GetDomainUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("domains", "getDomain", err)
				}
				err = ValidateGetDomainUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("domains", "getDomain", err)
				}
				return nil, NewGetDomainUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("domains", "getDomain", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body GetDomainGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "getDomain", err)
			}
			err = ValidateGetDomainGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "getDomain", err)
			}
			return nil, NewGetDomainGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("domains", "getDomain", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateDomainRequest instantiates a HTTP request object with method and
// path set to call the "domains" service "createDomain" endpoint
func (c *Client) BuildCreateDomainRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateDomainDomainsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("domains", "createDomain", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateDomainRequest returns an encoder for requests sent to the
// domains createDomain server.
func EncodeCreateDomainRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*domains.CreateDomainPayload)
		if !ok {
			return goahttp.ErrInvalidType("domains", "createDomain", "*domains.CreateDomainPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewCreateDomainRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("domains", "createDomain", err)
		}
		return nil
	}
}

// DecodeCreateDomainResponse returns a decoder for responses returned by the
// domains createDomain endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateDomainResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeCreateDomainResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body CreateDomainUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "createDomain", err)
			}
			err = ValidateCreateDomainUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "createDomain", err)
			}
			return nil, NewCreateDomainUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CreateDomainForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "createDomain", err)
			}
			err = ValidateCreateDomainForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "createDomain", err)
			}
			return nil, NewCreateDomainForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CreateDomainBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "createDomain", err)
			}
			err = ValidateCreateDomainBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "createDomain", err)
			}
			return nil, NewCreateDomainBadRequest(&body)
		case http.StatusNotFound:
			var (
				body CreateDomainNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "createDomain", err)
			}
			err = ValidateCreateDomainNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "createDomain", err)
			}
			return nil, NewCreateDomainNotFound(&body)
		case http.StatusConflict:
			var (
				body CreateDomainConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "createDomain", err)
			}
			err = ValidateCreateDomainConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "createDomain", err)
			}
			return nil, NewCreateDomainConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body CreateDomainUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "createDomain", err)
			}
			err = ValidateCreateDomainUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "createDomain", err)
			}
			return nil, NewCreateDomainUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body CreateDomainInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "createDomain", err)
			}
			err = ValidateCreateDomainInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "createDomain", err)
			}
			return nil, NewCreateDomainInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body CreateDomainInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("domains", "createDomain", err)
				}
				err = ValidateCreateDomainInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("domains", "createDomain", err)
				}
				return nil, NewCreateDomainInvariantViolation(&body)
			case "unexpected":
				var (
					body CreateDomainUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("domains", "createDomain", err)
				}
				err = ValidateCreateDomainUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("domains", "createDomain", err)
				}
				return nil, NewCreateDomainUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("domains", "createDomain", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body CreateDomainGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "createDomain", err)
			}
			err = ValidateCreateDomainGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "createDomain", err)
			}
			return nil, NewCreateDomainGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("domains", "createDomain", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteDomainRequest instantiates a HTTP request object with method and
// path set to call the "domains" service "deleteDomain" endpoint
func (c *Client) BuildDeleteDomainRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteDomainDomainsPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("domains", "deleteDomain", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteDomainRequest returns an encoder for requests sent to the
// domains deleteDomain server.
func EncodeDeleteDomainRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*domains.DeleteDomainPayload)
		if !ok {
			return goahttp.ErrInvalidType("domains", "deleteDomain", "*domains.DeleteDomainPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		return nil
	}
}

// DecodeDeleteDomainResponse returns a decoder for responses returned by the
// domains deleteDomain endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteDomainResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeDeleteDomainResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body DeleteDomainUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "deleteDomain", err)
			}
			err = ValidateDeleteDomainUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "deleteDomain", err)
			}
			return nil, NewDeleteDomainUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteDomainForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "deleteDomain", err)
			}
			err = ValidateDeleteDomainForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "deleteDomain", err)
			}
			return nil, NewDeleteDomainForbidden(&body)
		case http.StatusBadRequest:
			var (
				body DeleteDomainBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "deleteDomain", err)
			}
			err = ValidateDeleteDomainBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "deleteDomain", err)
			}
			return nil, NewDeleteDomainBadRequest(&body)
		case http.StatusNotFound:
			var (
				body DeleteDomainNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "deleteDomain", err)
			}
			err = ValidateDeleteDomainNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "deleteDomain", err)
			}
			return nil, NewDeleteDomainNotFound(&body)
		case http.StatusConflict:
			var (
				body DeleteDomainConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "deleteDomain", err)
			}
			err = ValidateDeleteDomainConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "deleteDomain", err)
			}
			return nil, NewDeleteDomainConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body DeleteDomainUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "deleteDomain", err)
			}
			err = ValidateDeleteDomainUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "deleteDomain", err)
			}
			return nil, NewDeleteDomainUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body DeleteDomainInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "deleteDomain", err)
			}
			err = ValidateDeleteDomainInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "deleteDomain", err)
			}
			return nil, NewDeleteDomainInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body DeleteDomainInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("domains", "deleteDomain", err)
				}
				err = ValidateDeleteDomainInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("domains", "deleteDomain", err)
				}
				return nil, NewDeleteDomainInvariantViolation(&body)
			case "unexpected":
				var (
					body DeleteDomainUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("domains", "deleteDomain", err)
				}
				err = ValidateDeleteDomainUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("domains", "deleteDomain", err)
				}
				return nil, NewDeleteDomainUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("domains", "deleteDomain", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body DeleteDomainGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("domains", "deleteDomain", err)
			}
			err = ValidateDeleteDomainGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("domains", "deleteDomain", err)
			}
			return nil, NewDeleteDomainGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("domains", "deleteDomain", resp.StatusCode, string(body))
		}
	}
}
