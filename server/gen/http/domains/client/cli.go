// Code generated by goa v3.22.2, DO NOT EDIT.
//
// domains HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"encoding/json"
	"fmt"

	domains "github.com/speakeasy-api/gram/server/gen/domains"
)

// BuildGetDomainPayload builds the payload for the domains getDomain endpoint
// from CLI flags.
func BuildGetDomainPayload(domainsGetDomainSessionToken string, domainsGetDomainProjectSlugInput string) (*domains.GetDomainPayload, error) {
	var sessionToken *string
	{
		if domainsGetDomainSessionToken != "" {
			sessionToken = &domainsGetDomainSessionToken
		}
	}
	var projectSlugInput *string
	{
		if domainsGetDomainProjectSlugInput != "" {
			projectSlugInput = &domainsGetDomainProjectSlugInput
		}
	}
	v := &domains.GetDomainPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildCreateDomainPayload builds the payload for the domains createDomain
// endpoint from CLI flags.
func BuildCreateDomainPayload(domainsCreateDomainBody string, domainsCreateDomainSessionToken string, domainsCreateDomainProjectSlugInput string) (*domains.CreateDomainPayload, error) {
	var err error
	var body CreateDomainRequestBody
	{
		err = json.Unmarshal([]byte(domainsCreateDomainBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"domain\": \"Sint inventore reprehenderit ea eos.\"\n   }'")
		}
	}
	var sessionToken *string
	{
		if domainsCreateDomainSessionToken != "" {
			sessionToken = &domainsCreateDomainSessionToken
		}
	}
	var projectSlugInput *string
	{
		if domainsCreateDomainProjectSlugInput != "" {
			projectSlugInput = &domainsCreateDomainProjectSlugInput
		}
	}
	v := &domains.CreateDomainPayload{
		Domain: body.Domain,
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildDeleteDomainPayload builds the payload for the domains deleteDomain
// endpoint from CLI flags.
func BuildDeleteDomainPayload(domainsDeleteDomainSessionToken string, domainsDeleteDomainProjectSlugInput string) (*domains.DeleteDomainPayload, error) {
	var sessionToken *string
	{
		if domainsDeleteDomainSessionToken != "" {
			sessionToken = &domainsDeleteDomainSessionToken
		}
	}
	var projectSlugInput *string
	{
		if domainsDeleteDomainProjectSlugInput != "" {
			projectSlugInput = &domainsDeleteDomainProjectSlugInput
		}
	}
	v := &domains.DeleteDomainPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}
