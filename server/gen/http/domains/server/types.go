// Code generated by goa v3.22.2, DO NOT EDIT.
//
// domains HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	domains "github.com/speakeasy-api/gram/server/gen/domains"
	goa "goa.design/goa/v3/pkg"
)

// CreateDomainRequestBody is the type of the "domains" service "createDomain"
// endpoint HTTP request body.
type CreateDomainRequestBody struct {
	// The custom domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
}

// GetDomainResponseBody is the type of the "domains" service "getDomain"
// endpoint HTTP response body.
type GetDomainResponseBody struct {
	// The ID of the custom domain
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the organization this domain belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The custom domain name
	Domain string `form:"domain" json:"domain" xml:"domain"`
	// Whether the domain is verified
	Verified bool `form:"verified" json:"verified" xml:"verified"`
	// Whether the domain is activated in ingress
	Activated bool `form:"activated" json:"activated" xml:"activated"`
	// When the custom domain was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the custom domain was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
	// The custom domain is actively being registered
	IsUpdating bool `form:"is_updating" json:"is_updating" xml:"is_updating"`
}

// GetDomainUnauthorizedResponseBody is the type of the "domains" service
// "getDomain" endpoint HTTP response body for the "unauthorized" error.
type GetDomainUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDomainForbiddenResponseBody is the type of the "domains" service
// "getDomain" endpoint HTTP response body for the "forbidden" error.
type GetDomainForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDomainBadRequestResponseBody is the type of the "domains" service
// "getDomain" endpoint HTTP response body for the "bad_request" error.
type GetDomainBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDomainNotFoundResponseBody is the type of the "domains" service
// "getDomain" endpoint HTTP response body for the "not_found" error.
type GetDomainNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDomainConflictResponseBody is the type of the "domains" service
// "getDomain" endpoint HTTP response body for the "conflict" error.
type GetDomainConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDomainUnsupportedMediaResponseBody is the type of the "domains" service
// "getDomain" endpoint HTTP response body for the "unsupported_media" error.
type GetDomainUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDomainInvalidResponseBody is the type of the "domains" service
// "getDomain" endpoint HTTP response body for the "invalid" error.
type GetDomainInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDomainInvariantViolationResponseBody is the type of the "domains" service
// "getDomain" endpoint HTTP response body for the "invariant_violation" error.
type GetDomainInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDomainUnexpectedResponseBody is the type of the "domains" service
// "getDomain" endpoint HTTP response body for the "unexpected" error.
type GetDomainUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDomainGatewayErrorResponseBody is the type of the "domains" service
// "getDomain" endpoint HTTP response body for the "gateway_error" error.
type GetDomainGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDomainUnauthorizedResponseBody is the type of the "domains" service
// "createDomain" endpoint HTTP response body for the "unauthorized" error.
type CreateDomainUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDomainForbiddenResponseBody is the type of the "domains" service
// "createDomain" endpoint HTTP response body for the "forbidden" error.
type CreateDomainForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDomainBadRequestResponseBody is the type of the "domains" service
// "createDomain" endpoint HTTP response body for the "bad_request" error.
type CreateDomainBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDomainNotFoundResponseBody is the type of the "domains" service
// "createDomain" endpoint HTTP response body for the "not_found" error.
type CreateDomainNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDomainConflictResponseBody is the type of the "domains" service
// "createDomain" endpoint HTTP response body for the "conflict" error.
type CreateDomainConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDomainUnsupportedMediaResponseBody is the type of the "domains"
// service "createDomain" endpoint HTTP response body for the
// "unsupported_media" error.
type CreateDomainUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDomainInvalidResponseBody is the type of the "domains" service
// "createDomain" endpoint HTTP response body for the "invalid" error.
type CreateDomainInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDomainInvariantViolationResponseBody is the type of the "domains"
// service "createDomain" endpoint HTTP response body for the
// "invariant_violation" error.
type CreateDomainInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDomainUnexpectedResponseBody is the type of the "domains" service
// "createDomain" endpoint HTTP response body for the "unexpected" error.
type CreateDomainUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDomainGatewayErrorResponseBody is the type of the "domains" service
// "createDomain" endpoint HTTP response body for the "gateway_error" error.
type CreateDomainGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteDomainUnauthorizedResponseBody is the type of the "domains" service
// "deleteDomain" endpoint HTTP response body for the "unauthorized" error.
type DeleteDomainUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteDomainForbiddenResponseBody is the type of the "domains" service
// "deleteDomain" endpoint HTTP response body for the "forbidden" error.
type DeleteDomainForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteDomainBadRequestResponseBody is the type of the "domains" service
// "deleteDomain" endpoint HTTP response body for the "bad_request" error.
type DeleteDomainBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteDomainNotFoundResponseBody is the type of the "domains" service
// "deleteDomain" endpoint HTTP response body for the "not_found" error.
type DeleteDomainNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteDomainConflictResponseBody is the type of the "domains" service
// "deleteDomain" endpoint HTTP response body for the "conflict" error.
type DeleteDomainConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteDomainUnsupportedMediaResponseBody is the type of the "domains"
// service "deleteDomain" endpoint HTTP response body for the
// "unsupported_media" error.
type DeleteDomainUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteDomainInvalidResponseBody is the type of the "domains" service
// "deleteDomain" endpoint HTTP response body for the "invalid" error.
type DeleteDomainInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteDomainInvariantViolationResponseBody is the type of the "domains"
// service "deleteDomain" endpoint HTTP response body for the
// "invariant_violation" error.
type DeleteDomainInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteDomainUnexpectedResponseBody is the type of the "domains" service
// "deleteDomain" endpoint HTTP response body for the "unexpected" error.
type DeleteDomainUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteDomainGatewayErrorResponseBody is the type of the "domains" service
// "deleteDomain" endpoint HTTP response body for the "gateway_error" error.
type DeleteDomainGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewGetDomainResponseBody builds the HTTP response body from the result of
// the "getDomain" endpoint of the "domains" service.
func NewGetDomainResponseBody(res *domains.CustomDomain) *GetDomainResponseBody {
	body := &GetDomainResponseBody{
		ID:             res.ID,
		OrganizationID: res.OrganizationID,
		Domain:         res.Domain,
		Verified:       res.Verified,
		Activated:      res.Activated,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
		IsUpdating:     res.IsUpdating,
	}
	return body
}

// NewGetDomainUnauthorizedResponseBody builds the HTTP response body from the
// result of the "getDomain" endpoint of the "domains" service.
func NewGetDomainUnauthorizedResponseBody(res *goa.ServiceError) *GetDomainUnauthorizedResponseBody {
	body := &GetDomainUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDomainForbiddenResponseBody builds the HTTP response body from the
// result of the "getDomain" endpoint of the "domains" service.
func NewGetDomainForbiddenResponseBody(res *goa.ServiceError) *GetDomainForbiddenResponseBody {
	body := &GetDomainForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDomainBadRequestResponseBody builds the HTTP response body from the
// result of the "getDomain" endpoint of the "domains" service.
func NewGetDomainBadRequestResponseBody(res *goa.ServiceError) *GetDomainBadRequestResponseBody {
	body := &GetDomainBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDomainNotFoundResponseBody builds the HTTP response body from the
// result of the "getDomain" endpoint of the "domains" service.
func NewGetDomainNotFoundResponseBody(res *goa.ServiceError) *GetDomainNotFoundResponseBody {
	body := &GetDomainNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDomainConflictResponseBody builds the HTTP response body from the
// result of the "getDomain" endpoint of the "domains" service.
func NewGetDomainConflictResponseBody(res *goa.ServiceError) *GetDomainConflictResponseBody {
	body := &GetDomainConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDomainUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "getDomain" endpoint of the "domains" service.
func NewGetDomainUnsupportedMediaResponseBody(res *goa.ServiceError) *GetDomainUnsupportedMediaResponseBody {
	body := &GetDomainUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDomainInvalidResponseBody builds the HTTP response body from the
// result of the "getDomain" endpoint of the "domains" service.
func NewGetDomainInvalidResponseBody(res *goa.ServiceError) *GetDomainInvalidResponseBody {
	body := &GetDomainInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDomainInvariantViolationResponseBody builds the HTTP response body
// from the result of the "getDomain" endpoint of the "domains" service.
func NewGetDomainInvariantViolationResponseBody(res *goa.ServiceError) *GetDomainInvariantViolationResponseBody {
	body := &GetDomainInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDomainUnexpectedResponseBody builds the HTTP response body from the
// result of the "getDomain" endpoint of the "domains" service.
func NewGetDomainUnexpectedResponseBody(res *goa.ServiceError) *GetDomainUnexpectedResponseBody {
	body := &GetDomainUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDomainGatewayErrorResponseBody builds the HTTP response body from the
// result of the "getDomain" endpoint of the "domains" service.
func NewGetDomainGatewayErrorResponseBody(res *goa.ServiceError) *GetDomainGatewayErrorResponseBody {
	body := &GetDomainGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDomainUnauthorizedResponseBody builds the HTTP response body from
// the result of the "createDomain" endpoint of the "domains" service.
func NewCreateDomainUnauthorizedResponseBody(res *goa.ServiceError) *CreateDomainUnauthorizedResponseBody {
	body := &CreateDomainUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDomainForbiddenResponseBody builds the HTTP response body from the
// result of the "createDomain" endpoint of the "domains" service.
func NewCreateDomainForbiddenResponseBody(res *goa.ServiceError) *CreateDomainForbiddenResponseBody {
	body := &CreateDomainForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDomainBadRequestResponseBody builds the HTTP response body from the
// result of the "createDomain" endpoint of the "domains" service.
func NewCreateDomainBadRequestResponseBody(res *goa.ServiceError) *CreateDomainBadRequestResponseBody {
	body := &CreateDomainBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDomainNotFoundResponseBody builds the HTTP response body from the
// result of the "createDomain" endpoint of the "domains" service.
func NewCreateDomainNotFoundResponseBody(res *goa.ServiceError) *CreateDomainNotFoundResponseBody {
	body := &CreateDomainNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDomainConflictResponseBody builds the HTTP response body from the
// result of the "createDomain" endpoint of the "domains" service.
func NewCreateDomainConflictResponseBody(res *goa.ServiceError) *CreateDomainConflictResponseBody {
	body := &CreateDomainConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDomainUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "createDomain" endpoint of the "domains" service.
func NewCreateDomainUnsupportedMediaResponseBody(res *goa.ServiceError) *CreateDomainUnsupportedMediaResponseBody {
	body := &CreateDomainUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDomainInvalidResponseBody builds the HTTP response body from the
// result of the "createDomain" endpoint of the "domains" service.
func NewCreateDomainInvalidResponseBody(res *goa.ServiceError) *CreateDomainInvalidResponseBody {
	body := &CreateDomainInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDomainInvariantViolationResponseBody builds the HTTP response body
// from the result of the "createDomain" endpoint of the "domains" service.
func NewCreateDomainInvariantViolationResponseBody(res *goa.ServiceError) *CreateDomainInvariantViolationResponseBody {
	body := &CreateDomainInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDomainUnexpectedResponseBody builds the HTTP response body from the
// result of the "createDomain" endpoint of the "domains" service.
func NewCreateDomainUnexpectedResponseBody(res *goa.ServiceError) *CreateDomainUnexpectedResponseBody {
	body := &CreateDomainUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDomainGatewayErrorResponseBody builds the HTTP response body from
// the result of the "createDomain" endpoint of the "domains" service.
func NewCreateDomainGatewayErrorResponseBody(res *goa.ServiceError) *CreateDomainGatewayErrorResponseBody {
	body := &CreateDomainGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteDomainUnauthorizedResponseBody builds the HTTP response body from
// the result of the "deleteDomain" endpoint of the "domains" service.
func NewDeleteDomainUnauthorizedResponseBody(res *goa.ServiceError) *DeleteDomainUnauthorizedResponseBody {
	body := &DeleteDomainUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteDomainForbiddenResponseBody builds the HTTP response body from the
// result of the "deleteDomain" endpoint of the "domains" service.
func NewDeleteDomainForbiddenResponseBody(res *goa.ServiceError) *DeleteDomainForbiddenResponseBody {
	body := &DeleteDomainForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteDomainBadRequestResponseBody builds the HTTP response body from the
// result of the "deleteDomain" endpoint of the "domains" service.
func NewDeleteDomainBadRequestResponseBody(res *goa.ServiceError) *DeleteDomainBadRequestResponseBody {
	body := &DeleteDomainBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteDomainNotFoundResponseBody builds the HTTP response body from the
// result of the "deleteDomain" endpoint of the "domains" service.
func NewDeleteDomainNotFoundResponseBody(res *goa.ServiceError) *DeleteDomainNotFoundResponseBody {
	body := &DeleteDomainNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteDomainConflictResponseBody builds the HTTP response body from the
// result of the "deleteDomain" endpoint of the "domains" service.
func NewDeleteDomainConflictResponseBody(res *goa.ServiceError) *DeleteDomainConflictResponseBody {
	body := &DeleteDomainConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteDomainUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "deleteDomain" endpoint of the "domains" service.
func NewDeleteDomainUnsupportedMediaResponseBody(res *goa.ServiceError) *DeleteDomainUnsupportedMediaResponseBody {
	body := &DeleteDomainUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteDomainInvalidResponseBody builds the HTTP response body from the
// result of the "deleteDomain" endpoint of the "domains" service.
func NewDeleteDomainInvalidResponseBody(res *goa.ServiceError) *DeleteDomainInvalidResponseBody {
	body := &DeleteDomainInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteDomainInvariantViolationResponseBody builds the HTTP response body
// from the result of the "deleteDomain" endpoint of the "domains" service.
func NewDeleteDomainInvariantViolationResponseBody(res *goa.ServiceError) *DeleteDomainInvariantViolationResponseBody {
	body := &DeleteDomainInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteDomainUnexpectedResponseBody builds the HTTP response body from the
// result of the "deleteDomain" endpoint of the "domains" service.
func NewDeleteDomainUnexpectedResponseBody(res *goa.ServiceError) *DeleteDomainUnexpectedResponseBody {
	body := &DeleteDomainUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteDomainGatewayErrorResponseBody builds the HTTP response body from
// the result of the "deleteDomain" endpoint of the "domains" service.
func NewDeleteDomainGatewayErrorResponseBody(res *goa.ServiceError) *DeleteDomainGatewayErrorResponseBody {
	body := &DeleteDomainGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDomainPayload builds a domains service getDomain endpoint payload.
func NewGetDomainPayload(sessionToken *string, projectSlugInput *string) *domains.GetDomainPayload {
	v := &domains.GetDomainPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewCreateDomainPayload builds a domains service createDomain endpoint
// payload.
func NewCreateDomainPayload(body *CreateDomainRequestBody, sessionToken *string, projectSlugInput *string) *domains.CreateDomainPayload {
	v := &domains.CreateDomainPayload{
		Domain: *body.Domain,
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewDeleteDomainPayload builds a domains service deleteDomain endpoint
// payload.
func NewDeleteDomainPayload(sessionToken *string, projectSlugInput *string) *domains.DeleteDomainPayload {
	v := &domains.DeleteDomainPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// ValidateCreateDomainRequestBody runs the validations defined on
// CreateDomainRequestBody
func ValidateCreateDomainRequestBody(body *CreateDomainRequestBody) (err error) {
	if body.Domain == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("domain", "body"))
	}
	return
}
