// Code generated by goa v3.22.3, DO NOT EDIT.
//
// mcpInstallPage HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	mcpinstallpage "github.com/speakeasy-api/gram/server/gen/mcp_install_page"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetInstallPageMetadataPayload builds the payload for the mcpInstallPage
// getInstallPageMetadata endpoint from CLI flags.
func BuildGetInstallPageMetadataPayload(mcpInstallPageGetInstallPageMetadataToolsetSlug string, mcpInstallPageGetInstallPageMetadataSessionToken string, mcpInstallPageGetInstallPageMetadataProjectSlugInput string) (*mcpinstallpage.GetInstallPageMetadataPayload, error) {
	var err error
	var toolsetSlug string
	{
		toolsetSlug = mcpInstallPageGetInstallPageMetadataToolsetSlug
		err = goa.MergeErrors(err, goa.ValidatePattern("toolset_slug", toolsetSlug, "^[a-z0-9_-]{1,128}$"))
		if utf8.RuneCountInString(toolsetSlug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("toolset_slug", toolsetSlug, utf8.RuneCountInString(toolsetSlug), 40, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if mcpInstallPageGetInstallPageMetadataSessionToken != "" {
			sessionToken = &mcpInstallPageGetInstallPageMetadataSessionToken
		}
	}
	var projectSlugInput *string
	{
		if mcpInstallPageGetInstallPageMetadataProjectSlugInput != "" {
			projectSlugInput = &mcpInstallPageGetInstallPageMetadataProjectSlugInput
		}
	}
	v := &mcpinstallpage.GetInstallPageMetadataPayload{}
	v.ToolsetSlug = types.Slug(toolsetSlug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildSetInstallPageMetadataPayload builds the payload for the mcpInstallPage
// setInstallPageMetadata endpoint from CLI flags.
func BuildSetInstallPageMetadataPayload(mcpInstallPageSetInstallPageMetadataBody string, mcpInstallPageSetInstallPageMetadataSessionToken string, mcpInstallPageSetInstallPageMetadataProjectSlugInput string) (*mcpinstallpage.SetInstallPageMetadataPayload, error) {
	var err error
	var body SetInstallPageMetadataRequestBody
	{
		err = json.Unmarshal([]byte(mcpInstallPageSetInstallPageMetadataBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"external_documentation_url\": \"At in dolor consequuntur et quisquam.\",\n      \"logo_asset_id\": \"Aliquam sit error reiciendis asperiores maiores optio.\",\n      \"toolset_slug\": \"vbg\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.toolset_slug", body.ToolsetSlug, "^[a-z0-9_-]{1,128}$"))
		if utf8.RuneCountInString(body.ToolsetSlug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.toolset_slug", body.ToolsetSlug, utf8.RuneCountInString(body.ToolsetSlug), 40, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if mcpInstallPageSetInstallPageMetadataSessionToken != "" {
			sessionToken = &mcpInstallPageSetInstallPageMetadataSessionToken
		}
	}
	var projectSlugInput *string
	{
		if mcpInstallPageSetInstallPageMetadataProjectSlugInput != "" {
			projectSlugInput = &mcpInstallPageSetInstallPageMetadataProjectSlugInput
		}
	}
	v := &mcpinstallpage.SetInstallPageMetadataPayload{
		ToolsetSlug:              types.Slug(body.ToolsetSlug),
		LogoAssetID:              body.LogoAssetID,
		ExternalDocumentationURL: body.ExternalDocumentationURL,
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}
