// Code generated by goa v3.22.3, DO NOT EDIT.
//
// mcpInstallPage HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	mcpinstallpage "github.com/speakeasy-api/gram/server/gen/mcp_install_page"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetInstallPageMetadataRequest instantiates a HTTP request object with
// method and path set to call the "mcpInstallPage" service
// "getInstallPageMetadata" endpoint
func (c *Client) BuildGetInstallPageMetadataRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetInstallPageMetadataMcpInstallPagePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcpInstallPage", "getInstallPageMetadata", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetInstallPageMetadataRequest returns an encoder for requests sent to
// the mcpInstallPage getInstallPageMetadata server.
func EncodeGetInstallPageMetadataRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpinstallpage.GetInstallPageMetadataPayload)
		if !ok {
			return goahttp.ErrInvalidType("mcpInstallPage", "getInstallPageMetadata", "*mcpinstallpage.GetInstallPageMetadataPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewGetInstallPageMetadataRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mcpInstallPage", "getInstallPageMetadata", err)
		}
		return nil
	}
}

// DecodeGetInstallPageMetadataResponse returns a decoder for responses
// returned by the mcpInstallPage getInstallPageMetadata endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeGetInstallPageMetadataResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeGetInstallPageMetadataResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetInstallPageMetadataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			err = ValidateGetInstallPageMetadataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			res := NewGetInstallPageMetadataResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetInstallPageMetadataUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			err = ValidateGetInstallPageMetadataUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			return nil, NewGetInstallPageMetadataUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetInstallPageMetadataForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			err = ValidateGetInstallPageMetadataForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			return nil, NewGetInstallPageMetadataForbidden(&body)
		case http.StatusBadRequest:
			var (
				body GetInstallPageMetadataBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			err = ValidateGetInstallPageMetadataBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			return nil, NewGetInstallPageMetadataBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetInstallPageMetadataNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			err = ValidateGetInstallPageMetadataNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			return nil, NewGetInstallPageMetadataNotFound(&body)
		case http.StatusConflict:
			var (
				body GetInstallPageMetadataConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			err = ValidateGetInstallPageMetadataConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			return nil, NewGetInstallPageMetadataConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body GetInstallPageMetadataUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			err = ValidateGetInstallPageMetadataUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			return nil, NewGetInstallPageMetadataUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body GetInstallPageMetadataInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			err = ValidateGetInstallPageMetadataInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			return nil, NewGetInstallPageMetadataInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body GetInstallPageMetadataInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mcpInstallPage", "getInstallPageMetadata", err)
				}
				err = ValidateGetInstallPageMetadataInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("mcpInstallPage", "getInstallPageMetadata", err)
				}
				return nil, NewGetInstallPageMetadataInvariantViolation(&body)
			case "unexpected":
				var (
					body GetInstallPageMetadataUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mcpInstallPage", "getInstallPageMetadata", err)
				}
				err = ValidateGetInstallPageMetadataUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("mcpInstallPage", "getInstallPageMetadata", err)
				}
				return nil, NewGetInstallPageMetadataUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcpInstallPage", "getInstallPageMetadata", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body GetInstallPageMetadataGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			err = ValidateGetInstallPageMetadataGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "getInstallPageMetadata", err)
			}
			return nil, NewGetInstallPageMetadataGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcpInstallPage", "getInstallPageMetadata", resp.StatusCode, string(body))
		}
	}
}

// BuildSetInstallPageMetadataRequest instantiates a HTTP request object with
// method and path set to call the "mcpInstallPage" service
// "setInstallPageMetadata" endpoint
func (c *Client) BuildSetInstallPageMetadataRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SetInstallPageMetadataMcpInstallPagePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcpInstallPage", "setInstallPageMetadata", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSetInstallPageMetadataRequest returns an encoder for requests sent to
// the mcpInstallPage setInstallPageMetadata server.
func EncodeSetInstallPageMetadataRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpinstallpage.SetInstallPageMetadataPayload)
		if !ok {
			return goahttp.ErrInvalidType("mcpInstallPage", "setInstallPageMetadata", "*mcpinstallpage.SetInstallPageMetadataPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewSetInstallPageMetadataRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mcpInstallPage", "setInstallPageMetadata", err)
		}
		return nil
	}
}

// DecodeSetInstallPageMetadataResponse returns a decoder for responses
// returned by the mcpInstallPage setInstallPageMetadata endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeSetInstallPageMetadataResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeSetInstallPageMetadataResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SetInstallPageMetadataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			err = ValidateSetInstallPageMetadataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			res := NewSetInstallPageMetadataMCPInstallPageMetadataOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body SetInstallPageMetadataUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			err = ValidateSetInstallPageMetadataUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			return nil, NewSetInstallPageMetadataUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body SetInstallPageMetadataForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			err = ValidateSetInstallPageMetadataForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			return nil, NewSetInstallPageMetadataForbidden(&body)
		case http.StatusBadRequest:
			var (
				body SetInstallPageMetadataBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			err = ValidateSetInstallPageMetadataBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			return nil, NewSetInstallPageMetadataBadRequest(&body)
		case http.StatusNotFound:
			var (
				body SetInstallPageMetadataNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			err = ValidateSetInstallPageMetadataNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			return nil, NewSetInstallPageMetadataNotFound(&body)
		case http.StatusConflict:
			var (
				body SetInstallPageMetadataConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			err = ValidateSetInstallPageMetadataConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			return nil, NewSetInstallPageMetadataConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body SetInstallPageMetadataUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			err = ValidateSetInstallPageMetadataUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			return nil, NewSetInstallPageMetadataUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body SetInstallPageMetadataInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			err = ValidateSetInstallPageMetadataInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			return nil, NewSetInstallPageMetadataInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body SetInstallPageMetadataInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mcpInstallPage", "setInstallPageMetadata", err)
				}
				err = ValidateSetInstallPageMetadataInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("mcpInstallPage", "setInstallPageMetadata", err)
				}
				return nil, NewSetInstallPageMetadataInvariantViolation(&body)
			case "unexpected":
				var (
					body SetInstallPageMetadataUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mcpInstallPage", "setInstallPageMetadata", err)
				}
				err = ValidateSetInstallPageMetadataUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("mcpInstallPage", "setInstallPageMetadata", err)
				}
				return nil, NewSetInstallPageMetadataUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcpInstallPage", "setInstallPageMetadata", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body SetInstallPageMetadataGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			err = ValidateSetInstallPageMetadataGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpInstallPage", "setInstallPageMetadata", err)
			}
			return nil, NewSetInstallPageMetadataGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcpInstallPage", "setInstallPageMetadata", resp.StatusCode, string(body))
		}
	}
}

// unmarshalMCPInstallPageMetadataResponseBodyToTypesMCPInstallPageMetadata
// builds a value of type *types.MCPInstallPageMetadata from a value of type
// *MCPInstallPageMetadataResponseBody.
func unmarshalMCPInstallPageMetadataResponseBodyToTypesMCPInstallPageMetadata(v *MCPInstallPageMetadataResponseBody) *types.MCPInstallPageMetadata {
	if v == nil {
		return nil
	}
	res := &types.MCPInstallPageMetadata{
		ID:                       *v.ID,
		ToolsetID:                *v.ToolsetID,
		LogoAssetID:              v.LogoAssetID,
		ExternalDocumentationURL: v.ExternalDocumentationURL,
		CreatedAt:                *v.CreatedAt,
		UpdatedAt:                *v.UpdatedAt,
	}

	return res
}
