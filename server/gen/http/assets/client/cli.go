// Code generated by goa v3.22.2, DO NOT EDIT.
//
// assets HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"fmt"
	"strconv"

	assets "github.com/speakeasy-api/gram/server/gen/assets"
)

// BuildServeImagePayload builds the payload for the assets serveImage endpoint
// from CLI flags.
func BuildServeImagePayload(assetsServeImageID string, assetsServeImageSessionToken string, assetsServeImageApikeyToken string) (*assets.ServeImageForm, error) {
	var id string
	{
		id = assetsServeImageID
	}
	var sessionToken *string
	{
		if assetsServeImageSessionToken != "" {
			sessionToken = &assetsServeImageSessionToken
		}
	}
	var apikeyToken *string
	{
		if assetsServeImageApikeyToken != "" {
			apikeyToken = &assetsServeImageApikeyToken
		}
	}
	v := &assets.ServeImageForm{}
	v.ID = id
	v.SessionToken = sessionToken
	v.ApikeyToken = apikeyToken

	return v, nil
}

// BuildUploadImagePayload builds the payload for the assets uploadImage
// endpoint from CLI flags.
func BuildUploadImagePayload(assetsUploadImageContentType string, assetsUploadImageContentLength string, assetsUploadImageApikeyToken string, assetsUploadImageProjectSlugInput string, assetsUploadImageSessionToken string) (*assets.UploadImageForm, error) {
	var err error
	var contentType string
	{
		contentType = assetsUploadImageContentType
	}
	var contentLength int64
	{
		contentLength, err = strconv.ParseInt(assetsUploadImageContentLength, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for contentLength, must be INT64")
		}
	}
	var apikeyToken *string
	{
		if assetsUploadImageApikeyToken != "" {
			apikeyToken = &assetsUploadImageApikeyToken
		}
	}
	var projectSlugInput *string
	{
		if assetsUploadImageProjectSlugInput != "" {
			projectSlugInput = &assetsUploadImageProjectSlugInput
		}
	}
	var sessionToken *string
	{
		if assetsUploadImageSessionToken != "" {
			sessionToken = &assetsUploadImageSessionToken
		}
	}
	v := &assets.UploadImageForm{}
	v.ContentType = contentType
	v.ContentLength = contentLength
	v.ApikeyToken = apikeyToken
	v.ProjectSlugInput = projectSlugInput
	v.SessionToken = sessionToken

	return v, nil
}

// BuildUploadFunctionsPayload builds the payload for the assets
// uploadFunctions endpoint from CLI flags.
func BuildUploadFunctionsPayload(assetsUploadFunctionsContentType string, assetsUploadFunctionsContentLength string, assetsUploadFunctionsApikeyToken string, assetsUploadFunctionsProjectSlugInput string, assetsUploadFunctionsSessionToken string) (*assets.UploadFunctionsForm, error) {
	var err error
	var contentType string
	{
		contentType = assetsUploadFunctionsContentType
	}
	var contentLength int64
	{
		contentLength, err = strconv.ParseInt(assetsUploadFunctionsContentLength, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for contentLength, must be INT64")
		}
	}
	var apikeyToken *string
	{
		if assetsUploadFunctionsApikeyToken != "" {
			apikeyToken = &assetsUploadFunctionsApikeyToken
		}
	}
	var projectSlugInput *string
	{
		if assetsUploadFunctionsProjectSlugInput != "" {
			projectSlugInput = &assetsUploadFunctionsProjectSlugInput
		}
	}
	var sessionToken *string
	{
		if assetsUploadFunctionsSessionToken != "" {
			sessionToken = &assetsUploadFunctionsSessionToken
		}
	}
	v := &assets.UploadFunctionsForm{}
	v.ContentType = contentType
	v.ContentLength = contentLength
	v.ApikeyToken = apikeyToken
	v.ProjectSlugInput = projectSlugInput
	v.SessionToken = sessionToken

	return v, nil
}

// BuildUploadOpenAPIv3Payload builds the payload for the assets
// uploadOpenAPIv3 endpoint from CLI flags.
func BuildUploadOpenAPIv3Payload(assetsUploadOpenAPIv3ContentType string, assetsUploadOpenAPIv3ContentLength string, assetsUploadOpenAPIv3ApikeyToken string, assetsUploadOpenAPIv3ProjectSlugInput string, assetsUploadOpenAPIv3SessionToken string) (*assets.UploadOpenAPIv3Form, error) {
	var err error
	var contentType string
	{
		contentType = assetsUploadOpenAPIv3ContentType
	}
	var contentLength int64
	{
		contentLength, err = strconv.ParseInt(assetsUploadOpenAPIv3ContentLength, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for contentLength, must be INT64")
		}
	}
	var apikeyToken *string
	{
		if assetsUploadOpenAPIv3ApikeyToken != "" {
			apikeyToken = &assetsUploadOpenAPIv3ApikeyToken
		}
	}
	var projectSlugInput *string
	{
		if assetsUploadOpenAPIv3ProjectSlugInput != "" {
			projectSlugInput = &assetsUploadOpenAPIv3ProjectSlugInput
		}
	}
	var sessionToken *string
	{
		if assetsUploadOpenAPIv3SessionToken != "" {
			sessionToken = &assetsUploadOpenAPIv3SessionToken
		}
	}
	v := &assets.UploadOpenAPIv3Form{}
	v.ContentType = contentType
	v.ContentLength = contentLength
	v.ApikeyToken = apikeyToken
	v.ProjectSlugInput = projectSlugInput
	v.SessionToken = sessionToken

	return v, nil
}

// BuildServeOpenAPIv3Payload builds the payload for the assets serveOpenAPIv3
// endpoint from CLI flags.
func BuildServeOpenAPIv3Payload(assetsServeOpenAPIv3ID string, assetsServeOpenAPIv3ProjectID string, assetsServeOpenAPIv3ApikeyToken string, assetsServeOpenAPIv3SessionToken string) (*assets.ServeOpenAPIv3Form, error) {
	var id string
	{
		id = assetsServeOpenAPIv3ID
	}
	var projectID string
	{
		projectID = assetsServeOpenAPIv3ProjectID
	}
	var apikeyToken *string
	{
		if assetsServeOpenAPIv3ApikeyToken != "" {
			apikeyToken = &assetsServeOpenAPIv3ApikeyToken
		}
	}
	var sessionToken *string
	{
		if assetsServeOpenAPIv3SessionToken != "" {
			sessionToken = &assetsServeOpenAPIv3SessionToken
		}
	}
	v := &assets.ServeOpenAPIv3Form{}
	v.ID = id
	v.ProjectID = projectID
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken

	return v, nil
}

// BuildListAssetsPayload builds the payload for the assets listAssets endpoint
// from CLI flags.
func BuildListAssetsPayload(assetsListAssetsSessionToken string, assetsListAssetsProjectSlugInput string, assetsListAssetsApikeyToken string) (*assets.ListAssetsPayload, error) {
	var sessionToken *string
	{
		if assetsListAssetsSessionToken != "" {
			sessionToken = &assetsListAssetsSessionToken
		}
	}
	var projectSlugInput *string
	{
		if assetsListAssetsProjectSlugInput != "" {
			projectSlugInput = &assetsListAssetsProjectSlugInput
		}
	}
	var apikeyToken *string
	{
		if assetsListAssetsApikeyToken != "" {
			apikeyToken = &assetsListAssetsApikeyToken
		}
	}
	v := &assets.ListAssetsPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput
	v.ApikeyToken = apikeyToken

	return v, nil
}
