// Code generated by goa v3.22.2, DO NOT EDIT.
//
// assets HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strconv"

	assets "github.com/speakeasy-api/gram/server/gen/assets"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildServeImageRequest instantiates a HTTP request object with method and
// path set to call the "assets" service "serveImage" endpoint
func (c *Client) BuildServeImageRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ServeImageAssetsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assets", "serveImage", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeServeImageRequest returns an encoder for requests sent to the assets
// serveImage server.
func EncodeServeImageRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*assets.ServeImageForm)
		if !ok {
			return goahttp.ErrInvalidType("assets", "serveImage", "*assets.ServeImageForm", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		values := req.URL.Query()
		values.Add("id", p.ID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeServeImageResponse returns a decoder for responses returned by the
// assets serveImage endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeServeImageResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeServeImageResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				contentType   string
				contentLength int64
				lastModified  string
				err           error
			)
			contentTypeRaw := resp.Header.Get("Content-Type")
			if contentTypeRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("content_type", "header"))
			}
			contentType = contentTypeRaw
			{
				contentLengthRaw := resp.Header.Get("Content-Length")
				if contentLengthRaw == "" {
					return nil, goahttp.ErrValidationError("assets", "serveImage", goa.MissingFieldError("content_length", "header"))
				}
				v, err2 := strconv.ParseInt(contentLengthRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("content_length", contentLengthRaw, "integer"))
				}
				contentLength = v
			}
			lastModifiedRaw := resp.Header.Get("Last-Modified")
			if lastModifiedRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("last_modified", "header"))
			}
			lastModified = lastModifiedRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveImage", err)
			}
			res := NewServeImageResultOK(contentType, contentLength, lastModified)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ServeImageUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveImage", err)
			}
			err = ValidateServeImageUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveImage", err)
			}
			return nil, NewServeImageUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ServeImageForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveImage", err)
			}
			err = ValidateServeImageForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveImage", err)
			}
			return nil, NewServeImageForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ServeImageBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveImage", err)
			}
			err = ValidateServeImageBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveImage", err)
			}
			return nil, NewServeImageBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ServeImageNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveImage", err)
			}
			err = ValidateServeImageNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveImage", err)
			}
			return nil, NewServeImageNotFound(&body)
		case http.StatusConflict:
			var (
				body ServeImageConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveImage", err)
			}
			err = ValidateServeImageConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveImage", err)
			}
			return nil, NewServeImageConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ServeImageUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveImage", err)
			}
			err = ValidateServeImageUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveImage", err)
			}
			return nil, NewServeImageUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ServeImageInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveImage", err)
			}
			err = ValidateServeImageInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveImage", err)
			}
			return nil, NewServeImageInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ServeImageInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("assets", "serveImage", err)
				}
				err = ValidateServeImageInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("assets", "serveImage", err)
				}
				return nil, NewServeImageInvariantViolation(&body)
			case "unexpected":
				var (
					body ServeImageUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("assets", "serveImage", err)
				}
				err = ValidateServeImageUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("assets", "serveImage", err)
				}
				return nil, NewServeImageUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assets", "serveImage", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ServeImageGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveImage", err)
			}
			err = ValidateServeImageGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveImage", err)
			}
			return nil, NewServeImageGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assets", "serveImage", resp.StatusCode, string(body))
		}
	}
}

// BuildUploadImageRequest instantiates a HTTP request object with method and
// path set to call the "assets" service "uploadImage" endpoint
func (c *Client) BuildUploadImageRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		body io.Reader
	)
	rd, ok := v.(*assets.UploadImageRequestData)
	if !ok {
		return nil, goahttp.ErrInvalidType("assets", "uploadImage", "assets.UploadImageRequestData", v)
	}
	body = rd.Body
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadImageAssetsPath()}
	req, err := http.NewRequest("POST", u.String(), body)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assets", "uploadImage", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadImageRequest returns an encoder for requests sent to the assets
// uploadImage server.
func EncodeUploadImageRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		data, ok := v.(*assets.UploadImageRequestData)
		if !ok {
			return goahttp.ErrInvalidType("assets", "uploadImage", "*assets.UploadImageRequestData", v)
		}
		p := data.Payload
		{
			head := p.ContentType
			req.Header.Set("Content-Type", head)
		}
		{
			head := p.ContentLength
			headStr := strconv.FormatInt(head, 10)
			req.Header.Set("Content-Length", headStr)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		return nil
	}
}

// DecodeUploadImageResponse returns a decoder for responses returned by the
// assets uploadImage endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUploadImageResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeUploadImageResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UploadImageResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadImage", err)
			}
			err = ValidateUploadImageResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadImage", err)
			}
			res := NewUploadImageResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UploadImageUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadImage", err)
			}
			err = ValidateUploadImageUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadImage", err)
			}
			return nil, NewUploadImageUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UploadImageForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadImage", err)
			}
			err = ValidateUploadImageForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadImage", err)
			}
			return nil, NewUploadImageForbidden(&body)
		case http.StatusBadRequest:
			var (
				body UploadImageBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadImage", err)
			}
			err = ValidateUploadImageBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadImage", err)
			}
			return nil, NewUploadImageBadRequest(&body)
		case http.StatusNotFound:
			var (
				body UploadImageNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadImage", err)
			}
			err = ValidateUploadImageNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadImage", err)
			}
			return nil, NewUploadImageNotFound(&body)
		case http.StatusConflict:
			var (
				body UploadImageConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadImage", err)
			}
			err = ValidateUploadImageConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadImage", err)
			}
			return nil, NewUploadImageConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body UploadImageUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadImage", err)
			}
			err = ValidateUploadImageUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadImage", err)
			}
			return nil, NewUploadImageUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body UploadImageInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadImage", err)
			}
			err = ValidateUploadImageInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadImage", err)
			}
			return nil, NewUploadImageInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body UploadImageInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("assets", "uploadImage", err)
				}
				err = ValidateUploadImageInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("assets", "uploadImage", err)
				}
				return nil, NewUploadImageInvariantViolation(&body)
			case "unexpected":
				var (
					body UploadImageUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("assets", "uploadImage", err)
				}
				err = ValidateUploadImageUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("assets", "uploadImage", err)
				}
				return nil, NewUploadImageUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assets", "uploadImage", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body UploadImageGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadImage", err)
			}
			err = ValidateUploadImageGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadImage", err)
			}
			return nil, NewUploadImageGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assets", "uploadImage", resp.StatusCode, string(body))
		}
	}
}

// // BuildUploadImageStreamPayload creates a streaming endpoint request payload
// from the method payload and the path to the file to be streamed
func BuildUploadImageStreamPayload(payload any, fpath string) (*assets.UploadImageRequestData, error) {
	f, err := os.Open(fpath)
	if err != nil {
		return nil, err
	}
	return &assets.UploadImageRequestData{
		Payload: payload.(*assets.UploadImageForm),
		Body:    f,
	}, nil
}

// BuildUploadFunctionsRequest instantiates a HTTP request object with method
// and path set to call the "assets" service "uploadFunctions" endpoint
func (c *Client) BuildUploadFunctionsRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		body io.Reader
	)
	rd, ok := v.(*assets.UploadFunctionsRequestData)
	if !ok {
		return nil, goahttp.ErrInvalidType("assets", "uploadFunctions", "assets.UploadFunctionsRequestData", v)
	}
	body = rd.Body
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadFunctionsAssetsPath()}
	req, err := http.NewRequest("POST", u.String(), body)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assets", "uploadFunctions", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadFunctionsRequest returns an encoder for requests sent to the
// assets uploadFunctions server.
func EncodeUploadFunctionsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		data, ok := v.(*assets.UploadFunctionsRequestData)
		if !ok {
			return goahttp.ErrInvalidType("assets", "uploadFunctions", "*assets.UploadFunctionsRequestData", v)
		}
		p := data.Payload
		{
			head := p.ContentType
			req.Header.Set("Content-Type", head)
		}
		{
			head := p.ContentLength
			headStr := strconv.FormatInt(head, 10)
			req.Header.Set("Content-Length", headStr)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		return nil
	}
}

// DecodeUploadFunctionsResponse returns a decoder for responses returned by
// the assets uploadFunctions endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUploadFunctionsResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeUploadFunctionsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UploadFunctionsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadFunctions", err)
			}
			err = ValidateUploadFunctionsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadFunctions", err)
			}
			res := NewUploadFunctionsResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UploadFunctionsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadFunctions", err)
			}
			err = ValidateUploadFunctionsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadFunctions", err)
			}
			return nil, NewUploadFunctionsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UploadFunctionsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadFunctions", err)
			}
			err = ValidateUploadFunctionsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadFunctions", err)
			}
			return nil, NewUploadFunctionsForbidden(&body)
		case http.StatusBadRequest:
			var (
				body UploadFunctionsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadFunctions", err)
			}
			err = ValidateUploadFunctionsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadFunctions", err)
			}
			return nil, NewUploadFunctionsBadRequest(&body)
		case http.StatusNotFound:
			var (
				body UploadFunctionsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadFunctions", err)
			}
			err = ValidateUploadFunctionsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadFunctions", err)
			}
			return nil, NewUploadFunctionsNotFound(&body)
		case http.StatusConflict:
			var (
				body UploadFunctionsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadFunctions", err)
			}
			err = ValidateUploadFunctionsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadFunctions", err)
			}
			return nil, NewUploadFunctionsConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body UploadFunctionsUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadFunctions", err)
			}
			err = ValidateUploadFunctionsUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadFunctions", err)
			}
			return nil, NewUploadFunctionsUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body UploadFunctionsInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadFunctions", err)
			}
			err = ValidateUploadFunctionsInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadFunctions", err)
			}
			return nil, NewUploadFunctionsInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body UploadFunctionsInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("assets", "uploadFunctions", err)
				}
				err = ValidateUploadFunctionsInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("assets", "uploadFunctions", err)
				}
				return nil, NewUploadFunctionsInvariantViolation(&body)
			case "unexpected":
				var (
					body UploadFunctionsUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("assets", "uploadFunctions", err)
				}
				err = ValidateUploadFunctionsUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("assets", "uploadFunctions", err)
				}
				return nil, NewUploadFunctionsUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assets", "uploadFunctions", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body UploadFunctionsGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadFunctions", err)
			}
			err = ValidateUploadFunctionsGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadFunctions", err)
			}
			return nil, NewUploadFunctionsGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assets", "uploadFunctions", resp.StatusCode, string(body))
		}
	}
}

// // BuildUploadFunctionsStreamPayload creates a streaming endpoint request
// payload from the method payload and the path to the file to be streamed
func BuildUploadFunctionsStreamPayload(payload any, fpath string) (*assets.UploadFunctionsRequestData, error) {
	f, err := os.Open(fpath)
	if err != nil {
		return nil, err
	}
	return &assets.UploadFunctionsRequestData{
		Payload: payload.(*assets.UploadFunctionsForm),
		Body:    f,
	}, nil
}

// BuildUploadOpenAPIv3Request instantiates a HTTP request object with method
// and path set to call the "assets" service "uploadOpenAPIv3" endpoint
func (c *Client) BuildUploadOpenAPIv3Request(ctx context.Context, v any) (*http.Request, error) {
	var (
		body io.Reader
	)
	rd, ok := v.(*assets.UploadOpenAPIv3RequestData)
	if !ok {
		return nil, goahttp.ErrInvalidType("assets", "uploadOpenAPIv3", "assets.UploadOpenAPIv3RequestData", v)
	}
	body = rd.Body
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadOpenAPIv3AssetsPath()}
	req, err := http.NewRequest("POST", u.String(), body)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assets", "uploadOpenAPIv3", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadOpenAPIv3Request returns an encoder for requests sent to the
// assets uploadOpenAPIv3 server.
func EncodeUploadOpenAPIv3Request(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		data, ok := v.(*assets.UploadOpenAPIv3RequestData)
		if !ok {
			return goahttp.ErrInvalidType("assets", "uploadOpenAPIv3", "*assets.UploadOpenAPIv3RequestData", v)
		}
		p := data.Payload
		{
			head := p.ContentType
			req.Header.Set("Content-Type", head)
		}
		{
			head := p.ContentLength
			headStr := strconv.FormatInt(head, 10)
			req.Header.Set("Content-Length", headStr)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		return nil
	}
}

// DecodeUploadOpenAPIv3Response returns a decoder for responses returned by
// the assets uploadOpenAPIv3 endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUploadOpenAPIv3Response may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeUploadOpenAPIv3Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UploadOpenAPIv3ResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadOpenAPIv3", err)
			}
			err = ValidateUploadOpenAPIv3ResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadOpenAPIv3", err)
			}
			res := NewUploadOpenAPIv3ResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UploadOpenAPIv3UnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadOpenAPIv3", err)
			}
			err = ValidateUploadOpenAPIv3UnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadOpenAPIv3", err)
			}
			return nil, NewUploadOpenAPIv3Unauthorized(&body)
		case http.StatusForbidden:
			var (
				body UploadOpenAPIv3ForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadOpenAPIv3", err)
			}
			err = ValidateUploadOpenAPIv3ForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadOpenAPIv3", err)
			}
			return nil, NewUploadOpenAPIv3Forbidden(&body)
		case http.StatusBadRequest:
			var (
				body UploadOpenAPIv3BadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadOpenAPIv3", err)
			}
			err = ValidateUploadOpenAPIv3BadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadOpenAPIv3", err)
			}
			return nil, NewUploadOpenAPIv3BadRequest(&body)
		case http.StatusNotFound:
			var (
				body UploadOpenAPIv3NotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadOpenAPIv3", err)
			}
			err = ValidateUploadOpenAPIv3NotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadOpenAPIv3", err)
			}
			return nil, NewUploadOpenAPIv3NotFound(&body)
		case http.StatusConflict:
			var (
				body UploadOpenAPIv3ConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadOpenAPIv3", err)
			}
			err = ValidateUploadOpenAPIv3ConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadOpenAPIv3", err)
			}
			return nil, NewUploadOpenAPIv3Conflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body UploadOpenAPIv3UnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadOpenAPIv3", err)
			}
			err = ValidateUploadOpenAPIv3UnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadOpenAPIv3", err)
			}
			return nil, NewUploadOpenAPIv3UnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body UploadOpenAPIv3InvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadOpenAPIv3", err)
			}
			err = ValidateUploadOpenAPIv3InvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadOpenAPIv3", err)
			}
			return nil, NewUploadOpenAPIv3Invalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body UploadOpenAPIv3InvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("assets", "uploadOpenAPIv3", err)
				}
				err = ValidateUploadOpenAPIv3InvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("assets", "uploadOpenAPIv3", err)
				}
				return nil, NewUploadOpenAPIv3InvariantViolation(&body)
			case "unexpected":
				var (
					body UploadOpenAPIv3UnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("assets", "uploadOpenAPIv3", err)
				}
				err = ValidateUploadOpenAPIv3UnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("assets", "uploadOpenAPIv3", err)
				}
				return nil, NewUploadOpenAPIv3Unexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assets", "uploadOpenAPIv3", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body UploadOpenAPIv3GatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadOpenAPIv3", err)
			}
			err = ValidateUploadOpenAPIv3GatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadOpenAPIv3", err)
			}
			return nil, NewUploadOpenAPIv3GatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assets", "uploadOpenAPIv3", resp.StatusCode, string(body))
		}
	}
}

// // BuildUploadOpenAPIv3StreamPayload creates a streaming endpoint request
// payload from the method payload and the path to the file to be streamed
func BuildUploadOpenAPIv3StreamPayload(payload any, fpath string) (*assets.UploadOpenAPIv3RequestData, error) {
	f, err := os.Open(fpath)
	if err != nil {
		return nil, err
	}
	return &assets.UploadOpenAPIv3RequestData{
		Payload: payload.(*assets.UploadOpenAPIv3Form),
		Body:    f,
	}, nil
}

// BuildServeOpenAPIv3Request instantiates a HTTP request object with method
// and path set to call the "assets" service "serveOpenAPIv3" endpoint
func (c *Client) BuildServeOpenAPIv3Request(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ServeOpenAPIv3AssetsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assets", "serveOpenAPIv3", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeServeOpenAPIv3Request returns an encoder for requests sent to the
// assets serveOpenAPIv3 server.
func EncodeServeOpenAPIv3Request(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*assets.ServeOpenAPIv3Form)
		if !ok {
			return goahttp.ErrInvalidType("assets", "serveOpenAPIv3", "*assets.ServeOpenAPIv3Form", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		values := req.URL.Query()
		values.Add("id", p.ID)
		values.Add("project_id", p.ProjectID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeServeOpenAPIv3Response returns a decoder for responses returned by the
// assets serveOpenAPIv3 endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeServeOpenAPIv3Response may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeServeOpenAPIv3Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				contentType   string
				contentLength int64
				lastModified  string
				err           error
			)
			contentTypeRaw := resp.Header.Get("Content-Type")
			if contentTypeRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("content_type", "header"))
			}
			contentType = contentTypeRaw
			{
				contentLengthRaw := resp.Header.Get("Content-Length")
				if contentLengthRaw == "" {
					return nil, goahttp.ErrValidationError("assets", "serveOpenAPIv3", goa.MissingFieldError("content_length", "header"))
				}
				v, err2 := strconv.ParseInt(contentLengthRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("content_length", contentLengthRaw, "integer"))
				}
				contentLength = v
			}
			lastModifiedRaw := resp.Header.Get("Last-Modified")
			if lastModifiedRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("last_modified", "header"))
			}
			lastModified = lastModifiedRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveOpenAPIv3", err)
			}
			res := NewServeOpenAPIv3ResultOK(contentType, contentLength, lastModified)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ServeOpenAPIv3UnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveOpenAPIv3", err)
			}
			err = ValidateServeOpenAPIv3UnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveOpenAPIv3", err)
			}
			return nil, NewServeOpenAPIv3Unauthorized(&body)
		case http.StatusForbidden:
			var (
				body ServeOpenAPIv3ForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveOpenAPIv3", err)
			}
			err = ValidateServeOpenAPIv3ForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveOpenAPIv3", err)
			}
			return nil, NewServeOpenAPIv3Forbidden(&body)
		case http.StatusBadRequest:
			var (
				body ServeOpenAPIv3BadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveOpenAPIv3", err)
			}
			err = ValidateServeOpenAPIv3BadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveOpenAPIv3", err)
			}
			return nil, NewServeOpenAPIv3BadRequest(&body)
		case http.StatusNotFound:
			var (
				body ServeOpenAPIv3NotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveOpenAPIv3", err)
			}
			err = ValidateServeOpenAPIv3NotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveOpenAPIv3", err)
			}
			return nil, NewServeOpenAPIv3NotFound(&body)
		case http.StatusConflict:
			var (
				body ServeOpenAPIv3ConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveOpenAPIv3", err)
			}
			err = ValidateServeOpenAPIv3ConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveOpenAPIv3", err)
			}
			return nil, NewServeOpenAPIv3Conflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ServeOpenAPIv3UnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveOpenAPIv3", err)
			}
			err = ValidateServeOpenAPIv3UnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveOpenAPIv3", err)
			}
			return nil, NewServeOpenAPIv3UnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ServeOpenAPIv3InvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveOpenAPIv3", err)
			}
			err = ValidateServeOpenAPIv3InvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveOpenAPIv3", err)
			}
			return nil, NewServeOpenAPIv3Invalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ServeOpenAPIv3InvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("assets", "serveOpenAPIv3", err)
				}
				err = ValidateServeOpenAPIv3InvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("assets", "serveOpenAPIv3", err)
				}
				return nil, NewServeOpenAPIv3InvariantViolation(&body)
			case "unexpected":
				var (
					body ServeOpenAPIv3UnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("assets", "serveOpenAPIv3", err)
				}
				err = ValidateServeOpenAPIv3UnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("assets", "serveOpenAPIv3", err)
				}
				return nil, NewServeOpenAPIv3Unexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assets", "serveOpenAPIv3", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ServeOpenAPIv3GatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "serveOpenAPIv3", err)
			}
			err = ValidateServeOpenAPIv3GatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "serveOpenAPIv3", err)
			}
			return nil, NewServeOpenAPIv3GatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assets", "serveOpenAPIv3", resp.StatusCode, string(body))
		}
	}
}

// BuildListAssetsRequest instantiates a HTTP request object with method and
// path set to call the "assets" service "listAssets" endpoint
func (c *Client) BuildListAssetsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListAssetsAssetsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assets", "listAssets", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListAssetsRequest returns an encoder for requests sent to the assets
// listAssets server.
func EncodeListAssetsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*assets.ListAssetsPayload)
		if !ok {
			return goahttp.ErrInvalidType("assets", "listAssets", "*assets.ListAssetsPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		return nil
	}
}

// DecodeListAssetsResponse returns a decoder for responses returned by the
// assets listAssets endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListAssetsResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeListAssetsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListAssetsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "listAssets", err)
			}
			err = ValidateListAssetsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "listAssets", err)
			}
			res := NewListAssetsResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListAssetsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "listAssets", err)
			}
			err = ValidateListAssetsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "listAssets", err)
			}
			return nil, NewListAssetsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListAssetsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "listAssets", err)
			}
			err = ValidateListAssetsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "listAssets", err)
			}
			return nil, NewListAssetsForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ListAssetsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "listAssets", err)
			}
			err = ValidateListAssetsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "listAssets", err)
			}
			return nil, NewListAssetsBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ListAssetsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "listAssets", err)
			}
			err = ValidateListAssetsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "listAssets", err)
			}
			return nil, NewListAssetsNotFound(&body)
		case http.StatusConflict:
			var (
				body ListAssetsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "listAssets", err)
			}
			err = ValidateListAssetsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "listAssets", err)
			}
			return nil, NewListAssetsConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ListAssetsUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "listAssets", err)
			}
			err = ValidateListAssetsUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "listAssets", err)
			}
			return nil, NewListAssetsUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ListAssetsInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "listAssets", err)
			}
			err = ValidateListAssetsInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "listAssets", err)
			}
			return nil, NewListAssetsInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ListAssetsInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("assets", "listAssets", err)
				}
				err = ValidateListAssetsInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("assets", "listAssets", err)
				}
				return nil, NewListAssetsInvariantViolation(&body)
			case "unexpected":
				var (
					body ListAssetsUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("assets", "listAssets", err)
				}
				err = ValidateListAssetsUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("assets", "listAssets", err)
				}
				return nil, NewListAssetsUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("assets", "listAssets", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ListAssetsGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "listAssets", err)
			}
			err = ValidateListAssetsGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "listAssets", err)
			}
			return nil, NewListAssetsGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assets", "listAssets", resp.StatusCode, string(body))
		}
	}
}

// unmarshalAssetResponseBodyToAssetsAsset builds a value of type *assets.Asset
// from a value of type *AssetResponseBody.
func unmarshalAssetResponseBodyToAssetsAsset(v *AssetResponseBody) *assets.Asset {
	res := &assets.Asset{
		ID:            *v.ID,
		Kind:          *v.Kind,
		Sha256:        *v.Sha256,
		ContentType:   *v.ContentType,
		ContentLength: *v.ContentLength,
		CreatedAt:     *v.CreatedAt,
		UpdatedAt:     *v.UpdatedAt,
	}

	return res
}
