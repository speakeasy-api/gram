// Code generated by goa v3.22.2, DO NOT EDIT.
//
// assets HTTP server
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	"bufio"
	"context"
	"io"
	"net/http"

	assets "github.com/speakeasy-api/gram/server/gen/assets"
	otelhttp "go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the assets service endpoint HTTP handlers.
type Server struct {
	Mounts          []*MountPoint
	ServeImage      http.Handler
	UploadImage     http.Handler
	UploadFunctions http.Handler
	UploadOpenAPIv3 http.Handler
	ServeOpenAPIv3  http.Handler
	ListAssets      http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the assets service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *assets.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ServeImage", "GET", "/rpc/assets.serveImage"},
			{"UploadImage", "POST", "/rpc/assets.uploadImage"},
			{"UploadFunctions", "POST", "/rpc/assets.uploadFunctions"},
			{"UploadOpenAPIv3", "POST", "/rpc/assets.uploadOpenAPIv3"},
			{"ServeOpenAPIv3", "GET", "/rpc/assets.serveOpenAPIv3"},
			{"ListAssets", "GET", "/rpc/assets.list"},
		},
		ServeImage:      NewServeImageHandler(e.ServeImage, mux, decoder, encoder, errhandler, formatter),
		UploadImage:     NewUploadImageHandler(e.UploadImage, mux, decoder, encoder, errhandler, formatter),
		UploadFunctions: NewUploadFunctionsHandler(e.UploadFunctions, mux, decoder, encoder, errhandler, formatter),
		UploadOpenAPIv3: NewUploadOpenAPIv3Handler(e.UploadOpenAPIv3, mux, decoder, encoder, errhandler, formatter),
		ServeOpenAPIv3:  NewServeOpenAPIv3Handler(e.ServeOpenAPIv3, mux, decoder, encoder, errhandler, formatter),
		ListAssets:      NewListAssetsHandler(e.ListAssets, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "assets" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ServeImage = m(s.ServeImage)
	s.UploadImage = m(s.UploadImage)
	s.UploadFunctions = m(s.UploadFunctions)
	s.UploadOpenAPIv3 = m(s.UploadOpenAPIv3)
	s.ServeOpenAPIv3 = m(s.ServeOpenAPIv3)
	s.ListAssets = m(s.ListAssets)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return assets.MethodNames[:] }

// Mount configures the mux to serve the assets endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountServeImageHandler(mux, h.ServeImage)
	MountUploadImageHandler(mux, h.UploadImage)
	MountUploadFunctionsHandler(mux, h.UploadFunctions)
	MountUploadOpenAPIv3Handler(mux, h.UploadOpenAPIv3)
	MountServeOpenAPIv3Handler(mux, h.ServeOpenAPIv3)
	MountListAssetsHandler(mux, h.ListAssets)
}

// Mount configures the mux to serve the assets endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountServeImageHandler configures the mux to serve the "assets" service
// "serveImage" endpoint.
func MountServeImageHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/rpc/assets.serveImage", otelhttp.WithRouteTag("/rpc/assets.serveImage", f).ServeHTTP)
}

// NewServeImageHandler creates a HTTP handler which loads the HTTP request and
// calls the "assets" service "serveImage" endpoint.
func NewServeImageHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeServeImageRequest(mux, decoder)
		encodeResponse = EncodeServeImageResponse(encoder)
		encodeError    = EncodeServeImageError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "serveImage")
		ctx = context.WithValue(ctx, goa.ServiceKey, "assets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		o := res.(*assets.ServeImageResponseData)
		defer o.Body.Close()
		if wt, ok := o.Body.(io.WriterTo); ok {
			if err := encodeResponse(ctx, w, o.Result); err != nil {
				if errhandler != nil {
					errhandler(ctx, w, err)
				}
				return
			}
			n, err := wt.WriteTo(w)
			if err != nil {
				if n == 0 {
					if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
						errhandler(ctx, w, err)
					}
				} else {
					http.NewResponseController(w).Flush()
					panic(http.ErrAbortHandler) // too late to write an error
				}
			}
			return
		}
		// handle immediate read error like a returned error
		buf := bufio.NewReader(o.Body)
		if _, err := buf.Peek(1); err != nil && err != io.EOF {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, o.Result); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if _, err := io.Copy(w, buf); err != nil {
			http.NewResponseController(w).Flush()
			panic(http.ErrAbortHandler) // too late to write an error
		}
	})
}

// MountUploadImageHandler configures the mux to serve the "assets" service
// "uploadImage" endpoint.
func MountUploadImageHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/assets.uploadImage", otelhttp.WithRouteTag("/rpc/assets.uploadImage", f).ServeHTTP)
}

// NewUploadImageHandler creates a HTTP handler which loads the HTTP request
// and calls the "assets" service "uploadImage" endpoint.
func NewUploadImageHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUploadImageRequest(mux, decoder)
		encodeResponse = EncodeUploadImageResponse(encoder)
		encodeError    = EncodeUploadImageError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "uploadImage")
		ctx = context.WithValue(ctx, goa.ServiceKey, "assets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		data := &assets.UploadImageRequestData{Payload: payload, Body: r.Body}
		res, err := endpoint(ctx, data)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountUploadFunctionsHandler configures the mux to serve the "assets" service
// "uploadFunctions" endpoint.
func MountUploadFunctionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/assets.uploadFunctions", otelhttp.WithRouteTag("/rpc/assets.uploadFunctions", f).ServeHTTP)
}

// NewUploadFunctionsHandler creates a HTTP handler which loads the HTTP
// request and calls the "assets" service "uploadFunctions" endpoint.
func NewUploadFunctionsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUploadFunctionsRequest(mux, decoder)
		encodeResponse = EncodeUploadFunctionsResponse(encoder)
		encodeError    = EncodeUploadFunctionsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "uploadFunctions")
		ctx = context.WithValue(ctx, goa.ServiceKey, "assets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		data := &assets.UploadFunctionsRequestData{Payload: payload, Body: r.Body}
		res, err := endpoint(ctx, data)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountUploadOpenAPIv3Handler configures the mux to serve the "assets" service
// "uploadOpenAPIv3" endpoint.
func MountUploadOpenAPIv3Handler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/assets.uploadOpenAPIv3", otelhttp.WithRouteTag("/rpc/assets.uploadOpenAPIv3", f).ServeHTTP)
}

// NewUploadOpenAPIv3Handler creates a HTTP handler which loads the HTTP
// request and calls the "assets" service "uploadOpenAPIv3" endpoint.
func NewUploadOpenAPIv3Handler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUploadOpenAPIv3Request(mux, decoder)
		encodeResponse = EncodeUploadOpenAPIv3Response(encoder)
		encodeError    = EncodeUploadOpenAPIv3Error(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "uploadOpenAPIv3")
		ctx = context.WithValue(ctx, goa.ServiceKey, "assets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		data := &assets.UploadOpenAPIv3RequestData{Payload: payload, Body: r.Body}
		res, err := endpoint(ctx, data)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountServeOpenAPIv3Handler configures the mux to serve the "assets" service
// "serveOpenAPIv3" endpoint.
func MountServeOpenAPIv3Handler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/rpc/assets.serveOpenAPIv3", otelhttp.WithRouteTag("/rpc/assets.serveOpenAPIv3", f).ServeHTTP)
}

// NewServeOpenAPIv3Handler creates a HTTP handler which loads the HTTP request
// and calls the "assets" service "serveOpenAPIv3" endpoint.
func NewServeOpenAPIv3Handler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeServeOpenAPIv3Request(mux, decoder)
		encodeResponse = EncodeServeOpenAPIv3Response(encoder)
		encodeError    = EncodeServeOpenAPIv3Error(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "serveOpenAPIv3")
		ctx = context.WithValue(ctx, goa.ServiceKey, "assets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		o := res.(*assets.ServeOpenAPIv3ResponseData)
		defer o.Body.Close()
		if wt, ok := o.Body.(io.WriterTo); ok {
			if err := encodeResponse(ctx, w, o.Result); err != nil {
				if errhandler != nil {
					errhandler(ctx, w, err)
				}
				return
			}
			n, err := wt.WriteTo(w)
			if err != nil {
				if n == 0 {
					if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
						errhandler(ctx, w, err)
					}
				} else {
					http.NewResponseController(w).Flush()
					panic(http.ErrAbortHandler) // too late to write an error
				}
			}
			return
		}
		// handle immediate read error like a returned error
		buf := bufio.NewReader(o.Body)
		if _, err := buf.Peek(1); err != nil && err != io.EOF {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, o.Result); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if _, err := io.Copy(w, buf); err != nil {
			http.NewResponseController(w).Flush()
			panic(http.ErrAbortHandler) // too late to write an error
		}
	})
}

// MountListAssetsHandler configures the mux to serve the "assets" service
// "listAssets" endpoint.
func MountListAssetsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/rpc/assets.list", otelhttp.WithRouteTag("/rpc/assets.list", f).ServeHTTP)
}

// NewListAssetsHandler creates a HTTP handler which loads the HTTP request and
// calls the "assets" service "listAssets" endpoint.
func NewListAssetsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListAssetsRequest(mux, decoder)
		encodeResponse = EncodeListAssetsResponse(encoder)
		encodeError    = EncodeListAssetsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listAssets")
		ctx = context.WithValue(ctx, goa.ServiceKey, "assets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}
