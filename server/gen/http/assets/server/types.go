// Code generated by goa v3.22.2, DO NOT EDIT.
//
// assets HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	assets "github.com/speakeasy-api/gram/server/gen/assets"
	goa "goa.design/goa/v3/pkg"
)

// UploadImageResponseBody is the type of the "assets" service "uploadImage"
// endpoint HTTP response body.
type UploadImageResponseBody struct {
	// The asset entry that was created in Gram
	Asset *AssetResponseBody `form:"asset" json:"asset" xml:"asset"`
}

// UploadFunctionsResponseBody is the type of the "assets" service
// "uploadFunctions" endpoint HTTP response body.
type UploadFunctionsResponseBody struct {
	// The asset entry that was created in Gram
	Asset *AssetResponseBody `form:"asset" json:"asset" xml:"asset"`
}

// UploadOpenAPIv3ResponseBody is the type of the "assets" service
// "uploadOpenAPIv3" endpoint HTTP response body.
type UploadOpenAPIv3ResponseBody struct {
	// The asset entry that was created in Gram
	Asset *AssetResponseBody `form:"asset" json:"asset" xml:"asset"`
}

// ListAssetsResponseBody is the type of the "assets" service "listAssets"
// endpoint HTTP response body.
type ListAssetsResponseBody struct {
	// The list of assets
	Assets []*AssetResponseBody `form:"assets" json:"assets" xml:"assets"`
}

// ServeImageUnauthorizedResponseBody is the type of the "assets" service
// "serveImage" endpoint HTTP response body for the "unauthorized" error.
type ServeImageUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeImageForbiddenResponseBody is the type of the "assets" service
// "serveImage" endpoint HTTP response body for the "forbidden" error.
type ServeImageForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeImageBadRequestResponseBody is the type of the "assets" service
// "serveImage" endpoint HTTP response body for the "bad_request" error.
type ServeImageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeImageNotFoundResponseBody is the type of the "assets" service
// "serveImage" endpoint HTTP response body for the "not_found" error.
type ServeImageNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeImageConflictResponseBody is the type of the "assets" service
// "serveImage" endpoint HTTP response body for the "conflict" error.
type ServeImageConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeImageUnsupportedMediaResponseBody is the type of the "assets" service
// "serveImage" endpoint HTTP response body for the "unsupported_media" error.
type ServeImageUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeImageInvalidResponseBody is the type of the "assets" service
// "serveImage" endpoint HTTP response body for the "invalid" error.
type ServeImageInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeImageInvariantViolationResponseBody is the type of the "assets" service
// "serveImage" endpoint HTTP response body for the "invariant_violation" error.
type ServeImageInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeImageUnexpectedResponseBody is the type of the "assets" service
// "serveImage" endpoint HTTP response body for the "unexpected" error.
type ServeImageUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeImageGatewayErrorResponseBody is the type of the "assets" service
// "serveImage" endpoint HTTP response body for the "gateway_error" error.
type ServeImageGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageUnauthorizedResponseBody is the type of the "assets" service
// "uploadImage" endpoint HTTP response body for the "unauthorized" error.
type UploadImageUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageForbiddenResponseBody is the type of the "assets" service
// "uploadImage" endpoint HTTP response body for the "forbidden" error.
type UploadImageForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageBadRequestResponseBody is the type of the "assets" service
// "uploadImage" endpoint HTTP response body for the "bad_request" error.
type UploadImageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageNotFoundResponseBody is the type of the "assets" service
// "uploadImage" endpoint HTTP response body for the "not_found" error.
type UploadImageNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageConflictResponseBody is the type of the "assets" service
// "uploadImage" endpoint HTTP response body for the "conflict" error.
type UploadImageConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageUnsupportedMediaResponseBody is the type of the "assets" service
// "uploadImage" endpoint HTTP response body for the "unsupported_media" error.
type UploadImageUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageInvalidResponseBody is the type of the "assets" service
// "uploadImage" endpoint HTTP response body for the "invalid" error.
type UploadImageInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageInvariantViolationResponseBody is the type of the "assets"
// service "uploadImage" endpoint HTTP response body for the
// "invariant_violation" error.
type UploadImageInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageUnexpectedResponseBody is the type of the "assets" service
// "uploadImage" endpoint HTTP response body for the "unexpected" error.
type UploadImageUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageGatewayErrorResponseBody is the type of the "assets" service
// "uploadImage" endpoint HTTP response body for the "gateway_error" error.
type UploadImageGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadFunctionsUnauthorizedResponseBody is the type of the "assets" service
// "uploadFunctions" endpoint HTTP response body for the "unauthorized" error.
type UploadFunctionsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadFunctionsForbiddenResponseBody is the type of the "assets" service
// "uploadFunctions" endpoint HTTP response body for the "forbidden" error.
type UploadFunctionsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadFunctionsBadRequestResponseBody is the type of the "assets" service
// "uploadFunctions" endpoint HTTP response body for the "bad_request" error.
type UploadFunctionsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadFunctionsNotFoundResponseBody is the type of the "assets" service
// "uploadFunctions" endpoint HTTP response body for the "not_found" error.
type UploadFunctionsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadFunctionsConflictResponseBody is the type of the "assets" service
// "uploadFunctions" endpoint HTTP response body for the "conflict" error.
type UploadFunctionsConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadFunctionsUnsupportedMediaResponseBody is the type of the "assets"
// service "uploadFunctions" endpoint HTTP response body for the
// "unsupported_media" error.
type UploadFunctionsUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadFunctionsInvalidResponseBody is the type of the "assets" service
// "uploadFunctions" endpoint HTTP response body for the "invalid" error.
type UploadFunctionsInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadFunctionsInvariantViolationResponseBody is the type of the "assets"
// service "uploadFunctions" endpoint HTTP response body for the
// "invariant_violation" error.
type UploadFunctionsInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadFunctionsUnexpectedResponseBody is the type of the "assets" service
// "uploadFunctions" endpoint HTTP response body for the "unexpected" error.
type UploadFunctionsUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadFunctionsGatewayErrorResponseBody is the type of the "assets" service
// "uploadFunctions" endpoint HTTP response body for the "gateway_error" error.
type UploadFunctionsGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadOpenAPIv3UnauthorizedResponseBody is the type of the "assets" service
// "uploadOpenAPIv3" endpoint HTTP response body for the "unauthorized" error.
type UploadOpenAPIv3UnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadOpenAPIv3ForbiddenResponseBody is the type of the "assets" service
// "uploadOpenAPIv3" endpoint HTTP response body for the "forbidden" error.
type UploadOpenAPIv3ForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadOpenAPIv3BadRequestResponseBody is the type of the "assets" service
// "uploadOpenAPIv3" endpoint HTTP response body for the "bad_request" error.
type UploadOpenAPIv3BadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadOpenAPIv3NotFoundResponseBody is the type of the "assets" service
// "uploadOpenAPIv3" endpoint HTTP response body for the "not_found" error.
type UploadOpenAPIv3NotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadOpenAPIv3ConflictResponseBody is the type of the "assets" service
// "uploadOpenAPIv3" endpoint HTTP response body for the "conflict" error.
type UploadOpenAPIv3ConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadOpenAPIv3UnsupportedMediaResponseBody is the type of the "assets"
// service "uploadOpenAPIv3" endpoint HTTP response body for the
// "unsupported_media" error.
type UploadOpenAPIv3UnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadOpenAPIv3InvalidResponseBody is the type of the "assets" service
// "uploadOpenAPIv3" endpoint HTTP response body for the "invalid" error.
type UploadOpenAPIv3InvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadOpenAPIv3InvariantViolationResponseBody is the type of the "assets"
// service "uploadOpenAPIv3" endpoint HTTP response body for the
// "invariant_violation" error.
type UploadOpenAPIv3InvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadOpenAPIv3UnexpectedResponseBody is the type of the "assets" service
// "uploadOpenAPIv3" endpoint HTTP response body for the "unexpected" error.
type UploadOpenAPIv3UnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadOpenAPIv3GatewayErrorResponseBody is the type of the "assets" service
// "uploadOpenAPIv3" endpoint HTTP response body for the "gateway_error" error.
type UploadOpenAPIv3GatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeOpenAPIv3UnauthorizedResponseBody is the type of the "assets" service
// "serveOpenAPIv3" endpoint HTTP response body for the "unauthorized" error.
type ServeOpenAPIv3UnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeOpenAPIv3ForbiddenResponseBody is the type of the "assets" service
// "serveOpenAPIv3" endpoint HTTP response body for the "forbidden" error.
type ServeOpenAPIv3ForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeOpenAPIv3BadRequestResponseBody is the type of the "assets" service
// "serveOpenAPIv3" endpoint HTTP response body for the "bad_request" error.
type ServeOpenAPIv3BadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeOpenAPIv3NotFoundResponseBody is the type of the "assets" service
// "serveOpenAPIv3" endpoint HTTP response body for the "not_found" error.
type ServeOpenAPIv3NotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeOpenAPIv3ConflictResponseBody is the type of the "assets" service
// "serveOpenAPIv3" endpoint HTTP response body for the "conflict" error.
type ServeOpenAPIv3ConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeOpenAPIv3UnsupportedMediaResponseBody is the type of the "assets"
// service "serveOpenAPIv3" endpoint HTTP response body for the
// "unsupported_media" error.
type ServeOpenAPIv3UnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeOpenAPIv3InvalidResponseBody is the type of the "assets" service
// "serveOpenAPIv3" endpoint HTTP response body for the "invalid" error.
type ServeOpenAPIv3InvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeOpenAPIv3InvariantViolationResponseBody is the type of the "assets"
// service "serveOpenAPIv3" endpoint HTTP response body for the
// "invariant_violation" error.
type ServeOpenAPIv3InvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeOpenAPIv3UnexpectedResponseBody is the type of the "assets" service
// "serveOpenAPIv3" endpoint HTTP response body for the "unexpected" error.
type ServeOpenAPIv3UnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeOpenAPIv3GatewayErrorResponseBody is the type of the "assets" service
// "serveOpenAPIv3" endpoint HTTP response body for the "gateway_error" error.
type ServeOpenAPIv3GatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAssetsUnauthorizedResponseBody is the type of the "assets" service
// "listAssets" endpoint HTTP response body for the "unauthorized" error.
type ListAssetsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAssetsForbiddenResponseBody is the type of the "assets" service
// "listAssets" endpoint HTTP response body for the "forbidden" error.
type ListAssetsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAssetsBadRequestResponseBody is the type of the "assets" service
// "listAssets" endpoint HTTP response body for the "bad_request" error.
type ListAssetsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAssetsNotFoundResponseBody is the type of the "assets" service
// "listAssets" endpoint HTTP response body for the "not_found" error.
type ListAssetsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAssetsConflictResponseBody is the type of the "assets" service
// "listAssets" endpoint HTTP response body for the "conflict" error.
type ListAssetsConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAssetsUnsupportedMediaResponseBody is the type of the "assets" service
// "listAssets" endpoint HTTP response body for the "unsupported_media" error.
type ListAssetsUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAssetsInvalidResponseBody is the type of the "assets" service
// "listAssets" endpoint HTTP response body for the "invalid" error.
type ListAssetsInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAssetsInvariantViolationResponseBody is the type of the "assets" service
// "listAssets" endpoint HTTP response body for the "invariant_violation" error.
type ListAssetsInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAssetsUnexpectedResponseBody is the type of the "assets" service
// "listAssets" endpoint HTTP response body for the "unexpected" error.
type ListAssetsUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAssetsGatewayErrorResponseBody is the type of the "assets" service
// "listAssets" endpoint HTTP response body for the "gateway_error" error.
type ListAssetsGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AssetResponseBody is used to define fields on response body types.
type AssetResponseBody struct {
	// The ID of the asset
	ID   string `form:"id" json:"id" xml:"id"`
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// The SHA256 hash of the asset
	Sha256 string `form:"sha256" json:"sha256" xml:"sha256"`
	// The content type of the asset
	ContentType string `form:"content_type" json:"content_type" xml:"content_type"`
	// The content length of the asset
	ContentLength int64 `form:"content_length" json:"content_length" xml:"content_length"`
	// The creation date of the asset.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the asset.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewUploadImageResponseBody builds the HTTP response body from the result of
// the "uploadImage" endpoint of the "assets" service.
func NewUploadImageResponseBody(res *assets.UploadImageResult) *UploadImageResponseBody {
	body := &UploadImageResponseBody{}
	if res.Asset != nil {
		body.Asset = marshalAssetsAssetToAssetResponseBody(res.Asset)
	}
	return body
}

// NewUploadFunctionsResponseBody builds the HTTP response body from the result
// of the "uploadFunctions" endpoint of the "assets" service.
func NewUploadFunctionsResponseBody(res *assets.UploadFunctionsResult) *UploadFunctionsResponseBody {
	body := &UploadFunctionsResponseBody{}
	if res.Asset != nil {
		body.Asset = marshalAssetsAssetToAssetResponseBody(res.Asset)
	}
	return body
}

// NewUploadOpenAPIv3ResponseBody builds the HTTP response body from the result
// of the "uploadOpenAPIv3" endpoint of the "assets" service.
func NewUploadOpenAPIv3ResponseBody(res *assets.UploadOpenAPIv3Result) *UploadOpenAPIv3ResponseBody {
	body := &UploadOpenAPIv3ResponseBody{}
	if res.Asset != nil {
		body.Asset = marshalAssetsAssetToAssetResponseBody(res.Asset)
	}
	return body
}

// NewListAssetsResponseBody builds the HTTP response body from the result of
// the "listAssets" endpoint of the "assets" service.
func NewListAssetsResponseBody(res *assets.ListAssetsResult) *ListAssetsResponseBody {
	body := &ListAssetsResponseBody{}
	if res.Assets != nil {
		body.Assets = make([]*AssetResponseBody, len(res.Assets))
		for i, val := range res.Assets {
			body.Assets[i] = marshalAssetsAssetToAssetResponseBody(val)
		}
	} else {
		body.Assets = []*AssetResponseBody{}
	}
	return body
}

// NewServeImageUnauthorizedResponseBody builds the HTTP response body from the
// result of the "serveImage" endpoint of the "assets" service.
func NewServeImageUnauthorizedResponseBody(res *goa.ServiceError) *ServeImageUnauthorizedResponseBody {
	body := &ServeImageUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeImageForbiddenResponseBody builds the HTTP response body from the
// result of the "serveImage" endpoint of the "assets" service.
func NewServeImageForbiddenResponseBody(res *goa.ServiceError) *ServeImageForbiddenResponseBody {
	body := &ServeImageForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeImageBadRequestResponseBody builds the HTTP response body from the
// result of the "serveImage" endpoint of the "assets" service.
func NewServeImageBadRequestResponseBody(res *goa.ServiceError) *ServeImageBadRequestResponseBody {
	body := &ServeImageBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeImageNotFoundResponseBody builds the HTTP response body from the
// result of the "serveImage" endpoint of the "assets" service.
func NewServeImageNotFoundResponseBody(res *goa.ServiceError) *ServeImageNotFoundResponseBody {
	body := &ServeImageNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeImageConflictResponseBody builds the HTTP response body from the
// result of the "serveImage" endpoint of the "assets" service.
func NewServeImageConflictResponseBody(res *goa.ServiceError) *ServeImageConflictResponseBody {
	body := &ServeImageConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeImageUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "serveImage" endpoint of the "assets" service.
func NewServeImageUnsupportedMediaResponseBody(res *goa.ServiceError) *ServeImageUnsupportedMediaResponseBody {
	body := &ServeImageUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeImageInvalidResponseBody builds the HTTP response body from the
// result of the "serveImage" endpoint of the "assets" service.
func NewServeImageInvalidResponseBody(res *goa.ServiceError) *ServeImageInvalidResponseBody {
	body := &ServeImageInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeImageInvariantViolationResponseBody builds the HTTP response body
// from the result of the "serveImage" endpoint of the "assets" service.
func NewServeImageInvariantViolationResponseBody(res *goa.ServiceError) *ServeImageInvariantViolationResponseBody {
	body := &ServeImageInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeImageUnexpectedResponseBody builds the HTTP response body from the
// result of the "serveImage" endpoint of the "assets" service.
func NewServeImageUnexpectedResponseBody(res *goa.ServiceError) *ServeImageUnexpectedResponseBody {
	body := &ServeImageUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeImageGatewayErrorResponseBody builds the HTTP response body from the
// result of the "serveImage" endpoint of the "assets" service.
func NewServeImageGatewayErrorResponseBody(res *goa.ServiceError) *ServeImageGatewayErrorResponseBody {
	body := &ServeImageGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageUnauthorizedResponseBody builds the HTTP response body from
// the result of the "uploadImage" endpoint of the "assets" service.
func NewUploadImageUnauthorizedResponseBody(res *goa.ServiceError) *UploadImageUnauthorizedResponseBody {
	body := &UploadImageUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageForbiddenResponseBody builds the HTTP response body from the
// result of the "uploadImage" endpoint of the "assets" service.
func NewUploadImageForbiddenResponseBody(res *goa.ServiceError) *UploadImageForbiddenResponseBody {
	body := &UploadImageForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageBadRequestResponseBody builds the HTTP response body from the
// result of the "uploadImage" endpoint of the "assets" service.
func NewUploadImageBadRequestResponseBody(res *goa.ServiceError) *UploadImageBadRequestResponseBody {
	body := &UploadImageBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageNotFoundResponseBody builds the HTTP response body from the
// result of the "uploadImage" endpoint of the "assets" service.
func NewUploadImageNotFoundResponseBody(res *goa.ServiceError) *UploadImageNotFoundResponseBody {
	body := &UploadImageNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageConflictResponseBody builds the HTTP response body from the
// result of the "uploadImage" endpoint of the "assets" service.
func NewUploadImageConflictResponseBody(res *goa.ServiceError) *UploadImageConflictResponseBody {
	body := &UploadImageConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "uploadImage" endpoint of the "assets" service.
func NewUploadImageUnsupportedMediaResponseBody(res *goa.ServiceError) *UploadImageUnsupportedMediaResponseBody {
	body := &UploadImageUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageInvalidResponseBody builds the HTTP response body from the
// result of the "uploadImage" endpoint of the "assets" service.
func NewUploadImageInvalidResponseBody(res *goa.ServiceError) *UploadImageInvalidResponseBody {
	body := &UploadImageInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageInvariantViolationResponseBody builds the HTTP response body
// from the result of the "uploadImage" endpoint of the "assets" service.
func NewUploadImageInvariantViolationResponseBody(res *goa.ServiceError) *UploadImageInvariantViolationResponseBody {
	body := &UploadImageInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageUnexpectedResponseBody builds the HTTP response body from the
// result of the "uploadImage" endpoint of the "assets" service.
func NewUploadImageUnexpectedResponseBody(res *goa.ServiceError) *UploadImageUnexpectedResponseBody {
	body := &UploadImageUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageGatewayErrorResponseBody builds the HTTP response body from
// the result of the "uploadImage" endpoint of the "assets" service.
func NewUploadImageGatewayErrorResponseBody(res *goa.ServiceError) *UploadImageGatewayErrorResponseBody {
	body := &UploadImageGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadFunctionsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "uploadFunctions" endpoint of the "assets" service.
func NewUploadFunctionsUnauthorizedResponseBody(res *goa.ServiceError) *UploadFunctionsUnauthorizedResponseBody {
	body := &UploadFunctionsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadFunctionsForbiddenResponseBody builds the HTTP response body from
// the result of the "uploadFunctions" endpoint of the "assets" service.
func NewUploadFunctionsForbiddenResponseBody(res *goa.ServiceError) *UploadFunctionsForbiddenResponseBody {
	body := &UploadFunctionsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadFunctionsBadRequestResponseBody builds the HTTP response body from
// the result of the "uploadFunctions" endpoint of the "assets" service.
func NewUploadFunctionsBadRequestResponseBody(res *goa.ServiceError) *UploadFunctionsBadRequestResponseBody {
	body := &UploadFunctionsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadFunctionsNotFoundResponseBody builds the HTTP response body from
// the result of the "uploadFunctions" endpoint of the "assets" service.
func NewUploadFunctionsNotFoundResponseBody(res *goa.ServiceError) *UploadFunctionsNotFoundResponseBody {
	body := &UploadFunctionsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadFunctionsConflictResponseBody builds the HTTP response body from
// the result of the "uploadFunctions" endpoint of the "assets" service.
func NewUploadFunctionsConflictResponseBody(res *goa.ServiceError) *UploadFunctionsConflictResponseBody {
	body := &UploadFunctionsConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadFunctionsUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "uploadFunctions" endpoint of the "assets" service.
func NewUploadFunctionsUnsupportedMediaResponseBody(res *goa.ServiceError) *UploadFunctionsUnsupportedMediaResponseBody {
	body := &UploadFunctionsUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadFunctionsInvalidResponseBody builds the HTTP response body from the
// result of the "uploadFunctions" endpoint of the "assets" service.
func NewUploadFunctionsInvalidResponseBody(res *goa.ServiceError) *UploadFunctionsInvalidResponseBody {
	body := &UploadFunctionsInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadFunctionsInvariantViolationResponseBody builds the HTTP response
// body from the result of the "uploadFunctions" endpoint of the "assets"
// service.
func NewUploadFunctionsInvariantViolationResponseBody(res *goa.ServiceError) *UploadFunctionsInvariantViolationResponseBody {
	body := &UploadFunctionsInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadFunctionsUnexpectedResponseBody builds the HTTP response body from
// the result of the "uploadFunctions" endpoint of the "assets" service.
func NewUploadFunctionsUnexpectedResponseBody(res *goa.ServiceError) *UploadFunctionsUnexpectedResponseBody {
	body := &UploadFunctionsUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadFunctionsGatewayErrorResponseBody builds the HTTP response body
// from the result of the "uploadFunctions" endpoint of the "assets" service.
func NewUploadFunctionsGatewayErrorResponseBody(res *goa.ServiceError) *UploadFunctionsGatewayErrorResponseBody {
	body := &UploadFunctionsGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadOpenAPIv3UnauthorizedResponseBody builds the HTTP response body
// from the result of the "uploadOpenAPIv3" endpoint of the "assets" service.
func NewUploadOpenAPIv3UnauthorizedResponseBody(res *goa.ServiceError) *UploadOpenAPIv3UnauthorizedResponseBody {
	body := &UploadOpenAPIv3UnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadOpenAPIv3ForbiddenResponseBody builds the HTTP response body from
// the result of the "uploadOpenAPIv3" endpoint of the "assets" service.
func NewUploadOpenAPIv3ForbiddenResponseBody(res *goa.ServiceError) *UploadOpenAPIv3ForbiddenResponseBody {
	body := &UploadOpenAPIv3ForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadOpenAPIv3BadRequestResponseBody builds the HTTP response body from
// the result of the "uploadOpenAPIv3" endpoint of the "assets" service.
func NewUploadOpenAPIv3BadRequestResponseBody(res *goa.ServiceError) *UploadOpenAPIv3BadRequestResponseBody {
	body := &UploadOpenAPIv3BadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadOpenAPIv3NotFoundResponseBody builds the HTTP response body from
// the result of the "uploadOpenAPIv3" endpoint of the "assets" service.
func NewUploadOpenAPIv3NotFoundResponseBody(res *goa.ServiceError) *UploadOpenAPIv3NotFoundResponseBody {
	body := &UploadOpenAPIv3NotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadOpenAPIv3ConflictResponseBody builds the HTTP response body from
// the result of the "uploadOpenAPIv3" endpoint of the "assets" service.
func NewUploadOpenAPIv3ConflictResponseBody(res *goa.ServiceError) *UploadOpenAPIv3ConflictResponseBody {
	body := &UploadOpenAPIv3ConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadOpenAPIv3UnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "uploadOpenAPIv3" endpoint of the "assets" service.
func NewUploadOpenAPIv3UnsupportedMediaResponseBody(res *goa.ServiceError) *UploadOpenAPIv3UnsupportedMediaResponseBody {
	body := &UploadOpenAPIv3UnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadOpenAPIv3InvalidResponseBody builds the HTTP response body from the
// result of the "uploadOpenAPIv3" endpoint of the "assets" service.
func NewUploadOpenAPIv3InvalidResponseBody(res *goa.ServiceError) *UploadOpenAPIv3InvalidResponseBody {
	body := &UploadOpenAPIv3InvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadOpenAPIv3InvariantViolationResponseBody builds the HTTP response
// body from the result of the "uploadOpenAPIv3" endpoint of the "assets"
// service.
func NewUploadOpenAPIv3InvariantViolationResponseBody(res *goa.ServiceError) *UploadOpenAPIv3InvariantViolationResponseBody {
	body := &UploadOpenAPIv3InvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadOpenAPIv3UnexpectedResponseBody builds the HTTP response body from
// the result of the "uploadOpenAPIv3" endpoint of the "assets" service.
func NewUploadOpenAPIv3UnexpectedResponseBody(res *goa.ServiceError) *UploadOpenAPIv3UnexpectedResponseBody {
	body := &UploadOpenAPIv3UnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadOpenAPIv3GatewayErrorResponseBody builds the HTTP response body
// from the result of the "uploadOpenAPIv3" endpoint of the "assets" service.
func NewUploadOpenAPIv3GatewayErrorResponseBody(res *goa.ServiceError) *UploadOpenAPIv3GatewayErrorResponseBody {
	body := &UploadOpenAPIv3GatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeOpenAPIv3UnauthorizedResponseBody builds the HTTP response body from
// the result of the "serveOpenAPIv3" endpoint of the "assets" service.
func NewServeOpenAPIv3UnauthorizedResponseBody(res *goa.ServiceError) *ServeOpenAPIv3UnauthorizedResponseBody {
	body := &ServeOpenAPIv3UnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeOpenAPIv3ForbiddenResponseBody builds the HTTP response body from
// the result of the "serveOpenAPIv3" endpoint of the "assets" service.
func NewServeOpenAPIv3ForbiddenResponseBody(res *goa.ServiceError) *ServeOpenAPIv3ForbiddenResponseBody {
	body := &ServeOpenAPIv3ForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeOpenAPIv3BadRequestResponseBody builds the HTTP response body from
// the result of the "serveOpenAPIv3" endpoint of the "assets" service.
func NewServeOpenAPIv3BadRequestResponseBody(res *goa.ServiceError) *ServeOpenAPIv3BadRequestResponseBody {
	body := &ServeOpenAPIv3BadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeOpenAPIv3NotFoundResponseBody builds the HTTP response body from the
// result of the "serveOpenAPIv3" endpoint of the "assets" service.
func NewServeOpenAPIv3NotFoundResponseBody(res *goa.ServiceError) *ServeOpenAPIv3NotFoundResponseBody {
	body := &ServeOpenAPIv3NotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeOpenAPIv3ConflictResponseBody builds the HTTP response body from the
// result of the "serveOpenAPIv3" endpoint of the "assets" service.
func NewServeOpenAPIv3ConflictResponseBody(res *goa.ServiceError) *ServeOpenAPIv3ConflictResponseBody {
	body := &ServeOpenAPIv3ConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeOpenAPIv3UnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "serveOpenAPIv3" endpoint of the "assets" service.
func NewServeOpenAPIv3UnsupportedMediaResponseBody(res *goa.ServiceError) *ServeOpenAPIv3UnsupportedMediaResponseBody {
	body := &ServeOpenAPIv3UnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeOpenAPIv3InvalidResponseBody builds the HTTP response body from the
// result of the "serveOpenAPIv3" endpoint of the "assets" service.
func NewServeOpenAPIv3InvalidResponseBody(res *goa.ServiceError) *ServeOpenAPIv3InvalidResponseBody {
	body := &ServeOpenAPIv3InvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeOpenAPIv3InvariantViolationResponseBody builds the HTTP response
// body from the result of the "serveOpenAPIv3" endpoint of the "assets"
// service.
func NewServeOpenAPIv3InvariantViolationResponseBody(res *goa.ServiceError) *ServeOpenAPIv3InvariantViolationResponseBody {
	body := &ServeOpenAPIv3InvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeOpenAPIv3UnexpectedResponseBody builds the HTTP response body from
// the result of the "serveOpenAPIv3" endpoint of the "assets" service.
func NewServeOpenAPIv3UnexpectedResponseBody(res *goa.ServiceError) *ServeOpenAPIv3UnexpectedResponseBody {
	body := &ServeOpenAPIv3UnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeOpenAPIv3GatewayErrorResponseBody builds the HTTP response body from
// the result of the "serveOpenAPIv3" endpoint of the "assets" service.
func NewServeOpenAPIv3GatewayErrorResponseBody(res *goa.ServiceError) *ServeOpenAPIv3GatewayErrorResponseBody {
	body := &ServeOpenAPIv3GatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAssetsUnauthorizedResponseBody builds the HTTP response body from the
// result of the "listAssets" endpoint of the "assets" service.
func NewListAssetsUnauthorizedResponseBody(res *goa.ServiceError) *ListAssetsUnauthorizedResponseBody {
	body := &ListAssetsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAssetsForbiddenResponseBody builds the HTTP response body from the
// result of the "listAssets" endpoint of the "assets" service.
func NewListAssetsForbiddenResponseBody(res *goa.ServiceError) *ListAssetsForbiddenResponseBody {
	body := &ListAssetsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAssetsBadRequestResponseBody builds the HTTP response body from the
// result of the "listAssets" endpoint of the "assets" service.
func NewListAssetsBadRequestResponseBody(res *goa.ServiceError) *ListAssetsBadRequestResponseBody {
	body := &ListAssetsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAssetsNotFoundResponseBody builds the HTTP response body from the
// result of the "listAssets" endpoint of the "assets" service.
func NewListAssetsNotFoundResponseBody(res *goa.ServiceError) *ListAssetsNotFoundResponseBody {
	body := &ListAssetsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAssetsConflictResponseBody builds the HTTP response body from the
// result of the "listAssets" endpoint of the "assets" service.
func NewListAssetsConflictResponseBody(res *goa.ServiceError) *ListAssetsConflictResponseBody {
	body := &ListAssetsConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAssetsUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "listAssets" endpoint of the "assets" service.
func NewListAssetsUnsupportedMediaResponseBody(res *goa.ServiceError) *ListAssetsUnsupportedMediaResponseBody {
	body := &ListAssetsUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAssetsInvalidResponseBody builds the HTTP response body from the
// result of the "listAssets" endpoint of the "assets" service.
func NewListAssetsInvalidResponseBody(res *goa.ServiceError) *ListAssetsInvalidResponseBody {
	body := &ListAssetsInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAssetsInvariantViolationResponseBody builds the HTTP response body
// from the result of the "listAssets" endpoint of the "assets" service.
func NewListAssetsInvariantViolationResponseBody(res *goa.ServiceError) *ListAssetsInvariantViolationResponseBody {
	body := &ListAssetsInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAssetsUnexpectedResponseBody builds the HTTP response body from the
// result of the "listAssets" endpoint of the "assets" service.
func NewListAssetsUnexpectedResponseBody(res *goa.ServiceError) *ListAssetsUnexpectedResponseBody {
	body := &ListAssetsUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAssetsGatewayErrorResponseBody builds the HTTP response body from the
// result of the "listAssets" endpoint of the "assets" service.
func NewListAssetsGatewayErrorResponseBody(res *goa.ServiceError) *ListAssetsGatewayErrorResponseBody {
	body := &ListAssetsGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeImageForm builds a assets service serveImage endpoint payload.
func NewServeImageForm(id string, sessionToken *string, apikeyToken *string) *assets.ServeImageForm {
	v := &assets.ServeImageForm{}
	v.ID = id
	v.SessionToken = sessionToken
	v.ApikeyToken = apikeyToken

	return v
}

// NewUploadImageForm builds a assets service uploadImage endpoint payload.
func NewUploadImageForm(contentType string, contentLength int64, apikeyToken *string, projectSlugInput *string, sessionToken *string) *assets.UploadImageForm {
	v := &assets.UploadImageForm{}
	v.ContentType = contentType
	v.ContentLength = contentLength
	v.ApikeyToken = apikeyToken
	v.ProjectSlugInput = projectSlugInput
	v.SessionToken = sessionToken

	return v
}

// NewUploadFunctionsForm builds a assets service uploadFunctions endpoint
// payload.
func NewUploadFunctionsForm(contentType string, contentLength int64, apikeyToken *string, projectSlugInput *string, sessionToken *string) *assets.UploadFunctionsForm {
	v := &assets.UploadFunctionsForm{}
	v.ContentType = contentType
	v.ContentLength = contentLength
	v.ApikeyToken = apikeyToken
	v.ProjectSlugInput = projectSlugInput
	v.SessionToken = sessionToken

	return v
}

// NewUploadOpenAPIv3Form builds a assets service uploadOpenAPIv3 endpoint
// payload.
func NewUploadOpenAPIv3Form(contentType string, contentLength int64, apikeyToken *string, projectSlugInput *string, sessionToken *string) *assets.UploadOpenAPIv3Form {
	v := &assets.UploadOpenAPIv3Form{}
	v.ContentType = contentType
	v.ContentLength = contentLength
	v.ApikeyToken = apikeyToken
	v.ProjectSlugInput = projectSlugInput
	v.SessionToken = sessionToken

	return v
}

// NewServeOpenAPIv3Form builds a assets service serveOpenAPIv3 endpoint
// payload.
func NewServeOpenAPIv3Form(id string, projectID string, apikeyToken *string, sessionToken *string) *assets.ServeOpenAPIv3Form {
	v := &assets.ServeOpenAPIv3Form{}
	v.ID = id
	v.ProjectID = projectID
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken

	return v
}

// NewListAssetsPayload builds a assets service listAssets endpoint payload.
func NewListAssetsPayload(sessionToken *string, projectSlugInput *string, apikeyToken *string) *assets.ListAssetsPayload {
	v := &assets.ListAssetsPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput
	v.ApikeyToken = apikeyToken

	return v
}
