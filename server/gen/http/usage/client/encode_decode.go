// Code generated by goa v3.21.5, DO NOT EDIT.
//
// usage HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	usage "github.com/speakeasy-api/gram/server/gen/usage"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetPeriodUsageRequest instantiates a HTTP request object with method
// and path set to call the "usage" service "getPeriodUsage" endpoint
func (c *Client) BuildGetPeriodUsageRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetPeriodUsageUsagePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("usage", "getPeriodUsage", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetPeriodUsageRequest returns an encoder for requests sent to the
// usage getPeriodUsage server.
func EncodeGetPeriodUsageRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*usage.GetPeriodUsagePayload)
		if !ok {
			return goahttp.ErrInvalidType("usage", "getPeriodUsage", "*usage.GetPeriodUsagePayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		return nil
	}
}

// DecodeGetPeriodUsageResponse returns a decoder for responses returned by the
// usage getPeriodUsage endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetPeriodUsageResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeGetPeriodUsageResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetPeriodUsageResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("usage", "getPeriodUsage", err)
			}
			err = ValidateGetPeriodUsageResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("usage", "getPeriodUsage", err)
			}
			res := NewGetPeriodUsagePeriodUsageOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetPeriodUsageUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("usage", "getPeriodUsage", err)
			}
			err = ValidateGetPeriodUsageUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("usage", "getPeriodUsage", err)
			}
			return nil, NewGetPeriodUsageUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetPeriodUsageForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("usage", "getPeriodUsage", err)
			}
			err = ValidateGetPeriodUsageForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("usage", "getPeriodUsage", err)
			}
			return nil, NewGetPeriodUsageForbidden(&body)
		case http.StatusBadRequest:
			var (
				body GetPeriodUsageBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("usage", "getPeriodUsage", err)
			}
			err = ValidateGetPeriodUsageBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("usage", "getPeriodUsage", err)
			}
			return nil, NewGetPeriodUsageBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetPeriodUsageNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("usage", "getPeriodUsage", err)
			}
			err = ValidateGetPeriodUsageNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("usage", "getPeriodUsage", err)
			}
			return nil, NewGetPeriodUsageNotFound(&body)
		case http.StatusConflict:
			var (
				body GetPeriodUsageConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("usage", "getPeriodUsage", err)
			}
			err = ValidateGetPeriodUsageConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("usage", "getPeriodUsage", err)
			}
			return nil, NewGetPeriodUsageConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body GetPeriodUsageUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("usage", "getPeriodUsage", err)
			}
			err = ValidateGetPeriodUsageUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("usage", "getPeriodUsage", err)
			}
			return nil, NewGetPeriodUsageUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body GetPeriodUsageInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("usage", "getPeriodUsage", err)
			}
			err = ValidateGetPeriodUsageInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("usage", "getPeriodUsage", err)
			}
			return nil, NewGetPeriodUsageInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body GetPeriodUsageInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("usage", "getPeriodUsage", err)
				}
				err = ValidateGetPeriodUsageInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("usage", "getPeriodUsage", err)
				}
				return nil, NewGetPeriodUsageInvariantViolation(&body)
			case "unexpected":
				var (
					body GetPeriodUsageUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("usage", "getPeriodUsage", err)
				}
				err = ValidateGetPeriodUsageUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("usage", "getPeriodUsage", err)
				}
				return nil, NewGetPeriodUsageUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("usage", "getPeriodUsage", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body GetPeriodUsageGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("usage", "getPeriodUsage", err)
			}
			err = ValidateGetPeriodUsageGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("usage", "getPeriodUsage", err)
			}
			return nil, NewGetPeriodUsageGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("usage", "getPeriodUsage", resp.StatusCode, string(body))
		}
	}
}
