// Code generated by goa v3.22.2, DO NOT EDIT.
//
// usage client HTTP transport
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the usage service endpoint HTTP clients.
type Client struct {
	// GetPeriodUsage Doer is the HTTP client used to make requests to the
	// getPeriodUsage endpoint.
	GetPeriodUsageDoer goahttp.Doer

	// GetUsageTiers Doer is the HTTP client used to make requests to the
	// getUsageTiers endpoint.
	GetUsageTiersDoer goahttp.Doer

	// CreateCustomerSession Doer is the HTTP client used to make requests to the
	// createCustomerSession endpoint.
	CreateCustomerSessionDoer goahttp.Doer

	// CreateCheckout Doer is the HTTP client used to make requests to the
	// createCheckout endpoint.
	CreateCheckoutDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the usage service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GetPeriodUsageDoer:        doer,
		GetUsageTiersDoer:         doer,
		CreateCustomerSessionDoer: doer,
		CreateCheckoutDoer:        doer,
		RestoreResponseBody:       restoreBody,
		scheme:                    scheme,
		host:                      host,
		decoder:                   dec,
		encoder:                   enc,
	}
}

// GetPeriodUsage returns an endpoint that makes HTTP requests to the usage
// service getPeriodUsage server.
func (c *Client) GetPeriodUsage() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetPeriodUsageRequest(c.encoder)
		decodeResponse = DecodeGetPeriodUsageResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetPeriodUsageRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetPeriodUsageDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("usage", "getPeriodUsage", err)
		}
		return decodeResponse(resp)
	}
}

// GetUsageTiers returns an endpoint that makes HTTP requests to the usage
// service getUsageTiers server.
func (c *Client) GetUsageTiers() goa.Endpoint {
	var (
		decodeResponse = DecodeGetUsageTiersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetUsageTiersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetUsageTiersDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("usage", "getUsageTiers", err)
		}
		return decodeResponse(resp)
	}
}

// CreateCustomerSession returns an endpoint that makes HTTP requests to the
// usage service createCustomerSession server.
func (c *Client) CreateCustomerSession() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateCustomerSessionRequest(c.encoder)
		decodeResponse = DecodeCreateCustomerSessionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateCustomerSessionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCustomerSessionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("usage", "createCustomerSession", err)
		}
		return decodeResponse(resp)
	}
}

// CreateCheckout returns an endpoint that makes HTTP requests to the usage
// service createCheckout server.
func (c *Client) CreateCheckout() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateCheckoutRequest(c.encoder)
		decodeResponse = DecodeCreateCheckoutResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateCheckoutRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCheckoutDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("usage", "createCheckout", err)
		}
		return decodeResponse(resp)
	}
}
