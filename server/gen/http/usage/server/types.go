// Code generated by goa v3.21.5, DO NOT EDIT.
//
// usage HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	usage "github.com/speakeasy-api/gram/server/gen/usage"
	goa "goa.design/goa/v3/pkg"
)

// GetPeriodUsageResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body.
type GetPeriodUsageResponseBody struct {
	// The number of tool calls used
	ToolCalls int `form:"tool_calls" json:"tool_calls" xml:"tool_calls"`
	// The maximum number of tool calls allowed
	MaxToolCalls int `form:"max_tool_calls" json:"max_tool_calls" xml:"max_tool_calls"`
	// The number of servers used
	Servers int `form:"servers" json:"servers" xml:"servers"`
	// The maximum number of servers allowed
	MaxServers int `form:"max_servers" json:"max_servers" xml:"max_servers"`
}

// GetPeriodUsageUnauthorizedResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "unauthorized" error.
type GetPeriodUsageUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageForbiddenResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "forbidden" error.
type GetPeriodUsageForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageBadRequestResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "bad_request" error.
type GetPeriodUsageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageNotFoundResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "not_found" error.
type GetPeriodUsageNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageConflictResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "conflict" error.
type GetPeriodUsageConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageUnsupportedMediaResponseBody is the type of the "usage"
// service "getPeriodUsage" endpoint HTTP response body for the
// "unsupported_media" error.
type GetPeriodUsageUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageInvalidResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "invalid" error.
type GetPeriodUsageInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageInvariantViolationResponseBody is the type of the "usage"
// service "getPeriodUsage" endpoint HTTP response body for the
// "invariant_violation" error.
type GetPeriodUsageInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageUnexpectedResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "unexpected" error.
type GetPeriodUsageUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageGatewayErrorResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "gateway_error" error.
type GetPeriodUsageGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewGetPeriodUsageResponseBody builds the HTTP response body from the result
// of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageResponseBody(res *usage.PeriodUsage) *GetPeriodUsageResponseBody {
	body := &GetPeriodUsageResponseBody{
		ToolCalls:    res.ToolCalls,
		MaxToolCalls: res.MaxToolCalls,
		Servers:      res.Servers,
		MaxServers:   res.MaxServers,
	}
	return body
}

// NewGetPeriodUsageUnauthorizedResponseBody builds the HTTP response body from
// the result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageUnauthorizedResponseBody(res *goa.ServiceError) *GetPeriodUsageUnauthorizedResponseBody {
	body := &GetPeriodUsageUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageForbiddenResponseBody builds the HTTP response body from
// the result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageForbiddenResponseBody(res *goa.ServiceError) *GetPeriodUsageForbiddenResponseBody {
	body := &GetPeriodUsageForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageBadRequestResponseBody builds the HTTP response body from
// the result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageBadRequestResponseBody(res *goa.ServiceError) *GetPeriodUsageBadRequestResponseBody {
	body := &GetPeriodUsageBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageNotFoundResponseBody builds the HTTP response body from the
// result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageNotFoundResponseBody(res *goa.ServiceError) *GetPeriodUsageNotFoundResponseBody {
	body := &GetPeriodUsageNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageConflictResponseBody builds the HTTP response body from the
// result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageConflictResponseBody(res *goa.ServiceError) *GetPeriodUsageConflictResponseBody {
	body := &GetPeriodUsageConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageUnsupportedMediaResponseBody(res *goa.ServiceError) *GetPeriodUsageUnsupportedMediaResponseBody {
	body := &GetPeriodUsageUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageInvalidResponseBody builds the HTTP response body from the
// result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageInvalidResponseBody(res *goa.ServiceError) *GetPeriodUsageInvalidResponseBody {
	body := &GetPeriodUsageInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageInvariantViolationResponseBody builds the HTTP response
// body from the result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageInvariantViolationResponseBody(res *goa.ServiceError) *GetPeriodUsageInvariantViolationResponseBody {
	body := &GetPeriodUsageInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageUnexpectedResponseBody builds the HTTP response body from
// the result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageUnexpectedResponseBody(res *goa.ServiceError) *GetPeriodUsageUnexpectedResponseBody {
	body := &GetPeriodUsageUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageGatewayErrorResponseBody builds the HTTP response body from
// the result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageGatewayErrorResponseBody(res *goa.ServiceError) *GetPeriodUsageGatewayErrorResponseBody {
	body := &GetPeriodUsageGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsagePayload builds a usage service getPeriodUsage endpoint
// payload.
func NewGetPeriodUsagePayload(sessionToken *string, projectSlugInput *string) *usage.GetPeriodUsagePayload {
	v := &usage.GetPeriodUsagePayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}
