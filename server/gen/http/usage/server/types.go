// Code generated by goa v3.22.2, DO NOT EDIT.
//
// usage HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	usage "github.com/speakeasy-api/gram/server/gen/usage"
	goa "goa.design/goa/v3/pkg"
)

// GetPeriodUsageResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body.
type GetPeriodUsageResponseBody struct {
	// The number of tool calls used
	ToolCalls int `form:"tool_calls" json:"tool_calls" xml:"tool_calls"`
	// The maximum number of tool calls allowed
	MaxToolCalls int `form:"max_tool_calls" json:"max_tool_calls" xml:"max_tool_calls"`
	// The number of servers used, according to the Polar meter
	Servers int `form:"servers" json:"servers" xml:"servers"`
	// The maximum number of servers allowed
	MaxServers int `form:"max_servers" json:"max_servers" xml:"max_servers"`
	// The number of servers enabled at the time of the request
	ActualEnabledServerCount int `form:"actual_enabled_server_count" json:"actual_enabled_server_count" xml:"actual_enabled_server_count"`
}

// GetUsageTiersResponseBody is the type of the "usage" service "getUsageTiers"
// endpoint HTTP response body.
type GetUsageTiersResponseBody struct {
	// The limits for the free tier
	Free *TierLimitsResponseBody `form:"free" json:"free" xml:"free"`
	// The limits for the pro tier
	Pro *TierLimitsResponseBody `form:"pro" json:"pro" xml:"pro"`
	// The limits for the enterprise tier
	Enterprise *TierLimitsResponseBody `form:"enterprise" json:"enterprise" xml:"enterprise"`
}

// GetPeriodUsageUnauthorizedResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "unauthorized" error.
type GetPeriodUsageUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageForbiddenResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "forbidden" error.
type GetPeriodUsageForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageBadRequestResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "bad_request" error.
type GetPeriodUsageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageNotFoundResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "not_found" error.
type GetPeriodUsageNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageConflictResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "conflict" error.
type GetPeriodUsageConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageUnsupportedMediaResponseBody is the type of the "usage"
// service "getPeriodUsage" endpoint HTTP response body for the
// "unsupported_media" error.
type GetPeriodUsageUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageInvalidResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "invalid" error.
type GetPeriodUsageInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageInvariantViolationResponseBody is the type of the "usage"
// service "getPeriodUsage" endpoint HTTP response body for the
// "invariant_violation" error.
type GetPeriodUsageInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageUnexpectedResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "unexpected" error.
type GetPeriodUsageUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPeriodUsageGatewayErrorResponseBody is the type of the "usage" service
// "getPeriodUsage" endpoint HTTP response body for the "gateway_error" error.
type GetPeriodUsageGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsageTiersUnauthorizedResponseBody is the type of the "usage" service
// "getUsageTiers" endpoint HTTP response body for the "unauthorized" error.
type GetUsageTiersUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsageTiersForbiddenResponseBody is the type of the "usage" service
// "getUsageTiers" endpoint HTTP response body for the "forbidden" error.
type GetUsageTiersForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsageTiersBadRequestResponseBody is the type of the "usage" service
// "getUsageTiers" endpoint HTTP response body for the "bad_request" error.
type GetUsageTiersBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsageTiersNotFoundResponseBody is the type of the "usage" service
// "getUsageTiers" endpoint HTTP response body for the "not_found" error.
type GetUsageTiersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsageTiersConflictResponseBody is the type of the "usage" service
// "getUsageTiers" endpoint HTTP response body for the "conflict" error.
type GetUsageTiersConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsageTiersUnsupportedMediaResponseBody is the type of the "usage" service
// "getUsageTiers" endpoint HTTP response body for the "unsupported_media"
// error.
type GetUsageTiersUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsageTiersInvalidResponseBody is the type of the "usage" service
// "getUsageTiers" endpoint HTTP response body for the "invalid" error.
type GetUsageTiersInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsageTiersInvariantViolationResponseBody is the type of the "usage"
// service "getUsageTiers" endpoint HTTP response body for the
// "invariant_violation" error.
type GetUsageTiersInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsageTiersUnexpectedResponseBody is the type of the "usage" service
// "getUsageTiers" endpoint HTTP response body for the "unexpected" error.
type GetUsageTiersUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsageTiersGatewayErrorResponseBody is the type of the "usage" service
// "getUsageTiers" endpoint HTTP response body for the "gateway_error" error.
type GetUsageTiersGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerSessionUnauthorizedResponseBody is the type of the "usage"
// service "createCustomerSession" endpoint HTTP response body for the
// "unauthorized" error.
type CreateCustomerSessionUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerSessionForbiddenResponseBody is the type of the "usage"
// service "createCustomerSession" endpoint HTTP response body for the
// "forbidden" error.
type CreateCustomerSessionForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerSessionBadRequestResponseBody is the type of the "usage"
// service "createCustomerSession" endpoint HTTP response body for the
// "bad_request" error.
type CreateCustomerSessionBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerSessionNotFoundResponseBody is the type of the "usage" service
// "createCustomerSession" endpoint HTTP response body for the "not_found"
// error.
type CreateCustomerSessionNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerSessionConflictResponseBody is the type of the "usage" service
// "createCustomerSession" endpoint HTTP response body for the "conflict" error.
type CreateCustomerSessionConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerSessionUnsupportedMediaResponseBody is the type of the "usage"
// service "createCustomerSession" endpoint HTTP response body for the
// "unsupported_media" error.
type CreateCustomerSessionUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerSessionInvalidResponseBody is the type of the "usage" service
// "createCustomerSession" endpoint HTTP response body for the "invalid" error.
type CreateCustomerSessionInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerSessionInvariantViolationResponseBody is the type of the
// "usage" service "createCustomerSession" endpoint HTTP response body for the
// "invariant_violation" error.
type CreateCustomerSessionInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerSessionUnexpectedResponseBody is the type of the "usage"
// service "createCustomerSession" endpoint HTTP response body for the
// "unexpected" error.
type CreateCustomerSessionUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerSessionGatewayErrorResponseBody is the type of the "usage"
// service "createCustomerSession" endpoint HTTP response body for the
// "gateway_error" error.
type CreateCustomerSessionGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCheckoutUnauthorizedResponseBody is the type of the "usage" service
// "createCheckout" endpoint HTTP response body for the "unauthorized" error.
type CreateCheckoutUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCheckoutForbiddenResponseBody is the type of the "usage" service
// "createCheckout" endpoint HTTP response body for the "forbidden" error.
type CreateCheckoutForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCheckoutBadRequestResponseBody is the type of the "usage" service
// "createCheckout" endpoint HTTP response body for the "bad_request" error.
type CreateCheckoutBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCheckoutNotFoundResponseBody is the type of the "usage" service
// "createCheckout" endpoint HTTP response body for the "not_found" error.
type CreateCheckoutNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCheckoutConflictResponseBody is the type of the "usage" service
// "createCheckout" endpoint HTTP response body for the "conflict" error.
type CreateCheckoutConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCheckoutUnsupportedMediaResponseBody is the type of the "usage"
// service "createCheckout" endpoint HTTP response body for the
// "unsupported_media" error.
type CreateCheckoutUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCheckoutInvalidResponseBody is the type of the "usage" service
// "createCheckout" endpoint HTTP response body for the "invalid" error.
type CreateCheckoutInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCheckoutInvariantViolationResponseBody is the type of the "usage"
// service "createCheckout" endpoint HTTP response body for the
// "invariant_violation" error.
type CreateCheckoutInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCheckoutUnexpectedResponseBody is the type of the "usage" service
// "createCheckout" endpoint HTTP response body for the "unexpected" error.
type CreateCheckoutUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCheckoutGatewayErrorResponseBody is the type of the "usage" service
// "createCheckout" endpoint HTTP response body for the "gateway_error" error.
type CreateCheckoutGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// TierLimitsResponseBody is used to define fields on response body types.
type TierLimitsResponseBody struct {
	// The base price for the tier
	BasePrice float64 `form:"base_price" json:"base_price" xml:"base_price"`
	// The number of tool calls included in the tier
	IncludedToolCalls int `form:"included_tool_calls" json:"included_tool_calls" xml:"included_tool_calls"`
	// The number of servers included in the tier
	IncludedServers int `form:"included_servers" json:"included_servers" xml:"included_servers"`
	// The number of credits included in the tier for playground and other
	// dashboard activities
	IncludedCredits int `form:"included_credits" json:"included_credits" xml:"included_credits"`
	// The price per additional tool call
	PricePerAdditionalToolCall float64 `form:"price_per_additional_tool_call" json:"price_per_additional_tool_call" xml:"price_per_additional_tool_call"`
	// The price per additional server
	PricePerAdditionalServer float64 `form:"price_per_additional_server" json:"price_per_additional_server" xml:"price_per_additional_server"`
	// The price per additional credit
	PricePerAdditionalCredit float64 `form:"price_per_additional_credit" json:"price_per_additional_credit" xml:"price_per_additional_credit"`
	// Key feature bullets of the tier
	FeatureBullets []string `form:"feature_bullets" json:"feature_bullets" xml:"feature_bullets"`
	// Included items bullets of the tier
	IncludedBullets []string `form:"included_bullets" json:"included_bullets" xml:"included_bullets"`
	// Add-on items bullets of the tier (optional)
	AddOnBullets []string `form:"add_on_bullets,omitempty" json:"add_on_bullets,omitempty" xml:"add_on_bullets,omitempty"`
}

// NewGetPeriodUsageResponseBody builds the HTTP response body from the result
// of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageResponseBody(res *usage.PeriodUsage) *GetPeriodUsageResponseBody {
	body := &GetPeriodUsageResponseBody{
		ToolCalls:                res.ToolCalls,
		MaxToolCalls:             res.MaxToolCalls,
		Servers:                  res.Servers,
		MaxServers:               res.MaxServers,
		ActualEnabledServerCount: res.ActualEnabledServerCount,
	}
	return body
}

// NewGetUsageTiersResponseBody builds the HTTP response body from the result
// of the "getUsageTiers" endpoint of the "usage" service.
func NewGetUsageTiersResponseBody(res *usage.UsageTiers) *GetUsageTiersResponseBody {
	body := &GetUsageTiersResponseBody{}
	if res.Free != nil {
		body.Free = marshalUsageTierLimitsToTierLimitsResponseBody(res.Free)
	}
	if res.Pro != nil {
		body.Pro = marshalUsageTierLimitsToTierLimitsResponseBody(res.Pro)
	}
	if res.Enterprise != nil {
		body.Enterprise = marshalUsageTierLimitsToTierLimitsResponseBody(res.Enterprise)
	}
	return body
}

// NewGetPeriodUsageUnauthorizedResponseBody builds the HTTP response body from
// the result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageUnauthorizedResponseBody(res *goa.ServiceError) *GetPeriodUsageUnauthorizedResponseBody {
	body := &GetPeriodUsageUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageForbiddenResponseBody builds the HTTP response body from
// the result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageForbiddenResponseBody(res *goa.ServiceError) *GetPeriodUsageForbiddenResponseBody {
	body := &GetPeriodUsageForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageBadRequestResponseBody builds the HTTP response body from
// the result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageBadRequestResponseBody(res *goa.ServiceError) *GetPeriodUsageBadRequestResponseBody {
	body := &GetPeriodUsageBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageNotFoundResponseBody builds the HTTP response body from the
// result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageNotFoundResponseBody(res *goa.ServiceError) *GetPeriodUsageNotFoundResponseBody {
	body := &GetPeriodUsageNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageConflictResponseBody builds the HTTP response body from the
// result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageConflictResponseBody(res *goa.ServiceError) *GetPeriodUsageConflictResponseBody {
	body := &GetPeriodUsageConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageUnsupportedMediaResponseBody(res *goa.ServiceError) *GetPeriodUsageUnsupportedMediaResponseBody {
	body := &GetPeriodUsageUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageInvalidResponseBody builds the HTTP response body from the
// result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageInvalidResponseBody(res *goa.ServiceError) *GetPeriodUsageInvalidResponseBody {
	body := &GetPeriodUsageInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageInvariantViolationResponseBody builds the HTTP response
// body from the result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageInvariantViolationResponseBody(res *goa.ServiceError) *GetPeriodUsageInvariantViolationResponseBody {
	body := &GetPeriodUsageInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageUnexpectedResponseBody builds the HTTP response body from
// the result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageUnexpectedResponseBody(res *goa.ServiceError) *GetPeriodUsageUnexpectedResponseBody {
	body := &GetPeriodUsageUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsageGatewayErrorResponseBody builds the HTTP response body from
// the result of the "getPeriodUsage" endpoint of the "usage" service.
func NewGetPeriodUsageGatewayErrorResponseBody(res *goa.ServiceError) *GetPeriodUsageGatewayErrorResponseBody {
	body := &GetPeriodUsageGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsageTiersUnauthorizedResponseBody builds the HTTP response body from
// the result of the "getUsageTiers" endpoint of the "usage" service.
func NewGetUsageTiersUnauthorizedResponseBody(res *goa.ServiceError) *GetUsageTiersUnauthorizedResponseBody {
	body := &GetUsageTiersUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsageTiersForbiddenResponseBody builds the HTTP response body from the
// result of the "getUsageTiers" endpoint of the "usage" service.
func NewGetUsageTiersForbiddenResponseBody(res *goa.ServiceError) *GetUsageTiersForbiddenResponseBody {
	body := &GetUsageTiersForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsageTiersBadRequestResponseBody builds the HTTP response body from
// the result of the "getUsageTiers" endpoint of the "usage" service.
func NewGetUsageTiersBadRequestResponseBody(res *goa.ServiceError) *GetUsageTiersBadRequestResponseBody {
	body := &GetUsageTiersBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsageTiersNotFoundResponseBody builds the HTTP response body from the
// result of the "getUsageTiers" endpoint of the "usage" service.
func NewGetUsageTiersNotFoundResponseBody(res *goa.ServiceError) *GetUsageTiersNotFoundResponseBody {
	body := &GetUsageTiersNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsageTiersConflictResponseBody builds the HTTP response body from the
// result of the "getUsageTiers" endpoint of the "usage" service.
func NewGetUsageTiersConflictResponseBody(res *goa.ServiceError) *GetUsageTiersConflictResponseBody {
	body := &GetUsageTiersConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsageTiersUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "getUsageTiers" endpoint of the "usage" service.
func NewGetUsageTiersUnsupportedMediaResponseBody(res *goa.ServiceError) *GetUsageTiersUnsupportedMediaResponseBody {
	body := &GetUsageTiersUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsageTiersInvalidResponseBody builds the HTTP response body from the
// result of the "getUsageTiers" endpoint of the "usage" service.
func NewGetUsageTiersInvalidResponseBody(res *goa.ServiceError) *GetUsageTiersInvalidResponseBody {
	body := &GetUsageTiersInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsageTiersInvariantViolationResponseBody builds the HTTP response body
// from the result of the "getUsageTiers" endpoint of the "usage" service.
func NewGetUsageTiersInvariantViolationResponseBody(res *goa.ServiceError) *GetUsageTiersInvariantViolationResponseBody {
	body := &GetUsageTiersInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsageTiersUnexpectedResponseBody builds the HTTP response body from
// the result of the "getUsageTiers" endpoint of the "usage" service.
func NewGetUsageTiersUnexpectedResponseBody(res *goa.ServiceError) *GetUsageTiersUnexpectedResponseBody {
	body := &GetUsageTiersUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsageTiersGatewayErrorResponseBody builds the HTTP response body from
// the result of the "getUsageTiers" endpoint of the "usage" service.
func NewGetUsageTiersGatewayErrorResponseBody(res *goa.ServiceError) *GetUsageTiersGatewayErrorResponseBody {
	body := &GetUsageTiersGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerSessionUnauthorizedResponseBody builds the HTTP response
// body from the result of the "createCustomerSession" endpoint of the "usage"
// service.
func NewCreateCustomerSessionUnauthorizedResponseBody(res *goa.ServiceError) *CreateCustomerSessionUnauthorizedResponseBody {
	body := &CreateCustomerSessionUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerSessionForbiddenResponseBody builds the HTTP response body
// from the result of the "createCustomerSession" endpoint of the "usage"
// service.
func NewCreateCustomerSessionForbiddenResponseBody(res *goa.ServiceError) *CreateCustomerSessionForbiddenResponseBody {
	body := &CreateCustomerSessionForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerSessionBadRequestResponseBody builds the HTTP response body
// from the result of the "createCustomerSession" endpoint of the "usage"
// service.
func NewCreateCustomerSessionBadRequestResponseBody(res *goa.ServiceError) *CreateCustomerSessionBadRequestResponseBody {
	body := &CreateCustomerSessionBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerSessionNotFoundResponseBody builds the HTTP response body
// from the result of the "createCustomerSession" endpoint of the "usage"
// service.
func NewCreateCustomerSessionNotFoundResponseBody(res *goa.ServiceError) *CreateCustomerSessionNotFoundResponseBody {
	body := &CreateCustomerSessionNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerSessionConflictResponseBody builds the HTTP response body
// from the result of the "createCustomerSession" endpoint of the "usage"
// service.
func NewCreateCustomerSessionConflictResponseBody(res *goa.ServiceError) *CreateCustomerSessionConflictResponseBody {
	body := &CreateCustomerSessionConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerSessionUnsupportedMediaResponseBody builds the HTTP
// response body from the result of the "createCustomerSession" endpoint of the
// "usage" service.
func NewCreateCustomerSessionUnsupportedMediaResponseBody(res *goa.ServiceError) *CreateCustomerSessionUnsupportedMediaResponseBody {
	body := &CreateCustomerSessionUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerSessionInvalidResponseBody builds the HTTP response body
// from the result of the "createCustomerSession" endpoint of the "usage"
// service.
func NewCreateCustomerSessionInvalidResponseBody(res *goa.ServiceError) *CreateCustomerSessionInvalidResponseBody {
	body := &CreateCustomerSessionInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerSessionInvariantViolationResponseBody builds the HTTP
// response body from the result of the "createCustomerSession" endpoint of the
// "usage" service.
func NewCreateCustomerSessionInvariantViolationResponseBody(res *goa.ServiceError) *CreateCustomerSessionInvariantViolationResponseBody {
	body := &CreateCustomerSessionInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerSessionUnexpectedResponseBody builds the HTTP response body
// from the result of the "createCustomerSession" endpoint of the "usage"
// service.
func NewCreateCustomerSessionUnexpectedResponseBody(res *goa.ServiceError) *CreateCustomerSessionUnexpectedResponseBody {
	body := &CreateCustomerSessionUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerSessionGatewayErrorResponseBody builds the HTTP response
// body from the result of the "createCustomerSession" endpoint of the "usage"
// service.
func NewCreateCustomerSessionGatewayErrorResponseBody(res *goa.ServiceError) *CreateCustomerSessionGatewayErrorResponseBody {
	body := &CreateCustomerSessionGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCheckoutUnauthorizedResponseBody builds the HTTP response body from
// the result of the "createCheckout" endpoint of the "usage" service.
func NewCreateCheckoutUnauthorizedResponseBody(res *goa.ServiceError) *CreateCheckoutUnauthorizedResponseBody {
	body := &CreateCheckoutUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCheckoutForbiddenResponseBody builds the HTTP response body from
// the result of the "createCheckout" endpoint of the "usage" service.
func NewCreateCheckoutForbiddenResponseBody(res *goa.ServiceError) *CreateCheckoutForbiddenResponseBody {
	body := &CreateCheckoutForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCheckoutBadRequestResponseBody builds the HTTP response body from
// the result of the "createCheckout" endpoint of the "usage" service.
func NewCreateCheckoutBadRequestResponseBody(res *goa.ServiceError) *CreateCheckoutBadRequestResponseBody {
	body := &CreateCheckoutBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCheckoutNotFoundResponseBody builds the HTTP response body from the
// result of the "createCheckout" endpoint of the "usage" service.
func NewCreateCheckoutNotFoundResponseBody(res *goa.ServiceError) *CreateCheckoutNotFoundResponseBody {
	body := &CreateCheckoutNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCheckoutConflictResponseBody builds the HTTP response body from the
// result of the "createCheckout" endpoint of the "usage" service.
func NewCreateCheckoutConflictResponseBody(res *goa.ServiceError) *CreateCheckoutConflictResponseBody {
	body := &CreateCheckoutConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCheckoutUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "createCheckout" endpoint of the "usage" service.
func NewCreateCheckoutUnsupportedMediaResponseBody(res *goa.ServiceError) *CreateCheckoutUnsupportedMediaResponseBody {
	body := &CreateCheckoutUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCheckoutInvalidResponseBody builds the HTTP response body from the
// result of the "createCheckout" endpoint of the "usage" service.
func NewCreateCheckoutInvalidResponseBody(res *goa.ServiceError) *CreateCheckoutInvalidResponseBody {
	body := &CreateCheckoutInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCheckoutInvariantViolationResponseBody builds the HTTP response
// body from the result of the "createCheckout" endpoint of the "usage" service.
func NewCreateCheckoutInvariantViolationResponseBody(res *goa.ServiceError) *CreateCheckoutInvariantViolationResponseBody {
	body := &CreateCheckoutInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCheckoutUnexpectedResponseBody builds the HTTP response body from
// the result of the "createCheckout" endpoint of the "usage" service.
func NewCreateCheckoutUnexpectedResponseBody(res *goa.ServiceError) *CreateCheckoutUnexpectedResponseBody {
	body := &CreateCheckoutUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCheckoutGatewayErrorResponseBody builds the HTTP response body from
// the result of the "createCheckout" endpoint of the "usage" service.
func NewCreateCheckoutGatewayErrorResponseBody(res *goa.ServiceError) *CreateCheckoutGatewayErrorResponseBody {
	body := &CreateCheckoutGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPeriodUsagePayload builds a usage service getPeriodUsage endpoint
// payload.
func NewGetPeriodUsagePayload(sessionToken *string, projectSlugInput *string) *usage.GetPeriodUsagePayload {
	v := &usage.GetPeriodUsagePayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewCreateCustomerSessionPayload builds a usage service createCustomerSession
// endpoint payload.
func NewCreateCustomerSessionPayload(sessionToken *string, projectSlugInput *string) *usage.CreateCustomerSessionPayload {
	v := &usage.CreateCustomerSessionPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewCreateCheckoutPayload builds a usage service createCheckout endpoint
// payload.
func NewCreateCheckoutPayload(sessionToken *string, projectSlugInput *string) *usage.CreateCheckoutPayload {
	v := &usage.CreateCheckoutPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}
