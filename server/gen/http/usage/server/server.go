// Code generated by goa v3.22.2, DO NOT EDIT.
//
// usage HTTP server
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	"context"
	"net/http"

	usage "github.com/speakeasy-api/gram/server/gen/usage"
	otelhttp "go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the usage service endpoint HTTP handlers.
type Server struct {
	Mounts                []*MountPoint
	GetPeriodUsage        http.Handler
	GetUsageTiers         http.Handler
	CreateCustomerSession http.Handler
	CreateCheckout        http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the usage service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *usage.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetPeriodUsage", "GET", "/rpc/usage.getPeriodUsage"},
			{"GetUsageTiers", "GET", "/rpc/usage.getUsageTiers"},
			{"CreateCustomerSession", "POST", "/rpc/usage.createCustomerSession"},
			{"CreateCheckout", "POST", "/rpc/usage.createCheckout"},
		},
		GetPeriodUsage:        NewGetPeriodUsageHandler(e.GetPeriodUsage, mux, decoder, encoder, errhandler, formatter),
		GetUsageTiers:         NewGetUsageTiersHandler(e.GetUsageTiers, mux, decoder, encoder, errhandler, formatter),
		CreateCustomerSession: NewCreateCustomerSessionHandler(e.CreateCustomerSession, mux, decoder, encoder, errhandler, formatter),
		CreateCheckout:        NewCreateCheckoutHandler(e.CreateCheckout, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "usage" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetPeriodUsage = m(s.GetPeriodUsage)
	s.GetUsageTiers = m(s.GetUsageTiers)
	s.CreateCustomerSession = m(s.CreateCustomerSession)
	s.CreateCheckout = m(s.CreateCheckout)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return usage.MethodNames[:] }

// Mount configures the mux to serve the usage endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetPeriodUsageHandler(mux, h.GetPeriodUsage)
	MountGetUsageTiersHandler(mux, h.GetUsageTiers)
	MountCreateCustomerSessionHandler(mux, h.CreateCustomerSession)
	MountCreateCheckoutHandler(mux, h.CreateCheckout)
}

// Mount configures the mux to serve the usage endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGetPeriodUsageHandler configures the mux to serve the "usage" service
// "getPeriodUsage" endpoint.
func MountGetPeriodUsageHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/rpc/usage.getPeriodUsage", otelhttp.WithRouteTag("/rpc/usage.getPeriodUsage", f).ServeHTTP)
}

// NewGetPeriodUsageHandler creates a HTTP handler which loads the HTTP request
// and calls the "usage" service "getPeriodUsage" endpoint.
func NewGetPeriodUsageHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetPeriodUsageRequest(mux, decoder)
		encodeResponse = EncodeGetPeriodUsageResponse(encoder)
		encodeError    = EncodeGetPeriodUsageError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getPeriodUsage")
		ctx = context.WithValue(ctx, goa.ServiceKey, "usage")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountGetUsageTiersHandler configures the mux to serve the "usage" service
// "getUsageTiers" endpoint.
func MountGetUsageTiersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/rpc/usage.getUsageTiers", otelhttp.WithRouteTag("/rpc/usage.getUsageTiers", f).ServeHTTP)
}

// NewGetUsageTiersHandler creates a HTTP handler which loads the HTTP request
// and calls the "usage" service "getUsageTiers" endpoint.
func NewGetUsageTiersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetUsageTiersResponse(encoder)
		encodeError    = EncodeGetUsageTiersError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getUsageTiers")
		ctx = context.WithValue(ctx, goa.ServiceKey, "usage")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountCreateCustomerSessionHandler configures the mux to serve the "usage"
// service "createCustomerSession" endpoint.
func MountCreateCustomerSessionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/usage.createCustomerSession", otelhttp.WithRouteTag("/rpc/usage.createCustomerSession", f).ServeHTTP)
}

// NewCreateCustomerSessionHandler creates a HTTP handler which loads the HTTP
// request and calls the "usage" service "createCustomerSession" endpoint.
func NewCreateCustomerSessionHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateCustomerSessionRequest(mux, decoder)
		encodeResponse = EncodeCreateCustomerSessionResponse(encoder)
		encodeError    = EncodeCreateCustomerSessionError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createCustomerSession")
		ctx = context.WithValue(ctx, goa.ServiceKey, "usage")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountCreateCheckoutHandler configures the mux to serve the "usage" service
// "createCheckout" endpoint.
func MountCreateCheckoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/usage.createCheckout", otelhttp.WithRouteTag("/rpc/usage.createCheckout", f).ServeHTTP)
}

// NewCreateCheckoutHandler creates a HTTP handler which loads the HTTP request
// and calls the "usage" service "createCheckout" endpoint.
func NewCreateCheckoutHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateCheckoutRequest(mux, decoder)
		encodeResponse = EncodeCreateCheckoutResponse(encoder)
		encodeError    = EncodeCreateCheckoutError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createCheckout")
		ctx = context.WithValue(ctx, goa.ServiceKey, "usage")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}
