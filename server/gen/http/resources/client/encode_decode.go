// Code generated by goa v3.22.6, DO NOT EDIT.
//
// resources HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"

	resources "github.com/speakeasy-api/gram/server/gen/resources"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goahttp "goa.design/goa/v3/http"
)

// BuildListResourcesRequest instantiates a HTTP request object with method and
// path set to call the "resources" service "listResources" endpoint
func (c *Client) BuildListResourcesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListResourcesResourcesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("resources", "listResources", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListResourcesRequest returns an encoder for requests sent to the
// resources listResources server.
func EncodeListResourcesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*resources.ListResourcesPayload)
		if !ok {
			return goahttp.ErrInvalidType("resources", "listResources", "*resources.ListResourcesPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		if p.Cursor != nil {
			values.Add("cursor", *p.Cursor)
		}
		if p.Limit != nil {
			values.Add("limit", fmt.Sprintf("%v", *p.Limit))
		}
		if p.DeploymentID != nil {
			values.Add("deployment_id", *p.DeploymentID)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResourcesResponse returns a decoder for responses returned by the
// resources listResources endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListResourcesResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeListResourcesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResourcesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resources", "listResources", err)
			}
			err = ValidateListResourcesResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("resources", "listResources", err)
			}
			res := NewListResourcesResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListResourcesUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resources", "listResources", err)
			}
			err = ValidateListResourcesUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("resources", "listResources", err)
			}
			return nil, NewListResourcesUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListResourcesForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resources", "listResources", err)
			}
			err = ValidateListResourcesForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("resources", "listResources", err)
			}
			return nil, NewListResourcesForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ListResourcesBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resources", "listResources", err)
			}
			err = ValidateListResourcesBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("resources", "listResources", err)
			}
			return nil, NewListResourcesBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ListResourcesNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resources", "listResources", err)
			}
			err = ValidateListResourcesNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("resources", "listResources", err)
			}
			return nil, NewListResourcesNotFound(&body)
		case http.StatusConflict:
			var (
				body ListResourcesConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resources", "listResources", err)
			}
			err = ValidateListResourcesConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("resources", "listResources", err)
			}
			return nil, NewListResourcesConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ListResourcesUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resources", "listResources", err)
			}
			err = ValidateListResourcesUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("resources", "listResources", err)
			}
			return nil, NewListResourcesUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ListResourcesInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resources", "listResources", err)
			}
			err = ValidateListResourcesInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("resources", "listResources", err)
			}
			return nil, NewListResourcesInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ListResourcesInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("resources", "listResources", err)
				}
				err = ValidateListResourcesInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("resources", "listResources", err)
				}
				return nil, NewListResourcesInvariantViolation(&body)
			case "unexpected":
				var (
					body ListResourcesUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("resources", "listResources", err)
				}
				err = ValidateListResourcesUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("resources", "listResources", err)
				}
				return nil, NewListResourcesUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("resources", "listResources", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ListResourcesGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resources", "listResources", err)
			}
			err = ValidateListResourcesGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("resources", "listResources", err)
			}
			return nil, NewListResourcesGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("resources", "listResources", resp.StatusCode, string(body))
		}
	}
}

// unmarshalResourceResponseBodyToTypesResource builds a value of type
// *types.Resource from a value of type *ResourceResponseBody.
func unmarshalResourceResponseBodyToTypesResource(v *ResourceResponseBody) *types.Resource {
	res := &types.Resource{}
	if v.FunctionResourceDefinition != nil {
		res.FunctionResourceDefinition = unmarshalFunctionResourceDefinitionResponseBodyToTypesFunctionResourceDefinition(v.FunctionResourceDefinition)
	}

	return res
}

// unmarshalFunctionResourceDefinitionResponseBodyToTypesFunctionResourceDefinition
// builds a value of type *types.FunctionResourceDefinition from a value of
// type *FunctionResourceDefinitionResponseBody.
func unmarshalFunctionResourceDefinitionResponseBodyToTypesFunctionResourceDefinition(v *FunctionResourceDefinitionResponseBody) *types.FunctionResourceDefinition {
	if v == nil {
		return nil
	}
	res := &types.FunctionResourceDefinition{
		DeploymentID: *v.DeploymentID,
		FunctionID:   *v.FunctionID,
		Runtime:      *v.Runtime,
		Variables:    v.Variables,
		ID:           *v.ID,
		ResourceUrn:  *v.ResourceUrn,
		ProjectID:    *v.ProjectID,
		Name:         *v.Name,
		Description:  *v.Description,
		URI:          *v.URI,
		Title:        v.Title,
		MimeType:     v.MimeType,
		CreatedAt:    *v.CreatedAt,
		UpdatedAt:    *v.UpdatedAt,
	}
	if v.Meta != nil {
		res.Meta = make(map[string]any, len(v.Meta))
		for key, val := range v.Meta {
			tk := key
			tv := val
			res.Meta[tk] = tv
		}
	}

	return res
}
