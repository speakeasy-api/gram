// Code generated by goa v3.22.6, DO NOT EDIT.
//
// resources HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	resources "github.com/speakeasy-api/gram/server/gen/resources"
	goa "goa.design/goa/v3/pkg"
)

// ListResourcesResponseBody is the type of the "resources" service
// "listResources" endpoint HTTP response body.
type ListResourcesResponseBody struct {
	// The cursor to fetch results from
	NextCursor *string `form:"next_cursor,omitempty" json:"next_cursor,omitempty" xml:"next_cursor,omitempty"`
	// The list of resources
	Resources []*ResourceResponseBody `form:"resources" json:"resources" xml:"resources"`
}

// ListResourcesUnauthorizedResponseBody is the type of the "resources" service
// "listResources" endpoint HTTP response body for the "unauthorized" error.
type ListResourcesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListResourcesForbiddenResponseBody is the type of the "resources" service
// "listResources" endpoint HTTP response body for the "forbidden" error.
type ListResourcesForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListResourcesBadRequestResponseBody is the type of the "resources" service
// "listResources" endpoint HTTP response body for the "bad_request" error.
type ListResourcesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListResourcesNotFoundResponseBody is the type of the "resources" service
// "listResources" endpoint HTTP response body for the "not_found" error.
type ListResourcesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListResourcesConflictResponseBody is the type of the "resources" service
// "listResources" endpoint HTTP response body for the "conflict" error.
type ListResourcesConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListResourcesUnsupportedMediaResponseBody is the type of the "resources"
// service "listResources" endpoint HTTP response body for the
// "unsupported_media" error.
type ListResourcesUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListResourcesInvalidResponseBody is the type of the "resources" service
// "listResources" endpoint HTTP response body for the "invalid" error.
type ListResourcesInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListResourcesInvariantViolationResponseBody is the type of the "resources"
// service "listResources" endpoint HTTP response body for the
// "invariant_violation" error.
type ListResourcesInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListResourcesUnexpectedResponseBody is the type of the "resources" service
// "listResources" endpoint HTTP response body for the "unexpected" error.
type ListResourcesUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListResourcesGatewayErrorResponseBody is the type of the "resources" service
// "listResources" endpoint HTTP response body for the "gateway_error" error.
type ListResourcesGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResourceResponseBody is used to define fields on response body types.
type ResourceResponseBody struct {
	// The function resource definition
	FunctionResourceDefinition *FunctionResourceDefinitionResponseBody `form:"function_resource_definition,omitempty" json:"function_resource_definition,omitempty" xml:"function_resource_definition,omitempty"`
}

// FunctionResourceDefinitionResponseBody is used to define fields on response
// body types.
type FunctionResourceDefinitionResponseBody struct {
	// The ID of the deployment
	DeploymentID string `form:"deployment_id" json:"deployment_id" xml:"deployment_id"`
	// The ID of the function
	FunctionID string `form:"function_id" json:"function_id" xml:"function_id"`
	// Runtime environment (e.g., nodejs:22, python:3.12)
	Runtime string `form:"runtime" json:"runtime" xml:"runtime"`
	// Variables configuration for the resource
	Variables any `form:"variables,omitempty" json:"variables,omitempty" xml:"variables,omitempty"`
	// The ID of the resource
	ID string `form:"id" json:"id" xml:"id"`
	// The URN of this resource
	ResourceUrn string `form:"resource_urn" json:"resource_urn" xml:"resource_urn"`
	// The ID of the project
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The name of the resource
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the resource
	Description string `form:"description" json:"description" xml:"description"`
	// The URI of the resource
	URI string `form:"uri" json:"uri" xml:"uri"`
	// Optional title for the resource
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Optional MIME type of the resource
	MimeType *string `form:"mime_type,omitempty" json:"mime_type,omitempty" xml:"mime_type,omitempty"`
	// Meta tags for the tool
	Meta map[string]string `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
	// The creation date of the resource.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the resource.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewListResourcesResponseBody builds the HTTP response body from the result
// of the "listResources" endpoint of the "resources" service.
func NewListResourcesResponseBody(res *resources.ListResourcesResult) *ListResourcesResponseBody {
	body := &ListResourcesResponseBody{
		NextCursor: res.NextCursor,
	}
	if res.Resources != nil {
		body.Resources = make([]*ResourceResponseBody, len(res.Resources))
		for i, val := range res.Resources {
			body.Resources[i] = marshalTypesResourceToResourceResponseBody(val)
		}
	} else {
		body.Resources = []*ResourceResponseBody{}
	}
	return body
}

// NewListResourcesUnauthorizedResponseBody builds the HTTP response body from
// the result of the "listResources" endpoint of the "resources" service.
func NewListResourcesUnauthorizedResponseBody(res *goa.ServiceError) *ListResourcesUnauthorizedResponseBody {
	body := &ListResourcesUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListResourcesForbiddenResponseBody builds the HTTP response body from the
// result of the "listResources" endpoint of the "resources" service.
func NewListResourcesForbiddenResponseBody(res *goa.ServiceError) *ListResourcesForbiddenResponseBody {
	body := &ListResourcesForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListResourcesBadRequestResponseBody builds the HTTP response body from
// the result of the "listResources" endpoint of the "resources" service.
func NewListResourcesBadRequestResponseBody(res *goa.ServiceError) *ListResourcesBadRequestResponseBody {
	body := &ListResourcesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListResourcesNotFoundResponseBody builds the HTTP response body from the
// result of the "listResources" endpoint of the "resources" service.
func NewListResourcesNotFoundResponseBody(res *goa.ServiceError) *ListResourcesNotFoundResponseBody {
	body := &ListResourcesNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListResourcesConflictResponseBody builds the HTTP response body from the
// result of the "listResources" endpoint of the "resources" service.
func NewListResourcesConflictResponseBody(res *goa.ServiceError) *ListResourcesConflictResponseBody {
	body := &ListResourcesConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListResourcesUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "listResources" endpoint of the "resources" service.
func NewListResourcesUnsupportedMediaResponseBody(res *goa.ServiceError) *ListResourcesUnsupportedMediaResponseBody {
	body := &ListResourcesUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListResourcesInvalidResponseBody builds the HTTP response body from the
// result of the "listResources" endpoint of the "resources" service.
func NewListResourcesInvalidResponseBody(res *goa.ServiceError) *ListResourcesInvalidResponseBody {
	body := &ListResourcesInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListResourcesInvariantViolationResponseBody builds the HTTP response body
// from the result of the "listResources" endpoint of the "resources" service.
func NewListResourcesInvariantViolationResponseBody(res *goa.ServiceError) *ListResourcesInvariantViolationResponseBody {
	body := &ListResourcesInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListResourcesUnexpectedResponseBody builds the HTTP response body from
// the result of the "listResources" endpoint of the "resources" service.
func NewListResourcesUnexpectedResponseBody(res *goa.ServiceError) *ListResourcesUnexpectedResponseBody {
	body := &ListResourcesUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListResourcesGatewayErrorResponseBody builds the HTTP response body from
// the result of the "listResources" endpoint of the "resources" service.
func NewListResourcesGatewayErrorResponseBody(res *goa.ServiceError) *ListResourcesGatewayErrorResponseBody {
	body := &ListResourcesGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListResourcesPayload builds a resources service listResources endpoint
// payload.
func NewListResourcesPayload(cursor *string, limit *int32, deploymentID *string, sessionToken *string, projectSlugInput *string) *resources.ListResourcesPayload {
	v := &resources.ListResourcesPayload{}
	v.Cursor = cursor
	v.Limit = limit
	v.DeploymentID = deploymentID
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}
