// Code generated by goa v3.22.2, DO NOT EDIT.
//
// toolsets client HTTP transport
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the toolsets service endpoint HTTP clients.
type Client struct {
	// CreateToolset Doer is the HTTP client used to make requests to the
	// createToolset endpoint.
	CreateToolsetDoer goahttp.Doer

	// ListToolsets Doer is the HTTP client used to make requests to the
	// listToolsets endpoint.
	ListToolsetsDoer goahttp.Doer

	// UpdateToolset Doer is the HTTP client used to make requests to the
	// updateToolset endpoint.
	UpdateToolsetDoer goahttp.Doer

	// DeleteToolset Doer is the HTTP client used to make requests to the
	// deleteToolset endpoint.
	DeleteToolsetDoer goahttp.Doer

	// GetToolset Doer is the HTTP client used to make requests to the getToolset
	// endpoint.
	GetToolsetDoer goahttp.Doer

	// CheckMCPSlugAvailability Doer is the HTTP client used to make requests to
	// the checkMCPSlugAvailability endpoint.
	CheckMCPSlugAvailabilityDoer goahttp.Doer

	// AddExternalOAuthServer Doer is the HTTP client used to make requests to the
	// addExternalOAuthServer endpoint.
	AddExternalOAuthServerDoer goahttp.Doer

	// RemoveOAuthServer Doer is the HTTP client used to make requests to the
	// removeOAuthServer endpoint.
	RemoveOAuthServerDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the toolsets service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateToolsetDoer:            doer,
		ListToolsetsDoer:             doer,
		UpdateToolsetDoer:            doer,
		DeleteToolsetDoer:            doer,
		GetToolsetDoer:               doer,
		CheckMCPSlugAvailabilityDoer: doer,
		AddExternalOAuthServerDoer:   doer,
		RemoveOAuthServerDoer:        doer,
		RestoreResponseBody:          restoreBody,
		scheme:                       scheme,
		host:                         host,
		decoder:                      dec,
		encoder:                      enc,
	}
}

// CreateToolset returns an endpoint that makes HTTP requests to the toolsets
// service createToolset server.
func (c *Client) CreateToolset() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateToolsetRequest(c.encoder)
		decodeResponse = DecodeCreateToolsetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateToolsetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateToolsetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("toolsets", "createToolset", err)
		}
		return decodeResponse(resp)
	}
}

// ListToolsets returns an endpoint that makes HTTP requests to the toolsets
// service listToolsets server.
func (c *Client) ListToolsets() goa.Endpoint {
	var (
		encodeRequest  = EncodeListToolsetsRequest(c.encoder)
		decodeResponse = DecodeListToolsetsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListToolsetsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListToolsetsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("toolsets", "listToolsets", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateToolset returns an endpoint that makes HTTP requests to the toolsets
// service updateToolset server.
func (c *Client) UpdateToolset() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateToolsetRequest(c.encoder)
		decodeResponse = DecodeUpdateToolsetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateToolsetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateToolsetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("toolsets", "updateToolset", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteToolset returns an endpoint that makes HTTP requests to the toolsets
// service deleteToolset server.
func (c *Client) DeleteToolset() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteToolsetRequest(c.encoder)
		decodeResponse = DecodeDeleteToolsetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteToolsetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteToolsetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("toolsets", "deleteToolset", err)
		}
		return decodeResponse(resp)
	}
}

// GetToolset returns an endpoint that makes HTTP requests to the toolsets
// service getToolset server.
func (c *Client) GetToolset() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetToolsetRequest(c.encoder)
		decodeResponse = DecodeGetToolsetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetToolsetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetToolsetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("toolsets", "getToolset", err)
		}
		return decodeResponse(resp)
	}
}

// CheckMCPSlugAvailability returns an endpoint that makes HTTP requests to the
// toolsets service checkMCPSlugAvailability server.
func (c *Client) CheckMCPSlugAvailability() goa.Endpoint {
	var (
		encodeRequest  = EncodeCheckMCPSlugAvailabilityRequest(c.encoder)
		decodeResponse = DecodeCheckMCPSlugAvailabilityResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCheckMCPSlugAvailabilityRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CheckMCPSlugAvailabilityDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("toolsets", "checkMCPSlugAvailability", err)
		}
		return decodeResponse(resp)
	}
}

// AddExternalOAuthServer returns an endpoint that makes HTTP requests to the
// toolsets service addExternalOAuthServer server.
func (c *Client) AddExternalOAuthServer() goa.Endpoint {
	var (
		encodeRequest  = EncodeAddExternalOAuthServerRequest(c.encoder)
		decodeResponse = DecodeAddExternalOAuthServerResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAddExternalOAuthServerRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddExternalOAuthServerDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("toolsets", "addExternalOAuthServer", err)
		}
		return decodeResponse(resp)
	}
}

// RemoveOAuthServer returns an endpoint that makes HTTP requests to the
// toolsets service removeOAuthServer server.
func (c *Client) RemoveOAuthServer() goa.Endpoint {
	var (
		encodeRequest  = EncodeRemoveOAuthServerRequest(c.encoder)
		decodeResponse = DecodeRemoveOAuthServerResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRemoveOAuthServerRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RemoveOAuthServerDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("toolsets", "removeOAuthServer", err)
		}
		return decodeResponse(resp)
	}
}
