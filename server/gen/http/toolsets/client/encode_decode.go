// Code generated by goa v3.22.2, DO NOT EDIT.
//
// toolsets HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	toolsets "github.com/speakeasy-api/gram/server/gen/toolsets"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateToolsetRequest instantiates a HTTP request object with method and
// path set to call the "toolsets" service "createToolset" endpoint
func (c *Client) BuildCreateToolsetRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateToolsetToolsetsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("toolsets", "createToolset", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateToolsetRequest returns an encoder for requests sent to the
// toolsets createToolset server.
func EncodeCreateToolsetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*toolsets.CreateToolsetPayload)
		if !ok {
			return goahttp.ErrInvalidType("toolsets", "createToolset", "*toolsets.CreateToolsetPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewCreateToolsetRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("toolsets", "createToolset", err)
		}
		return nil
	}
}

// DecodeCreateToolsetResponse returns a decoder for responses returned by the
// toolsets createToolset endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateToolsetResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeCreateToolsetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateToolsetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "createToolset", err)
			}
			err = ValidateCreateToolsetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "createToolset", err)
			}
			res := NewCreateToolsetToolsetOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CreateToolsetUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "createToolset", err)
			}
			err = ValidateCreateToolsetUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "createToolset", err)
			}
			return nil, NewCreateToolsetUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CreateToolsetForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "createToolset", err)
			}
			err = ValidateCreateToolsetForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "createToolset", err)
			}
			return nil, NewCreateToolsetForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CreateToolsetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "createToolset", err)
			}
			err = ValidateCreateToolsetBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "createToolset", err)
			}
			return nil, NewCreateToolsetBadRequest(&body)
		case http.StatusNotFound:
			var (
				body CreateToolsetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "createToolset", err)
			}
			err = ValidateCreateToolsetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "createToolset", err)
			}
			return nil, NewCreateToolsetNotFound(&body)
		case http.StatusConflict:
			var (
				body CreateToolsetConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "createToolset", err)
			}
			err = ValidateCreateToolsetConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "createToolset", err)
			}
			return nil, NewCreateToolsetConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body CreateToolsetUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "createToolset", err)
			}
			err = ValidateCreateToolsetUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "createToolset", err)
			}
			return nil, NewCreateToolsetUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body CreateToolsetInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "createToolset", err)
			}
			err = ValidateCreateToolsetInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "createToolset", err)
			}
			return nil, NewCreateToolsetInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body CreateToolsetInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "createToolset", err)
				}
				err = ValidateCreateToolsetInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "createToolset", err)
				}
				return nil, NewCreateToolsetInvariantViolation(&body)
			case "unexpected":
				var (
					body CreateToolsetUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "createToolset", err)
				}
				err = ValidateCreateToolsetUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "createToolset", err)
				}
				return nil, NewCreateToolsetUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("toolsets", "createToolset", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body CreateToolsetGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "createToolset", err)
			}
			err = ValidateCreateToolsetGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "createToolset", err)
			}
			return nil, NewCreateToolsetGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("toolsets", "createToolset", resp.StatusCode, string(body))
		}
	}
}

// BuildListToolsetsRequest instantiates a HTTP request object with method and
// path set to call the "toolsets" service "listToolsets" endpoint
func (c *Client) BuildListToolsetsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListToolsetsToolsetsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("toolsets", "listToolsets", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListToolsetsRequest returns an encoder for requests sent to the
// toolsets listToolsets server.
func EncodeListToolsetsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*toolsets.ListToolsetsPayload)
		if !ok {
			return goahttp.ErrInvalidType("toolsets", "listToolsets", "*toolsets.ListToolsetsPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		return nil
	}
}

// DecodeListToolsetsResponse returns a decoder for responses returned by the
// toolsets listToolsets endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListToolsetsResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeListToolsetsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListToolsetsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "listToolsets", err)
			}
			err = ValidateListToolsetsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "listToolsets", err)
			}
			res := NewListToolsetsResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListToolsetsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "listToolsets", err)
			}
			err = ValidateListToolsetsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "listToolsets", err)
			}
			return nil, NewListToolsetsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListToolsetsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "listToolsets", err)
			}
			err = ValidateListToolsetsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "listToolsets", err)
			}
			return nil, NewListToolsetsForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ListToolsetsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "listToolsets", err)
			}
			err = ValidateListToolsetsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "listToolsets", err)
			}
			return nil, NewListToolsetsBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ListToolsetsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "listToolsets", err)
			}
			err = ValidateListToolsetsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "listToolsets", err)
			}
			return nil, NewListToolsetsNotFound(&body)
		case http.StatusConflict:
			var (
				body ListToolsetsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "listToolsets", err)
			}
			err = ValidateListToolsetsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "listToolsets", err)
			}
			return nil, NewListToolsetsConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ListToolsetsUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "listToolsets", err)
			}
			err = ValidateListToolsetsUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "listToolsets", err)
			}
			return nil, NewListToolsetsUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ListToolsetsInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "listToolsets", err)
			}
			err = ValidateListToolsetsInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "listToolsets", err)
			}
			return nil, NewListToolsetsInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ListToolsetsInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "listToolsets", err)
				}
				err = ValidateListToolsetsInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "listToolsets", err)
				}
				return nil, NewListToolsetsInvariantViolation(&body)
			case "unexpected":
				var (
					body ListToolsetsUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "listToolsets", err)
				}
				err = ValidateListToolsetsUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "listToolsets", err)
				}
				return nil, NewListToolsetsUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("toolsets", "listToolsets", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ListToolsetsGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "listToolsets", err)
			}
			err = ValidateListToolsetsGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "listToolsets", err)
			}
			return nil, NewListToolsetsGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("toolsets", "listToolsets", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateToolsetRequest instantiates a HTTP request object with method and
// path set to call the "toolsets" service "updateToolset" endpoint
func (c *Client) BuildUpdateToolsetRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateToolsetToolsetsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("toolsets", "updateToolset", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateToolsetRequest returns an encoder for requests sent to the
// toolsets updateToolset server.
func EncodeUpdateToolsetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*toolsets.UpdateToolsetPayload)
		if !ok {
			return goahttp.ErrInvalidType("toolsets", "updateToolset", "*toolsets.UpdateToolsetPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("slug", string(p.Slug))
		req.URL.RawQuery = values.Encode()
		body := NewUpdateToolsetRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("toolsets", "updateToolset", err)
		}
		return nil
	}
}

// DecodeUpdateToolsetResponse returns a decoder for responses returned by the
// toolsets updateToolset endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdateToolsetResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeUpdateToolsetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateToolsetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "updateToolset", err)
			}
			err = ValidateUpdateToolsetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "updateToolset", err)
			}
			res := NewUpdateToolsetToolsetOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateToolsetUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "updateToolset", err)
			}
			err = ValidateUpdateToolsetUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "updateToolset", err)
			}
			return nil, NewUpdateToolsetUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UpdateToolsetForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "updateToolset", err)
			}
			err = ValidateUpdateToolsetForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "updateToolset", err)
			}
			return nil, NewUpdateToolsetForbidden(&body)
		case http.StatusBadRequest:
			var (
				body UpdateToolsetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "updateToolset", err)
			}
			err = ValidateUpdateToolsetBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "updateToolset", err)
			}
			return nil, NewUpdateToolsetBadRequest(&body)
		case http.StatusNotFound:
			var (
				body UpdateToolsetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "updateToolset", err)
			}
			err = ValidateUpdateToolsetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "updateToolset", err)
			}
			return nil, NewUpdateToolsetNotFound(&body)
		case http.StatusConflict:
			var (
				body UpdateToolsetConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "updateToolset", err)
			}
			err = ValidateUpdateToolsetConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "updateToolset", err)
			}
			return nil, NewUpdateToolsetConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body UpdateToolsetUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "updateToolset", err)
			}
			err = ValidateUpdateToolsetUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "updateToolset", err)
			}
			return nil, NewUpdateToolsetUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body UpdateToolsetInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "updateToolset", err)
			}
			err = ValidateUpdateToolsetInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "updateToolset", err)
			}
			return nil, NewUpdateToolsetInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body UpdateToolsetInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "updateToolset", err)
				}
				err = ValidateUpdateToolsetInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "updateToolset", err)
				}
				return nil, NewUpdateToolsetInvariantViolation(&body)
			case "unexpected":
				var (
					body UpdateToolsetUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "updateToolset", err)
				}
				err = ValidateUpdateToolsetUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "updateToolset", err)
				}
				return nil, NewUpdateToolsetUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("toolsets", "updateToolset", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body UpdateToolsetGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "updateToolset", err)
			}
			err = ValidateUpdateToolsetGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "updateToolset", err)
			}
			return nil, NewUpdateToolsetGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("toolsets", "updateToolset", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteToolsetRequest instantiates a HTTP request object with method and
// path set to call the "toolsets" service "deleteToolset" endpoint
func (c *Client) BuildDeleteToolsetRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteToolsetToolsetsPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("toolsets", "deleteToolset", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteToolsetRequest returns an encoder for requests sent to the
// toolsets deleteToolset server.
func EncodeDeleteToolsetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*toolsets.DeleteToolsetPayload)
		if !ok {
			return goahttp.ErrInvalidType("toolsets", "deleteToolset", "*toolsets.DeleteToolsetPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("slug", string(p.Slug))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDeleteToolsetResponse returns a decoder for responses returned by the
// toolsets deleteToolset endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteToolsetResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeDeleteToolsetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body DeleteToolsetUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "deleteToolset", err)
			}
			err = ValidateDeleteToolsetUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "deleteToolset", err)
			}
			return nil, NewDeleteToolsetUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteToolsetForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "deleteToolset", err)
			}
			err = ValidateDeleteToolsetForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "deleteToolset", err)
			}
			return nil, NewDeleteToolsetForbidden(&body)
		case http.StatusBadRequest:
			var (
				body DeleteToolsetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "deleteToolset", err)
			}
			err = ValidateDeleteToolsetBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "deleteToolset", err)
			}
			return nil, NewDeleteToolsetBadRequest(&body)
		case http.StatusNotFound:
			var (
				body DeleteToolsetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "deleteToolset", err)
			}
			err = ValidateDeleteToolsetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "deleteToolset", err)
			}
			return nil, NewDeleteToolsetNotFound(&body)
		case http.StatusConflict:
			var (
				body DeleteToolsetConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "deleteToolset", err)
			}
			err = ValidateDeleteToolsetConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "deleteToolset", err)
			}
			return nil, NewDeleteToolsetConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body DeleteToolsetUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "deleteToolset", err)
			}
			err = ValidateDeleteToolsetUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "deleteToolset", err)
			}
			return nil, NewDeleteToolsetUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body DeleteToolsetInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "deleteToolset", err)
			}
			err = ValidateDeleteToolsetInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "deleteToolset", err)
			}
			return nil, NewDeleteToolsetInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body DeleteToolsetInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "deleteToolset", err)
				}
				err = ValidateDeleteToolsetInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "deleteToolset", err)
				}
				return nil, NewDeleteToolsetInvariantViolation(&body)
			case "unexpected":
				var (
					body DeleteToolsetUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "deleteToolset", err)
				}
				err = ValidateDeleteToolsetUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "deleteToolset", err)
				}
				return nil, NewDeleteToolsetUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("toolsets", "deleteToolset", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body DeleteToolsetGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "deleteToolset", err)
			}
			err = ValidateDeleteToolsetGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "deleteToolset", err)
			}
			return nil, NewDeleteToolsetGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("toolsets", "deleteToolset", resp.StatusCode, string(body))
		}
	}
}

// BuildGetToolsetRequest instantiates a HTTP request object with method and
// path set to call the "toolsets" service "getToolset" endpoint
func (c *Client) BuildGetToolsetRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetToolsetToolsetsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("toolsets", "getToolset", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetToolsetRequest returns an encoder for requests sent to the toolsets
// getToolset server.
func EncodeGetToolsetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*toolsets.GetToolsetPayload)
		if !ok {
			return goahttp.ErrInvalidType("toolsets", "getToolset", "*toolsets.GetToolsetPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("slug", string(p.Slug))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetToolsetResponse returns a decoder for responses returned by the
// toolsets getToolset endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetToolsetResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeGetToolsetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetToolsetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "getToolset", err)
			}
			err = ValidateGetToolsetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "getToolset", err)
			}
			res := NewGetToolsetToolsetOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetToolsetUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "getToolset", err)
			}
			err = ValidateGetToolsetUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "getToolset", err)
			}
			return nil, NewGetToolsetUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetToolsetForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "getToolset", err)
			}
			err = ValidateGetToolsetForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "getToolset", err)
			}
			return nil, NewGetToolsetForbidden(&body)
		case http.StatusBadRequest:
			var (
				body GetToolsetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "getToolset", err)
			}
			err = ValidateGetToolsetBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "getToolset", err)
			}
			return nil, NewGetToolsetBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetToolsetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "getToolset", err)
			}
			err = ValidateGetToolsetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "getToolset", err)
			}
			return nil, NewGetToolsetNotFound(&body)
		case http.StatusConflict:
			var (
				body GetToolsetConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "getToolset", err)
			}
			err = ValidateGetToolsetConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "getToolset", err)
			}
			return nil, NewGetToolsetConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body GetToolsetUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "getToolset", err)
			}
			err = ValidateGetToolsetUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "getToolset", err)
			}
			return nil, NewGetToolsetUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body GetToolsetInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "getToolset", err)
			}
			err = ValidateGetToolsetInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "getToolset", err)
			}
			return nil, NewGetToolsetInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body GetToolsetInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "getToolset", err)
				}
				err = ValidateGetToolsetInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "getToolset", err)
				}
				return nil, NewGetToolsetInvariantViolation(&body)
			case "unexpected":
				var (
					body GetToolsetUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "getToolset", err)
				}
				err = ValidateGetToolsetUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "getToolset", err)
				}
				return nil, NewGetToolsetUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("toolsets", "getToolset", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body GetToolsetGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "getToolset", err)
			}
			err = ValidateGetToolsetGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "getToolset", err)
			}
			return nil, NewGetToolsetGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("toolsets", "getToolset", resp.StatusCode, string(body))
		}
	}
}

// BuildCheckMCPSlugAvailabilityRequest instantiates a HTTP request object with
// method and path set to call the "toolsets" service
// "checkMCPSlugAvailability" endpoint
func (c *Client) BuildCheckMCPSlugAvailabilityRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CheckMCPSlugAvailabilityToolsetsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("toolsets", "checkMCPSlugAvailability", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCheckMCPSlugAvailabilityRequest returns an encoder for requests sent
// to the toolsets checkMCPSlugAvailability server.
func EncodeCheckMCPSlugAvailabilityRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*toolsets.CheckMCPSlugAvailabilityPayload)
		if !ok {
			return goahttp.ErrInvalidType("toolsets", "checkMCPSlugAvailability", "*toolsets.CheckMCPSlugAvailabilityPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("slug", string(p.Slug))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeCheckMCPSlugAvailabilityResponse returns a decoder for responses
// returned by the toolsets checkMCPSlugAvailability endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeCheckMCPSlugAvailabilityResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeCheckMCPSlugAvailabilityResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body bool
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "checkMCPSlugAvailability", err)
			}
			return body, nil
		case http.StatusUnauthorized:
			var (
				body CheckMCPSlugAvailabilityUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "checkMCPSlugAvailability", err)
			}
			err = ValidateCheckMCPSlugAvailabilityUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "checkMCPSlugAvailability", err)
			}
			return nil, NewCheckMCPSlugAvailabilityUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CheckMCPSlugAvailabilityForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "checkMCPSlugAvailability", err)
			}
			err = ValidateCheckMCPSlugAvailabilityForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "checkMCPSlugAvailability", err)
			}
			return nil, NewCheckMCPSlugAvailabilityForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CheckMCPSlugAvailabilityBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "checkMCPSlugAvailability", err)
			}
			err = ValidateCheckMCPSlugAvailabilityBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "checkMCPSlugAvailability", err)
			}
			return nil, NewCheckMCPSlugAvailabilityBadRequest(&body)
		case http.StatusNotFound:
			var (
				body CheckMCPSlugAvailabilityNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "checkMCPSlugAvailability", err)
			}
			err = ValidateCheckMCPSlugAvailabilityNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "checkMCPSlugAvailability", err)
			}
			return nil, NewCheckMCPSlugAvailabilityNotFound(&body)
		case http.StatusConflict:
			var (
				body CheckMCPSlugAvailabilityConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "checkMCPSlugAvailability", err)
			}
			err = ValidateCheckMCPSlugAvailabilityConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "checkMCPSlugAvailability", err)
			}
			return nil, NewCheckMCPSlugAvailabilityConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body CheckMCPSlugAvailabilityUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "checkMCPSlugAvailability", err)
			}
			err = ValidateCheckMCPSlugAvailabilityUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "checkMCPSlugAvailability", err)
			}
			return nil, NewCheckMCPSlugAvailabilityUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body CheckMCPSlugAvailabilityInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "checkMCPSlugAvailability", err)
			}
			err = ValidateCheckMCPSlugAvailabilityInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "checkMCPSlugAvailability", err)
			}
			return nil, NewCheckMCPSlugAvailabilityInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body CheckMCPSlugAvailabilityInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "checkMCPSlugAvailability", err)
				}
				err = ValidateCheckMCPSlugAvailabilityInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "checkMCPSlugAvailability", err)
				}
				return nil, NewCheckMCPSlugAvailabilityInvariantViolation(&body)
			case "unexpected":
				var (
					body CheckMCPSlugAvailabilityUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "checkMCPSlugAvailability", err)
				}
				err = ValidateCheckMCPSlugAvailabilityUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "checkMCPSlugAvailability", err)
				}
				return nil, NewCheckMCPSlugAvailabilityUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("toolsets", "checkMCPSlugAvailability", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body CheckMCPSlugAvailabilityGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "checkMCPSlugAvailability", err)
			}
			err = ValidateCheckMCPSlugAvailabilityGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "checkMCPSlugAvailability", err)
			}
			return nil, NewCheckMCPSlugAvailabilityGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("toolsets", "checkMCPSlugAvailability", resp.StatusCode, string(body))
		}
	}
}

// BuildAddExternalOAuthServerRequest instantiates a HTTP request object with
// method and path set to call the "toolsets" service "addExternalOAuthServer"
// endpoint
func (c *Client) BuildAddExternalOAuthServerRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddExternalOAuthServerToolsetsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("toolsets", "addExternalOAuthServer", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddExternalOAuthServerRequest returns an encoder for requests sent to
// the toolsets addExternalOAuthServer server.
func EncodeAddExternalOAuthServerRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*toolsets.AddExternalOAuthServerPayload)
		if !ok {
			return goahttp.ErrInvalidType("toolsets", "addExternalOAuthServer", "*toolsets.AddExternalOAuthServerPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("slug", string(p.Slug))
		req.URL.RawQuery = values.Encode()
		body := NewAddExternalOAuthServerRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("toolsets", "addExternalOAuthServer", err)
		}
		return nil
	}
}

// DecodeAddExternalOAuthServerResponse returns a decoder for responses
// returned by the toolsets addExternalOAuthServer endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeAddExternalOAuthServerResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeAddExternalOAuthServerResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddExternalOAuthServerResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "addExternalOAuthServer", err)
			}
			err = ValidateAddExternalOAuthServerResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "addExternalOAuthServer", err)
			}
			res := NewAddExternalOAuthServerToolsetOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body AddExternalOAuthServerUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "addExternalOAuthServer", err)
			}
			err = ValidateAddExternalOAuthServerUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "addExternalOAuthServer", err)
			}
			return nil, NewAddExternalOAuthServerUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body AddExternalOAuthServerForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "addExternalOAuthServer", err)
			}
			err = ValidateAddExternalOAuthServerForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "addExternalOAuthServer", err)
			}
			return nil, NewAddExternalOAuthServerForbidden(&body)
		case http.StatusBadRequest:
			var (
				body AddExternalOAuthServerBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "addExternalOAuthServer", err)
			}
			err = ValidateAddExternalOAuthServerBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "addExternalOAuthServer", err)
			}
			return nil, NewAddExternalOAuthServerBadRequest(&body)
		case http.StatusNotFound:
			var (
				body AddExternalOAuthServerNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "addExternalOAuthServer", err)
			}
			err = ValidateAddExternalOAuthServerNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "addExternalOAuthServer", err)
			}
			return nil, NewAddExternalOAuthServerNotFound(&body)
		case http.StatusConflict:
			var (
				body AddExternalOAuthServerConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "addExternalOAuthServer", err)
			}
			err = ValidateAddExternalOAuthServerConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "addExternalOAuthServer", err)
			}
			return nil, NewAddExternalOAuthServerConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body AddExternalOAuthServerUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "addExternalOAuthServer", err)
			}
			err = ValidateAddExternalOAuthServerUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "addExternalOAuthServer", err)
			}
			return nil, NewAddExternalOAuthServerUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body AddExternalOAuthServerInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "addExternalOAuthServer", err)
			}
			err = ValidateAddExternalOAuthServerInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "addExternalOAuthServer", err)
			}
			return nil, NewAddExternalOAuthServerInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body AddExternalOAuthServerInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "addExternalOAuthServer", err)
				}
				err = ValidateAddExternalOAuthServerInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "addExternalOAuthServer", err)
				}
				return nil, NewAddExternalOAuthServerInvariantViolation(&body)
			case "unexpected":
				var (
					body AddExternalOAuthServerUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "addExternalOAuthServer", err)
				}
				err = ValidateAddExternalOAuthServerUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "addExternalOAuthServer", err)
				}
				return nil, NewAddExternalOAuthServerUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("toolsets", "addExternalOAuthServer", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body AddExternalOAuthServerGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "addExternalOAuthServer", err)
			}
			err = ValidateAddExternalOAuthServerGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "addExternalOAuthServer", err)
			}
			return nil, NewAddExternalOAuthServerGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("toolsets", "addExternalOAuthServer", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveOAuthServerRequest instantiates a HTTP request object with method
// and path set to call the "toolsets" service "removeOAuthServer" endpoint
func (c *Client) BuildRemoveOAuthServerRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveOAuthServerToolsetsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("toolsets", "removeOAuthServer", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRemoveOAuthServerRequest returns an encoder for requests sent to the
// toolsets removeOAuthServer server.
func EncodeRemoveOAuthServerRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*toolsets.RemoveOAuthServerPayload)
		if !ok {
			return goahttp.ErrInvalidType("toolsets", "removeOAuthServer", "*toolsets.RemoveOAuthServerPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("slug", string(p.Slug))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeRemoveOAuthServerResponse returns a decoder for responses returned by
// the toolsets removeOAuthServer endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeRemoveOAuthServerResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeRemoveOAuthServerResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RemoveOAuthServerResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "removeOAuthServer", err)
			}
			err = ValidateRemoveOAuthServerResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "removeOAuthServer", err)
			}
			res := NewRemoveOAuthServerToolsetOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body RemoveOAuthServerUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "removeOAuthServer", err)
			}
			err = ValidateRemoveOAuthServerUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "removeOAuthServer", err)
			}
			return nil, NewRemoveOAuthServerUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body RemoveOAuthServerForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "removeOAuthServer", err)
			}
			err = ValidateRemoveOAuthServerForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "removeOAuthServer", err)
			}
			return nil, NewRemoveOAuthServerForbidden(&body)
		case http.StatusBadRequest:
			var (
				body RemoveOAuthServerBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "removeOAuthServer", err)
			}
			err = ValidateRemoveOAuthServerBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "removeOAuthServer", err)
			}
			return nil, NewRemoveOAuthServerBadRequest(&body)
		case http.StatusNotFound:
			var (
				body RemoveOAuthServerNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "removeOAuthServer", err)
			}
			err = ValidateRemoveOAuthServerNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "removeOAuthServer", err)
			}
			return nil, NewRemoveOAuthServerNotFound(&body)
		case http.StatusConflict:
			var (
				body RemoveOAuthServerConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "removeOAuthServer", err)
			}
			err = ValidateRemoveOAuthServerConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "removeOAuthServer", err)
			}
			return nil, NewRemoveOAuthServerConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body RemoveOAuthServerUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "removeOAuthServer", err)
			}
			err = ValidateRemoveOAuthServerUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "removeOAuthServer", err)
			}
			return nil, NewRemoveOAuthServerUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body RemoveOAuthServerInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "removeOAuthServer", err)
			}
			err = ValidateRemoveOAuthServerInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "removeOAuthServer", err)
			}
			return nil, NewRemoveOAuthServerInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body RemoveOAuthServerInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "removeOAuthServer", err)
				}
				err = ValidateRemoveOAuthServerInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "removeOAuthServer", err)
				}
				return nil, NewRemoveOAuthServerInvariantViolation(&body)
			case "unexpected":
				var (
					body RemoveOAuthServerUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("toolsets", "removeOAuthServer", err)
				}
				err = ValidateRemoveOAuthServerUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("toolsets", "removeOAuthServer", err)
				}
				return nil, NewRemoveOAuthServerUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("toolsets", "removeOAuthServer", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body RemoveOAuthServerGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("toolsets", "removeOAuthServer", err)
			}
			err = ValidateRemoveOAuthServerGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("toolsets", "removeOAuthServer", err)
			}
			return nil, NewRemoveOAuthServerGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("toolsets", "removeOAuthServer", resp.StatusCode, string(body))
		}
	}
}

// unmarshalSecurityVariableResponseBodyToTypesSecurityVariable builds a value
// of type *types.SecurityVariable from a value of type
// *SecurityVariableResponseBody.
func unmarshalSecurityVariableResponseBodyToTypesSecurityVariable(v *SecurityVariableResponseBody) *types.SecurityVariable {
	if v == nil {
		return nil
	}
	res := &types.SecurityVariable{
		Type:         v.Type,
		Name:         *v.Name,
		InPlacement:  *v.InPlacement,
		Scheme:       *v.Scheme,
		BearerFormat: v.BearerFormat,
		OauthFlows:   v.OauthFlows,
	}
	if v.OauthTypes != nil {
		res.OauthTypes = make([]string, len(v.OauthTypes))
		for i, val := range v.OauthTypes {
			res.OauthTypes[i] = val
		}
	}
	res.EnvVariables = make([]string, len(v.EnvVariables))
	for i, val := range v.EnvVariables {
		res.EnvVariables[i] = val
	}

	return res
}

// unmarshalServerVariableResponseBodyToTypesServerVariable builds a value of
// type *types.ServerVariable from a value of type *ServerVariableResponseBody.
func unmarshalServerVariableResponseBodyToTypesServerVariable(v *ServerVariableResponseBody) *types.ServerVariable {
	if v == nil {
		return nil
	}
	res := &types.ServerVariable{
		Description: *v.Description,
	}
	res.EnvVariables = make([]string, len(v.EnvVariables))
	for i, val := range v.EnvVariables {
		res.EnvVariables[i] = val
	}

	return res
}

// unmarshalHTTPToolDefinitionResponseBodyToTypesHTTPToolDefinition builds a
// value of type *types.HTTPToolDefinition from a value of type
// *HTTPToolDefinitionResponseBody.
func unmarshalHTTPToolDefinitionResponseBodyToTypesHTTPToolDefinition(v *HTTPToolDefinitionResponseBody) *types.HTTPToolDefinition {
	res := &types.HTTPToolDefinition{
		ID:                  *v.ID,
		ProjectID:           *v.ProjectID,
		DeploymentID:        *v.DeploymentID,
		Name:                *v.Name,
		CanonicalName:       *v.CanonicalName,
		Summary:             *v.Summary,
		Description:         *v.Description,
		Confirm:             *v.Confirm,
		ConfirmPrompt:       v.ConfirmPrompt,
		Summarizer:          v.Summarizer,
		Openapiv3DocumentID: v.Openapiv3DocumentID,
		Openapiv3Operation:  v.Openapiv3Operation,
		Security:            v.Security,
		DefaultServerURL:    v.DefaultServerURL,
		HTTPMethod:          *v.HTTPMethod,
		Path:                *v.Path,
		SchemaVersion:       v.SchemaVersion,
		Schema:              *v.Schema,
		PackageName:         v.PackageName,
		CreatedAt:           *v.CreatedAt,
		UpdatedAt:           *v.UpdatedAt,
	}
	if v.ResponseFilter != nil {
		res.ResponseFilter = unmarshalResponseFilterResponseBodyToTypesResponseFilter(v.ResponseFilter)
	}
	res.Tags = make([]string, len(v.Tags))
	for i, val := range v.Tags {
		res.Tags[i] = val
	}
	if v.Canonical != nil {
		res.Canonical = unmarshalCanonicalToolAttributesResponseBodyToTypesCanonicalToolAttributes(v.Canonical)
	}
	if v.Variation != nil {
		res.Variation = unmarshalToolVariationResponseBodyToTypesToolVariation(v.Variation)
	}

	return res
}

// unmarshalResponseFilterResponseBodyToTypesResponseFilter builds a value of
// type *types.ResponseFilter from a value of type *ResponseFilterResponseBody.
func unmarshalResponseFilterResponseBodyToTypesResponseFilter(v *ResponseFilterResponseBody) *types.ResponseFilter {
	if v == nil {
		return nil
	}
	res := &types.ResponseFilter{
		Type: *v.Type,
	}
	res.StatusCodes = make([]string, len(v.StatusCodes))
	for i, val := range v.StatusCodes {
		res.StatusCodes[i] = val
	}
	res.ContentTypes = make([]string, len(v.ContentTypes))
	for i, val := range v.ContentTypes {
		res.ContentTypes[i] = val
	}

	return res
}

// unmarshalCanonicalToolAttributesResponseBodyToTypesCanonicalToolAttributes
// builds a value of type *types.CanonicalToolAttributes from a value of type
// *CanonicalToolAttributesResponseBody.
func unmarshalCanonicalToolAttributesResponseBodyToTypesCanonicalToolAttributes(v *CanonicalToolAttributesResponseBody) *types.CanonicalToolAttributes {
	if v == nil {
		return nil
	}
	res := &types.CanonicalToolAttributes{
		VariationID:   *v.VariationID,
		Name:          *v.Name,
		Summary:       v.Summary,
		Description:   v.Description,
		Confirm:       v.Confirm,
		ConfirmPrompt: v.ConfirmPrompt,
		Summarizer:    v.Summarizer,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}

	return res
}

// unmarshalToolVariationResponseBodyToTypesToolVariation builds a value of
// type *types.ToolVariation from a value of type *ToolVariationResponseBody.
func unmarshalToolVariationResponseBodyToTypesToolVariation(v *ToolVariationResponseBody) *types.ToolVariation {
	if v == nil {
		return nil
	}
	res := &types.ToolVariation{
		ID:            *v.ID,
		GroupID:       *v.GroupID,
		SrcToolName:   *v.SrcToolName,
		Confirm:       v.Confirm,
		ConfirmPrompt: v.ConfirmPrompt,
		Name:          v.Name,
		Summary:       v.Summary,
		Description:   v.Description,
		Summarizer:    v.Summarizer,
		CreatedAt:     *v.CreatedAt,
		UpdatedAt:     *v.UpdatedAt,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}

	return res
}

// unmarshalPromptTemplateResponseBodyToTypesPromptTemplate builds a value of
// type *types.PromptTemplate from a value of type *PromptTemplateResponseBody.
func unmarshalPromptTemplateResponseBodyToTypesPromptTemplate(v *PromptTemplateResponseBody) *types.PromptTemplate {
	res := &types.PromptTemplate{
		ID:            *v.ID,
		HistoryID:     *v.HistoryID,
		PredecessorID: v.PredecessorID,
		Name:          types.Slug(*v.Name),
		Prompt:        *v.Prompt,
		Description:   v.Description,
		Arguments:     v.Arguments,
		Engine:        *v.Engine,
		Kind:          *v.Kind,
		CreatedAt:     *v.CreatedAt,
		UpdatedAt:     *v.UpdatedAt,
	}
	res.ToolsHint = make([]string, len(v.ToolsHint))
	for i, val := range v.ToolsHint {
		res.ToolsHint[i] = val
	}

	return res
}

// unmarshalExternalOAuthServerResponseBodyToTypesExternalOAuthServer builds a
// value of type *types.ExternalOAuthServer from a value of type
// *ExternalOAuthServerResponseBody.
func unmarshalExternalOAuthServerResponseBodyToTypesExternalOAuthServer(v *ExternalOAuthServerResponseBody) *types.ExternalOAuthServer {
	if v == nil {
		return nil
	}
	res := &types.ExternalOAuthServer{
		ID:        *v.ID,
		ProjectID: *v.ProjectID,
		Slug:      types.Slug(*v.Slug),
		Metadata:  v.Metadata,
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
	}

	return res
}

// unmarshalOAuthProxyServerResponseBodyToTypesOAuthProxyServer builds a value
// of type *types.OAuthProxyServer from a value of type
// *OAuthProxyServerResponseBody.
func unmarshalOAuthProxyServerResponseBodyToTypesOAuthProxyServer(v *OAuthProxyServerResponseBody) *types.OAuthProxyServer {
	if v == nil {
		return nil
	}
	res := &types.OAuthProxyServer{
		ID:        *v.ID,
		ProjectID: *v.ProjectID,
		Slug:      types.Slug(*v.Slug),
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
	}
	if v.OauthProxyProviders != nil {
		res.OauthProxyProviders = make([]*types.OAuthProxyProvider, len(v.OauthProxyProviders))
		for i, val := range v.OauthProxyProviders {
			res.OauthProxyProviders[i] = unmarshalOAuthProxyProviderResponseBodyToTypesOAuthProxyProvider(val)
		}
	}

	return res
}

// unmarshalOAuthProxyProviderResponseBodyToTypesOAuthProxyProvider builds a
// value of type *types.OAuthProxyProvider from a value of type
// *OAuthProxyProviderResponseBody.
func unmarshalOAuthProxyProviderResponseBodyToTypesOAuthProxyProvider(v *OAuthProxyProviderResponseBody) *types.OAuthProxyProvider {
	if v == nil {
		return nil
	}
	res := &types.OAuthProxyProvider{
		ID:                    *v.ID,
		Slug:                  types.Slug(*v.Slug),
		AuthorizationEndpoint: *v.AuthorizationEndpoint,
		TokenEndpoint:         *v.TokenEndpoint,
		CreatedAt:             *v.CreatedAt,
		UpdatedAt:             *v.UpdatedAt,
	}
	if v.ScopesSupported != nil {
		res.ScopesSupported = make([]string, len(v.ScopesSupported))
		for i, val := range v.ScopesSupported {
			res.ScopesSupported[i] = val
		}
	}
	if v.GrantTypesSupported != nil {
		res.GrantTypesSupported = make([]string, len(v.GrantTypesSupported))
		for i, val := range v.GrantTypesSupported {
			res.GrantTypesSupported[i] = val
		}
	}
	if v.TokenEndpointAuthMethodsSupported != nil {
		res.TokenEndpointAuthMethodsSupported = make([]string, len(v.TokenEndpointAuthMethodsSupported))
		for i, val := range v.TokenEndpointAuthMethodsSupported {
			res.TokenEndpointAuthMethodsSupported[i] = val
		}
	}

	return res
}

// unmarshalToolsetEntryResponseBodyToTypesToolsetEntry builds a value of type
// *types.ToolsetEntry from a value of type *ToolsetEntryResponseBody.
func unmarshalToolsetEntryResponseBodyToTypesToolsetEntry(v *ToolsetEntryResponseBody) *types.ToolsetEntry {
	res := &types.ToolsetEntry{
		ID:             *v.ID,
		ProjectID:      *v.ProjectID,
		OrganizationID: *v.OrganizationID,
		Name:           *v.Name,
		Slug:           types.Slug(*v.Slug),
		Description:    v.Description,
		McpIsPublic:    v.McpIsPublic,
		McpEnabled:     v.McpEnabled,
		CustomDomainID: v.CustomDomainID,
		CreatedAt:      *v.CreatedAt,
		UpdatedAt:      *v.UpdatedAt,
	}
	if v.DefaultEnvironmentSlug != nil {
		defaultEnvironmentSlug := types.Slug(*v.DefaultEnvironmentSlug)
		res.DefaultEnvironmentSlug = &defaultEnvironmentSlug
	}
	if v.McpSlug != nil {
		mcpSlug := types.Slug(*v.McpSlug)
		res.McpSlug = &mcpSlug
	}
	if v.SecurityVariables != nil {
		res.SecurityVariables = make([]*types.SecurityVariable, len(v.SecurityVariables))
		for i, val := range v.SecurityVariables {
			res.SecurityVariables[i] = unmarshalSecurityVariableResponseBodyToTypesSecurityVariable(val)
		}
	}
	if v.ServerVariables != nil {
		res.ServerVariables = make([]*types.ServerVariable, len(v.ServerVariables))
		for i, val := range v.ServerVariables {
			res.ServerVariables[i] = unmarshalServerVariableResponseBodyToTypesServerVariable(val)
		}
	}
	res.HTTPTools = make([]*types.HTTPToolDefinitionEntry, len(v.HTTPTools))
	for i, val := range v.HTTPTools {
		res.HTTPTools[i] = unmarshalHTTPToolDefinitionEntryResponseBodyToTypesHTTPToolDefinitionEntry(val)
	}
	res.PromptTemplates = make([]*types.PromptTemplateEntry, len(v.PromptTemplates))
	for i, val := range v.PromptTemplates {
		res.PromptTemplates[i] = unmarshalPromptTemplateEntryResponseBodyToTypesPromptTemplateEntry(val)
	}

	return res
}

// unmarshalHTTPToolDefinitionEntryResponseBodyToTypesHTTPToolDefinitionEntry
// builds a value of type *types.HTTPToolDefinitionEntry from a value of type
// *HTTPToolDefinitionEntryResponseBody.
func unmarshalHTTPToolDefinitionEntryResponseBodyToTypesHTTPToolDefinitionEntry(v *HTTPToolDefinitionEntryResponseBody) *types.HTTPToolDefinitionEntry {
	res := &types.HTTPToolDefinitionEntry{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// unmarshalPromptTemplateEntryResponseBodyToTypesPromptTemplateEntry builds a
// value of type *types.PromptTemplateEntry from a value of type
// *PromptTemplateEntryResponseBody.
func unmarshalPromptTemplateEntryResponseBodyToTypesPromptTemplateEntry(v *PromptTemplateEntryResponseBody) *types.PromptTemplateEntry {
	res := &types.PromptTemplateEntry{
		ID:   *v.ID,
		Name: types.Slug(*v.Name),
		Kind: v.Kind,
	}

	return res
}

// marshalTypesExternalOAuthServerFormToExternalOAuthServerFormRequestBody
// builds a value of type *ExternalOAuthServerFormRequestBody from a value of
// type *types.ExternalOAuthServerForm.
func marshalTypesExternalOAuthServerFormToExternalOAuthServerFormRequestBody(v *types.ExternalOAuthServerForm) *ExternalOAuthServerFormRequestBody {
	res := &ExternalOAuthServerFormRequestBody{
		Slug:     string(v.Slug),
		Metadata: v.Metadata,
	}

	return res
}

// marshalExternalOAuthServerFormRequestBodyToTypesExternalOAuthServerForm
// builds a value of type *types.ExternalOAuthServerForm from a value of type
// *ExternalOAuthServerFormRequestBody.
func marshalExternalOAuthServerFormRequestBodyToTypesExternalOAuthServerForm(v *ExternalOAuthServerFormRequestBody) *types.ExternalOAuthServerForm {
	res := &types.ExternalOAuthServerForm{
		Slug:     types.Slug(v.Slug),
		Metadata: v.Metadata,
	}

	return res
}
