// Code generated by goa v3.22.2, DO NOT EDIT.
//
// toolsets HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	toolsets "github.com/speakeasy-api/gram/server/gen/toolsets"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateToolsetPayload builds the payload for the toolsets createToolset
// endpoint from CLI flags.
func BuildCreateToolsetPayload(toolsetsCreateToolsetBody string, toolsetsCreateToolsetSessionToken string, toolsetsCreateToolsetProjectSlugInput string) (*toolsets.CreateToolsetPayload, error) {
	var err error
	var body CreateToolsetRequestBody
	{
		err = json.Unmarshal([]byte(toolsetsCreateToolsetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"default_environment_slug\": \"okx\",\n      \"description\": \"Velit eligendi et cumque animi.\",\n      \"http_tool_names\": [\n         \"Qui praesentium numquam quisquam quisquam et.\",\n         \"Maxime voluptate hic quia eius et vel.\",\n         \"Quis repudiandae ipsam.\"\n      ],\n      \"name\": \"Quis nostrum unde reiciendis.\"\n   }'")
		}
		if body.DefaultEnvironmentSlug != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.default_environment_slug", *body.DefaultEnvironmentSlug, "^[a-z0-9]+(?:[a-z0-9_-]*[a-z0-9])?$"))
		}
		if body.DefaultEnvironmentSlug != nil {
			if utf8.RuneCountInString(*body.DefaultEnvironmentSlug) > 40 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.default_environment_slug", *body.DefaultEnvironmentSlug, utf8.RuneCountInString(*body.DefaultEnvironmentSlug), 40, false))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if toolsetsCreateToolsetSessionToken != "" {
			sessionToken = &toolsetsCreateToolsetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsCreateToolsetProjectSlugInput != "" {
			projectSlugInput = &toolsetsCreateToolsetProjectSlugInput
		}
	}
	v := &toolsets.CreateToolsetPayload{
		Name:        body.Name,
		Description: body.Description,
	}
	if body.DefaultEnvironmentSlug != nil {
		defaultEnvironmentSlug := types.Slug(*body.DefaultEnvironmentSlug)
		v.DefaultEnvironmentSlug = &defaultEnvironmentSlug
	}
	if body.HTTPToolNames != nil {
		v.HTTPToolNames = make([]string, len(body.HTTPToolNames))
		for i, val := range body.HTTPToolNames {
			v.HTTPToolNames[i] = val
		}
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildListToolsetsPayload builds the payload for the toolsets listToolsets
// endpoint from CLI flags.
func BuildListToolsetsPayload(toolsetsListToolsetsSessionToken string, toolsetsListToolsetsProjectSlugInput string) (*toolsets.ListToolsetsPayload, error) {
	var sessionToken *string
	{
		if toolsetsListToolsetsSessionToken != "" {
			sessionToken = &toolsetsListToolsetsSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsListToolsetsProjectSlugInput != "" {
			projectSlugInput = &toolsetsListToolsetsProjectSlugInput
		}
	}
	v := &toolsets.ListToolsetsPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildUpdateToolsetPayload builds the payload for the toolsets updateToolset
// endpoint from CLI flags.
func BuildUpdateToolsetPayload(toolsetsUpdateToolsetBody string, toolsetsUpdateToolsetSlug string, toolsetsUpdateToolsetSessionToken string, toolsetsUpdateToolsetProjectSlugInput string) (*toolsets.UpdateToolsetPayload, error) {
	var err error
	var body UpdateToolsetRequestBody
	{
		err = json.Unmarshal([]byte(toolsetsUpdateToolsetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"custom_domain_id\": \"Illum sunt.\",\n      \"default_environment_slug\": \"f9t\",\n      \"description\": \"Et recusandae eius.\",\n      \"http_tool_names\": [\n         \"Eos et libero animi.\",\n         \"Omnis veniam similique.\",\n         \"Atque autem.\"\n      ],\n      \"mcp_enabled\": false,\n      \"mcp_is_public\": false,\n      \"mcp_slug\": \"3zv\",\n      \"name\": \"Dolores pariatur doloribus.\",\n      \"prompt_template_names\": [\n         \"Odit amet beatae impedit id dolores molestiae.\",\n         \"Rerum voluptatem ad ea.\",\n         \"Et eius et.\",\n         \"Nesciunt quam.\"\n      ]\n   }'")
		}
		if body.DefaultEnvironmentSlug != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.default_environment_slug", *body.DefaultEnvironmentSlug, "^[a-z0-9]+(?:[a-z0-9_-]*[a-z0-9])?$"))
		}
		if body.DefaultEnvironmentSlug != nil {
			if utf8.RuneCountInString(*body.DefaultEnvironmentSlug) > 40 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.default_environment_slug", *body.DefaultEnvironmentSlug, utf8.RuneCountInString(*body.DefaultEnvironmentSlug), 40, false))
			}
		}
		if body.McpSlug != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.mcp_slug", *body.McpSlug, "^[a-z0-9]+(?:[a-z0-9_-]*[a-z0-9])?$"))
		}
		if body.McpSlug != nil {
			if utf8.RuneCountInString(*body.McpSlug) > 40 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.mcp_slug", *body.McpSlug, utf8.RuneCountInString(*body.McpSlug), 40, false))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var slug string
	{
		slug = toolsetsUpdateToolsetSlug
		err = goa.MergeErrors(err, goa.ValidatePattern("slug", slug, "^[a-z0-9]+(?:[a-z0-9_-]*[a-z0-9])?$"))
		if utf8.RuneCountInString(slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("slug", slug, utf8.RuneCountInString(slug), 40, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if toolsetsUpdateToolsetSessionToken != "" {
			sessionToken = &toolsetsUpdateToolsetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsUpdateToolsetProjectSlugInput != "" {
			projectSlugInput = &toolsetsUpdateToolsetProjectSlugInput
		}
	}
	v := &toolsets.UpdateToolsetPayload{
		Name:           body.Name,
		Description:    body.Description,
		McpEnabled:     body.McpEnabled,
		McpIsPublic:    body.McpIsPublic,
		CustomDomainID: body.CustomDomainID,
	}
	if body.DefaultEnvironmentSlug != nil {
		defaultEnvironmentSlug := types.Slug(*body.DefaultEnvironmentSlug)
		v.DefaultEnvironmentSlug = &defaultEnvironmentSlug
	}
	if body.McpSlug != nil {
		mcpSlug := types.Slug(*body.McpSlug)
		v.McpSlug = &mcpSlug
	}
	if body.HTTPToolNames != nil {
		v.HTTPToolNames = make([]string, len(body.HTTPToolNames))
		for i, val := range body.HTTPToolNames {
			v.HTTPToolNames[i] = val
		}
	}
	if body.PromptTemplateNames != nil {
		v.PromptTemplateNames = make([]string, len(body.PromptTemplateNames))
		for i, val := range body.PromptTemplateNames {
			v.PromptTemplateNames[i] = val
		}
	}
	v.Slug = types.Slug(slug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildDeleteToolsetPayload builds the payload for the toolsets deleteToolset
// endpoint from CLI flags.
func BuildDeleteToolsetPayload(toolsetsDeleteToolsetSlug string, toolsetsDeleteToolsetSessionToken string, toolsetsDeleteToolsetProjectSlugInput string) (*toolsets.DeleteToolsetPayload, error) {
	var err error
	var slug string
	{
		slug = toolsetsDeleteToolsetSlug
		err = goa.MergeErrors(err, goa.ValidatePattern("slug", slug, "^[a-z0-9]+(?:[a-z0-9_-]*[a-z0-9])?$"))
		if utf8.RuneCountInString(slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("slug", slug, utf8.RuneCountInString(slug), 40, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if toolsetsDeleteToolsetSessionToken != "" {
			sessionToken = &toolsetsDeleteToolsetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsDeleteToolsetProjectSlugInput != "" {
			projectSlugInput = &toolsetsDeleteToolsetProjectSlugInput
		}
	}
	v := &toolsets.DeleteToolsetPayload{}
	v.Slug = types.Slug(slug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildGetToolsetPayload builds the payload for the toolsets getToolset
// endpoint from CLI flags.
func BuildGetToolsetPayload(toolsetsGetToolsetSlug string, toolsetsGetToolsetSessionToken string, toolsetsGetToolsetProjectSlugInput string) (*toolsets.GetToolsetPayload, error) {
	var err error
	var slug string
	{
		slug = toolsetsGetToolsetSlug
		err = goa.MergeErrors(err, goa.ValidatePattern("slug", slug, "^[a-z0-9]+(?:[a-z0-9_-]*[a-z0-9])?$"))
		if utf8.RuneCountInString(slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("slug", slug, utf8.RuneCountInString(slug), 40, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if toolsetsGetToolsetSessionToken != "" {
			sessionToken = &toolsetsGetToolsetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsGetToolsetProjectSlugInput != "" {
			projectSlugInput = &toolsetsGetToolsetProjectSlugInput
		}
	}
	v := &toolsets.GetToolsetPayload{}
	v.Slug = types.Slug(slug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildCheckMCPSlugAvailabilityPayload builds the payload for the toolsets
// checkMCPSlugAvailability endpoint from CLI flags.
func BuildCheckMCPSlugAvailabilityPayload(toolsetsCheckMCPSlugAvailabilitySlug string, toolsetsCheckMCPSlugAvailabilitySessionToken string, toolsetsCheckMCPSlugAvailabilityProjectSlugInput string) (*toolsets.CheckMCPSlugAvailabilityPayload, error) {
	var err error
	var slug string
	{
		slug = toolsetsCheckMCPSlugAvailabilitySlug
		err = goa.MergeErrors(err, goa.ValidatePattern("slug", slug, "^[a-z0-9]+(?:[a-z0-9_-]*[a-z0-9])?$"))
		if utf8.RuneCountInString(slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("slug", slug, utf8.RuneCountInString(slug), 40, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if toolsetsCheckMCPSlugAvailabilitySessionToken != "" {
			sessionToken = &toolsetsCheckMCPSlugAvailabilitySessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsCheckMCPSlugAvailabilityProjectSlugInput != "" {
			projectSlugInput = &toolsetsCheckMCPSlugAvailabilityProjectSlugInput
		}
	}
	v := &toolsets.CheckMCPSlugAvailabilityPayload{}
	v.Slug = types.Slug(slug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildAddExternalOAuthServerPayload builds the payload for the toolsets
// addExternalOAuthServer endpoint from CLI flags.
func BuildAddExternalOAuthServerPayload(toolsetsAddExternalOAuthServerBody string, toolsetsAddExternalOAuthServerSlug string, toolsetsAddExternalOAuthServerSessionToken string, toolsetsAddExternalOAuthServerProjectSlugInput string) (*toolsets.AddExternalOAuthServerPayload, error) {
	var err error
	var body AddExternalOAuthServerRequestBody
	{
		err = json.Unmarshal([]byte(toolsetsAddExternalOAuthServerBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"external_oauth_server\": {\n         \"metadata\": \"Deserunt eaque nostrum impedit ut et ut.\",\n         \"slug\": \"q1j\"\n      }\n   }'")
		}
		if body.ExternalOauthServer == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("external_oauth_server", "body"))
		}
		if body.ExternalOauthServer != nil {
			if err2 := ValidateExternalOAuthServerFormRequestBody(body.ExternalOauthServer); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var slug string
	{
		slug = toolsetsAddExternalOAuthServerSlug
		err = goa.MergeErrors(err, goa.ValidatePattern("slug", slug, "^[a-z0-9]+(?:[a-z0-9_-]*[a-z0-9])?$"))
		if utf8.RuneCountInString(slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("slug", slug, utf8.RuneCountInString(slug), 40, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if toolsetsAddExternalOAuthServerSessionToken != "" {
			sessionToken = &toolsetsAddExternalOAuthServerSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsAddExternalOAuthServerProjectSlugInput != "" {
			projectSlugInput = &toolsetsAddExternalOAuthServerProjectSlugInput
		}
	}
	v := &toolsets.AddExternalOAuthServerPayload{}
	if body.ExternalOauthServer != nil {
		v.ExternalOauthServer = marshalExternalOAuthServerFormRequestBodyToTypesExternalOAuthServerForm(body.ExternalOauthServer)
	}
	v.Slug = types.Slug(slug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildRemoveOAuthServerPayload builds the payload for the toolsets
// removeOAuthServer endpoint from CLI flags.
func BuildRemoveOAuthServerPayload(toolsetsRemoveOAuthServerSlug string, toolsetsRemoveOAuthServerSessionToken string, toolsetsRemoveOAuthServerProjectSlugInput string) (*toolsets.RemoveOAuthServerPayload, error) {
	var err error
	var slug string
	{
		slug = toolsetsRemoveOAuthServerSlug
		err = goa.MergeErrors(err, goa.ValidatePattern("slug", slug, "^[a-z0-9]+(?:[a-z0-9_-]*[a-z0-9])?$"))
		if utf8.RuneCountInString(slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("slug", slug, utf8.RuneCountInString(slug), 40, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if toolsetsRemoveOAuthServerSessionToken != "" {
			sessionToken = &toolsetsRemoveOAuthServerSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsRemoveOAuthServerProjectSlugInput != "" {
			projectSlugInput = &toolsetsRemoveOAuthServerProjectSlugInput
		}
	}
	v := &toolsets.RemoveOAuthServerPayload{}
	v.Slug = types.Slug(slug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}
