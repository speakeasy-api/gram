// Code generated by goa v3.22.3, DO NOT EDIT.
//
// mcpMetadata HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	"unicode/utf8"

	mcpmetadata "github.com/speakeasy-api/gram/server/gen/mcp_metadata"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
)

// SetMcpMetadataRequestBody is the type of the "mcpMetadata" service
// "setMcpMetadata" endpoint HTTP request body.
type SetMcpMetadataRequestBody struct {
	// The slug of the toolset associated with this install page metadata
	ToolsetSlug *string `form:"toolset_slug,omitempty" json:"toolset_slug,omitempty" xml:"toolset_slug,omitempty"`
	// The asset ID for the MCP install page logo
	LogoAssetID *string `form:"logo_asset_id,omitempty" json:"logo_asset_id,omitempty" xml:"logo_asset_id,omitempty"`
	// A link to external documentation for the MCP install page
	ExternalDocumentationURL *string `form:"external_documentation_url,omitempty" json:"external_documentation_url,omitempty" xml:"external_documentation_url,omitempty"`
}

// GetMcpMetadataResponseBody is the type of the "mcpMetadata" service
// "getMcpMetadata" endpoint HTTP response body.
type GetMcpMetadataResponseBody struct {
	// Metadata for the MCP install page
	Metadata *McpMetadataResponseBody `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// SetMcpMetadataResponseBody is the type of the "mcpMetadata" service
// "setMcpMetadata" endpoint HTTP response body.
type SetMcpMetadataResponseBody struct {
	// The ID of the metadata record
	ID string `form:"id" json:"id" xml:"id"`
	// The toolset associated with this install page metadata
	ToolsetID string `form:"toolset_id" json:"toolset_id" xml:"toolset_id"`
	// The asset ID for the MCP install page logo
	LogoAssetID *string `form:"logo_asset_id,omitempty" json:"logo_asset_id,omitempty" xml:"logo_asset_id,omitempty"`
	// A link to external documentation for the MCP install page
	ExternalDocumentationURL *string `form:"external_documentation_url,omitempty" json:"external_documentation_url,omitempty" xml:"external_documentation_url,omitempty"`
	// When the metadata entry was created
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the metadata entry was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// GetMcpMetadataUnauthorizedResponseBody is the type of the "mcpMetadata"
// service "getMcpMetadata" endpoint HTTP response body for the "unauthorized"
// error.
type GetMcpMetadataUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetMcpMetadataForbiddenResponseBody is the type of the "mcpMetadata" service
// "getMcpMetadata" endpoint HTTP response body for the "forbidden" error.
type GetMcpMetadataForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetMcpMetadataBadRequestResponseBody is the type of the "mcpMetadata"
// service "getMcpMetadata" endpoint HTTP response body for the "bad_request"
// error.
type GetMcpMetadataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetMcpMetadataNotFoundResponseBody is the type of the "mcpMetadata" service
// "getMcpMetadata" endpoint HTTP response body for the "not_found" error.
type GetMcpMetadataNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetMcpMetadataConflictResponseBody is the type of the "mcpMetadata" service
// "getMcpMetadata" endpoint HTTP response body for the "conflict" error.
type GetMcpMetadataConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetMcpMetadataUnsupportedMediaResponseBody is the type of the "mcpMetadata"
// service "getMcpMetadata" endpoint HTTP response body for the
// "unsupported_media" error.
type GetMcpMetadataUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetMcpMetadataInvalidResponseBody is the type of the "mcpMetadata" service
// "getMcpMetadata" endpoint HTTP response body for the "invalid" error.
type GetMcpMetadataInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetMcpMetadataInvariantViolationResponseBody is the type of the
// "mcpMetadata" service "getMcpMetadata" endpoint HTTP response body for the
// "invariant_violation" error.
type GetMcpMetadataInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetMcpMetadataUnexpectedResponseBody is the type of the "mcpMetadata"
// service "getMcpMetadata" endpoint HTTP response body for the "unexpected"
// error.
type GetMcpMetadataUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetMcpMetadataGatewayErrorResponseBody is the type of the "mcpMetadata"
// service "getMcpMetadata" endpoint HTTP response body for the "gateway_error"
// error.
type GetMcpMetadataGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetMcpMetadataUnauthorizedResponseBody is the type of the "mcpMetadata"
// service "setMcpMetadata" endpoint HTTP response body for the "unauthorized"
// error.
type SetMcpMetadataUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetMcpMetadataForbiddenResponseBody is the type of the "mcpMetadata" service
// "setMcpMetadata" endpoint HTTP response body for the "forbidden" error.
type SetMcpMetadataForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetMcpMetadataBadRequestResponseBody is the type of the "mcpMetadata"
// service "setMcpMetadata" endpoint HTTP response body for the "bad_request"
// error.
type SetMcpMetadataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetMcpMetadataNotFoundResponseBody is the type of the "mcpMetadata" service
// "setMcpMetadata" endpoint HTTP response body for the "not_found" error.
type SetMcpMetadataNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetMcpMetadataConflictResponseBody is the type of the "mcpMetadata" service
// "setMcpMetadata" endpoint HTTP response body for the "conflict" error.
type SetMcpMetadataConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetMcpMetadataUnsupportedMediaResponseBody is the type of the "mcpMetadata"
// service "setMcpMetadata" endpoint HTTP response body for the
// "unsupported_media" error.
type SetMcpMetadataUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetMcpMetadataInvalidResponseBody is the type of the "mcpMetadata" service
// "setMcpMetadata" endpoint HTTP response body for the "invalid" error.
type SetMcpMetadataInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetMcpMetadataInvariantViolationResponseBody is the type of the
// "mcpMetadata" service "setMcpMetadata" endpoint HTTP response body for the
// "invariant_violation" error.
type SetMcpMetadataInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetMcpMetadataUnexpectedResponseBody is the type of the "mcpMetadata"
// service "setMcpMetadata" endpoint HTTP response body for the "unexpected"
// error.
type SetMcpMetadataUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetMcpMetadataGatewayErrorResponseBody is the type of the "mcpMetadata"
// service "setMcpMetadata" endpoint HTTP response body for the "gateway_error"
// error.
type SetMcpMetadataGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// McpMetadataResponseBody is used to define fields on response body types.
type McpMetadataResponseBody struct {
	// The ID of the metadata record
	ID string `form:"id" json:"id" xml:"id"`
	// The toolset associated with this install page metadata
	ToolsetID string `form:"toolset_id" json:"toolset_id" xml:"toolset_id"`
	// The asset ID for the MCP install page logo
	LogoAssetID *string `form:"logo_asset_id,omitempty" json:"logo_asset_id,omitempty" xml:"logo_asset_id,omitempty"`
	// A link to external documentation for the MCP install page
	ExternalDocumentationURL *string `form:"external_documentation_url,omitempty" json:"external_documentation_url,omitempty" xml:"external_documentation_url,omitempty"`
	// When the metadata entry was created
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the metadata entry was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewGetMcpMetadataResponseBody builds the HTTP response body from the result
// of the "getMcpMetadata" endpoint of the "mcpMetadata" service.
func NewGetMcpMetadataResponseBody(res *mcpmetadata.GetMcpMetadataResult) *GetMcpMetadataResponseBody {
	body := &GetMcpMetadataResponseBody{}
	if res.Metadata != nil {
		body.Metadata = marshalTypesMcpMetadataToMcpMetadataResponseBody(res.Metadata)
	}
	return body
}

// NewSetMcpMetadataResponseBody builds the HTTP response body from the result
// of the "setMcpMetadata" endpoint of the "mcpMetadata" service.
func NewSetMcpMetadataResponseBody(res *types.McpMetadata) *SetMcpMetadataResponseBody {
	body := &SetMcpMetadataResponseBody{
		ID:                       res.ID,
		ToolsetID:                res.ToolsetID,
		LogoAssetID:              res.LogoAssetID,
		ExternalDocumentationURL: res.ExternalDocumentationURL,
		CreatedAt:                res.CreatedAt,
		UpdatedAt:                res.UpdatedAt,
	}
	return body
}

// NewGetMcpMetadataUnauthorizedResponseBody builds the HTTP response body from
// the result of the "getMcpMetadata" endpoint of the "mcpMetadata" service.
func NewGetMcpMetadataUnauthorizedResponseBody(res *goa.ServiceError) *GetMcpMetadataUnauthorizedResponseBody {
	body := &GetMcpMetadataUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetMcpMetadataForbiddenResponseBody builds the HTTP response body from
// the result of the "getMcpMetadata" endpoint of the "mcpMetadata" service.
func NewGetMcpMetadataForbiddenResponseBody(res *goa.ServiceError) *GetMcpMetadataForbiddenResponseBody {
	body := &GetMcpMetadataForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetMcpMetadataBadRequestResponseBody builds the HTTP response body from
// the result of the "getMcpMetadata" endpoint of the "mcpMetadata" service.
func NewGetMcpMetadataBadRequestResponseBody(res *goa.ServiceError) *GetMcpMetadataBadRequestResponseBody {
	body := &GetMcpMetadataBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetMcpMetadataNotFoundResponseBody builds the HTTP response body from the
// result of the "getMcpMetadata" endpoint of the "mcpMetadata" service.
func NewGetMcpMetadataNotFoundResponseBody(res *goa.ServiceError) *GetMcpMetadataNotFoundResponseBody {
	body := &GetMcpMetadataNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetMcpMetadataConflictResponseBody builds the HTTP response body from the
// result of the "getMcpMetadata" endpoint of the "mcpMetadata" service.
func NewGetMcpMetadataConflictResponseBody(res *goa.ServiceError) *GetMcpMetadataConflictResponseBody {
	body := &GetMcpMetadataConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetMcpMetadataUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "getMcpMetadata" endpoint of the "mcpMetadata"
// service.
func NewGetMcpMetadataUnsupportedMediaResponseBody(res *goa.ServiceError) *GetMcpMetadataUnsupportedMediaResponseBody {
	body := &GetMcpMetadataUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetMcpMetadataInvalidResponseBody builds the HTTP response body from the
// result of the "getMcpMetadata" endpoint of the "mcpMetadata" service.
func NewGetMcpMetadataInvalidResponseBody(res *goa.ServiceError) *GetMcpMetadataInvalidResponseBody {
	body := &GetMcpMetadataInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetMcpMetadataInvariantViolationResponseBody builds the HTTP response
// body from the result of the "getMcpMetadata" endpoint of the "mcpMetadata"
// service.
func NewGetMcpMetadataInvariantViolationResponseBody(res *goa.ServiceError) *GetMcpMetadataInvariantViolationResponseBody {
	body := &GetMcpMetadataInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetMcpMetadataUnexpectedResponseBody builds the HTTP response body from
// the result of the "getMcpMetadata" endpoint of the "mcpMetadata" service.
func NewGetMcpMetadataUnexpectedResponseBody(res *goa.ServiceError) *GetMcpMetadataUnexpectedResponseBody {
	body := &GetMcpMetadataUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetMcpMetadataGatewayErrorResponseBody builds the HTTP response body from
// the result of the "getMcpMetadata" endpoint of the "mcpMetadata" service.
func NewGetMcpMetadataGatewayErrorResponseBody(res *goa.ServiceError) *GetMcpMetadataGatewayErrorResponseBody {
	body := &GetMcpMetadataGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetMcpMetadataUnauthorizedResponseBody builds the HTTP response body from
// the result of the "setMcpMetadata" endpoint of the "mcpMetadata" service.
func NewSetMcpMetadataUnauthorizedResponseBody(res *goa.ServiceError) *SetMcpMetadataUnauthorizedResponseBody {
	body := &SetMcpMetadataUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetMcpMetadataForbiddenResponseBody builds the HTTP response body from
// the result of the "setMcpMetadata" endpoint of the "mcpMetadata" service.
func NewSetMcpMetadataForbiddenResponseBody(res *goa.ServiceError) *SetMcpMetadataForbiddenResponseBody {
	body := &SetMcpMetadataForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetMcpMetadataBadRequestResponseBody builds the HTTP response body from
// the result of the "setMcpMetadata" endpoint of the "mcpMetadata" service.
func NewSetMcpMetadataBadRequestResponseBody(res *goa.ServiceError) *SetMcpMetadataBadRequestResponseBody {
	body := &SetMcpMetadataBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetMcpMetadataNotFoundResponseBody builds the HTTP response body from the
// result of the "setMcpMetadata" endpoint of the "mcpMetadata" service.
func NewSetMcpMetadataNotFoundResponseBody(res *goa.ServiceError) *SetMcpMetadataNotFoundResponseBody {
	body := &SetMcpMetadataNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetMcpMetadataConflictResponseBody builds the HTTP response body from the
// result of the "setMcpMetadata" endpoint of the "mcpMetadata" service.
func NewSetMcpMetadataConflictResponseBody(res *goa.ServiceError) *SetMcpMetadataConflictResponseBody {
	body := &SetMcpMetadataConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetMcpMetadataUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "setMcpMetadata" endpoint of the "mcpMetadata"
// service.
func NewSetMcpMetadataUnsupportedMediaResponseBody(res *goa.ServiceError) *SetMcpMetadataUnsupportedMediaResponseBody {
	body := &SetMcpMetadataUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetMcpMetadataInvalidResponseBody builds the HTTP response body from the
// result of the "setMcpMetadata" endpoint of the "mcpMetadata" service.
func NewSetMcpMetadataInvalidResponseBody(res *goa.ServiceError) *SetMcpMetadataInvalidResponseBody {
	body := &SetMcpMetadataInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetMcpMetadataInvariantViolationResponseBody builds the HTTP response
// body from the result of the "setMcpMetadata" endpoint of the "mcpMetadata"
// service.
func NewSetMcpMetadataInvariantViolationResponseBody(res *goa.ServiceError) *SetMcpMetadataInvariantViolationResponseBody {
	body := &SetMcpMetadataInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetMcpMetadataUnexpectedResponseBody builds the HTTP response body from
// the result of the "setMcpMetadata" endpoint of the "mcpMetadata" service.
func NewSetMcpMetadataUnexpectedResponseBody(res *goa.ServiceError) *SetMcpMetadataUnexpectedResponseBody {
	body := &SetMcpMetadataUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetMcpMetadataGatewayErrorResponseBody builds the HTTP response body from
// the result of the "setMcpMetadata" endpoint of the "mcpMetadata" service.
func NewSetMcpMetadataGatewayErrorResponseBody(res *goa.ServiceError) *SetMcpMetadataGatewayErrorResponseBody {
	body := &SetMcpMetadataGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetMcpMetadataPayload builds a mcpMetadata service getMcpMetadata
// endpoint payload.
func NewGetMcpMetadataPayload(toolsetSlug string, sessionToken *string, projectSlugInput *string) *mcpmetadata.GetMcpMetadataPayload {
	v := &mcpmetadata.GetMcpMetadataPayload{}
	v.ToolsetSlug = types.Slug(toolsetSlug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewSetMcpMetadataPayload builds a mcpMetadata service setMcpMetadata
// endpoint payload.
func NewSetMcpMetadataPayload(body *SetMcpMetadataRequestBody, sessionToken *string, projectSlugInput *string) *mcpmetadata.SetMcpMetadataPayload {
	v := &mcpmetadata.SetMcpMetadataPayload{
		ToolsetSlug:              types.Slug(*body.ToolsetSlug),
		LogoAssetID:              body.LogoAssetID,
		ExternalDocumentationURL: body.ExternalDocumentationURL,
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// ValidateSetMcpMetadataRequestBody runs the validations defined on
// SetMcpMetadataRequestBody
func ValidateSetMcpMetadataRequestBody(body *SetMcpMetadataRequestBody) (err error) {
	if body.ToolsetSlug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("toolset_slug", "body"))
	}
	if body.ToolsetSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.toolset_slug", *body.ToolsetSlug, "^[a-z0-9_-]{1,128}$"))
	}
	if body.ToolsetSlug != nil {
		if utf8.RuneCountInString(*body.ToolsetSlug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.toolset_slug", *body.ToolsetSlug, utf8.RuneCountInString(*body.ToolsetSlug), 40, false))
		}
	}
	return
}
