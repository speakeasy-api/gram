// Code generated by goa v3.22.3, DO NOT EDIT.
//
// mcpMetadata HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	mcpmetadata "github.com/speakeasy-api/gram/server/gen/mcp_metadata"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetMcpMetadataRequest instantiates a HTTP request object with method
// and path set to call the "mcpMetadata" service "getMcpMetadata" endpoint
func (c *Client) BuildGetMcpMetadataRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetMcpMetadataMcpMetadataPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcpMetadata", "getMcpMetadata", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetMcpMetadataRequest returns an encoder for requests sent to the
// mcpMetadata getMcpMetadata server.
func EncodeGetMcpMetadataRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpmetadata.GetMcpMetadataPayload)
		if !ok {
			return goahttp.ErrInvalidType("mcpMetadata", "getMcpMetadata", "*mcpmetadata.GetMcpMetadataPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("toolset_slug", string(p.ToolsetSlug))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetMcpMetadataResponse returns a decoder for responses returned by the
// mcpMetadata getMcpMetadata endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetMcpMetadataResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeGetMcpMetadataResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetMcpMetadataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "getMcpMetadata", err)
			}
			err = ValidateGetMcpMetadataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "getMcpMetadata", err)
			}
			res := NewGetMcpMetadataResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetMcpMetadataUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "getMcpMetadata", err)
			}
			err = ValidateGetMcpMetadataUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "getMcpMetadata", err)
			}
			return nil, NewGetMcpMetadataUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetMcpMetadataForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "getMcpMetadata", err)
			}
			err = ValidateGetMcpMetadataForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "getMcpMetadata", err)
			}
			return nil, NewGetMcpMetadataForbidden(&body)
		case http.StatusBadRequest:
			var (
				body GetMcpMetadataBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "getMcpMetadata", err)
			}
			err = ValidateGetMcpMetadataBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "getMcpMetadata", err)
			}
			return nil, NewGetMcpMetadataBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetMcpMetadataNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "getMcpMetadata", err)
			}
			err = ValidateGetMcpMetadataNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "getMcpMetadata", err)
			}
			return nil, NewGetMcpMetadataNotFound(&body)
		case http.StatusConflict:
			var (
				body GetMcpMetadataConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "getMcpMetadata", err)
			}
			err = ValidateGetMcpMetadataConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "getMcpMetadata", err)
			}
			return nil, NewGetMcpMetadataConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body GetMcpMetadataUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "getMcpMetadata", err)
			}
			err = ValidateGetMcpMetadataUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "getMcpMetadata", err)
			}
			return nil, NewGetMcpMetadataUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body GetMcpMetadataInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "getMcpMetadata", err)
			}
			err = ValidateGetMcpMetadataInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "getMcpMetadata", err)
			}
			return nil, NewGetMcpMetadataInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body GetMcpMetadataInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mcpMetadata", "getMcpMetadata", err)
				}
				err = ValidateGetMcpMetadataInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("mcpMetadata", "getMcpMetadata", err)
				}
				return nil, NewGetMcpMetadataInvariantViolation(&body)
			case "unexpected":
				var (
					body GetMcpMetadataUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mcpMetadata", "getMcpMetadata", err)
				}
				err = ValidateGetMcpMetadataUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("mcpMetadata", "getMcpMetadata", err)
				}
				return nil, NewGetMcpMetadataUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcpMetadata", "getMcpMetadata", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body GetMcpMetadataGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "getMcpMetadata", err)
			}
			err = ValidateGetMcpMetadataGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "getMcpMetadata", err)
			}
			return nil, NewGetMcpMetadataGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcpMetadata", "getMcpMetadata", resp.StatusCode, string(body))
		}
	}
}

// BuildSetMcpMetadataRequest instantiates a HTTP request object with method
// and path set to call the "mcpMetadata" service "setMcpMetadata" endpoint
func (c *Client) BuildSetMcpMetadataRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SetMcpMetadataMcpMetadataPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcpMetadata", "setMcpMetadata", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSetMcpMetadataRequest returns an encoder for requests sent to the
// mcpMetadata setMcpMetadata server.
func EncodeSetMcpMetadataRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mcpmetadata.SetMcpMetadataPayload)
		if !ok {
			return goahttp.ErrInvalidType("mcpMetadata", "setMcpMetadata", "*mcpmetadata.SetMcpMetadataPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewSetMcpMetadataRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mcpMetadata", "setMcpMetadata", err)
		}
		return nil
	}
}

// DecodeSetMcpMetadataResponse returns a decoder for responses returned by the
// mcpMetadata setMcpMetadata endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeSetMcpMetadataResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeSetMcpMetadataResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SetMcpMetadataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "setMcpMetadata", err)
			}
			err = ValidateSetMcpMetadataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "setMcpMetadata", err)
			}
			res := NewSetMcpMetadataMcpMetadataOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body SetMcpMetadataUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "setMcpMetadata", err)
			}
			err = ValidateSetMcpMetadataUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "setMcpMetadata", err)
			}
			return nil, NewSetMcpMetadataUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body SetMcpMetadataForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "setMcpMetadata", err)
			}
			err = ValidateSetMcpMetadataForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "setMcpMetadata", err)
			}
			return nil, NewSetMcpMetadataForbidden(&body)
		case http.StatusBadRequest:
			var (
				body SetMcpMetadataBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "setMcpMetadata", err)
			}
			err = ValidateSetMcpMetadataBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "setMcpMetadata", err)
			}
			return nil, NewSetMcpMetadataBadRequest(&body)
		case http.StatusNotFound:
			var (
				body SetMcpMetadataNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "setMcpMetadata", err)
			}
			err = ValidateSetMcpMetadataNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "setMcpMetadata", err)
			}
			return nil, NewSetMcpMetadataNotFound(&body)
		case http.StatusConflict:
			var (
				body SetMcpMetadataConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "setMcpMetadata", err)
			}
			err = ValidateSetMcpMetadataConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "setMcpMetadata", err)
			}
			return nil, NewSetMcpMetadataConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body SetMcpMetadataUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "setMcpMetadata", err)
			}
			err = ValidateSetMcpMetadataUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "setMcpMetadata", err)
			}
			return nil, NewSetMcpMetadataUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body SetMcpMetadataInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "setMcpMetadata", err)
			}
			err = ValidateSetMcpMetadataInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "setMcpMetadata", err)
			}
			return nil, NewSetMcpMetadataInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body SetMcpMetadataInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mcpMetadata", "setMcpMetadata", err)
				}
				err = ValidateSetMcpMetadataInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("mcpMetadata", "setMcpMetadata", err)
				}
				return nil, NewSetMcpMetadataInvariantViolation(&body)
			case "unexpected":
				var (
					body SetMcpMetadataUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mcpMetadata", "setMcpMetadata", err)
				}
				err = ValidateSetMcpMetadataUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("mcpMetadata", "setMcpMetadata", err)
				}
				return nil, NewSetMcpMetadataUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcpMetadata", "setMcpMetadata", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body SetMcpMetadataGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcpMetadata", "setMcpMetadata", err)
			}
			err = ValidateSetMcpMetadataGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcpMetadata", "setMcpMetadata", err)
			}
			return nil, NewSetMcpMetadataGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcpMetadata", "setMcpMetadata", resp.StatusCode, string(body))
		}
	}
}

// unmarshalMcpMetadataResponseBodyToTypesMcpMetadata builds a value of type
// *types.McpMetadata from a value of type *McpMetadataResponseBody.
func unmarshalMcpMetadataResponseBodyToTypesMcpMetadata(v *McpMetadataResponseBody) *types.McpMetadata {
	if v == nil {
		return nil
	}
	res := &types.McpMetadata{
		ID:                       *v.ID,
		ToolsetID:                *v.ToolsetID,
		LogoAssetID:              v.LogoAssetID,
		ExternalDocumentationURL: v.ExternalDocumentationURL,
		CreatedAt:                *v.CreatedAt,
		UpdatedAt:                *v.UpdatedAt,
	}

	return res
}
