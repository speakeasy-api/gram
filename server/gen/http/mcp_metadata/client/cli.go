// Code generated by goa v3.22.3, DO NOT EDIT.
//
// mcpMetadata HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	mcpmetadata "github.com/speakeasy-api/gram/server/gen/mcp_metadata"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetMcpMetadataPayload builds the payload for the mcpMetadata
// getMcpMetadata endpoint from CLI flags.
func BuildGetMcpMetadataPayload(mcpMetadataGetMcpMetadataToolsetSlug string, mcpMetadataGetMcpMetadataSessionToken string, mcpMetadataGetMcpMetadataProjectSlugInput string) (*mcpmetadata.GetMcpMetadataPayload, error) {
	var err error
	var toolsetSlug string
	{
		toolsetSlug = mcpMetadataGetMcpMetadataToolsetSlug
		err = goa.MergeErrors(err, goa.ValidatePattern("toolset_slug", toolsetSlug, "^[a-z0-9_-]{1,128}$"))
		if utf8.RuneCountInString(toolsetSlug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("toolset_slug", toolsetSlug, utf8.RuneCountInString(toolsetSlug), 40, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if mcpMetadataGetMcpMetadataSessionToken != "" {
			sessionToken = &mcpMetadataGetMcpMetadataSessionToken
		}
	}
	var projectSlugInput *string
	{
		if mcpMetadataGetMcpMetadataProjectSlugInput != "" {
			projectSlugInput = &mcpMetadataGetMcpMetadataProjectSlugInput
		}
	}
	v := &mcpmetadata.GetMcpMetadataPayload{}
	v.ToolsetSlug = types.Slug(toolsetSlug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildSetMcpMetadataPayload builds the payload for the mcpMetadata
// setMcpMetadata endpoint from CLI flags.
func BuildSetMcpMetadataPayload(mcpMetadataSetMcpMetadataBody string, mcpMetadataSetMcpMetadataSessionToken string, mcpMetadataSetMcpMetadataProjectSlugInput string) (*mcpmetadata.SetMcpMetadataPayload, error) {
	var err error
	var body SetMcpMetadataRequestBody
	{
		err = json.Unmarshal([]byte(mcpMetadataSetMcpMetadataBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"external_documentation_url\": \"Totam nemo incidunt accusamus.\",\n      \"logo_asset_id\": \"Officiis aut sed qui.\",\n      \"toolset_slug\": \"mj2\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.toolset_slug", body.ToolsetSlug, "^[a-z0-9_-]{1,128}$"))
		if utf8.RuneCountInString(body.ToolsetSlug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.toolset_slug", body.ToolsetSlug, utf8.RuneCountInString(body.ToolsetSlug), 40, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if mcpMetadataSetMcpMetadataSessionToken != "" {
			sessionToken = &mcpMetadataSetMcpMetadataSessionToken
		}
	}
	var projectSlugInput *string
	{
		if mcpMetadataSetMcpMetadataProjectSlugInput != "" {
			projectSlugInput = &mcpMetadataSetMcpMetadataProjectSlugInput
		}
	}
	v := &mcpmetadata.SetMcpMetadataPayload{
		ToolsetSlug:              types.Slug(body.ToolsetSlug),
		LogoAssetID:              body.LogoAssetID,
		ExternalDocumentationURL: body.ExternalDocumentationURL,
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}
