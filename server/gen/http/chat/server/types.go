// Code generated by goa v3.22.2, DO NOT EDIT.
//
// chat HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	chat "github.com/speakeasy-api/gram/server/gen/chat"
	goa "goa.design/goa/v3/pkg"
)

// ListChatsResponseBody is the type of the "chat" service "listChats" endpoint
// HTTP response body.
type ListChatsResponseBody struct {
	// The list of chats
	Chats []*ChatOverviewResponseBody `form:"chats" json:"chats" xml:"chats"`
}

// LoadChatResponseBody is the type of the "chat" service "loadChat" endpoint
// HTTP response body.
type LoadChatResponseBody struct {
	// The list of messages in the chat
	Messages []*ChatMessageResponseBody `form:"messages" json:"messages" xml:"messages"`
	// The ID of the chat
	ID string `form:"id" json:"id" xml:"id"`
	// The title of the chat
	Title string `form:"title" json:"title" xml:"title"`
	// The ID of the user who created the chat
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// The number of messages in the chat
	NumMessages int `form:"num_messages" json:"num_messages" xml:"num_messages"`
	// When the chat was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the chat was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// CreditUsageResponseBody is the type of the "chat" service "creditUsage"
// endpoint HTTP response body.
type CreditUsageResponseBody struct {
	// The number of credits remaining
	CreditsUsed float64 `form:"credits_used" json:"credits_used" xml:"credits_used"`
	// The number of monthly credits
	MonthlyCredits int `form:"monthly_credits" json:"monthly_credits" xml:"monthly_credits"`
}

// ListChatsUnauthorizedResponseBody is the type of the "chat" service
// "listChats" endpoint HTTP response body for the "unauthorized" error.
type ListChatsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListChatsForbiddenResponseBody is the type of the "chat" service "listChats"
// endpoint HTTP response body for the "forbidden" error.
type ListChatsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListChatsBadRequestResponseBody is the type of the "chat" service
// "listChats" endpoint HTTP response body for the "bad_request" error.
type ListChatsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListChatsNotFoundResponseBody is the type of the "chat" service "listChats"
// endpoint HTTP response body for the "not_found" error.
type ListChatsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListChatsConflictResponseBody is the type of the "chat" service "listChats"
// endpoint HTTP response body for the "conflict" error.
type ListChatsConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListChatsUnsupportedMediaResponseBody is the type of the "chat" service
// "listChats" endpoint HTTP response body for the "unsupported_media" error.
type ListChatsUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListChatsInvalidResponseBody is the type of the "chat" service "listChats"
// endpoint HTTP response body for the "invalid" error.
type ListChatsInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListChatsInvariantViolationResponseBody is the type of the "chat" service
// "listChats" endpoint HTTP response body for the "invariant_violation" error.
type ListChatsInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListChatsUnexpectedResponseBody is the type of the "chat" service
// "listChats" endpoint HTTP response body for the "unexpected" error.
type ListChatsUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListChatsGatewayErrorResponseBody is the type of the "chat" service
// "listChats" endpoint HTTP response body for the "gateway_error" error.
type ListChatsGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoadChatUnauthorizedResponseBody is the type of the "chat" service
// "loadChat" endpoint HTTP response body for the "unauthorized" error.
type LoadChatUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoadChatForbiddenResponseBody is the type of the "chat" service "loadChat"
// endpoint HTTP response body for the "forbidden" error.
type LoadChatForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoadChatBadRequestResponseBody is the type of the "chat" service "loadChat"
// endpoint HTTP response body for the "bad_request" error.
type LoadChatBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoadChatNotFoundResponseBody is the type of the "chat" service "loadChat"
// endpoint HTTP response body for the "not_found" error.
type LoadChatNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoadChatConflictResponseBody is the type of the "chat" service "loadChat"
// endpoint HTTP response body for the "conflict" error.
type LoadChatConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoadChatUnsupportedMediaResponseBody is the type of the "chat" service
// "loadChat" endpoint HTTP response body for the "unsupported_media" error.
type LoadChatUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoadChatInvalidResponseBody is the type of the "chat" service "loadChat"
// endpoint HTTP response body for the "invalid" error.
type LoadChatInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoadChatInvariantViolationResponseBody is the type of the "chat" service
// "loadChat" endpoint HTTP response body for the "invariant_violation" error.
type LoadChatInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoadChatUnexpectedResponseBody is the type of the "chat" service "loadChat"
// endpoint HTTP response body for the "unexpected" error.
type LoadChatUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoadChatGatewayErrorResponseBody is the type of the "chat" service
// "loadChat" endpoint HTTP response body for the "gateway_error" error.
type LoadChatGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreditUsageUnauthorizedResponseBody is the type of the "chat" service
// "creditUsage" endpoint HTTP response body for the "unauthorized" error.
type CreditUsageUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreditUsageForbiddenResponseBody is the type of the "chat" service
// "creditUsage" endpoint HTTP response body for the "forbidden" error.
type CreditUsageForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreditUsageBadRequestResponseBody is the type of the "chat" service
// "creditUsage" endpoint HTTP response body for the "bad_request" error.
type CreditUsageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreditUsageNotFoundResponseBody is the type of the "chat" service
// "creditUsage" endpoint HTTP response body for the "not_found" error.
type CreditUsageNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreditUsageConflictResponseBody is the type of the "chat" service
// "creditUsage" endpoint HTTP response body for the "conflict" error.
type CreditUsageConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreditUsageUnsupportedMediaResponseBody is the type of the "chat" service
// "creditUsage" endpoint HTTP response body for the "unsupported_media" error.
type CreditUsageUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreditUsageInvalidResponseBody is the type of the "chat" service
// "creditUsage" endpoint HTTP response body for the "invalid" error.
type CreditUsageInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreditUsageInvariantViolationResponseBody is the type of the "chat" service
// "creditUsage" endpoint HTTP response body for the "invariant_violation"
// error.
type CreditUsageInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreditUsageUnexpectedResponseBody is the type of the "chat" service
// "creditUsage" endpoint HTTP response body for the "unexpected" error.
type CreditUsageUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreditUsageGatewayErrorResponseBody is the type of the "chat" service
// "creditUsage" endpoint HTTP response body for the "gateway_error" error.
type CreditUsageGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ChatOverviewResponseBody is used to define fields on response body types.
type ChatOverviewResponseBody struct {
	// The ID of the chat
	ID string `form:"id" json:"id" xml:"id"`
	// The title of the chat
	Title string `form:"title" json:"title" xml:"title"`
	// The ID of the user who created the chat
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// The number of messages in the chat
	NumMessages int `form:"num_messages" json:"num_messages" xml:"num_messages"`
	// When the chat was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the chat was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ChatMessageResponseBody is used to define fields on response body types.
type ChatMessageResponseBody struct {
	// The ID of the message
	ID string `form:"id" json:"id" xml:"id"`
	// The role of the message
	Role string `form:"role" json:"role" xml:"role"`
	// The content of the message
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// The model that generated the message
	Model string `form:"model" json:"model" xml:"model"`
	// The tool call ID of the message
	ToolCallID *string `form:"tool_call_id,omitempty" json:"tool_call_id,omitempty" xml:"tool_call_id,omitempty"`
	// The tool calls in the message as a JSON blob
	ToolCalls *string `form:"tool_calls,omitempty" json:"tool_calls,omitempty" xml:"tool_calls,omitempty"`
	// The finish reason of the message
	FinishReason *string `form:"finish_reason,omitempty" json:"finish_reason,omitempty" xml:"finish_reason,omitempty"`
	// The ID of the user who created the message
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// When the message was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
}

// NewListChatsResponseBody builds the HTTP response body from the result of
// the "listChats" endpoint of the "chat" service.
func NewListChatsResponseBody(res *chat.ListChatsResult) *ListChatsResponseBody {
	body := &ListChatsResponseBody{}
	if res.Chats != nil {
		body.Chats = make([]*ChatOverviewResponseBody, len(res.Chats))
		for i, val := range res.Chats {
			body.Chats[i] = marshalChatChatOverviewToChatOverviewResponseBody(val)
		}
	} else {
		body.Chats = []*ChatOverviewResponseBody{}
	}
	return body
}

// NewLoadChatResponseBody builds the HTTP response body from the result of the
// "loadChat" endpoint of the "chat" service.
func NewLoadChatResponseBody(res *chat.Chat) *LoadChatResponseBody {
	body := &LoadChatResponseBody{
		ID:          res.ID,
		Title:       res.Title,
		UserID:      res.UserID,
		NumMessages: res.NumMessages,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	if res.Messages != nil {
		body.Messages = make([]*ChatMessageResponseBody, len(res.Messages))
		for i, val := range res.Messages {
			body.Messages[i] = marshalChatChatMessageToChatMessageResponseBody(val)
		}
	} else {
		body.Messages = []*ChatMessageResponseBody{}
	}
	return body
}

// NewCreditUsageResponseBody builds the HTTP response body from the result of
// the "creditUsage" endpoint of the "chat" service.
func NewCreditUsageResponseBody(res *chat.CreditUsageResult) *CreditUsageResponseBody {
	body := &CreditUsageResponseBody{
		CreditsUsed:    res.CreditsUsed,
		MonthlyCredits: res.MonthlyCredits,
	}
	return body
}

// NewListChatsUnauthorizedResponseBody builds the HTTP response body from the
// result of the "listChats" endpoint of the "chat" service.
func NewListChatsUnauthorizedResponseBody(res *goa.ServiceError) *ListChatsUnauthorizedResponseBody {
	body := &ListChatsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChatsForbiddenResponseBody builds the HTTP response body from the
// result of the "listChats" endpoint of the "chat" service.
func NewListChatsForbiddenResponseBody(res *goa.ServiceError) *ListChatsForbiddenResponseBody {
	body := &ListChatsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChatsBadRequestResponseBody builds the HTTP response body from the
// result of the "listChats" endpoint of the "chat" service.
func NewListChatsBadRequestResponseBody(res *goa.ServiceError) *ListChatsBadRequestResponseBody {
	body := &ListChatsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChatsNotFoundResponseBody builds the HTTP response body from the
// result of the "listChats" endpoint of the "chat" service.
func NewListChatsNotFoundResponseBody(res *goa.ServiceError) *ListChatsNotFoundResponseBody {
	body := &ListChatsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChatsConflictResponseBody builds the HTTP response body from the
// result of the "listChats" endpoint of the "chat" service.
func NewListChatsConflictResponseBody(res *goa.ServiceError) *ListChatsConflictResponseBody {
	body := &ListChatsConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChatsUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "listChats" endpoint of the "chat" service.
func NewListChatsUnsupportedMediaResponseBody(res *goa.ServiceError) *ListChatsUnsupportedMediaResponseBody {
	body := &ListChatsUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChatsInvalidResponseBody builds the HTTP response body from the
// result of the "listChats" endpoint of the "chat" service.
func NewListChatsInvalidResponseBody(res *goa.ServiceError) *ListChatsInvalidResponseBody {
	body := &ListChatsInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChatsInvariantViolationResponseBody builds the HTTP response body
// from the result of the "listChats" endpoint of the "chat" service.
func NewListChatsInvariantViolationResponseBody(res *goa.ServiceError) *ListChatsInvariantViolationResponseBody {
	body := &ListChatsInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChatsUnexpectedResponseBody builds the HTTP response body from the
// result of the "listChats" endpoint of the "chat" service.
func NewListChatsUnexpectedResponseBody(res *goa.ServiceError) *ListChatsUnexpectedResponseBody {
	body := &ListChatsUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChatsGatewayErrorResponseBody builds the HTTP response body from the
// result of the "listChats" endpoint of the "chat" service.
func NewListChatsGatewayErrorResponseBody(res *goa.ServiceError) *ListChatsGatewayErrorResponseBody {
	body := &ListChatsGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoadChatUnauthorizedResponseBody builds the HTTP response body from the
// result of the "loadChat" endpoint of the "chat" service.
func NewLoadChatUnauthorizedResponseBody(res *goa.ServiceError) *LoadChatUnauthorizedResponseBody {
	body := &LoadChatUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoadChatForbiddenResponseBody builds the HTTP response body from the
// result of the "loadChat" endpoint of the "chat" service.
func NewLoadChatForbiddenResponseBody(res *goa.ServiceError) *LoadChatForbiddenResponseBody {
	body := &LoadChatForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoadChatBadRequestResponseBody builds the HTTP response body from the
// result of the "loadChat" endpoint of the "chat" service.
func NewLoadChatBadRequestResponseBody(res *goa.ServiceError) *LoadChatBadRequestResponseBody {
	body := &LoadChatBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoadChatNotFoundResponseBody builds the HTTP response body from the
// result of the "loadChat" endpoint of the "chat" service.
func NewLoadChatNotFoundResponseBody(res *goa.ServiceError) *LoadChatNotFoundResponseBody {
	body := &LoadChatNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoadChatConflictResponseBody builds the HTTP response body from the
// result of the "loadChat" endpoint of the "chat" service.
func NewLoadChatConflictResponseBody(res *goa.ServiceError) *LoadChatConflictResponseBody {
	body := &LoadChatConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoadChatUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "loadChat" endpoint of the "chat" service.
func NewLoadChatUnsupportedMediaResponseBody(res *goa.ServiceError) *LoadChatUnsupportedMediaResponseBody {
	body := &LoadChatUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoadChatInvalidResponseBody builds the HTTP response body from the result
// of the "loadChat" endpoint of the "chat" service.
func NewLoadChatInvalidResponseBody(res *goa.ServiceError) *LoadChatInvalidResponseBody {
	body := &LoadChatInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoadChatInvariantViolationResponseBody builds the HTTP response body from
// the result of the "loadChat" endpoint of the "chat" service.
func NewLoadChatInvariantViolationResponseBody(res *goa.ServiceError) *LoadChatInvariantViolationResponseBody {
	body := &LoadChatInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoadChatUnexpectedResponseBody builds the HTTP response body from the
// result of the "loadChat" endpoint of the "chat" service.
func NewLoadChatUnexpectedResponseBody(res *goa.ServiceError) *LoadChatUnexpectedResponseBody {
	body := &LoadChatUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoadChatGatewayErrorResponseBody builds the HTTP response body from the
// result of the "loadChat" endpoint of the "chat" service.
func NewLoadChatGatewayErrorResponseBody(res *goa.ServiceError) *LoadChatGatewayErrorResponseBody {
	body := &LoadChatGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreditUsageUnauthorizedResponseBody builds the HTTP response body from
// the result of the "creditUsage" endpoint of the "chat" service.
func NewCreditUsageUnauthorizedResponseBody(res *goa.ServiceError) *CreditUsageUnauthorizedResponseBody {
	body := &CreditUsageUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreditUsageForbiddenResponseBody builds the HTTP response body from the
// result of the "creditUsage" endpoint of the "chat" service.
func NewCreditUsageForbiddenResponseBody(res *goa.ServiceError) *CreditUsageForbiddenResponseBody {
	body := &CreditUsageForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreditUsageBadRequestResponseBody builds the HTTP response body from the
// result of the "creditUsage" endpoint of the "chat" service.
func NewCreditUsageBadRequestResponseBody(res *goa.ServiceError) *CreditUsageBadRequestResponseBody {
	body := &CreditUsageBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreditUsageNotFoundResponseBody builds the HTTP response body from the
// result of the "creditUsage" endpoint of the "chat" service.
func NewCreditUsageNotFoundResponseBody(res *goa.ServiceError) *CreditUsageNotFoundResponseBody {
	body := &CreditUsageNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreditUsageConflictResponseBody builds the HTTP response body from the
// result of the "creditUsage" endpoint of the "chat" service.
func NewCreditUsageConflictResponseBody(res *goa.ServiceError) *CreditUsageConflictResponseBody {
	body := &CreditUsageConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreditUsageUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "creditUsage" endpoint of the "chat" service.
func NewCreditUsageUnsupportedMediaResponseBody(res *goa.ServiceError) *CreditUsageUnsupportedMediaResponseBody {
	body := &CreditUsageUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreditUsageInvalidResponseBody builds the HTTP response body from the
// result of the "creditUsage" endpoint of the "chat" service.
func NewCreditUsageInvalidResponseBody(res *goa.ServiceError) *CreditUsageInvalidResponseBody {
	body := &CreditUsageInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreditUsageInvariantViolationResponseBody builds the HTTP response body
// from the result of the "creditUsage" endpoint of the "chat" service.
func NewCreditUsageInvariantViolationResponseBody(res *goa.ServiceError) *CreditUsageInvariantViolationResponseBody {
	body := &CreditUsageInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreditUsageUnexpectedResponseBody builds the HTTP response body from the
// result of the "creditUsage" endpoint of the "chat" service.
func NewCreditUsageUnexpectedResponseBody(res *goa.ServiceError) *CreditUsageUnexpectedResponseBody {
	body := &CreditUsageUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreditUsageGatewayErrorResponseBody builds the HTTP response body from
// the result of the "creditUsage" endpoint of the "chat" service.
func NewCreditUsageGatewayErrorResponseBody(res *goa.ServiceError) *CreditUsageGatewayErrorResponseBody {
	body := &CreditUsageGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChatsPayload builds a chat service listChats endpoint payload.
func NewListChatsPayload(sessionToken *string, projectSlugInput *string) *chat.ListChatsPayload {
	v := &chat.ListChatsPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewLoadChatPayload builds a chat service loadChat endpoint payload.
func NewLoadChatPayload(id string, sessionToken *string, projectSlugInput *string) *chat.LoadChatPayload {
	v := &chat.LoadChatPayload{}
	v.ID = id
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewCreditUsagePayload builds a chat service creditUsage endpoint payload.
func NewCreditUsagePayload(sessionToken *string, projectSlugInput *string) *chat.CreditUsagePayload {
	v := &chat.CreditUsagePayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}
