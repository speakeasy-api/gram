// Code generated by goa v3.22.2, DO NOT EDIT.
//
// chat HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	chat "github.com/speakeasy-api/gram/server/gen/chat"
	goahttp "goa.design/goa/v3/http"
)

// BuildListChatsRequest instantiates a HTTP request object with method and
// path set to call the "chat" service "listChats" endpoint
func (c *Client) BuildListChatsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListChatsChatPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("chat", "listChats", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListChatsRequest returns an encoder for requests sent to the chat
// listChats server.
func EncodeListChatsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*chat.ListChatsPayload)
		if !ok {
			return goahttp.ErrInvalidType("chat", "listChats", "*chat.ListChatsPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		return nil
	}
}

// DecodeListChatsResponse returns a decoder for responses returned by the chat
// listChats endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeListChatsResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeListChatsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListChatsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "listChats", err)
			}
			err = ValidateListChatsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "listChats", err)
			}
			res := NewListChatsResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListChatsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "listChats", err)
			}
			err = ValidateListChatsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "listChats", err)
			}
			return nil, NewListChatsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListChatsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "listChats", err)
			}
			err = ValidateListChatsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "listChats", err)
			}
			return nil, NewListChatsForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ListChatsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "listChats", err)
			}
			err = ValidateListChatsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "listChats", err)
			}
			return nil, NewListChatsBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ListChatsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "listChats", err)
			}
			err = ValidateListChatsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "listChats", err)
			}
			return nil, NewListChatsNotFound(&body)
		case http.StatusConflict:
			var (
				body ListChatsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "listChats", err)
			}
			err = ValidateListChatsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "listChats", err)
			}
			return nil, NewListChatsConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ListChatsUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "listChats", err)
			}
			err = ValidateListChatsUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "listChats", err)
			}
			return nil, NewListChatsUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ListChatsInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "listChats", err)
			}
			err = ValidateListChatsInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "listChats", err)
			}
			return nil, NewListChatsInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ListChatsInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("chat", "listChats", err)
				}
				err = ValidateListChatsInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("chat", "listChats", err)
				}
				return nil, NewListChatsInvariantViolation(&body)
			case "unexpected":
				var (
					body ListChatsUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("chat", "listChats", err)
				}
				err = ValidateListChatsUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("chat", "listChats", err)
				}
				return nil, NewListChatsUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("chat", "listChats", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ListChatsGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "listChats", err)
			}
			err = ValidateListChatsGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "listChats", err)
			}
			return nil, NewListChatsGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("chat", "listChats", resp.StatusCode, string(body))
		}
	}
}

// BuildLoadChatRequest instantiates a HTTP request object with method and path
// set to call the "chat" service "loadChat" endpoint
func (c *Client) BuildLoadChatRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LoadChatChatPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("chat", "loadChat", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLoadChatRequest returns an encoder for requests sent to the chat
// loadChat server.
func EncodeLoadChatRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*chat.LoadChatPayload)
		if !ok {
			return goahttp.ErrInvalidType("chat", "loadChat", "*chat.LoadChatPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("id", p.ID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeLoadChatResponse returns a decoder for responses returned by the chat
// loadChat endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeLoadChatResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeLoadChatResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LoadChatResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "loadChat", err)
			}
			err = ValidateLoadChatResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "loadChat", err)
			}
			res := NewLoadChatChatOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body LoadChatUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "loadChat", err)
			}
			err = ValidateLoadChatUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "loadChat", err)
			}
			return nil, NewLoadChatUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body LoadChatForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "loadChat", err)
			}
			err = ValidateLoadChatForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "loadChat", err)
			}
			return nil, NewLoadChatForbidden(&body)
		case http.StatusBadRequest:
			var (
				body LoadChatBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "loadChat", err)
			}
			err = ValidateLoadChatBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "loadChat", err)
			}
			return nil, NewLoadChatBadRequest(&body)
		case http.StatusNotFound:
			var (
				body LoadChatNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "loadChat", err)
			}
			err = ValidateLoadChatNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "loadChat", err)
			}
			return nil, NewLoadChatNotFound(&body)
		case http.StatusConflict:
			var (
				body LoadChatConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "loadChat", err)
			}
			err = ValidateLoadChatConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "loadChat", err)
			}
			return nil, NewLoadChatConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body LoadChatUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "loadChat", err)
			}
			err = ValidateLoadChatUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "loadChat", err)
			}
			return nil, NewLoadChatUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body LoadChatInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "loadChat", err)
			}
			err = ValidateLoadChatInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "loadChat", err)
			}
			return nil, NewLoadChatInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body LoadChatInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("chat", "loadChat", err)
				}
				err = ValidateLoadChatInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("chat", "loadChat", err)
				}
				return nil, NewLoadChatInvariantViolation(&body)
			case "unexpected":
				var (
					body LoadChatUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("chat", "loadChat", err)
				}
				err = ValidateLoadChatUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("chat", "loadChat", err)
				}
				return nil, NewLoadChatUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("chat", "loadChat", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body LoadChatGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "loadChat", err)
			}
			err = ValidateLoadChatGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "loadChat", err)
			}
			return nil, NewLoadChatGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("chat", "loadChat", resp.StatusCode, string(body))
		}
	}
}

// BuildCreditUsageRequest instantiates a HTTP request object with method and
// path set to call the "chat" service "creditUsage" endpoint
func (c *Client) BuildCreditUsageRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreditUsageChatPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("chat", "creditUsage", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreditUsageRequest returns an encoder for requests sent to the chat
// creditUsage server.
func EncodeCreditUsageRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*chat.CreditUsagePayload)
		if !ok {
			return goahttp.ErrInvalidType("chat", "creditUsage", "*chat.CreditUsagePayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		return nil
	}
}

// DecodeCreditUsageResponse returns a decoder for responses returned by the
// chat creditUsage endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreditUsageResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeCreditUsageResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreditUsageResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "creditUsage", err)
			}
			err = ValidateCreditUsageResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "creditUsage", err)
			}
			res := NewCreditUsageResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CreditUsageUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "creditUsage", err)
			}
			err = ValidateCreditUsageUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "creditUsage", err)
			}
			return nil, NewCreditUsageUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CreditUsageForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "creditUsage", err)
			}
			err = ValidateCreditUsageForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "creditUsage", err)
			}
			return nil, NewCreditUsageForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CreditUsageBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "creditUsage", err)
			}
			err = ValidateCreditUsageBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "creditUsage", err)
			}
			return nil, NewCreditUsageBadRequest(&body)
		case http.StatusNotFound:
			var (
				body CreditUsageNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "creditUsage", err)
			}
			err = ValidateCreditUsageNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "creditUsage", err)
			}
			return nil, NewCreditUsageNotFound(&body)
		case http.StatusConflict:
			var (
				body CreditUsageConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "creditUsage", err)
			}
			err = ValidateCreditUsageConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "creditUsage", err)
			}
			return nil, NewCreditUsageConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body CreditUsageUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "creditUsage", err)
			}
			err = ValidateCreditUsageUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "creditUsage", err)
			}
			return nil, NewCreditUsageUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body CreditUsageInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "creditUsage", err)
			}
			err = ValidateCreditUsageInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "creditUsage", err)
			}
			return nil, NewCreditUsageInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body CreditUsageInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("chat", "creditUsage", err)
				}
				err = ValidateCreditUsageInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("chat", "creditUsage", err)
				}
				return nil, NewCreditUsageInvariantViolation(&body)
			case "unexpected":
				var (
					body CreditUsageUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("chat", "creditUsage", err)
				}
				err = ValidateCreditUsageUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("chat", "creditUsage", err)
				}
				return nil, NewCreditUsageUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("chat", "creditUsage", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body CreditUsageGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("chat", "creditUsage", err)
			}
			err = ValidateCreditUsageGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("chat", "creditUsage", err)
			}
			return nil, NewCreditUsageGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("chat", "creditUsage", resp.StatusCode, string(body))
		}
	}
}

// unmarshalChatOverviewResponseBodyToChatChatOverview builds a value of type
// *chat.ChatOverview from a value of type *ChatOverviewResponseBody.
func unmarshalChatOverviewResponseBodyToChatChatOverview(v *ChatOverviewResponseBody) *chat.ChatOverview {
	res := &chat.ChatOverview{
		ID:          *v.ID,
		Title:       *v.Title,
		UserID:      *v.UserID,
		NumMessages: *v.NumMessages,
		CreatedAt:   *v.CreatedAt,
		UpdatedAt:   *v.UpdatedAt,
	}

	return res
}

// unmarshalChatMessageResponseBodyToChatChatMessage builds a value of type
// *chat.ChatMessage from a value of type *ChatMessageResponseBody.
func unmarshalChatMessageResponseBodyToChatChatMessage(v *ChatMessageResponseBody) *chat.ChatMessage {
	res := &chat.ChatMessage{
		ID:           *v.ID,
		Role:         *v.Role,
		Content:      v.Content,
		Model:        *v.Model,
		ToolCallID:   v.ToolCallID,
		ToolCalls:    v.ToolCalls,
		FinishReason: v.FinishReason,
		UserID:       v.UserID,
		CreatedAt:    *v.CreatedAt,
	}

	return res
}
