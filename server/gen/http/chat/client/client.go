// Code generated by goa v3.22.2, DO NOT EDIT.
//
// chat client HTTP transport
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the chat service endpoint HTTP clients.
type Client struct {
	// ListChats Doer is the HTTP client used to make requests to the listChats
	// endpoint.
	ListChatsDoer goahttp.Doer

	// LoadChat Doer is the HTTP client used to make requests to the loadChat
	// endpoint.
	LoadChatDoer goahttp.Doer

	// CreditUsage Doer is the HTTP client used to make requests to the creditUsage
	// endpoint.
	CreditUsageDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the chat service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ListChatsDoer:       doer,
		LoadChatDoer:        doer,
		CreditUsageDoer:     doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// ListChats returns an endpoint that makes HTTP requests to the chat service
// listChats server.
func (c *Client) ListChats() goa.Endpoint {
	var (
		encodeRequest  = EncodeListChatsRequest(c.encoder)
		decodeResponse = DecodeListChatsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListChatsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListChatsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("chat", "listChats", err)
		}
		return decodeResponse(resp)
	}
}

// LoadChat returns an endpoint that makes HTTP requests to the chat service
// loadChat server.
func (c *Client) LoadChat() goa.Endpoint {
	var (
		encodeRequest  = EncodeLoadChatRequest(c.encoder)
		decodeResponse = DecodeLoadChatResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildLoadChatRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LoadChatDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("chat", "loadChat", err)
		}
		return decodeResponse(resp)
	}
}

// CreditUsage returns an endpoint that makes HTTP requests to the chat service
// creditUsage server.
func (c *Client) CreditUsage() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreditUsageRequest(c.encoder)
		decodeResponse = DecodeCreditUsageResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreditUsageRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreditUsageDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("chat", "creditUsage", err)
		}
		return decodeResponse(resp)
	}
}
