// Code generated by goa v3.22.2, DO NOT EDIT.
//
// slack HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	slack "github.com/speakeasy-api/gram/server/gen/slack"
	goa "goa.design/goa/v3/pkg"
)

// UpdateSlackConnectionRequestBody is the type of the "slack" service
// "updateSlackConnection" endpoint HTTP request body.
type UpdateSlackConnectionRequestBody struct {
	// The default toolset slug for this Slack connection
	DefaultToolsetSlug *string `form:"default_toolset_slug,omitempty" json:"default_toolset_slug,omitempty" xml:"default_toolset_slug,omitempty"`
}

// GetSlackConnectionResponseBody is the type of the "slack" service
// "getSlackConnection" endpoint HTTP response body.
type GetSlackConnectionResponseBody struct {
	// The name of the connected Slack team
	SlackTeamName string `form:"slack_team_name" json:"slack_team_name" xml:"slack_team_name"`
	// The ID of the connected Slack team
	SlackTeamID string `form:"slack_team_id" json:"slack_team_id" xml:"slack_team_id"`
	// The default toolset slug for this Slack connection
	DefaultToolsetSlug string `form:"default_toolset_slug" json:"default_toolset_slug" xml:"default_toolset_slug"`
	// When the toolset was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the toolset was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// UpdateSlackConnectionResponseBody is the type of the "slack" service
// "updateSlackConnection" endpoint HTTP response body.
type UpdateSlackConnectionResponseBody struct {
	// The name of the connected Slack team
	SlackTeamName string `form:"slack_team_name" json:"slack_team_name" xml:"slack_team_name"`
	// The ID of the connected Slack team
	SlackTeamID string `form:"slack_team_id" json:"slack_team_id" xml:"slack_team_id"`
	// The default toolset slug for this Slack connection
	DefaultToolsetSlug string `form:"default_toolset_slug" json:"default_toolset_slug" xml:"default_toolset_slug"`
	// When the toolset was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the toolset was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// CallbackUnauthorizedResponseBody is the type of the "slack" service
// "callback" endpoint HTTP response body for the "unauthorized" error.
type CallbackUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CallbackForbiddenResponseBody is the type of the "slack" service "callback"
// endpoint HTTP response body for the "forbidden" error.
type CallbackForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CallbackBadRequestResponseBody is the type of the "slack" service "callback"
// endpoint HTTP response body for the "bad_request" error.
type CallbackBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CallbackNotFoundResponseBody is the type of the "slack" service "callback"
// endpoint HTTP response body for the "not_found" error.
type CallbackNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CallbackConflictResponseBody is the type of the "slack" service "callback"
// endpoint HTTP response body for the "conflict" error.
type CallbackConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CallbackUnsupportedMediaResponseBody is the type of the "slack" service
// "callback" endpoint HTTP response body for the "unsupported_media" error.
type CallbackUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CallbackInvalidResponseBody is the type of the "slack" service "callback"
// endpoint HTTP response body for the "invalid" error.
type CallbackInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CallbackInvariantViolationResponseBody is the type of the "slack" service
// "callback" endpoint HTTP response body for the "invariant_violation" error.
type CallbackInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CallbackUnexpectedResponseBody is the type of the "slack" service "callback"
// endpoint HTTP response body for the "unexpected" error.
type CallbackUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CallbackGatewayErrorResponseBody is the type of the "slack" service
// "callback" endpoint HTTP response body for the "gateway_error" error.
type CallbackGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginUnauthorizedResponseBody is the type of the "slack" service "login"
// endpoint HTTP response body for the "unauthorized" error.
type LoginUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginForbiddenResponseBody is the type of the "slack" service "login"
// endpoint HTTP response body for the "forbidden" error.
type LoginForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginBadRequestResponseBody is the type of the "slack" service "login"
// endpoint HTTP response body for the "bad_request" error.
type LoginBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginNotFoundResponseBody is the type of the "slack" service "login"
// endpoint HTTP response body for the "not_found" error.
type LoginNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginConflictResponseBody is the type of the "slack" service "login"
// endpoint HTTP response body for the "conflict" error.
type LoginConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginUnsupportedMediaResponseBody is the type of the "slack" service "login"
// endpoint HTTP response body for the "unsupported_media" error.
type LoginUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginInvalidResponseBody is the type of the "slack" service "login" endpoint
// HTTP response body for the "invalid" error.
type LoginInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginInvariantViolationResponseBody is the type of the "slack" service
// "login" endpoint HTTP response body for the "invariant_violation" error.
type LoginInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginUnexpectedResponseBody is the type of the "slack" service "login"
// endpoint HTTP response body for the "unexpected" error.
type LoginUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginGatewayErrorResponseBody is the type of the "slack" service "login"
// endpoint HTTP response body for the "gateway_error" error.
type LoginGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSlackConnectionUnauthorizedResponseBody is the type of the "slack"
// service "getSlackConnection" endpoint HTTP response body for the
// "unauthorized" error.
type GetSlackConnectionUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSlackConnectionForbiddenResponseBody is the type of the "slack" service
// "getSlackConnection" endpoint HTTP response body for the "forbidden" error.
type GetSlackConnectionForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSlackConnectionBadRequestResponseBody is the type of the "slack" service
// "getSlackConnection" endpoint HTTP response body for the "bad_request" error.
type GetSlackConnectionBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSlackConnectionNotFoundResponseBody is the type of the "slack" service
// "getSlackConnection" endpoint HTTP response body for the "not_found" error.
type GetSlackConnectionNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSlackConnectionConflictResponseBody is the type of the "slack" service
// "getSlackConnection" endpoint HTTP response body for the "conflict" error.
type GetSlackConnectionConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSlackConnectionUnsupportedMediaResponseBody is the type of the "slack"
// service "getSlackConnection" endpoint HTTP response body for the
// "unsupported_media" error.
type GetSlackConnectionUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSlackConnectionInvalidResponseBody is the type of the "slack" service
// "getSlackConnection" endpoint HTTP response body for the "invalid" error.
type GetSlackConnectionInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSlackConnectionInvariantViolationResponseBody is the type of the "slack"
// service "getSlackConnection" endpoint HTTP response body for the
// "invariant_violation" error.
type GetSlackConnectionInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSlackConnectionUnexpectedResponseBody is the type of the "slack" service
// "getSlackConnection" endpoint HTTP response body for the "unexpected" error.
type GetSlackConnectionUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSlackConnectionGatewayErrorResponseBody is the type of the "slack"
// service "getSlackConnection" endpoint HTTP response body for the
// "gateway_error" error.
type GetSlackConnectionGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateSlackConnectionUnauthorizedResponseBody is the type of the "slack"
// service "updateSlackConnection" endpoint HTTP response body for the
// "unauthorized" error.
type UpdateSlackConnectionUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateSlackConnectionForbiddenResponseBody is the type of the "slack"
// service "updateSlackConnection" endpoint HTTP response body for the
// "forbidden" error.
type UpdateSlackConnectionForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateSlackConnectionBadRequestResponseBody is the type of the "slack"
// service "updateSlackConnection" endpoint HTTP response body for the
// "bad_request" error.
type UpdateSlackConnectionBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateSlackConnectionNotFoundResponseBody is the type of the "slack" service
// "updateSlackConnection" endpoint HTTP response body for the "not_found"
// error.
type UpdateSlackConnectionNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateSlackConnectionConflictResponseBody is the type of the "slack" service
// "updateSlackConnection" endpoint HTTP response body for the "conflict" error.
type UpdateSlackConnectionConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateSlackConnectionUnsupportedMediaResponseBody is the type of the "slack"
// service "updateSlackConnection" endpoint HTTP response body for the
// "unsupported_media" error.
type UpdateSlackConnectionUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateSlackConnectionInvalidResponseBody is the type of the "slack" service
// "updateSlackConnection" endpoint HTTP response body for the "invalid" error.
type UpdateSlackConnectionInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateSlackConnectionInvariantViolationResponseBody is the type of the
// "slack" service "updateSlackConnection" endpoint HTTP response body for the
// "invariant_violation" error.
type UpdateSlackConnectionInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateSlackConnectionUnexpectedResponseBody is the type of the "slack"
// service "updateSlackConnection" endpoint HTTP response body for the
// "unexpected" error.
type UpdateSlackConnectionUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateSlackConnectionGatewayErrorResponseBody is the type of the "slack"
// service "updateSlackConnection" endpoint HTTP response body for the
// "gateway_error" error.
type UpdateSlackConnectionGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteSlackConnectionUnauthorizedResponseBody is the type of the "slack"
// service "deleteSlackConnection" endpoint HTTP response body for the
// "unauthorized" error.
type DeleteSlackConnectionUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteSlackConnectionForbiddenResponseBody is the type of the "slack"
// service "deleteSlackConnection" endpoint HTTP response body for the
// "forbidden" error.
type DeleteSlackConnectionForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteSlackConnectionBadRequestResponseBody is the type of the "slack"
// service "deleteSlackConnection" endpoint HTTP response body for the
// "bad_request" error.
type DeleteSlackConnectionBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteSlackConnectionNotFoundResponseBody is the type of the "slack" service
// "deleteSlackConnection" endpoint HTTP response body for the "not_found"
// error.
type DeleteSlackConnectionNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteSlackConnectionConflictResponseBody is the type of the "slack" service
// "deleteSlackConnection" endpoint HTTP response body for the "conflict" error.
type DeleteSlackConnectionConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteSlackConnectionUnsupportedMediaResponseBody is the type of the "slack"
// service "deleteSlackConnection" endpoint HTTP response body for the
// "unsupported_media" error.
type DeleteSlackConnectionUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteSlackConnectionInvalidResponseBody is the type of the "slack" service
// "deleteSlackConnection" endpoint HTTP response body for the "invalid" error.
type DeleteSlackConnectionInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteSlackConnectionInvariantViolationResponseBody is the type of the
// "slack" service "deleteSlackConnection" endpoint HTTP response body for the
// "invariant_violation" error.
type DeleteSlackConnectionInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteSlackConnectionUnexpectedResponseBody is the type of the "slack"
// service "deleteSlackConnection" endpoint HTTP response body for the
// "unexpected" error.
type DeleteSlackConnectionUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteSlackConnectionGatewayErrorResponseBody is the type of the "slack"
// service "deleteSlackConnection" endpoint HTTP response body for the
// "gateway_error" error.
type DeleteSlackConnectionGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewGetSlackConnectionResponseBody builds the HTTP response body from the
// result of the "getSlackConnection" endpoint of the "slack" service.
func NewGetSlackConnectionResponseBody(res *slack.GetSlackConnectionResult) *GetSlackConnectionResponseBody {
	body := &GetSlackConnectionResponseBody{
		SlackTeamName:      res.SlackTeamName,
		SlackTeamID:        res.SlackTeamID,
		DefaultToolsetSlug: res.DefaultToolsetSlug,
		CreatedAt:          res.CreatedAt,
		UpdatedAt:          res.UpdatedAt,
	}
	return body
}

// NewUpdateSlackConnectionResponseBody builds the HTTP response body from the
// result of the "updateSlackConnection" endpoint of the "slack" service.
func NewUpdateSlackConnectionResponseBody(res *slack.GetSlackConnectionResult) *UpdateSlackConnectionResponseBody {
	body := &UpdateSlackConnectionResponseBody{
		SlackTeamName:      res.SlackTeamName,
		SlackTeamID:        res.SlackTeamID,
		DefaultToolsetSlug: res.DefaultToolsetSlug,
		CreatedAt:          res.CreatedAt,
		UpdatedAt:          res.UpdatedAt,
	}
	return body
}

// NewCallbackUnauthorizedResponseBody builds the HTTP response body from the
// result of the "callback" endpoint of the "slack" service.
func NewCallbackUnauthorizedResponseBody(res *goa.ServiceError) *CallbackUnauthorizedResponseBody {
	body := &CallbackUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCallbackForbiddenResponseBody builds the HTTP response body from the
// result of the "callback" endpoint of the "slack" service.
func NewCallbackForbiddenResponseBody(res *goa.ServiceError) *CallbackForbiddenResponseBody {
	body := &CallbackForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCallbackBadRequestResponseBody builds the HTTP response body from the
// result of the "callback" endpoint of the "slack" service.
func NewCallbackBadRequestResponseBody(res *goa.ServiceError) *CallbackBadRequestResponseBody {
	body := &CallbackBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCallbackNotFoundResponseBody builds the HTTP response body from the
// result of the "callback" endpoint of the "slack" service.
func NewCallbackNotFoundResponseBody(res *goa.ServiceError) *CallbackNotFoundResponseBody {
	body := &CallbackNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCallbackConflictResponseBody builds the HTTP response body from the
// result of the "callback" endpoint of the "slack" service.
func NewCallbackConflictResponseBody(res *goa.ServiceError) *CallbackConflictResponseBody {
	body := &CallbackConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCallbackUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "callback" endpoint of the "slack" service.
func NewCallbackUnsupportedMediaResponseBody(res *goa.ServiceError) *CallbackUnsupportedMediaResponseBody {
	body := &CallbackUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCallbackInvalidResponseBody builds the HTTP response body from the result
// of the "callback" endpoint of the "slack" service.
func NewCallbackInvalidResponseBody(res *goa.ServiceError) *CallbackInvalidResponseBody {
	body := &CallbackInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCallbackInvariantViolationResponseBody builds the HTTP response body from
// the result of the "callback" endpoint of the "slack" service.
func NewCallbackInvariantViolationResponseBody(res *goa.ServiceError) *CallbackInvariantViolationResponseBody {
	body := &CallbackInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCallbackUnexpectedResponseBody builds the HTTP response body from the
// result of the "callback" endpoint of the "slack" service.
func NewCallbackUnexpectedResponseBody(res *goa.ServiceError) *CallbackUnexpectedResponseBody {
	body := &CallbackUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCallbackGatewayErrorResponseBody builds the HTTP response body from the
// result of the "callback" endpoint of the "slack" service.
func NewCallbackGatewayErrorResponseBody(res *goa.ServiceError) *CallbackGatewayErrorResponseBody {
	body := &CallbackGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginUnauthorizedResponseBody builds the HTTP response body from the
// result of the "login" endpoint of the "slack" service.
func NewLoginUnauthorizedResponseBody(res *goa.ServiceError) *LoginUnauthorizedResponseBody {
	body := &LoginUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginForbiddenResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "slack" service.
func NewLoginForbiddenResponseBody(res *goa.ServiceError) *LoginForbiddenResponseBody {
	body := &LoginForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginBadRequestResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "slack" service.
func NewLoginBadRequestResponseBody(res *goa.ServiceError) *LoginBadRequestResponseBody {
	body := &LoginBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginNotFoundResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "slack" service.
func NewLoginNotFoundResponseBody(res *goa.ServiceError) *LoginNotFoundResponseBody {
	body := &LoginNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginConflictResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "slack" service.
func NewLoginConflictResponseBody(res *goa.ServiceError) *LoginConflictResponseBody {
	body := &LoginConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginUnsupportedMediaResponseBody builds the HTTP response body from the
// result of the "login" endpoint of the "slack" service.
func NewLoginUnsupportedMediaResponseBody(res *goa.ServiceError) *LoginUnsupportedMediaResponseBody {
	body := &LoginUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginInvalidResponseBody builds the HTTP response body from the result of
// the "login" endpoint of the "slack" service.
func NewLoginInvalidResponseBody(res *goa.ServiceError) *LoginInvalidResponseBody {
	body := &LoginInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginInvariantViolationResponseBody builds the HTTP response body from
// the result of the "login" endpoint of the "slack" service.
func NewLoginInvariantViolationResponseBody(res *goa.ServiceError) *LoginInvariantViolationResponseBody {
	body := &LoginInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginUnexpectedResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "slack" service.
func NewLoginUnexpectedResponseBody(res *goa.ServiceError) *LoginUnexpectedResponseBody {
	body := &LoginUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginGatewayErrorResponseBody builds the HTTP response body from the
// result of the "login" endpoint of the "slack" service.
func NewLoginGatewayErrorResponseBody(res *goa.ServiceError) *LoginGatewayErrorResponseBody {
	body := &LoginGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSlackConnectionUnauthorizedResponseBody builds the HTTP response body
// from the result of the "getSlackConnection" endpoint of the "slack" service.
func NewGetSlackConnectionUnauthorizedResponseBody(res *goa.ServiceError) *GetSlackConnectionUnauthorizedResponseBody {
	body := &GetSlackConnectionUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSlackConnectionForbiddenResponseBody builds the HTTP response body
// from the result of the "getSlackConnection" endpoint of the "slack" service.
func NewGetSlackConnectionForbiddenResponseBody(res *goa.ServiceError) *GetSlackConnectionForbiddenResponseBody {
	body := &GetSlackConnectionForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSlackConnectionBadRequestResponseBody builds the HTTP response body
// from the result of the "getSlackConnection" endpoint of the "slack" service.
func NewGetSlackConnectionBadRequestResponseBody(res *goa.ServiceError) *GetSlackConnectionBadRequestResponseBody {
	body := &GetSlackConnectionBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSlackConnectionNotFoundResponseBody builds the HTTP response body from
// the result of the "getSlackConnection" endpoint of the "slack" service.
func NewGetSlackConnectionNotFoundResponseBody(res *goa.ServiceError) *GetSlackConnectionNotFoundResponseBody {
	body := &GetSlackConnectionNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSlackConnectionConflictResponseBody builds the HTTP response body from
// the result of the "getSlackConnection" endpoint of the "slack" service.
func NewGetSlackConnectionConflictResponseBody(res *goa.ServiceError) *GetSlackConnectionConflictResponseBody {
	body := &GetSlackConnectionConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSlackConnectionUnsupportedMediaResponseBody builds the HTTP response
// body from the result of the "getSlackConnection" endpoint of the "slack"
// service.
func NewGetSlackConnectionUnsupportedMediaResponseBody(res *goa.ServiceError) *GetSlackConnectionUnsupportedMediaResponseBody {
	body := &GetSlackConnectionUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSlackConnectionInvalidResponseBody builds the HTTP response body from
// the result of the "getSlackConnection" endpoint of the "slack" service.
func NewGetSlackConnectionInvalidResponseBody(res *goa.ServiceError) *GetSlackConnectionInvalidResponseBody {
	body := &GetSlackConnectionInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSlackConnectionInvariantViolationResponseBody builds the HTTP response
// body from the result of the "getSlackConnection" endpoint of the "slack"
// service.
func NewGetSlackConnectionInvariantViolationResponseBody(res *goa.ServiceError) *GetSlackConnectionInvariantViolationResponseBody {
	body := &GetSlackConnectionInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSlackConnectionUnexpectedResponseBody builds the HTTP response body
// from the result of the "getSlackConnection" endpoint of the "slack" service.
func NewGetSlackConnectionUnexpectedResponseBody(res *goa.ServiceError) *GetSlackConnectionUnexpectedResponseBody {
	body := &GetSlackConnectionUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSlackConnectionGatewayErrorResponseBody builds the HTTP response body
// from the result of the "getSlackConnection" endpoint of the "slack" service.
func NewGetSlackConnectionGatewayErrorResponseBody(res *goa.ServiceError) *GetSlackConnectionGatewayErrorResponseBody {
	body := &GetSlackConnectionGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateSlackConnectionUnauthorizedResponseBody builds the HTTP response
// body from the result of the "updateSlackConnection" endpoint of the "slack"
// service.
func NewUpdateSlackConnectionUnauthorizedResponseBody(res *goa.ServiceError) *UpdateSlackConnectionUnauthorizedResponseBody {
	body := &UpdateSlackConnectionUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateSlackConnectionForbiddenResponseBody builds the HTTP response body
// from the result of the "updateSlackConnection" endpoint of the "slack"
// service.
func NewUpdateSlackConnectionForbiddenResponseBody(res *goa.ServiceError) *UpdateSlackConnectionForbiddenResponseBody {
	body := &UpdateSlackConnectionForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateSlackConnectionBadRequestResponseBody builds the HTTP response body
// from the result of the "updateSlackConnection" endpoint of the "slack"
// service.
func NewUpdateSlackConnectionBadRequestResponseBody(res *goa.ServiceError) *UpdateSlackConnectionBadRequestResponseBody {
	body := &UpdateSlackConnectionBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateSlackConnectionNotFoundResponseBody builds the HTTP response body
// from the result of the "updateSlackConnection" endpoint of the "slack"
// service.
func NewUpdateSlackConnectionNotFoundResponseBody(res *goa.ServiceError) *UpdateSlackConnectionNotFoundResponseBody {
	body := &UpdateSlackConnectionNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateSlackConnectionConflictResponseBody builds the HTTP response body
// from the result of the "updateSlackConnection" endpoint of the "slack"
// service.
func NewUpdateSlackConnectionConflictResponseBody(res *goa.ServiceError) *UpdateSlackConnectionConflictResponseBody {
	body := &UpdateSlackConnectionConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateSlackConnectionUnsupportedMediaResponseBody builds the HTTP
// response body from the result of the "updateSlackConnection" endpoint of the
// "slack" service.
func NewUpdateSlackConnectionUnsupportedMediaResponseBody(res *goa.ServiceError) *UpdateSlackConnectionUnsupportedMediaResponseBody {
	body := &UpdateSlackConnectionUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateSlackConnectionInvalidResponseBody builds the HTTP response body
// from the result of the "updateSlackConnection" endpoint of the "slack"
// service.
func NewUpdateSlackConnectionInvalidResponseBody(res *goa.ServiceError) *UpdateSlackConnectionInvalidResponseBody {
	body := &UpdateSlackConnectionInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateSlackConnectionInvariantViolationResponseBody builds the HTTP
// response body from the result of the "updateSlackConnection" endpoint of the
// "slack" service.
func NewUpdateSlackConnectionInvariantViolationResponseBody(res *goa.ServiceError) *UpdateSlackConnectionInvariantViolationResponseBody {
	body := &UpdateSlackConnectionInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateSlackConnectionUnexpectedResponseBody builds the HTTP response body
// from the result of the "updateSlackConnection" endpoint of the "slack"
// service.
func NewUpdateSlackConnectionUnexpectedResponseBody(res *goa.ServiceError) *UpdateSlackConnectionUnexpectedResponseBody {
	body := &UpdateSlackConnectionUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateSlackConnectionGatewayErrorResponseBody builds the HTTP response
// body from the result of the "updateSlackConnection" endpoint of the "slack"
// service.
func NewUpdateSlackConnectionGatewayErrorResponseBody(res *goa.ServiceError) *UpdateSlackConnectionGatewayErrorResponseBody {
	body := &UpdateSlackConnectionGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteSlackConnectionUnauthorizedResponseBody builds the HTTP response
// body from the result of the "deleteSlackConnection" endpoint of the "slack"
// service.
func NewDeleteSlackConnectionUnauthorizedResponseBody(res *goa.ServiceError) *DeleteSlackConnectionUnauthorizedResponseBody {
	body := &DeleteSlackConnectionUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteSlackConnectionForbiddenResponseBody builds the HTTP response body
// from the result of the "deleteSlackConnection" endpoint of the "slack"
// service.
func NewDeleteSlackConnectionForbiddenResponseBody(res *goa.ServiceError) *DeleteSlackConnectionForbiddenResponseBody {
	body := &DeleteSlackConnectionForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteSlackConnectionBadRequestResponseBody builds the HTTP response body
// from the result of the "deleteSlackConnection" endpoint of the "slack"
// service.
func NewDeleteSlackConnectionBadRequestResponseBody(res *goa.ServiceError) *DeleteSlackConnectionBadRequestResponseBody {
	body := &DeleteSlackConnectionBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteSlackConnectionNotFoundResponseBody builds the HTTP response body
// from the result of the "deleteSlackConnection" endpoint of the "slack"
// service.
func NewDeleteSlackConnectionNotFoundResponseBody(res *goa.ServiceError) *DeleteSlackConnectionNotFoundResponseBody {
	body := &DeleteSlackConnectionNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteSlackConnectionConflictResponseBody builds the HTTP response body
// from the result of the "deleteSlackConnection" endpoint of the "slack"
// service.
func NewDeleteSlackConnectionConflictResponseBody(res *goa.ServiceError) *DeleteSlackConnectionConflictResponseBody {
	body := &DeleteSlackConnectionConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteSlackConnectionUnsupportedMediaResponseBody builds the HTTP
// response body from the result of the "deleteSlackConnection" endpoint of the
// "slack" service.
func NewDeleteSlackConnectionUnsupportedMediaResponseBody(res *goa.ServiceError) *DeleteSlackConnectionUnsupportedMediaResponseBody {
	body := &DeleteSlackConnectionUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteSlackConnectionInvalidResponseBody builds the HTTP response body
// from the result of the "deleteSlackConnection" endpoint of the "slack"
// service.
func NewDeleteSlackConnectionInvalidResponseBody(res *goa.ServiceError) *DeleteSlackConnectionInvalidResponseBody {
	body := &DeleteSlackConnectionInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteSlackConnectionInvariantViolationResponseBody builds the HTTP
// response body from the result of the "deleteSlackConnection" endpoint of the
// "slack" service.
func NewDeleteSlackConnectionInvariantViolationResponseBody(res *goa.ServiceError) *DeleteSlackConnectionInvariantViolationResponseBody {
	body := &DeleteSlackConnectionInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteSlackConnectionUnexpectedResponseBody builds the HTTP response body
// from the result of the "deleteSlackConnection" endpoint of the "slack"
// service.
func NewDeleteSlackConnectionUnexpectedResponseBody(res *goa.ServiceError) *DeleteSlackConnectionUnexpectedResponseBody {
	body := &DeleteSlackConnectionUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteSlackConnectionGatewayErrorResponseBody builds the HTTP response
// body from the result of the "deleteSlackConnection" endpoint of the "slack"
// service.
func NewDeleteSlackConnectionGatewayErrorResponseBody(res *goa.ServiceError) *DeleteSlackConnectionGatewayErrorResponseBody {
	body := &DeleteSlackConnectionGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCallbackPayload builds a slack service callback endpoint payload.
func NewCallbackPayload(state string, code string) *slack.CallbackPayload {
	v := &slack.CallbackPayload{}
	v.State = state
	v.Code = code

	return v
}

// NewLoginPayload builds a slack service login endpoint payload.
func NewLoginPayload(projectSlug string, returnURL *string, sessionToken *string) *slack.LoginPayload {
	v := &slack.LoginPayload{}
	v.ProjectSlug = &projectSlug
	v.ReturnURL = returnURL
	v.SessionToken = sessionToken

	return v
}

// NewGetSlackConnectionPayload builds a slack service getSlackConnection
// endpoint payload.
func NewGetSlackConnectionPayload(sessionToken *string, projectSlugInput *string) *slack.GetSlackConnectionPayload {
	v := &slack.GetSlackConnectionPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewUpdateSlackConnectionPayload builds a slack service updateSlackConnection
// endpoint payload.
func NewUpdateSlackConnectionPayload(body *UpdateSlackConnectionRequestBody, sessionToken *string, projectSlugInput *string) *slack.UpdateSlackConnectionPayload {
	v := &slack.UpdateSlackConnectionPayload{
		DefaultToolsetSlug: *body.DefaultToolsetSlug,
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewDeleteSlackConnectionPayload builds a slack service deleteSlackConnection
// endpoint payload.
func NewDeleteSlackConnectionPayload(sessionToken *string, projectSlugInput *string) *slack.DeleteSlackConnectionPayload {
	v := &slack.DeleteSlackConnectionPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// ValidateUpdateSlackConnectionRequestBody runs the validations defined on
// UpdateSlackConnectionRequestBody
func ValidateUpdateSlackConnectionRequestBody(body *UpdateSlackConnectionRequestBody) (err error) {
	if body.DefaultToolsetSlug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("default_toolset_slug", "body"))
	}
	return
}
