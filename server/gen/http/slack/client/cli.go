// Code generated by goa v3.22.2, DO NOT EDIT.
//
// slack HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"encoding/json"
	"fmt"

	slack "github.com/speakeasy-api/gram/server/gen/slack"
)

// BuildCallbackPayload builds the payload for the slack callback endpoint from
// CLI flags.
func BuildCallbackPayload(slackCallbackState string, slackCallbackCode string) (*slack.CallbackPayload, error) {
	var state string
	{
		state = slackCallbackState
	}
	var code string
	{
		code = slackCallbackCode
	}
	v := &slack.CallbackPayload{}
	v.State = state
	v.Code = code

	return v, nil
}

// BuildLoginPayload builds the payload for the slack login endpoint from CLI
// flags.
func BuildLoginPayload(slackLoginProjectSlug string, slackLoginReturnURL string, slackLoginSessionToken string) (*slack.LoginPayload, error) {
	var projectSlug string
	{
		projectSlug = slackLoginProjectSlug
	}
	var returnURL *string
	{
		if slackLoginReturnURL != "" {
			returnURL = &slackLoginReturnURL
		}
	}
	var sessionToken *string
	{
		if slackLoginSessionToken != "" {
			sessionToken = &slackLoginSessionToken
		}
	}
	v := &slack.LoginPayload{}
	v.ProjectSlug = &projectSlug
	v.ReturnURL = returnURL
	v.SessionToken = sessionToken

	return v, nil
}

// BuildGetSlackConnectionPayload builds the payload for the slack
// getSlackConnection endpoint from CLI flags.
func BuildGetSlackConnectionPayload(slackGetSlackConnectionSessionToken string, slackGetSlackConnectionProjectSlugInput string) (*slack.GetSlackConnectionPayload, error) {
	var sessionToken *string
	{
		if slackGetSlackConnectionSessionToken != "" {
			sessionToken = &slackGetSlackConnectionSessionToken
		}
	}
	var projectSlugInput *string
	{
		if slackGetSlackConnectionProjectSlugInput != "" {
			projectSlugInput = &slackGetSlackConnectionProjectSlugInput
		}
	}
	v := &slack.GetSlackConnectionPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildUpdateSlackConnectionPayload builds the payload for the slack
// updateSlackConnection endpoint from CLI flags.
func BuildUpdateSlackConnectionPayload(slackUpdateSlackConnectionBody string, slackUpdateSlackConnectionSessionToken string, slackUpdateSlackConnectionProjectSlugInput string) (*slack.UpdateSlackConnectionPayload, error) {
	var err error
	var body UpdateSlackConnectionRequestBody
	{
		err = json.Unmarshal([]byte(slackUpdateSlackConnectionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"default_toolset_slug\": \"Error et soluta enim.\"\n   }'")
		}
	}
	var sessionToken *string
	{
		if slackUpdateSlackConnectionSessionToken != "" {
			sessionToken = &slackUpdateSlackConnectionSessionToken
		}
	}
	var projectSlugInput *string
	{
		if slackUpdateSlackConnectionProjectSlugInput != "" {
			projectSlugInput = &slackUpdateSlackConnectionProjectSlugInput
		}
	}
	v := &slack.UpdateSlackConnectionPayload{
		DefaultToolsetSlug: body.DefaultToolsetSlug,
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildDeleteSlackConnectionPayload builds the payload for the slack
// deleteSlackConnection endpoint from CLI flags.
func BuildDeleteSlackConnectionPayload(slackDeleteSlackConnectionSessionToken string, slackDeleteSlackConnectionProjectSlugInput string) (*slack.DeleteSlackConnectionPayload, error) {
	var sessionToken *string
	{
		if slackDeleteSlackConnectionSessionToken != "" {
			sessionToken = &slackDeleteSlackConnectionSessionToken
		}
	}
	var projectSlugInput *string
	{
		if slackDeleteSlackConnectionProjectSlugInput != "" {
			projectSlugInput = &slackDeleteSlackConnectionProjectSlugInput
		}
	}
	v := &slack.DeleteSlackConnectionPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}
