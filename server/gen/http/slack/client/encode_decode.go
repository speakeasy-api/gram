// Code generated by goa v3.22.2, DO NOT EDIT.
//
// slack HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	slack "github.com/speakeasy-api/gram/server/gen/slack"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildCallbackRequest instantiates a HTTP request object with method and path
// set to call the "slack" service "callback" endpoint
func (c *Client) BuildCallbackRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CallbackSlackPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("slack", "callback", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCallbackRequest returns an encoder for requests sent to the slack
// callback server.
func EncodeCallbackRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*slack.CallbackPayload)
		if !ok {
			return goahttp.ErrInvalidType("slack", "callback", "*slack.CallbackPayload", v)
		}
		values := req.URL.Query()
		values.Add("state", p.State)
		values.Add("code", p.Code)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeCallbackResponse returns a decoder for responses returned by the slack
// callback endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCallbackResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeCallbackResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusTemporaryRedirect:
			var (
				location string
				err      error
			)
			locationRaw := resp.Header.Get("Location")
			if locationRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("location", "header"))
			}
			location = locationRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "callback", err)
			}
			res := NewCallbackResultTemporaryRedirect(location)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CallbackUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "callback", err)
			}
			err = ValidateCallbackUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "callback", err)
			}
			return nil, NewCallbackUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CallbackForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "callback", err)
			}
			err = ValidateCallbackForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "callback", err)
			}
			return nil, NewCallbackForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CallbackBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "callback", err)
			}
			err = ValidateCallbackBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "callback", err)
			}
			return nil, NewCallbackBadRequest(&body)
		case http.StatusNotFound:
			var (
				body CallbackNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "callback", err)
			}
			err = ValidateCallbackNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "callback", err)
			}
			return nil, NewCallbackNotFound(&body)
		case http.StatusConflict:
			var (
				body CallbackConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "callback", err)
			}
			err = ValidateCallbackConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "callback", err)
			}
			return nil, NewCallbackConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body CallbackUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "callback", err)
			}
			err = ValidateCallbackUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "callback", err)
			}
			return nil, NewCallbackUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body CallbackInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "callback", err)
			}
			err = ValidateCallbackInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "callback", err)
			}
			return nil, NewCallbackInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body CallbackInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("slack", "callback", err)
				}
				err = ValidateCallbackInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("slack", "callback", err)
				}
				return nil, NewCallbackInvariantViolation(&body)
			case "unexpected":
				var (
					body CallbackUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("slack", "callback", err)
				}
				err = ValidateCallbackUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("slack", "callback", err)
				}
				return nil, NewCallbackUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("slack", "callback", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body CallbackGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "callback", err)
			}
			err = ValidateCallbackGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "callback", err)
			}
			return nil, NewCallbackGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("slack", "callback", resp.StatusCode, string(body))
		}
	}
}

// BuildLoginRequest instantiates a HTTP request object with method and path
// set to call the "slack" service "login" endpoint
func (c *Client) BuildLoginRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		projectSlug string
	)
	{
		p, ok := v.(*slack.LoginPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("slack", "login", "*slack.LoginPayload", v)
		}
		if p.ProjectSlug != nil {
			projectSlug = *p.ProjectSlug
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LoginSlackPath(projectSlug)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("slack", "login", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLoginRequest returns an encoder for requests sent to the slack login
// server.
func EncodeLoginRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*slack.LoginPayload)
		if !ok {
			return goahttp.ErrInvalidType("slack", "login", "*slack.LoginPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		values := req.URL.Query()
		if p.ReturnURL != nil {
			values.Add("return_url", *p.ReturnURL)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeLoginResponse returns a decoder for responses returned by the slack
// login endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeLoginResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeLoginResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusTemporaryRedirect:
			var (
				location string
				err      error
			)
			locationRaw := resp.Header.Get("Location")
			if locationRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("location", "header"))
			}
			location = locationRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "login", err)
			}
			res := NewLoginResultTemporaryRedirect(location)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body LoginUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "login", err)
			}
			err = ValidateLoginUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "login", err)
			}
			return nil, NewLoginUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body LoginForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "login", err)
			}
			err = ValidateLoginForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "login", err)
			}
			return nil, NewLoginForbidden(&body)
		case http.StatusBadRequest:
			var (
				body LoginBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "login", err)
			}
			err = ValidateLoginBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "login", err)
			}
			return nil, NewLoginBadRequest(&body)
		case http.StatusNotFound:
			var (
				body LoginNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "login", err)
			}
			err = ValidateLoginNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "login", err)
			}
			return nil, NewLoginNotFound(&body)
		case http.StatusConflict:
			var (
				body LoginConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "login", err)
			}
			err = ValidateLoginConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "login", err)
			}
			return nil, NewLoginConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body LoginUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "login", err)
			}
			err = ValidateLoginUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "login", err)
			}
			return nil, NewLoginUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body LoginInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "login", err)
			}
			err = ValidateLoginInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "login", err)
			}
			return nil, NewLoginInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body LoginInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("slack", "login", err)
				}
				err = ValidateLoginInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("slack", "login", err)
				}
				return nil, NewLoginInvariantViolation(&body)
			case "unexpected":
				var (
					body LoginUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("slack", "login", err)
				}
				err = ValidateLoginUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("slack", "login", err)
				}
				return nil, NewLoginUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("slack", "login", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body LoginGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "login", err)
			}
			err = ValidateLoginGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "login", err)
			}
			return nil, NewLoginGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("slack", "login", resp.StatusCode, string(body))
		}
	}
}

// BuildGetSlackConnectionRequest instantiates a HTTP request object with
// method and path set to call the "slack" service "getSlackConnection" endpoint
func (c *Client) BuildGetSlackConnectionRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSlackConnectionSlackPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("slack", "getSlackConnection", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetSlackConnectionRequest returns an encoder for requests sent to the
// slack getSlackConnection server.
func EncodeGetSlackConnectionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*slack.GetSlackConnectionPayload)
		if !ok {
			return goahttp.ErrInvalidType("slack", "getSlackConnection", "*slack.GetSlackConnectionPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		return nil
	}
}

// DecodeGetSlackConnectionResponse returns a decoder for responses returned by
// the slack getSlackConnection endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetSlackConnectionResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeGetSlackConnectionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetSlackConnectionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "getSlackConnection", err)
			}
			err = ValidateGetSlackConnectionResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "getSlackConnection", err)
			}
			res := NewGetSlackConnectionResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetSlackConnectionUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "getSlackConnection", err)
			}
			err = ValidateGetSlackConnectionUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "getSlackConnection", err)
			}
			return nil, NewGetSlackConnectionUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetSlackConnectionForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "getSlackConnection", err)
			}
			err = ValidateGetSlackConnectionForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "getSlackConnection", err)
			}
			return nil, NewGetSlackConnectionForbidden(&body)
		case http.StatusBadRequest:
			var (
				body GetSlackConnectionBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "getSlackConnection", err)
			}
			err = ValidateGetSlackConnectionBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "getSlackConnection", err)
			}
			return nil, NewGetSlackConnectionBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetSlackConnectionNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "getSlackConnection", err)
			}
			err = ValidateGetSlackConnectionNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "getSlackConnection", err)
			}
			return nil, NewGetSlackConnectionNotFound(&body)
		case http.StatusConflict:
			var (
				body GetSlackConnectionConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "getSlackConnection", err)
			}
			err = ValidateGetSlackConnectionConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "getSlackConnection", err)
			}
			return nil, NewGetSlackConnectionConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body GetSlackConnectionUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "getSlackConnection", err)
			}
			err = ValidateGetSlackConnectionUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "getSlackConnection", err)
			}
			return nil, NewGetSlackConnectionUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body GetSlackConnectionInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "getSlackConnection", err)
			}
			err = ValidateGetSlackConnectionInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "getSlackConnection", err)
			}
			return nil, NewGetSlackConnectionInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body GetSlackConnectionInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("slack", "getSlackConnection", err)
				}
				err = ValidateGetSlackConnectionInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("slack", "getSlackConnection", err)
				}
				return nil, NewGetSlackConnectionInvariantViolation(&body)
			case "unexpected":
				var (
					body GetSlackConnectionUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("slack", "getSlackConnection", err)
				}
				err = ValidateGetSlackConnectionUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("slack", "getSlackConnection", err)
				}
				return nil, NewGetSlackConnectionUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("slack", "getSlackConnection", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body GetSlackConnectionGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "getSlackConnection", err)
			}
			err = ValidateGetSlackConnectionGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "getSlackConnection", err)
			}
			return nil, NewGetSlackConnectionGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("slack", "getSlackConnection", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateSlackConnectionRequest instantiates a HTTP request object with
// method and path set to call the "slack" service "updateSlackConnection"
// endpoint
func (c *Client) BuildUpdateSlackConnectionRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateSlackConnectionSlackPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("slack", "updateSlackConnection", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateSlackConnectionRequest returns an encoder for requests sent to
// the slack updateSlackConnection server.
func EncodeUpdateSlackConnectionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*slack.UpdateSlackConnectionPayload)
		if !ok {
			return goahttp.ErrInvalidType("slack", "updateSlackConnection", "*slack.UpdateSlackConnectionPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewUpdateSlackConnectionRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("slack", "updateSlackConnection", err)
		}
		return nil
	}
}

// DecodeUpdateSlackConnectionResponse returns a decoder for responses returned
// by the slack updateSlackConnection endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeUpdateSlackConnectionResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeUpdateSlackConnectionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateSlackConnectionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "updateSlackConnection", err)
			}
			err = ValidateUpdateSlackConnectionResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "updateSlackConnection", err)
			}
			res := NewUpdateSlackConnectionGetSlackConnectionResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateSlackConnectionUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "updateSlackConnection", err)
			}
			err = ValidateUpdateSlackConnectionUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "updateSlackConnection", err)
			}
			return nil, NewUpdateSlackConnectionUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UpdateSlackConnectionForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "updateSlackConnection", err)
			}
			err = ValidateUpdateSlackConnectionForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "updateSlackConnection", err)
			}
			return nil, NewUpdateSlackConnectionForbidden(&body)
		case http.StatusBadRequest:
			var (
				body UpdateSlackConnectionBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "updateSlackConnection", err)
			}
			err = ValidateUpdateSlackConnectionBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "updateSlackConnection", err)
			}
			return nil, NewUpdateSlackConnectionBadRequest(&body)
		case http.StatusNotFound:
			var (
				body UpdateSlackConnectionNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "updateSlackConnection", err)
			}
			err = ValidateUpdateSlackConnectionNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "updateSlackConnection", err)
			}
			return nil, NewUpdateSlackConnectionNotFound(&body)
		case http.StatusConflict:
			var (
				body UpdateSlackConnectionConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "updateSlackConnection", err)
			}
			err = ValidateUpdateSlackConnectionConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "updateSlackConnection", err)
			}
			return nil, NewUpdateSlackConnectionConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body UpdateSlackConnectionUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "updateSlackConnection", err)
			}
			err = ValidateUpdateSlackConnectionUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "updateSlackConnection", err)
			}
			return nil, NewUpdateSlackConnectionUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body UpdateSlackConnectionInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "updateSlackConnection", err)
			}
			err = ValidateUpdateSlackConnectionInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "updateSlackConnection", err)
			}
			return nil, NewUpdateSlackConnectionInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body UpdateSlackConnectionInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("slack", "updateSlackConnection", err)
				}
				err = ValidateUpdateSlackConnectionInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("slack", "updateSlackConnection", err)
				}
				return nil, NewUpdateSlackConnectionInvariantViolation(&body)
			case "unexpected":
				var (
					body UpdateSlackConnectionUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("slack", "updateSlackConnection", err)
				}
				err = ValidateUpdateSlackConnectionUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("slack", "updateSlackConnection", err)
				}
				return nil, NewUpdateSlackConnectionUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("slack", "updateSlackConnection", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body UpdateSlackConnectionGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "updateSlackConnection", err)
			}
			err = ValidateUpdateSlackConnectionGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "updateSlackConnection", err)
			}
			return nil, NewUpdateSlackConnectionGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("slack", "updateSlackConnection", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteSlackConnectionRequest instantiates a HTTP request object with
// method and path set to call the "slack" service "deleteSlackConnection"
// endpoint
func (c *Client) BuildDeleteSlackConnectionRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteSlackConnectionSlackPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("slack", "deleteSlackConnection", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteSlackConnectionRequest returns an encoder for requests sent to
// the slack deleteSlackConnection server.
func EncodeDeleteSlackConnectionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*slack.DeleteSlackConnectionPayload)
		if !ok {
			return goahttp.ErrInvalidType("slack", "deleteSlackConnection", "*slack.DeleteSlackConnectionPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		return nil
	}
}

// DecodeDeleteSlackConnectionResponse returns a decoder for responses returned
// by the slack deleteSlackConnection endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeDeleteSlackConnectionResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeDeleteSlackConnectionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body DeleteSlackConnectionUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "deleteSlackConnection", err)
			}
			err = ValidateDeleteSlackConnectionUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "deleteSlackConnection", err)
			}
			return nil, NewDeleteSlackConnectionUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteSlackConnectionForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "deleteSlackConnection", err)
			}
			err = ValidateDeleteSlackConnectionForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "deleteSlackConnection", err)
			}
			return nil, NewDeleteSlackConnectionForbidden(&body)
		case http.StatusBadRequest:
			var (
				body DeleteSlackConnectionBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "deleteSlackConnection", err)
			}
			err = ValidateDeleteSlackConnectionBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "deleteSlackConnection", err)
			}
			return nil, NewDeleteSlackConnectionBadRequest(&body)
		case http.StatusNotFound:
			var (
				body DeleteSlackConnectionNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "deleteSlackConnection", err)
			}
			err = ValidateDeleteSlackConnectionNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "deleteSlackConnection", err)
			}
			return nil, NewDeleteSlackConnectionNotFound(&body)
		case http.StatusConflict:
			var (
				body DeleteSlackConnectionConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "deleteSlackConnection", err)
			}
			err = ValidateDeleteSlackConnectionConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "deleteSlackConnection", err)
			}
			return nil, NewDeleteSlackConnectionConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body DeleteSlackConnectionUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "deleteSlackConnection", err)
			}
			err = ValidateDeleteSlackConnectionUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "deleteSlackConnection", err)
			}
			return nil, NewDeleteSlackConnectionUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body DeleteSlackConnectionInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "deleteSlackConnection", err)
			}
			err = ValidateDeleteSlackConnectionInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "deleteSlackConnection", err)
			}
			return nil, NewDeleteSlackConnectionInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body DeleteSlackConnectionInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("slack", "deleteSlackConnection", err)
				}
				err = ValidateDeleteSlackConnectionInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("slack", "deleteSlackConnection", err)
				}
				return nil, NewDeleteSlackConnectionInvariantViolation(&body)
			case "unexpected":
				var (
					body DeleteSlackConnectionUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("slack", "deleteSlackConnection", err)
				}
				err = ValidateDeleteSlackConnectionUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("slack", "deleteSlackConnection", err)
				}
				return nil, NewDeleteSlackConnectionUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("slack", "deleteSlackConnection", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body DeleteSlackConnectionGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("slack", "deleteSlackConnection", err)
			}
			err = ValidateDeleteSlackConnectionGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("slack", "deleteSlackConnection", err)
			}
			return nil, NewDeleteSlackConnectionGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("slack", "deleteSlackConnection", resp.StatusCode, string(body))
		}
	}
}
