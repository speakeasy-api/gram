// Code generated by goa v3.22.2, DO NOT EDIT.
//
// slack client HTTP transport
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the slack service endpoint HTTP clients.
type Client struct {
	// Callback Doer is the HTTP client used to make requests to the callback
	// endpoint.
	CallbackDoer goahttp.Doer

	// Login Doer is the HTTP client used to make requests to the login endpoint.
	LoginDoer goahttp.Doer

	// GetSlackConnection Doer is the HTTP client used to make requests to the
	// getSlackConnection endpoint.
	GetSlackConnectionDoer goahttp.Doer

	// UpdateSlackConnection Doer is the HTTP client used to make requests to the
	// updateSlackConnection endpoint.
	UpdateSlackConnectionDoer goahttp.Doer

	// DeleteSlackConnection Doer is the HTTP client used to make requests to the
	// deleteSlackConnection endpoint.
	DeleteSlackConnectionDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the slack service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CallbackDoer:              doer,
		LoginDoer:                 doer,
		GetSlackConnectionDoer:    doer,
		UpdateSlackConnectionDoer: doer,
		DeleteSlackConnectionDoer: doer,
		RestoreResponseBody:       restoreBody,
		scheme:                    scheme,
		host:                      host,
		decoder:                   dec,
		encoder:                   enc,
	}
}

// Callback returns an endpoint that makes HTTP requests to the slack service
// callback server.
func (c *Client) Callback() goa.Endpoint {
	var (
		encodeRequest  = EncodeCallbackRequest(c.encoder)
		decodeResponse = DecodeCallbackResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCallbackRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CallbackDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("slack", "callback", err)
		}
		return decodeResponse(resp)
	}
}

// Login returns an endpoint that makes HTTP requests to the slack service
// login server.
func (c *Client) Login() goa.Endpoint {
	var (
		encodeRequest  = EncodeLoginRequest(c.encoder)
		decodeResponse = DecodeLoginResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildLoginRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LoginDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("slack", "login", err)
		}
		return decodeResponse(resp)
	}
}

// GetSlackConnection returns an endpoint that makes HTTP requests to the slack
// service getSlackConnection server.
func (c *Client) GetSlackConnection() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetSlackConnectionRequest(c.encoder)
		decodeResponse = DecodeGetSlackConnectionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetSlackConnectionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetSlackConnectionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("slack", "getSlackConnection", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateSlackConnection returns an endpoint that makes HTTP requests to the
// slack service updateSlackConnection server.
func (c *Client) UpdateSlackConnection() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateSlackConnectionRequest(c.encoder)
		decodeResponse = DecodeUpdateSlackConnectionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateSlackConnectionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateSlackConnectionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("slack", "updateSlackConnection", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteSlackConnection returns an endpoint that makes HTTP requests to the
// slack service deleteSlackConnection server.
func (c *Client) DeleteSlackConnection() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteSlackConnectionRequest(c.encoder)
		decodeResponse = DecodeDeleteSlackConnectionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteSlackConnectionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteSlackConnectionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("slack", "deleteSlackConnection", err)
		}
		return decodeResponse(resp)
	}
}
