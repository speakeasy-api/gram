// Code generated by goa v3.22.1, DO NOT EDIT.
//
// gram HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	aboutc "github.com/speakeasy-api/gram/server/gen/http/about/client"
	assetsc "github.com/speakeasy-api/gram/server/gen/http/assets/client"
	authc "github.com/speakeasy-api/gram/server/gen/http/auth/client"
	chatc "github.com/speakeasy-api/gram/server/gen/http/chat/client"
	deploymentsc "github.com/speakeasy-api/gram/server/gen/http/deployments/client"
	domainsc "github.com/speakeasy-api/gram/server/gen/http/domains/client"
	environmentsc "github.com/speakeasy-api/gram/server/gen/http/environments/client"
	instancesc "github.com/speakeasy-api/gram/server/gen/http/instances/client"
	integrationsc "github.com/speakeasy-api/gram/server/gen/http/integrations/client"
	keysc "github.com/speakeasy-api/gram/server/gen/http/keys/client"
	packagesc "github.com/speakeasy-api/gram/server/gen/http/packages/client"
	projectsc "github.com/speakeasy-api/gram/server/gen/http/projects/client"
	slackc "github.com/speakeasy-api/gram/server/gen/http/slack/client"
	templatesc "github.com/speakeasy-api/gram/server/gen/http/templates/client"
	toolsc "github.com/speakeasy-api/gram/server/gen/http/tools/client"
	toolsetsc "github.com/speakeasy-api/gram/server/gen/http/toolsets/client"
	usagec "github.com/speakeasy-api/gram/server/gen/http/usage/client"
	variationsc "github.com/speakeasy-api/gram/server/gen/http/variations/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() []string {
	return []string{
		"about openapi",
		"assets (serve-image|upload-image|upload-functions|upload-open-ap-iv3|serve-open-ap-iv3|list-assets)",
		"auth (callback|login|switch-scopes|logout|register|info)",
		"chat (list-chats|load-chat|credit-usage)",
		"deployments (get-deployment|get-latest-deployment|create-deployment|evolve|redeploy|list-deployments|get-deployment-logs)",
		"domains (get-domain|create-domain|delete-domain)",
		"environments (create-environment|list-environments|update-environment|delete-environment)",
		"instances get-instance",
		"integrations (get|list)",
		"keys (create-key|list-keys|revoke-key)",
		"packages (create-package|update-package|list-packages|list-versions|publish)",
		"projects (create-project|list-projects)",
		"slack (callback|login|get-slack-connection|update-slack-connection|delete-slack-connection)",
		"templates (create-template|update-template|get-template|list-templates|delete-template|render-template-by-id|render-template)",
		"tools list-tools",
		"toolsets (create-toolset|list-toolsets|update-toolset|delete-toolset|get-toolset|check-mcp-slug-availability|add-externaloauth-server|removeoauth-server)",
		"usage (get-period-usage|get-usage-tiers|create-customer-session|create-checkout)",
		"variations (upsert-global|delete-global|list-global)",
	}
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` about openapi` + "\n" +
		os.Args[0] + ` assets serve-image --id "Incidunt rem voluptatibus." --session-token "Est quo modi rerum." --apikey-token "Et dolores ut sit non praesentium culpa."` + "\n" +
		os.Args[0] + ` auth callback --code "Non vel provident."` + "\n" +
		os.Args[0] + ` chat list-chats --session-token "Aut consequatur aut debitis illo eaque exercitationem." --project-slug-input "Et ut."` + "\n" +
		os.Args[0] + ` deployments get-deployment --id "Eveniet magnam voluptates facere sed rerum repellat." --apikey-token "Voluptatem quasi et." --session-token "Maiores dolorum odit." --project-slug-input "Ratione dolore odio corporis aliquid quis."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		aboutFlags = flag.NewFlagSet("about", flag.ContinueOnError)

		aboutOpenapiFlags = flag.NewFlagSet("openapi", flag.ExitOnError)

		assetsFlags = flag.NewFlagSet("assets", flag.ContinueOnError)

		assetsServeImageFlags            = flag.NewFlagSet("serve-image", flag.ExitOnError)
		assetsServeImageIDFlag           = assetsServeImageFlags.String("id", "REQUIRED", "")
		assetsServeImageSessionTokenFlag = assetsServeImageFlags.String("session-token", "", "")
		assetsServeImageApikeyTokenFlag  = assetsServeImageFlags.String("apikey-token", "", "")

		assetsUploadImageFlags                = flag.NewFlagSet("upload-image", flag.ExitOnError)
		assetsUploadImageContentTypeFlag      = assetsUploadImageFlags.String("content-type", "REQUIRED", "")
		assetsUploadImageContentLengthFlag    = assetsUploadImageFlags.String("content-length", "REQUIRED", "")
		assetsUploadImageApikeyTokenFlag      = assetsUploadImageFlags.String("apikey-token", "", "")
		assetsUploadImageProjectSlugInputFlag = assetsUploadImageFlags.String("project-slug-input", "", "")
		assetsUploadImageSessionTokenFlag     = assetsUploadImageFlags.String("session-token", "", "")
		assetsUploadImageStreamFlag           = assetsUploadImageFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		assetsUploadFunctionsFlags                = flag.NewFlagSet("upload-functions", flag.ExitOnError)
		assetsUploadFunctionsContentTypeFlag      = assetsUploadFunctionsFlags.String("content-type", "REQUIRED", "")
		assetsUploadFunctionsContentLengthFlag    = assetsUploadFunctionsFlags.String("content-length", "REQUIRED", "")
		assetsUploadFunctionsApikeyTokenFlag      = assetsUploadFunctionsFlags.String("apikey-token", "", "")
		assetsUploadFunctionsProjectSlugInputFlag = assetsUploadFunctionsFlags.String("project-slug-input", "", "")
		assetsUploadFunctionsSessionTokenFlag     = assetsUploadFunctionsFlags.String("session-token", "", "")
		assetsUploadFunctionsStreamFlag           = assetsUploadFunctionsFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		assetsUploadOpenAPIv3Flags                = flag.NewFlagSet("upload-open-ap-iv3", flag.ExitOnError)
		assetsUploadOpenAPIv3ContentTypeFlag      = assetsUploadOpenAPIv3Flags.String("content-type", "REQUIRED", "")
		assetsUploadOpenAPIv3ContentLengthFlag    = assetsUploadOpenAPIv3Flags.String("content-length", "REQUIRED", "")
		assetsUploadOpenAPIv3ApikeyTokenFlag      = assetsUploadOpenAPIv3Flags.String("apikey-token", "", "")
		assetsUploadOpenAPIv3ProjectSlugInputFlag = assetsUploadOpenAPIv3Flags.String("project-slug-input", "", "")
		assetsUploadOpenAPIv3SessionTokenFlag     = assetsUploadOpenAPIv3Flags.String("session-token", "", "")
		assetsUploadOpenAPIv3StreamFlag           = assetsUploadOpenAPIv3Flags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		assetsServeOpenAPIv3Flags            = flag.NewFlagSet("serve-open-ap-iv3", flag.ExitOnError)
		assetsServeOpenAPIv3IDFlag           = assetsServeOpenAPIv3Flags.String("id", "REQUIRED", "")
		assetsServeOpenAPIv3ProjectIDFlag    = assetsServeOpenAPIv3Flags.String("project-id", "REQUIRED", "")
		assetsServeOpenAPIv3ApikeyTokenFlag  = assetsServeOpenAPIv3Flags.String("apikey-token", "", "")
		assetsServeOpenAPIv3SessionTokenFlag = assetsServeOpenAPIv3Flags.String("session-token", "", "")

		assetsListAssetsFlags                = flag.NewFlagSet("list-assets", flag.ExitOnError)
		assetsListAssetsSessionTokenFlag     = assetsListAssetsFlags.String("session-token", "", "")
		assetsListAssetsProjectSlugInputFlag = assetsListAssetsFlags.String("project-slug-input", "", "")
		assetsListAssetsApikeyTokenFlag      = assetsListAssetsFlags.String("apikey-token", "", "")

		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authCallbackFlags    = flag.NewFlagSet("callback", flag.ExitOnError)
		authCallbackCodeFlag = authCallbackFlags.String("code", "REQUIRED", "")

		authLoginFlags = flag.NewFlagSet("login", flag.ExitOnError)

		authSwitchScopesFlags              = flag.NewFlagSet("switch-scopes", flag.ExitOnError)
		authSwitchScopesOrganizationIDFlag = authSwitchScopesFlags.String("organization-id", "", "")
		authSwitchScopesProjectIDFlag      = authSwitchScopesFlags.String("project-id", "", "")
		authSwitchScopesSessionTokenFlag   = authSwitchScopesFlags.String("session-token", "", "")

		authLogoutFlags            = flag.NewFlagSet("logout", flag.ExitOnError)
		authLogoutSessionTokenFlag = authLogoutFlags.String("session-token", "", "")

		authRegisterFlags            = flag.NewFlagSet("register", flag.ExitOnError)
		authRegisterBodyFlag         = authRegisterFlags.String("body", "REQUIRED", "")
		authRegisterSessionTokenFlag = authRegisterFlags.String("session-token", "", "")

		authInfoFlags            = flag.NewFlagSet("info", flag.ExitOnError)
		authInfoSessionTokenFlag = authInfoFlags.String("session-token", "", "")

		chatFlags = flag.NewFlagSet("chat", flag.ContinueOnError)

		chatListChatsFlags                = flag.NewFlagSet("list-chats", flag.ExitOnError)
		chatListChatsSessionTokenFlag     = chatListChatsFlags.String("session-token", "", "")
		chatListChatsProjectSlugInputFlag = chatListChatsFlags.String("project-slug-input", "", "")

		chatLoadChatFlags                = flag.NewFlagSet("load-chat", flag.ExitOnError)
		chatLoadChatIDFlag               = chatLoadChatFlags.String("id", "REQUIRED", "")
		chatLoadChatSessionTokenFlag     = chatLoadChatFlags.String("session-token", "", "")
		chatLoadChatProjectSlugInputFlag = chatLoadChatFlags.String("project-slug-input", "", "")

		chatCreditUsageFlags                = flag.NewFlagSet("credit-usage", flag.ExitOnError)
		chatCreditUsageSessionTokenFlag     = chatCreditUsageFlags.String("session-token", "", "")
		chatCreditUsageProjectSlugInputFlag = chatCreditUsageFlags.String("project-slug-input", "", "")

		deploymentsFlags = flag.NewFlagSet("deployments", flag.ContinueOnError)

		deploymentsGetDeploymentFlags                = flag.NewFlagSet("get-deployment", flag.ExitOnError)
		deploymentsGetDeploymentIDFlag               = deploymentsGetDeploymentFlags.String("id", "REQUIRED", "")
		deploymentsGetDeploymentApikeyTokenFlag      = deploymentsGetDeploymentFlags.String("apikey-token", "", "")
		deploymentsGetDeploymentSessionTokenFlag     = deploymentsGetDeploymentFlags.String("session-token", "", "")
		deploymentsGetDeploymentProjectSlugInputFlag = deploymentsGetDeploymentFlags.String("project-slug-input", "", "")

		deploymentsGetLatestDeploymentFlags                = flag.NewFlagSet("get-latest-deployment", flag.ExitOnError)
		deploymentsGetLatestDeploymentApikeyTokenFlag      = deploymentsGetLatestDeploymentFlags.String("apikey-token", "", "")
		deploymentsGetLatestDeploymentSessionTokenFlag     = deploymentsGetLatestDeploymentFlags.String("session-token", "", "")
		deploymentsGetLatestDeploymentProjectSlugInputFlag = deploymentsGetLatestDeploymentFlags.String("project-slug-input", "", "")

		deploymentsCreateDeploymentFlags                = flag.NewFlagSet("create-deployment", flag.ExitOnError)
		deploymentsCreateDeploymentBodyFlag             = deploymentsCreateDeploymentFlags.String("body", "REQUIRED", "")
		deploymentsCreateDeploymentApikeyTokenFlag      = deploymentsCreateDeploymentFlags.String("apikey-token", "", "")
		deploymentsCreateDeploymentSessionTokenFlag     = deploymentsCreateDeploymentFlags.String("session-token", "", "")
		deploymentsCreateDeploymentProjectSlugInputFlag = deploymentsCreateDeploymentFlags.String("project-slug-input", "", "")
		deploymentsCreateDeploymentIdempotencyKeyFlag   = deploymentsCreateDeploymentFlags.String("idempotency-key", "REQUIRED", "")

		deploymentsEvolveFlags                = flag.NewFlagSet("evolve", flag.ExitOnError)
		deploymentsEvolveBodyFlag             = deploymentsEvolveFlags.String("body", "REQUIRED", "")
		deploymentsEvolveApikeyTokenFlag      = deploymentsEvolveFlags.String("apikey-token", "", "")
		deploymentsEvolveSessionTokenFlag     = deploymentsEvolveFlags.String("session-token", "", "")
		deploymentsEvolveProjectSlugInputFlag = deploymentsEvolveFlags.String("project-slug-input", "", "")

		deploymentsRedeployFlags                = flag.NewFlagSet("redeploy", flag.ExitOnError)
		deploymentsRedeployBodyFlag             = deploymentsRedeployFlags.String("body", "REQUIRED", "")
		deploymentsRedeployApikeyTokenFlag      = deploymentsRedeployFlags.String("apikey-token", "", "")
		deploymentsRedeploySessionTokenFlag     = deploymentsRedeployFlags.String("session-token", "", "")
		deploymentsRedeployProjectSlugInputFlag = deploymentsRedeployFlags.String("project-slug-input", "", "")

		deploymentsListDeploymentsFlags                = flag.NewFlagSet("list-deployments", flag.ExitOnError)
		deploymentsListDeploymentsCursorFlag           = deploymentsListDeploymentsFlags.String("cursor", "", "")
		deploymentsListDeploymentsApikeyTokenFlag      = deploymentsListDeploymentsFlags.String("apikey-token", "", "")
		deploymentsListDeploymentsSessionTokenFlag     = deploymentsListDeploymentsFlags.String("session-token", "", "")
		deploymentsListDeploymentsProjectSlugInputFlag = deploymentsListDeploymentsFlags.String("project-slug-input", "", "")

		deploymentsGetDeploymentLogsFlags                = flag.NewFlagSet("get-deployment-logs", flag.ExitOnError)
		deploymentsGetDeploymentLogsDeploymentIDFlag     = deploymentsGetDeploymentLogsFlags.String("deployment-id", "REQUIRED", "")
		deploymentsGetDeploymentLogsCursorFlag           = deploymentsGetDeploymentLogsFlags.String("cursor", "", "")
		deploymentsGetDeploymentLogsApikeyTokenFlag      = deploymentsGetDeploymentLogsFlags.String("apikey-token", "", "")
		deploymentsGetDeploymentLogsSessionTokenFlag     = deploymentsGetDeploymentLogsFlags.String("session-token", "", "")
		deploymentsGetDeploymentLogsProjectSlugInputFlag = deploymentsGetDeploymentLogsFlags.String("project-slug-input", "", "")

		domainsFlags = flag.NewFlagSet("domains", flag.ContinueOnError)

		domainsGetDomainFlags                = flag.NewFlagSet("get-domain", flag.ExitOnError)
		domainsGetDomainSessionTokenFlag     = domainsGetDomainFlags.String("session-token", "", "")
		domainsGetDomainProjectSlugInputFlag = domainsGetDomainFlags.String("project-slug-input", "", "")

		domainsCreateDomainFlags                = flag.NewFlagSet("create-domain", flag.ExitOnError)
		domainsCreateDomainBodyFlag             = domainsCreateDomainFlags.String("body", "REQUIRED", "")
		domainsCreateDomainSessionTokenFlag     = domainsCreateDomainFlags.String("session-token", "", "")
		domainsCreateDomainProjectSlugInputFlag = domainsCreateDomainFlags.String("project-slug-input", "", "")

		domainsDeleteDomainFlags                = flag.NewFlagSet("delete-domain", flag.ExitOnError)
		domainsDeleteDomainSessionTokenFlag     = domainsDeleteDomainFlags.String("session-token", "", "")
		domainsDeleteDomainProjectSlugInputFlag = domainsDeleteDomainFlags.String("project-slug-input", "", "")

		environmentsFlags = flag.NewFlagSet("environments", flag.ContinueOnError)

		environmentsCreateEnvironmentFlags                = flag.NewFlagSet("create-environment", flag.ExitOnError)
		environmentsCreateEnvironmentBodyFlag             = environmentsCreateEnvironmentFlags.String("body", "REQUIRED", "")
		environmentsCreateEnvironmentSessionTokenFlag     = environmentsCreateEnvironmentFlags.String("session-token", "", "")
		environmentsCreateEnvironmentProjectSlugInputFlag = environmentsCreateEnvironmentFlags.String("project-slug-input", "", "")

		environmentsListEnvironmentsFlags                = flag.NewFlagSet("list-environments", flag.ExitOnError)
		environmentsListEnvironmentsSessionTokenFlag     = environmentsListEnvironmentsFlags.String("session-token", "", "")
		environmentsListEnvironmentsProjectSlugInputFlag = environmentsListEnvironmentsFlags.String("project-slug-input", "", "")

		environmentsUpdateEnvironmentFlags                = flag.NewFlagSet("update-environment", flag.ExitOnError)
		environmentsUpdateEnvironmentBodyFlag             = environmentsUpdateEnvironmentFlags.String("body", "REQUIRED", "")
		environmentsUpdateEnvironmentSlugFlag             = environmentsUpdateEnvironmentFlags.String("slug", "REQUIRED", "")
		environmentsUpdateEnvironmentSessionTokenFlag     = environmentsUpdateEnvironmentFlags.String("session-token", "", "")
		environmentsUpdateEnvironmentProjectSlugInputFlag = environmentsUpdateEnvironmentFlags.String("project-slug-input", "", "")

		environmentsDeleteEnvironmentFlags                = flag.NewFlagSet("delete-environment", flag.ExitOnError)
		environmentsDeleteEnvironmentSlugFlag             = environmentsDeleteEnvironmentFlags.String("slug", "REQUIRED", "")
		environmentsDeleteEnvironmentSessionTokenFlag     = environmentsDeleteEnvironmentFlags.String("session-token", "", "")
		environmentsDeleteEnvironmentProjectSlugInputFlag = environmentsDeleteEnvironmentFlags.String("project-slug-input", "", "")

		instancesFlags = flag.NewFlagSet("instances", flag.ContinueOnError)

		instancesGetInstanceFlags                = flag.NewFlagSet("get-instance", flag.ExitOnError)
		instancesGetInstanceToolsetSlugFlag      = instancesGetInstanceFlags.String("toolset-slug", "REQUIRED", "")
		instancesGetInstanceEnvironmentSlugFlag  = instancesGetInstanceFlags.String("environment-slug", "", "")
		instancesGetInstanceSessionTokenFlag     = instancesGetInstanceFlags.String("session-token", "", "")
		instancesGetInstanceProjectSlugInputFlag = instancesGetInstanceFlags.String("project-slug-input", "", "")
		instancesGetInstanceApikeyTokenFlag      = instancesGetInstanceFlags.String("apikey-token", "", "")

		integrationsFlags = flag.NewFlagSet("integrations", flag.ContinueOnError)

		integrationsGetFlags                = flag.NewFlagSet("get", flag.ExitOnError)
		integrationsGetIDFlag               = integrationsGetFlags.String("id", "", "")
		integrationsGetNameFlag             = integrationsGetFlags.String("name", "", "")
		integrationsGetSessionTokenFlag     = integrationsGetFlags.String("session-token", "", "")
		integrationsGetProjectSlugInputFlag = integrationsGetFlags.String("project-slug-input", "", "")

		integrationsListFlags                = flag.NewFlagSet("list", flag.ExitOnError)
		integrationsListKeywordsFlag         = integrationsListFlags.String("keywords", "", "")
		integrationsListSessionTokenFlag     = integrationsListFlags.String("session-token", "", "")
		integrationsListProjectSlugInputFlag = integrationsListFlags.String("project-slug-input", "", "")

		keysFlags = flag.NewFlagSet("keys", flag.ContinueOnError)

		keysCreateKeyFlags            = flag.NewFlagSet("create-key", flag.ExitOnError)
		keysCreateKeyBodyFlag         = keysCreateKeyFlags.String("body", "REQUIRED", "")
		keysCreateKeySessionTokenFlag = keysCreateKeyFlags.String("session-token", "", "")

		keysListKeysFlags            = flag.NewFlagSet("list-keys", flag.ExitOnError)
		keysListKeysSessionTokenFlag = keysListKeysFlags.String("session-token", "", "")

		keysRevokeKeyFlags            = flag.NewFlagSet("revoke-key", flag.ExitOnError)
		keysRevokeKeyIDFlag           = keysRevokeKeyFlags.String("id", "REQUIRED", "")
		keysRevokeKeySessionTokenFlag = keysRevokeKeyFlags.String("session-token", "", "")

		packagesFlags = flag.NewFlagSet("packages", flag.ContinueOnError)

		packagesCreatePackageFlags                = flag.NewFlagSet("create-package", flag.ExitOnError)
		packagesCreatePackageBodyFlag             = packagesCreatePackageFlags.String("body", "REQUIRED", "")
		packagesCreatePackageApikeyTokenFlag      = packagesCreatePackageFlags.String("apikey-token", "", "")
		packagesCreatePackageSessionTokenFlag     = packagesCreatePackageFlags.String("session-token", "", "")
		packagesCreatePackageProjectSlugInputFlag = packagesCreatePackageFlags.String("project-slug-input", "", "")

		packagesUpdatePackageFlags                = flag.NewFlagSet("update-package", flag.ExitOnError)
		packagesUpdatePackageBodyFlag             = packagesUpdatePackageFlags.String("body", "REQUIRED", "")
		packagesUpdatePackageApikeyTokenFlag      = packagesUpdatePackageFlags.String("apikey-token", "", "")
		packagesUpdatePackageSessionTokenFlag     = packagesUpdatePackageFlags.String("session-token", "", "")
		packagesUpdatePackageProjectSlugInputFlag = packagesUpdatePackageFlags.String("project-slug-input", "", "")

		packagesListPackagesFlags                = flag.NewFlagSet("list-packages", flag.ExitOnError)
		packagesListPackagesApikeyTokenFlag      = packagesListPackagesFlags.String("apikey-token", "", "")
		packagesListPackagesSessionTokenFlag     = packagesListPackagesFlags.String("session-token", "", "")
		packagesListPackagesProjectSlugInputFlag = packagesListPackagesFlags.String("project-slug-input", "", "")

		packagesListVersionsFlags                = flag.NewFlagSet("list-versions", flag.ExitOnError)
		packagesListVersionsNameFlag             = packagesListVersionsFlags.String("name", "REQUIRED", "")
		packagesListVersionsApikeyTokenFlag      = packagesListVersionsFlags.String("apikey-token", "", "")
		packagesListVersionsSessionTokenFlag     = packagesListVersionsFlags.String("session-token", "", "")
		packagesListVersionsProjectSlugInputFlag = packagesListVersionsFlags.String("project-slug-input", "", "")

		packagesPublishFlags                = flag.NewFlagSet("publish", flag.ExitOnError)
		packagesPublishBodyFlag             = packagesPublishFlags.String("body", "REQUIRED", "")
		packagesPublishApikeyTokenFlag      = packagesPublishFlags.String("apikey-token", "", "")
		packagesPublishSessionTokenFlag     = packagesPublishFlags.String("session-token", "", "")
		packagesPublishProjectSlugInputFlag = packagesPublishFlags.String("project-slug-input", "", "")

		projectsFlags = flag.NewFlagSet("projects", flag.ContinueOnError)

		projectsCreateProjectFlags            = flag.NewFlagSet("create-project", flag.ExitOnError)
		projectsCreateProjectBodyFlag         = projectsCreateProjectFlags.String("body", "REQUIRED", "")
		projectsCreateProjectApikeyTokenFlag  = projectsCreateProjectFlags.String("apikey-token", "", "")
		projectsCreateProjectSessionTokenFlag = projectsCreateProjectFlags.String("session-token", "", "")

		projectsListProjectsFlags              = flag.NewFlagSet("list-projects", flag.ExitOnError)
		projectsListProjectsOrganizationIDFlag = projectsListProjectsFlags.String("organization-id", "REQUIRED", "")
		projectsListProjectsApikeyTokenFlag    = projectsListProjectsFlags.String("apikey-token", "", "")
		projectsListProjectsSessionTokenFlag   = projectsListProjectsFlags.String("session-token", "", "")

		slackFlags = flag.NewFlagSet("slack", flag.ContinueOnError)

		slackCallbackFlags     = flag.NewFlagSet("callback", flag.ExitOnError)
		slackCallbackStateFlag = slackCallbackFlags.String("state", "REQUIRED", "")
		slackCallbackCodeFlag  = slackCallbackFlags.String("code", "REQUIRED", "")

		slackLoginFlags            = flag.NewFlagSet("login", flag.ExitOnError)
		slackLoginProjectSlugFlag  = slackLoginFlags.String("project-slug", "REQUIRED", "")
		slackLoginReturnURLFlag    = slackLoginFlags.String("return-url", "", "")
		slackLoginSessionTokenFlag = slackLoginFlags.String("session-token", "", "")

		slackGetSlackConnectionFlags                = flag.NewFlagSet("get-slack-connection", flag.ExitOnError)
		slackGetSlackConnectionSessionTokenFlag     = slackGetSlackConnectionFlags.String("session-token", "", "")
		slackGetSlackConnectionProjectSlugInputFlag = slackGetSlackConnectionFlags.String("project-slug-input", "", "")

		slackUpdateSlackConnectionFlags                = flag.NewFlagSet("update-slack-connection", flag.ExitOnError)
		slackUpdateSlackConnectionBodyFlag             = slackUpdateSlackConnectionFlags.String("body", "REQUIRED", "")
		slackUpdateSlackConnectionSessionTokenFlag     = slackUpdateSlackConnectionFlags.String("session-token", "", "")
		slackUpdateSlackConnectionProjectSlugInputFlag = slackUpdateSlackConnectionFlags.String("project-slug-input", "", "")

		slackDeleteSlackConnectionFlags                = flag.NewFlagSet("delete-slack-connection", flag.ExitOnError)
		slackDeleteSlackConnectionSessionTokenFlag     = slackDeleteSlackConnectionFlags.String("session-token", "", "")
		slackDeleteSlackConnectionProjectSlugInputFlag = slackDeleteSlackConnectionFlags.String("project-slug-input", "", "")

		templatesFlags = flag.NewFlagSet("templates", flag.ContinueOnError)

		templatesCreateTemplateFlags                = flag.NewFlagSet("create-template", flag.ExitOnError)
		templatesCreateTemplateBodyFlag             = templatesCreateTemplateFlags.String("body", "REQUIRED", "")
		templatesCreateTemplateApikeyTokenFlag      = templatesCreateTemplateFlags.String("apikey-token", "", "")
		templatesCreateTemplateSessionTokenFlag     = templatesCreateTemplateFlags.String("session-token", "", "")
		templatesCreateTemplateProjectSlugInputFlag = templatesCreateTemplateFlags.String("project-slug-input", "", "")

		templatesUpdateTemplateFlags                = flag.NewFlagSet("update-template", flag.ExitOnError)
		templatesUpdateTemplateBodyFlag             = templatesUpdateTemplateFlags.String("body", "REQUIRED", "")
		templatesUpdateTemplateApikeyTokenFlag      = templatesUpdateTemplateFlags.String("apikey-token", "", "")
		templatesUpdateTemplateSessionTokenFlag     = templatesUpdateTemplateFlags.String("session-token", "", "")
		templatesUpdateTemplateProjectSlugInputFlag = templatesUpdateTemplateFlags.String("project-slug-input", "", "")

		templatesGetTemplateFlags                = flag.NewFlagSet("get-template", flag.ExitOnError)
		templatesGetTemplateIDFlag               = templatesGetTemplateFlags.String("id", "", "")
		templatesGetTemplateNameFlag             = templatesGetTemplateFlags.String("name", "", "")
		templatesGetTemplateApikeyTokenFlag      = templatesGetTemplateFlags.String("apikey-token", "", "")
		templatesGetTemplateSessionTokenFlag     = templatesGetTemplateFlags.String("session-token", "", "")
		templatesGetTemplateProjectSlugInputFlag = templatesGetTemplateFlags.String("project-slug-input", "", "")

		templatesListTemplatesFlags                = flag.NewFlagSet("list-templates", flag.ExitOnError)
		templatesListTemplatesApikeyTokenFlag      = templatesListTemplatesFlags.String("apikey-token", "", "")
		templatesListTemplatesSessionTokenFlag     = templatesListTemplatesFlags.String("session-token", "", "")
		templatesListTemplatesProjectSlugInputFlag = templatesListTemplatesFlags.String("project-slug-input", "", "")

		templatesDeleteTemplateFlags                = flag.NewFlagSet("delete-template", flag.ExitOnError)
		templatesDeleteTemplateIDFlag               = templatesDeleteTemplateFlags.String("id", "", "")
		templatesDeleteTemplateNameFlag             = templatesDeleteTemplateFlags.String("name", "", "")
		templatesDeleteTemplateApikeyTokenFlag      = templatesDeleteTemplateFlags.String("apikey-token", "", "")
		templatesDeleteTemplateSessionTokenFlag     = templatesDeleteTemplateFlags.String("session-token", "", "")
		templatesDeleteTemplateProjectSlugInputFlag = templatesDeleteTemplateFlags.String("project-slug-input", "", "")

		templatesRenderTemplateByIDFlags                = flag.NewFlagSet("render-template-by-id", flag.ExitOnError)
		templatesRenderTemplateByIDBodyFlag             = templatesRenderTemplateByIDFlags.String("body", "REQUIRED", "")
		templatesRenderTemplateByIDIDFlag               = templatesRenderTemplateByIDFlags.String("id", "REQUIRED", "")
		templatesRenderTemplateByIDApikeyTokenFlag      = templatesRenderTemplateByIDFlags.String("apikey-token", "", "")
		templatesRenderTemplateByIDSessionTokenFlag     = templatesRenderTemplateByIDFlags.String("session-token", "", "")
		templatesRenderTemplateByIDProjectSlugInputFlag = templatesRenderTemplateByIDFlags.String("project-slug-input", "", "")

		templatesRenderTemplateFlags                = flag.NewFlagSet("render-template", flag.ExitOnError)
		templatesRenderTemplateBodyFlag             = templatesRenderTemplateFlags.String("body", "REQUIRED", "")
		templatesRenderTemplateApikeyTokenFlag      = templatesRenderTemplateFlags.String("apikey-token", "", "")
		templatesRenderTemplateSessionTokenFlag     = templatesRenderTemplateFlags.String("session-token", "", "")
		templatesRenderTemplateProjectSlugInputFlag = templatesRenderTemplateFlags.String("project-slug-input", "", "")

		toolsFlags = flag.NewFlagSet("tools", flag.ContinueOnError)

		toolsListToolsFlags                = flag.NewFlagSet("list-tools", flag.ExitOnError)
		toolsListToolsCursorFlag           = toolsListToolsFlags.String("cursor", "", "")
		toolsListToolsLimitFlag            = toolsListToolsFlags.String("limit", "", "")
		toolsListToolsDeploymentIDFlag     = toolsListToolsFlags.String("deployment-id", "", "")
		toolsListToolsSessionTokenFlag     = toolsListToolsFlags.String("session-token", "", "")
		toolsListToolsProjectSlugInputFlag = toolsListToolsFlags.String("project-slug-input", "", "")

		toolsetsFlags = flag.NewFlagSet("toolsets", flag.ContinueOnError)

		toolsetsCreateToolsetFlags                = flag.NewFlagSet("create-toolset", flag.ExitOnError)
		toolsetsCreateToolsetBodyFlag             = toolsetsCreateToolsetFlags.String("body", "REQUIRED", "")
		toolsetsCreateToolsetSessionTokenFlag     = toolsetsCreateToolsetFlags.String("session-token", "", "")
		toolsetsCreateToolsetProjectSlugInputFlag = toolsetsCreateToolsetFlags.String("project-slug-input", "", "")

		toolsetsListToolsetsFlags                = flag.NewFlagSet("list-toolsets", flag.ExitOnError)
		toolsetsListToolsetsSessionTokenFlag     = toolsetsListToolsetsFlags.String("session-token", "", "")
		toolsetsListToolsetsProjectSlugInputFlag = toolsetsListToolsetsFlags.String("project-slug-input", "", "")

		toolsetsUpdateToolsetFlags                = flag.NewFlagSet("update-toolset", flag.ExitOnError)
		toolsetsUpdateToolsetBodyFlag             = toolsetsUpdateToolsetFlags.String("body", "REQUIRED", "")
		toolsetsUpdateToolsetSlugFlag             = toolsetsUpdateToolsetFlags.String("slug", "REQUIRED", "")
		toolsetsUpdateToolsetSessionTokenFlag     = toolsetsUpdateToolsetFlags.String("session-token", "", "")
		toolsetsUpdateToolsetProjectSlugInputFlag = toolsetsUpdateToolsetFlags.String("project-slug-input", "", "")

		toolsetsDeleteToolsetFlags                = flag.NewFlagSet("delete-toolset", flag.ExitOnError)
		toolsetsDeleteToolsetSlugFlag             = toolsetsDeleteToolsetFlags.String("slug", "REQUIRED", "")
		toolsetsDeleteToolsetSessionTokenFlag     = toolsetsDeleteToolsetFlags.String("session-token", "", "")
		toolsetsDeleteToolsetProjectSlugInputFlag = toolsetsDeleteToolsetFlags.String("project-slug-input", "", "")

		toolsetsGetToolsetFlags                = flag.NewFlagSet("get-toolset", flag.ExitOnError)
		toolsetsGetToolsetSlugFlag             = toolsetsGetToolsetFlags.String("slug", "REQUIRED", "")
		toolsetsGetToolsetSessionTokenFlag     = toolsetsGetToolsetFlags.String("session-token", "", "")
		toolsetsGetToolsetProjectSlugInputFlag = toolsetsGetToolsetFlags.String("project-slug-input", "", "")

		toolsetsCheckMCPSlugAvailabilityFlags                = flag.NewFlagSet("check-mcp-slug-availability", flag.ExitOnError)
		toolsetsCheckMCPSlugAvailabilitySlugFlag             = toolsetsCheckMCPSlugAvailabilityFlags.String("slug", "REQUIRED", "")
		toolsetsCheckMCPSlugAvailabilitySessionTokenFlag     = toolsetsCheckMCPSlugAvailabilityFlags.String("session-token", "", "")
		toolsetsCheckMCPSlugAvailabilityProjectSlugInputFlag = toolsetsCheckMCPSlugAvailabilityFlags.String("project-slug-input", "", "")

		toolsetsAddExternalOAuthServerFlags                = flag.NewFlagSet("add-externaloauth-server", flag.ExitOnError)
		toolsetsAddExternalOAuthServerBodyFlag             = toolsetsAddExternalOAuthServerFlags.String("body", "REQUIRED", "")
		toolsetsAddExternalOAuthServerSlugFlag             = toolsetsAddExternalOAuthServerFlags.String("slug", "REQUIRED", "")
		toolsetsAddExternalOAuthServerSessionTokenFlag     = toolsetsAddExternalOAuthServerFlags.String("session-token", "", "")
		toolsetsAddExternalOAuthServerProjectSlugInputFlag = toolsetsAddExternalOAuthServerFlags.String("project-slug-input", "", "")

		toolsetsRemoveOAuthServerFlags                = flag.NewFlagSet("removeoauth-server", flag.ExitOnError)
		toolsetsRemoveOAuthServerSlugFlag             = toolsetsRemoveOAuthServerFlags.String("slug", "REQUIRED", "")
		toolsetsRemoveOAuthServerSessionTokenFlag     = toolsetsRemoveOAuthServerFlags.String("session-token", "", "")
		toolsetsRemoveOAuthServerProjectSlugInputFlag = toolsetsRemoveOAuthServerFlags.String("project-slug-input", "", "")

		usageFlags = flag.NewFlagSet("usage", flag.ContinueOnError)

		usageGetPeriodUsageFlags                = flag.NewFlagSet("get-period-usage", flag.ExitOnError)
		usageGetPeriodUsageSessionTokenFlag     = usageGetPeriodUsageFlags.String("session-token", "", "")
		usageGetPeriodUsageProjectSlugInputFlag = usageGetPeriodUsageFlags.String("project-slug-input", "", "")

		usageGetUsageTiersFlags = flag.NewFlagSet("get-usage-tiers", flag.ExitOnError)

		usageCreateCustomerSessionFlags                = flag.NewFlagSet("create-customer-session", flag.ExitOnError)
		usageCreateCustomerSessionSessionTokenFlag     = usageCreateCustomerSessionFlags.String("session-token", "", "")
		usageCreateCustomerSessionProjectSlugInputFlag = usageCreateCustomerSessionFlags.String("project-slug-input", "", "")

		usageCreateCheckoutFlags                = flag.NewFlagSet("create-checkout", flag.ExitOnError)
		usageCreateCheckoutSessionTokenFlag     = usageCreateCheckoutFlags.String("session-token", "", "")
		usageCreateCheckoutProjectSlugInputFlag = usageCreateCheckoutFlags.String("project-slug-input", "", "")

		variationsFlags = flag.NewFlagSet("variations", flag.ContinueOnError)

		variationsUpsertGlobalFlags                = flag.NewFlagSet("upsert-global", flag.ExitOnError)
		variationsUpsertGlobalBodyFlag             = variationsUpsertGlobalFlags.String("body", "REQUIRED", "")
		variationsUpsertGlobalSessionTokenFlag     = variationsUpsertGlobalFlags.String("session-token", "", "")
		variationsUpsertGlobalApikeyTokenFlag      = variationsUpsertGlobalFlags.String("apikey-token", "", "")
		variationsUpsertGlobalProjectSlugInputFlag = variationsUpsertGlobalFlags.String("project-slug-input", "", "")

		variationsDeleteGlobalFlags                = flag.NewFlagSet("delete-global", flag.ExitOnError)
		variationsDeleteGlobalVariationIDFlag      = variationsDeleteGlobalFlags.String("variation-id", "REQUIRED", "")
		variationsDeleteGlobalSessionTokenFlag     = variationsDeleteGlobalFlags.String("session-token", "", "")
		variationsDeleteGlobalApikeyTokenFlag      = variationsDeleteGlobalFlags.String("apikey-token", "", "")
		variationsDeleteGlobalProjectSlugInputFlag = variationsDeleteGlobalFlags.String("project-slug-input", "", "")

		variationsListGlobalFlags                = flag.NewFlagSet("list-global", flag.ExitOnError)
		variationsListGlobalSessionTokenFlag     = variationsListGlobalFlags.String("session-token", "", "")
		variationsListGlobalApikeyTokenFlag      = variationsListGlobalFlags.String("apikey-token", "", "")
		variationsListGlobalProjectSlugInputFlag = variationsListGlobalFlags.String("project-slug-input", "", "")
	)
	aboutFlags.Usage = aboutUsage
	aboutOpenapiFlags.Usage = aboutOpenapiUsage

	assetsFlags.Usage = assetsUsage
	assetsServeImageFlags.Usage = assetsServeImageUsage
	assetsUploadImageFlags.Usage = assetsUploadImageUsage
	assetsUploadFunctionsFlags.Usage = assetsUploadFunctionsUsage
	assetsUploadOpenAPIv3Flags.Usage = assetsUploadOpenAPIv3Usage
	assetsServeOpenAPIv3Flags.Usage = assetsServeOpenAPIv3Usage
	assetsListAssetsFlags.Usage = assetsListAssetsUsage

	authFlags.Usage = authUsage
	authCallbackFlags.Usage = authCallbackUsage
	authLoginFlags.Usage = authLoginUsage
	authSwitchScopesFlags.Usage = authSwitchScopesUsage
	authLogoutFlags.Usage = authLogoutUsage
	authRegisterFlags.Usage = authRegisterUsage
	authInfoFlags.Usage = authInfoUsage

	chatFlags.Usage = chatUsage
	chatListChatsFlags.Usage = chatListChatsUsage
	chatLoadChatFlags.Usage = chatLoadChatUsage
	chatCreditUsageFlags.Usage = chatCreditUsageUsage

	deploymentsFlags.Usage = deploymentsUsage
	deploymentsGetDeploymentFlags.Usage = deploymentsGetDeploymentUsage
	deploymentsGetLatestDeploymentFlags.Usage = deploymentsGetLatestDeploymentUsage
	deploymentsCreateDeploymentFlags.Usage = deploymentsCreateDeploymentUsage
	deploymentsEvolveFlags.Usage = deploymentsEvolveUsage
	deploymentsRedeployFlags.Usage = deploymentsRedeployUsage
	deploymentsListDeploymentsFlags.Usage = deploymentsListDeploymentsUsage
	deploymentsGetDeploymentLogsFlags.Usage = deploymentsGetDeploymentLogsUsage

	domainsFlags.Usage = domainsUsage
	domainsGetDomainFlags.Usage = domainsGetDomainUsage
	domainsCreateDomainFlags.Usage = domainsCreateDomainUsage
	domainsDeleteDomainFlags.Usage = domainsDeleteDomainUsage

	environmentsFlags.Usage = environmentsUsage
	environmentsCreateEnvironmentFlags.Usage = environmentsCreateEnvironmentUsage
	environmentsListEnvironmentsFlags.Usage = environmentsListEnvironmentsUsage
	environmentsUpdateEnvironmentFlags.Usage = environmentsUpdateEnvironmentUsage
	environmentsDeleteEnvironmentFlags.Usage = environmentsDeleteEnvironmentUsage

	instancesFlags.Usage = instancesUsage
	instancesGetInstanceFlags.Usage = instancesGetInstanceUsage

	integrationsFlags.Usage = integrationsUsage
	integrationsGetFlags.Usage = integrationsGetUsage
	integrationsListFlags.Usage = integrationsListUsage

	keysFlags.Usage = keysUsage
	keysCreateKeyFlags.Usage = keysCreateKeyUsage
	keysListKeysFlags.Usage = keysListKeysUsage
	keysRevokeKeyFlags.Usage = keysRevokeKeyUsage

	packagesFlags.Usage = packagesUsage
	packagesCreatePackageFlags.Usage = packagesCreatePackageUsage
	packagesUpdatePackageFlags.Usage = packagesUpdatePackageUsage
	packagesListPackagesFlags.Usage = packagesListPackagesUsage
	packagesListVersionsFlags.Usage = packagesListVersionsUsage
	packagesPublishFlags.Usage = packagesPublishUsage

	projectsFlags.Usage = projectsUsage
	projectsCreateProjectFlags.Usage = projectsCreateProjectUsage
	projectsListProjectsFlags.Usage = projectsListProjectsUsage

	slackFlags.Usage = slackUsage
	slackCallbackFlags.Usage = slackCallbackUsage
	slackLoginFlags.Usage = slackLoginUsage
	slackGetSlackConnectionFlags.Usage = slackGetSlackConnectionUsage
	slackUpdateSlackConnectionFlags.Usage = slackUpdateSlackConnectionUsage
	slackDeleteSlackConnectionFlags.Usage = slackDeleteSlackConnectionUsage

	templatesFlags.Usage = templatesUsage
	templatesCreateTemplateFlags.Usage = templatesCreateTemplateUsage
	templatesUpdateTemplateFlags.Usage = templatesUpdateTemplateUsage
	templatesGetTemplateFlags.Usage = templatesGetTemplateUsage
	templatesListTemplatesFlags.Usage = templatesListTemplatesUsage
	templatesDeleteTemplateFlags.Usage = templatesDeleteTemplateUsage
	templatesRenderTemplateByIDFlags.Usage = templatesRenderTemplateByIDUsage
	templatesRenderTemplateFlags.Usage = templatesRenderTemplateUsage

	toolsFlags.Usage = toolsUsage
	toolsListToolsFlags.Usage = toolsListToolsUsage

	toolsetsFlags.Usage = toolsetsUsage
	toolsetsCreateToolsetFlags.Usage = toolsetsCreateToolsetUsage
	toolsetsListToolsetsFlags.Usage = toolsetsListToolsetsUsage
	toolsetsUpdateToolsetFlags.Usage = toolsetsUpdateToolsetUsage
	toolsetsDeleteToolsetFlags.Usage = toolsetsDeleteToolsetUsage
	toolsetsGetToolsetFlags.Usage = toolsetsGetToolsetUsage
	toolsetsCheckMCPSlugAvailabilityFlags.Usage = toolsetsCheckMCPSlugAvailabilityUsage
	toolsetsAddExternalOAuthServerFlags.Usage = toolsetsAddExternalOAuthServerUsage
	toolsetsRemoveOAuthServerFlags.Usage = toolsetsRemoveOAuthServerUsage

	usageFlags.Usage = usageUsage
	usageGetPeriodUsageFlags.Usage = usageGetPeriodUsageUsage
	usageGetUsageTiersFlags.Usage = usageGetUsageTiersUsage
	usageCreateCustomerSessionFlags.Usage = usageCreateCustomerSessionUsage
	usageCreateCheckoutFlags.Usage = usageCreateCheckoutUsage

	variationsFlags.Usage = variationsUsage
	variationsUpsertGlobalFlags.Usage = variationsUpsertGlobalUsage
	variationsDeleteGlobalFlags.Usage = variationsDeleteGlobalUsage
	variationsListGlobalFlags.Usage = variationsListGlobalUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "about":
			svcf = aboutFlags
		case "assets":
			svcf = assetsFlags
		case "auth":
			svcf = authFlags
		case "chat":
			svcf = chatFlags
		case "deployments":
			svcf = deploymentsFlags
		case "domains":
			svcf = domainsFlags
		case "environments":
			svcf = environmentsFlags
		case "instances":
			svcf = instancesFlags
		case "integrations":
			svcf = integrationsFlags
		case "keys":
			svcf = keysFlags
		case "packages":
			svcf = packagesFlags
		case "projects":
			svcf = projectsFlags
		case "slack":
			svcf = slackFlags
		case "templates":
			svcf = templatesFlags
		case "tools":
			svcf = toolsFlags
		case "toolsets":
			svcf = toolsetsFlags
		case "usage":
			svcf = usageFlags
		case "variations":
			svcf = variationsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "about":
			switch epn {
			case "openapi":
				epf = aboutOpenapiFlags

			}

		case "assets":
			switch epn {
			case "serve-image":
				epf = assetsServeImageFlags

			case "upload-image":
				epf = assetsUploadImageFlags

			case "upload-functions":
				epf = assetsUploadFunctionsFlags

			case "upload-open-ap-iv3":
				epf = assetsUploadOpenAPIv3Flags

			case "serve-open-ap-iv3":
				epf = assetsServeOpenAPIv3Flags

			case "list-assets":
				epf = assetsListAssetsFlags

			}

		case "auth":
			switch epn {
			case "callback":
				epf = authCallbackFlags

			case "login":
				epf = authLoginFlags

			case "switch-scopes":
				epf = authSwitchScopesFlags

			case "logout":
				epf = authLogoutFlags

			case "register":
				epf = authRegisterFlags

			case "info":
				epf = authInfoFlags

			}

		case "chat":
			switch epn {
			case "list-chats":
				epf = chatListChatsFlags

			case "load-chat":
				epf = chatLoadChatFlags

			case "credit-usage":
				epf = chatCreditUsageFlags

			}

		case "deployments":
			switch epn {
			case "get-deployment":
				epf = deploymentsGetDeploymentFlags

			case "get-latest-deployment":
				epf = deploymentsGetLatestDeploymentFlags

			case "create-deployment":
				epf = deploymentsCreateDeploymentFlags

			case "evolve":
				epf = deploymentsEvolveFlags

			case "redeploy":
				epf = deploymentsRedeployFlags

			case "list-deployments":
				epf = deploymentsListDeploymentsFlags

			case "get-deployment-logs":
				epf = deploymentsGetDeploymentLogsFlags

			}

		case "domains":
			switch epn {
			case "get-domain":
				epf = domainsGetDomainFlags

			case "create-domain":
				epf = domainsCreateDomainFlags

			case "delete-domain":
				epf = domainsDeleteDomainFlags

			}

		case "environments":
			switch epn {
			case "create-environment":
				epf = environmentsCreateEnvironmentFlags

			case "list-environments":
				epf = environmentsListEnvironmentsFlags

			case "update-environment":
				epf = environmentsUpdateEnvironmentFlags

			case "delete-environment":
				epf = environmentsDeleteEnvironmentFlags

			}

		case "instances":
			switch epn {
			case "get-instance":
				epf = instancesGetInstanceFlags

			}

		case "integrations":
			switch epn {
			case "get":
				epf = integrationsGetFlags

			case "list":
				epf = integrationsListFlags

			}

		case "keys":
			switch epn {
			case "create-key":
				epf = keysCreateKeyFlags

			case "list-keys":
				epf = keysListKeysFlags

			case "revoke-key":
				epf = keysRevokeKeyFlags

			}

		case "packages":
			switch epn {
			case "create-package":
				epf = packagesCreatePackageFlags

			case "update-package":
				epf = packagesUpdatePackageFlags

			case "list-packages":
				epf = packagesListPackagesFlags

			case "list-versions":
				epf = packagesListVersionsFlags

			case "publish":
				epf = packagesPublishFlags

			}

		case "projects":
			switch epn {
			case "create-project":
				epf = projectsCreateProjectFlags

			case "list-projects":
				epf = projectsListProjectsFlags

			}

		case "slack":
			switch epn {
			case "callback":
				epf = slackCallbackFlags

			case "login":
				epf = slackLoginFlags

			case "get-slack-connection":
				epf = slackGetSlackConnectionFlags

			case "update-slack-connection":
				epf = slackUpdateSlackConnectionFlags

			case "delete-slack-connection":
				epf = slackDeleteSlackConnectionFlags

			}

		case "templates":
			switch epn {
			case "create-template":
				epf = templatesCreateTemplateFlags

			case "update-template":
				epf = templatesUpdateTemplateFlags

			case "get-template":
				epf = templatesGetTemplateFlags

			case "list-templates":
				epf = templatesListTemplatesFlags

			case "delete-template":
				epf = templatesDeleteTemplateFlags

			case "render-template-by-id":
				epf = templatesRenderTemplateByIDFlags

			case "render-template":
				epf = templatesRenderTemplateFlags

			}

		case "tools":
			switch epn {
			case "list-tools":
				epf = toolsListToolsFlags

			}

		case "toolsets":
			switch epn {
			case "create-toolset":
				epf = toolsetsCreateToolsetFlags

			case "list-toolsets":
				epf = toolsetsListToolsetsFlags

			case "update-toolset":
				epf = toolsetsUpdateToolsetFlags

			case "delete-toolset":
				epf = toolsetsDeleteToolsetFlags

			case "get-toolset":
				epf = toolsetsGetToolsetFlags

			case "check-mcp-slug-availability":
				epf = toolsetsCheckMCPSlugAvailabilityFlags

			case "add-externaloauth-server":
				epf = toolsetsAddExternalOAuthServerFlags

			case "removeoauth-server":
				epf = toolsetsRemoveOAuthServerFlags

			}

		case "usage":
			switch epn {
			case "get-period-usage":
				epf = usageGetPeriodUsageFlags

			case "get-usage-tiers":
				epf = usageGetUsageTiersFlags

			case "create-customer-session":
				epf = usageCreateCustomerSessionFlags

			case "create-checkout":
				epf = usageCreateCheckoutFlags

			}

		case "variations":
			switch epn {
			case "upsert-global":
				epf = variationsUpsertGlobalFlags

			case "delete-global":
				epf = variationsDeleteGlobalFlags

			case "list-global":
				epf = variationsListGlobalFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "about":
			c := aboutc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "openapi":
				endpoint = c.Openapi()
			}
		case "assets":
			c := assetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "serve-image":
				endpoint = c.ServeImage()
				data, err = assetsc.BuildServeImagePayload(*assetsServeImageIDFlag, *assetsServeImageSessionTokenFlag, *assetsServeImageApikeyTokenFlag)
			case "upload-image":
				endpoint = c.UploadImage()
				data, err = assetsc.BuildUploadImagePayload(*assetsUploadImageContentTypeFlag, *assetsUploadImageContentLengthFlag, *assetsUploadImageApikeyTokenFlag, *assetsUploadImageProjectSlugInputFlag, *assetsUploadImageSessionTokenFlag)
				if err == nil {
					data, err = assetsc.BuildUploadImageStreamPayload(data, *assetsUploadImageStreamFlag)
				}
			case "upload-functions":
				endpoint = c.UploadFunctions()
				data, err = assetsc.BuildUploadFunctionsPayload(*assetsUploadFunctionsContentTypeFlag, *assetsUploadFunctionsContentLengthFlag, *assetsUploadFunctionsApikeyTokenFlag, *assetsUploadFunctionsProjectSlugInputFlag, *assetsUploadFunctionsSessionTokenFlag)
				if err == nil {
					data, err = assetsc.BuildUploadFunctionsStreamPayload(data, *assetsUploadFunctionsStreamFlag)
				}
			case "upload-open-ap-iv3":
				endpoint = c.UploadOpenAPIv3()
				data, err = assetsc.BuildUploadOpenAPIv3Payload(*assetsUploadOpenAPIv3ContentTypeFlag, *assetsUploadOpenAPIv3ContentLengthFlag, *assetsUploadOpenAPIv3ApikeyTokenFlag, *assetsUploadOpenAPIv3ProjectSlugInputFlag, *assetsUploadOpenAPIv3SessionTokenFlag)
				if err == nil {
					data, err = assetsc.BuildUploadOpenAPIv3StreamPayload(data, *assetsUploadOpenAPIv3StreamFlag)
				}
			case "serve-open-ap-iv3":
				endpoint = c.ServeOpenAPIv3()
				data, err = assetsc.BuildServeOpenAPIv3Payload(*assetsServeOpenAPIv3IDFlag, *assetsServeOpenAPIv3ProjectIDFlag, *assetsServeOpenAPIv3ApikeyTokenFlag, *assetsServeOpenAPIv3SessionTokenFlag)
			case "list-assets":
				endpoint = c.ListAssets()
				data, err = assetsc.BuildListAssetsPayload(*assetsListAssetsSessionTokenFlag, *assetsListAssetsProjectSlugInputFlag, *assetsListAssetsApikeyTokenFlag)
			}
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "callback":
				endpoint = c.Callback()
				data, err = authc.BuildCallbackPayload(*authCallbackCodeFlag)
			case "login":
				endpoint = c.Login()
			case "switch-scopes":
				endpoint = c.SwitchScopes()
				data, err = authc.BuildSwitchScopesPayload(*authSwitchScopesOrganizationIDFlag, *authSwitchScopesProjectIDFlag, *authSwitchScopesSessionTokenFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = authc.BuildLogoutPayload(*authLogoutSessionTokenFlag)
			case "register":
				endpoint = c.Register()
				data, err = authc.BuildRegisterPayload(*authRegisterBodyFlag, *authRegisterSessionTokenFlag)
			case "info":
				endpoint = c.Info()
				data, err = authc.BuildInfoPayload(*authInfoSessionTokenFlag)
			}
		case "chat":
			c := chatc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-chats":
				endpoint = c.ListChats()
				data, err = chatc.BuildListChatsPayload(*chatListChatsSessionTokenFlag, *chatListChatsProjectSlugInputFlag)
			case "load-chat":
				endpoint = c.LoadChat()
				data, err = chatc.BuildLoadChatPayload(*chatLoadChatIDFlag, *chatLoadChatSessionTokenFlag, *chatLoadChatProjectSlugInputFlag)
			case "credit-usage":
				endpoint = c.CreditUsage()
				data, err = chatc.BuildCreditUsagePayload(*chatCreditUsageSessionTokenFlag, *chatCreditUsageProjectSlugInputFlag)
			}
		case "deployments":
			c := deploymentsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-deployment":
				endpoint = c.GetDeployment()
				data, err = deploymentsc.BuildGetDeploymentPayload(*deploymentsGetDeploymentIDFlag, *deploymentsGetDeploymentApikeyTokenFlag, *deploymentsGetDeploymentSessionTokenFlag, *deploymentsGetDeploymentProjectSlugInputFlag)
			case "get-latest-deployment":
				endpoint = c.GetLatestDeployment()
				data, err = deploymentsc.BuildGetLatestDeploymentPayload(*deploymentsGetLatestDeploymentApikeyTokenFlag, *deploymentsGetLatestDeploymentSessionTokenFlag, *deploymentsGetLatestDeploymentProjectSlugInputFlag)
			case "create-deployment":
				endpoint = c.CreateDeployment()
				data, err = deploymentsc.BuildCreateDeploymentPayload(*deploymentsCreateDeploymentBodyFlag, *deploymentsCreateDeploymentApikeyTokenFlag, *deploymentsCreateDeploymentSessionTokenFlag, *deploymentsCreateDeploymentProjectSlugInputFlag, *deploymentsCreateDeploymentIdempotencyKeyFlag)
			case "evolve":
				endpoint = c.Evolve()
				data, err = deploymentsc.BuildEvolvePayload(*deploymentsEvolveBodyFlag, *deploymentsEvolveApikeyTokenFlag, *deploymentsEvolveSessionTokenFlag, *deploymentsEvolveProjectSlugInputFlag)
			case "redeploy":
				endpoint = c.Redeploy()
				data, err = deploymentsc.BuildRedeployPayload(*deploymentsRedeployBodyFlag, *deploymentsRedeployApikeyTokenFlag, *deploymentsRedeploySessionTokenFlag, *deploymentsRedeployProjectSlugInputFlag)
			case "list-deployments":
				endpoint = c.ListDeployments()
				data, err = deploymentsc.BuildListDeploymentsPayload(*deploymentsListDeploymentsCursorFlag, *deploymentsListDeploymentsApikeyTokenFlag, *deploymentsListDeploymentsSessionTokenFlag, *deploymentsListDeploymentsProjectSlugInputFlag)
			case "get-deployment-logs":
				endpoint = c.GetDeploymentLogs()
				data, err = deploymentsc.BuildGetDeploymentLogsPayload(*deploymentsGetDeploymentLogsDeploymentIDFlag, *deploymentsGetDeploymentLogsCursorFlag, *deploymentsGetDeploymentLogsApikeyTokenFlag, *deploymentsGetDeploymentLogsSessionTokenFlag, *deploymentsGetDeploymentLogsProjectSlugInputFlag)
			}
		case "domains":
			c := domainsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-domain":
				endpoint = c.GetDomain()
				data, err = domainsc.BuildGetDomainPayload(*domainsGetDomainSessionTokenFlag, *domainsGetDomainProjectSlugInputFlag)
			case "create-domain":
				endpoint = c.CreateDomain()
				data, err = domainsc.BuildCreateDomainPayload(*domainsCreateDomainBodyFlag, *domainsCreateDomainSessionTokenFlag, *domainsCreateDomainProjectSlugInputFlag)
			case "delete-domain":
				endpoint = c.DeleteDomain()
				data, err = domainsc.BuildDeleteDomainPayload(*domainsDeleteDomainSessionTokenFlag, *domainsDeleteDomainProjectSlugInputFlag)
			}
		case "environments":
			c := environmentsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-environment":
				endpoint = c.CreateEnvironment()
				data, err = environmentsc.BuildCreateEnvironmentPayload(*environmentsCreateEnvironmentBodyFlag, *environmentsCreateEnvironmentSessionTokenFlag, *environmentsCreateEnvironmentProjectSlugInputFlag)
			case "list-environments":
				endpoint = c.ListEnvironments()
				data, err = environmentsc.BuildListEnvironmentsPayload(*environmentsListEnvironmentsSessionTokenFlag, *environmentsListEnvironmentsProjectSlugInputFlag)
			case "update-environment":
				endpoint = c.UpdateEnvironment()
				data, err = environmentsc.BuildUpdateEnvironmentPayload(*environmentsUpdateEnvironmentBodyFlag, *environmentsUpdateEnvironmentSlugFlag, *environmentsUpdateEnvironmentSessionTokenFlag, *environmentsUpdateEnvironmentProjectSlugInputFlag)
			case "delete-environment":
				endpoint = c.DeleteEnvironment()
				data, err = environmentsc.BuildDeleteEnvironmentPayload(*environmentsDeleteEnvironmentSlugFlag, *environmentsDeleteEnvironmentSessionTokenFlag, *environmentsDeleteEnvironmentProjectSlugInputFlag)
			}
		case "instances":
			c := instancesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-instance":
				endpoint = c.GetInstance()
				data, err = instancesc.BuildGetInstancePayload(*instancesGetInstanceToolsetSlugFlag, *instancesGetInstanceEnvironmentSlugFlag, *instancesGetInstanceSessionTokenFlag, *instancesGetInstanceProjectSlugInputFlag, *instancesGetInstanceApikeyTokenFlag)
			}
		case "integrations":
			c := integrationsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = integrationsc.BuildGetPayload(*integrationsGetIDFlag, *integrationsGetNameFlag, *integrationsGetSessionTokenFlag, *integrationsGetProjectSlugInputFlag)
			case "list":
				endpoint = c.List()
				data, err = integrationsc.BuildListPayload(*integrationsListKeywordsFlag, *integrationsListSessionTokenFlag, *integrationsListProjectSlugInputFlag)
			}
		case "keys":
			c := keysc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-key":
				endpoint = c.CreateKey()
				data, err = keysc.BuildCreateKeyPayload(*keysCreateKeyBodyFlag, *keysCreateKeySessionTokenFlag)
			case "list-keys":
				endpoint = c.ListKeys()
				data, err = keysc.BuildListKeysPayload(*keysListKeysSessionTokenFlag)
			case "revoke-key":
				endpoint = c.RevokeKey()
				data, err = keysc.BuildRevokeKeyPayload(*keysRevokeKeyIDFlag, *keysRevokeKeySessionTokenFlag)
			}
		case "packages":
			c := packagesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-package":
				endpoint = c.CreatePackage()
				data, err = packagesc.BuildCreatePackagePayload(*packagesCreatePackageBodyFlag, *packagesCreatePackageApikeyTokenFlag, *packagesCreatePackageSessionTokenFlag, *packagesCreatePackageProjectSlugInputFlag)
			case "update-package":
				endpoint = c.UpdatePackage()
				data, err = packagesc.BuildUpdatePackagePayload(*packagesUpdatePackageBodyFlag, *packagesUpdatePackageApikeyTokenFlag, *packagesUpdatePackageSessionTokenFlag, *packagesUpdatePackageProjectSlugInputFlag)
			case "list-packages":
				endpoint = c.ListPackages()
				data, err = packagesc.BuildListPackagesPayload(*packagesListPackagesApikeyTokenFlag, *packagesListPackagesSessionTokenFlag, *packagesListPackagesProjectSlugInputFlag)
			case "list-versions":
				endpoint = c.ListVersions()
				data, err = packagesc.BuildListVersionsPayload(*packagesListVersionsNameFlag, *packagesListVersionsApikeyTokenFlag, *packagesListVersionsSessionTokenFlag, *packagesListVersionsProjectSlugInputFlag)
			case "publish":
				endpoint = c.Publish()
				data, err = packagesc.BuildPublishPayload(*packagesPublishBodyFlag, *packagesPublishApikeyTokenFlag, *packagesPublishSessionTokenFlag, *packagesPublishProjectSlugInputFlag)
			}
		case "projects":
			c := projectsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-project":
				endpoint = c.CreateProject()
				data, err = projectsc.BuildCreateProjectPayload(*projectsCreateProjectBodyFlag, *projectsCreateProjectApikeyTokenFlag, *projectsCreateProjectSessionTokenFlag)
			case "list-projects":
				endpoint = c.ListProjects()
				data, err = projectsc.BuildListProjectsPayload(*projectsListProjectsOrganizationIDFlag, *projectsListProjectsApikeyTokenFlag, *projectsListProjectsSessionTokenFlag)
			}
		case "slack":
			c := slackc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "callback":
				endpoint = c.Callback()
				data, err = slackc.BuildCallbackPayload(*slackCallbackStateFlag, *slackCallbackCodeFlag)
			case "login":
				endpoint = c.Login()
				data, err = slackc.BuildLoginPayload(*slackLoginProjectSlugFlag, *slackLoginReturnURLFlag, *slackLoginSessionTokenFlag)
			case "get-slack-connection":
				endpoint = c.GetSlackConnection()
				data, err = slackc.BuildGetSlackConnectionPayload(*slackGetSlackConnectionSessionTokenFlag, *slackGetSlackConnectionProjectSlugInputFlag)
			case "update-slack-connection":
				endpoint = c.UpdateSlackConnection()
				data, err = slackc.BuildUpdateSlackConnectionPayload(*slackUpdateSlackConnectionBodyFlag, *slackUpdateSlackConnectionSessionTokenFlag, *slackUpdateSlackConnectionProjectSlugInputFlag)
			case "delete-slack-connection":
				endpoint = c.DeleteSlackConnection()
				data, err = slackc.BuildDeleteSlackConnectionPayload(*slackDeleteSlackConnectionSessionTokenFlag, *slackDeleteSlackConnectionProjectSlugInputFlag)
			}
		case "templates":
			c := templatesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-template":
				endpoint = c.CreateTemplate()
				data, err = templatesc.BuildCreateTemplatePayload(*templatesCreateTemplateBodyFlag, *templatesCreateTemplateApikeyTokenFlag, *templatesCreateTemplateSessionTokenFlag, *templatesCreateTemplateProjectSlugInputFlag)
			case "update-template":
				endpoint = c.UpdateTemplate()
				data, err = templatesc.BuildUpdateTemplatePayload(*templatesUpdateTemplateBodyFlag, *templatesUpdateTemplateApikeyTokenFlag, *templatesUpdateTemplateSessionTokenFlag, *templatesUpdateTemplateProjectSlugInputFlag)
			case "get-template":
				endpoint = c.GetTemplate()
				data, err = templatesc.BuildGetTemplatePayload(*templatesGetTemplateIDFlag, *templatesGetTemplateNameFlag, *templatesGetTemplateApikeyTokenFlag, *templatesGetTemplateSessionTokenFlag, *templatesGetTemplateProjectSlugInputFlag)
			case "list-templates":
				endpoint = c.ListTemplates()
				data, err = templatesc.BuildListTemplatesPayload(*templatesListTemplatesApikeyTokenFlag, *templatesListTemplatesSessionTokenFlag, *templatesListTemplatesProjectSlugInputFlag)
			case "delete-template":
				endpoint = c.DeleteTemplate()
				data, err = templatesc.BuildDeleteTemplatePayload(*templatesDeleteTemplateIDFlag, *templatesDeleteTemplateNameFlag, *templatesDeleteTemplateApikeyTokenFlag, *templatesDeleteTemplateSessionTokenFlag, *templatesDeleteTemplateProjectSlugInputFlag)
			case "render-template-by-id":
				endpoint = c.RenderTemplateByID()
				data, err = templatesc.BuildRenderTemplateByIDPayload(*templatesRenderTemplateByIDBodyFlag, *templatesRenderTemplateByIDIDFlag, *templatesRenderTemplateByIDApikeyTokenFlag, *templatesRenderTemplateByIDSessionTokenFlag, *templatesRenderTemplateByIDProjectSlugInputFlag)
			case "render-template":
				endpoint = c.RenderTemplate()
				data, err = templatesc.BuildRenderTemplatePayload(*templatesRenderTemplateBodyFlag, *templatesRenderTemplateApikeyTokenFlag, *templatesRenderTemplateSessionTokenFlag, *templatesRenderTemplateProjectSlugInputFlag)
			}
		case "tools":
			c := toolsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-tools":
				endpoint = c.ListTools()
				data, err = toolsc.BuildListToolsPayload(*toolsListToolsCursorFlag, *toolsListToolsLimitFlag, *toolsListToolsDeploymentIDFlag, *toolsListToolsSessionTokenFlag, *toolsListToolsProjectSlugInputFlag)
			}
		case "toolsets":
			c := toolsetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-toolset":
				endpoint = c.CreateToolset()
				data, err = toolsetsc.BuildCreateToolsetPayload(*toolsetsCreateToolsetBodyFlag, *toolsetsCreateToolsetSessionTokenFlag, *toolsetsCreateToolsetProjectSlugInputFlag)
			case "list-toolsets":
				endpoint = c.ListToolsets()
				data, err = toolsetsc.BuildListToolsetsPayload(*toolsetsListToolsetsSessionTokenFlag, *toolsetsListToolsetsProjectSlugInputFlag)
			case "update-toolset":
				endpoint = c.UpdateToolset()
				data, err = toolsetsc.BuildUpdateToolsetPayload(*toolsetsUpdateToolsetBodyFlag, *toolsetsUpdateToolsetSlugFlag, *toolsetsUpdateToolsetSessionTokenFlag, *toolsetsUpdateToolsetProjectSlugInputFlag)
			case "delete-toolset":
				endpoint = c.DeleteToolset()
				data, err = toolsetsc.BuildDeleteToolsetPayload(*toolsetsDeleteToolsetSlugFlag, *toolsetsDeleteToolsetSessionTokenFlag, *toolsetsDeleteToolsetProjectSlugInputFlag)
			case "get-toolset":
				endpoint = c.GetToolset()
				data, err = toolsetsc.BuildGetToolsetPayload(*toolsetsGetToolsetSlugFlag, *toolsetsGetToolsetSessionTokenFlag, *toolsetsGetToolsetProjectSlugInputFlag)
			case "check-mcp-slug-availability":
				endpoint = c.CheckMCPSlugAvailability()
				data, err = toolsetsc.BuildCheckMCPSlugAvailabilityPayload(*toolsetsCheckMCPSlugAvailabilitySlugFlag, *toolsetsCheckMCPSlugAvailabilitySessionTokenFlag, *toolsetsCheckMCPSlugAvailabilityProjectSlugInputFlag)
			case "add-externaloauth-server":
				endpoint = c.AddExternalOAuthServer()
				data, err = toolsetsc.BuildAddExternalOAuthServerPayload(*toolsetsAddExternalOAuthServerBodyFlag, *toolsetsAddExternalOAuthServerSlugFlag, *toolsetsAddExternalOAuthServerSessionTokenFlag, *toolsetsAddExternalOAuthServerProjectSlugInputFlag)
			case "removeoauth-server":
				endpoint = c.RemoveOAuthServer()
				data, err = toolsetsc.BuildRemoveOAuthServerPayload(*toolsetsRemoveOAuthServerSlugFlag, *toolsetsRemoveOAuthServerSessionTokenFlag, *toolsetsRemoveOAuthServerProjectSlugInputFlag)
			}
		case "usage":
			c := usagec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-period-usage":
				endpoint = c.GetPeriodUsage()
				data, err = usagec.BuildGetPeriodUsagePayload(*usageGetPeriodUsageSessionTokenFlag, *usageGetPeriodUsageProjectSlugInputFlag)
			case "get-usage-tiers":
				endpoint = c.GetUsageTiers()
			case "create-customer-session":
				endpoint = c.CreateCustomerSession()
				data, err = usagec.BuildCreateCustomerSessionPayload(*usageCreateCustomerSessionSessionTokenFlag, *usageCreateCustomerSessionProjectSlugInputFlag)
			case "create-checkout":
				endpoint = c.CreateCheckout()
				data, err = usagec.BuildCreateCheckoutPayload(*usageCreateCheckoutSessionTokenFlag, *usageCreateCheckoutProjectSlugInputFlag)
			}
		case "variations":
			c := variationsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "upsert-global":
				endpoint = c.UpsertGlobal()
				data, err = variationsc.BuildUpsertGlobalPayload(*variationsUpsertGlobalBodyFlag, *variationsUpsertGlobalSessionTokenFlag, *variationsUpsertGlobalApikeyTokenFlag, *variationsUpsertGlobalProjectSlugInputFlag)
			case "delete-global":
				endpoint = c.DeleteGlobal()
				data, err = variationsc.BuildDeleteGlobalPayload(*variationsDeleteGlobalVariationIDFlag, *variationsDeleteGlobalSessionTokenFlag, *variationsDeleteGlobalApikeyTokenFlag, *variationsDeleteGlobalProjectSlugInputFlag)
			case "list-global":
				endpoint = c.ListGlobal()
				data, err = variationsc.BuildListGlobalPayload(*variationsListGlobalSessionTokenFlag, *variationsListGlobalApikeyTokenFlag, *variationsListGlobalProjectSlugInputFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// aboutUsage displays the usage of the about command and its subcommands.
func aboutUsage() {
	fmt.Fprintf(os.Stderr, `Information about the Gram platform and its components.
Usage:
    %[1]s [globalflags] about COMMAND [flags]

COMMAND:
    openapi: The OpenAPI description of the Gram API.

Additional help:
    %[1]s about COMMAND --help
`, os.Args[0])
}
func aboutOpenapiUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] about openapi

The OpenAPI description of the Gram API.

Example:
    %[1]s about openapi
`, os.Args[0])
}

// assetsUsage displays the usage of the assets command and its subcommands.
func assetsUsage() {
	fmt.Fprintf(os.Stderr, `Manages assets used by Gram projects.
Usage:
    %[1]s [globalflags] assets COMMAND [flags]

COMMAND:
    serve-image: Serve an image from Gram.
    upload-image: Upload an image to Gram.
    upload-functions: Upload functions to Gram.
    upload-open-ap-iv3: Upload an OpenAPI v3 document to Gram.
    serve-open-ap-iv3: Serve an OpenAPIv3 asset from Gram.
    list-assets: List all assets for a project.

Additional help:
    %[1]s assets COMMAND --help
`, os.Args[0])
}
func assetsServeImageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assets serve-image -id STRING -session-token STRING -apikey-token STRING

Serve an image from Gram.
    -id STRING: 
    -session-token STRING: 
    -apikey-token STRING: 

Example:
    %[1]s assets serve-image --id "Incidunt rem voluptatibus." --session-token "Est quo modi rerum." --apikey-token "Et dolores ut sit non praesentium culpa."
`, os.Args[0])
}

func assetsUploadImageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assets upload-image -content-type STRING -content-length INT64 -apikey-token STRING -project-slug-input STRING -session-token STRING -stream STRING

Upload an image to Gram.
    -content-type STRING: 
    -content-length INT64: 
    -apikey-token STRING: 
    -project-slug-input STRING: 
    -session-token STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    %[1]s assets upload-image --content-type "Aut amet dolorum necessitatibus enim officiis." --content-length 6410671343728866866 --apikey-token "Ut sit." --project-slug-input "Dignissimos dolor ut voluptatem libero." --session-token "Dignissimos ipsum exercitationem quia quas ex saepe." --stream "goa.png"
`, os.Args[0])
}

func assetsUploadFunctionsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assets upload-functions -content-type STRING -content-length INT64 -apikey-token STRING -project-slug-input STRING -session-token STRING -stream STRING

Upload functions to Gram.
    -content-type STRING: 
    -content-length INT64: 
    -apikey-token STRING: 
    -project-slug-input STRING: 
    -session-token STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    %[1]s assets upload-functions --content-type "Iure aut." --content-length 3175628883900739751 --apikey-token "Consectetur eum sit sunt perferendis magni voluptas." --project-slug-input "Voluptatem et perspiciatis laboriosam." --session-token "Quae rerum." --stream "goa.png"
`, os.Args[0])
}

func assetsUploadOpenAPIv3Usage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assets upload-open-ap-iv3 -content-type STRING -content-length INT64 -apikey-token STRING -project-slug-input STRING -session-token STRING -stream STRING

Upload an OpenAPI v3 document to Gram.
    -content-type STRING: 
    -content-length INT64: 
    -apikey-token STRING: 
    -project-slug-input STRING: 
    -session-token STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    %[1]s assets upload-open-ap-iv3 --content-type "Rerum dolore deleniti iste." --content-length 3935315047333736556 --apikey-token "Non dolores." --project-slug-input "Nisi et officiis." --session-token "Impedit et adipisci ab." --stream "goa.png"
`, os.Args[0])
}

func assetsServeOpenAPIv3Usage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assets serve-open-ap-iv3 -id STRING -project-id STRING -apikey-token STRING -session-token STRING

Serve an OpenAPIv3 asset from Gram.
    -id STRING: 
    -project-id STRING: 
    -apikey-token STRING: 
    -session-token STRING: 

Example:
    %[1]s assets serve-open-ap-iv3 --id "Consectetur explicabo corporis aliquam." --project-id "Quae pariatur officiis consequatur dolorem nam est." --apikey-token "Ut fuga doloremque sunt." --session-token "Illum explicabo officia soluta et iure quo."
`, os.Args[0])
}

func assetsListAssetsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assets list-assets -session-token STRING -project-slug-input STRING -apikey-token STRING

List all assets for a project.
    -session-token STRING: 
    -project-slug-input STRING: 
    -apikey-token STRING: 

Example:
    %[1]s assets list-assets --session-token "Et occaecati distinctio nostrum eius voluptatem nostrum." --project-slug-input "Accusamus accusamus ex in harum." --apikey-token "Enim et at omnis quidem et sed."
`, os.Args[0])
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `Managed auth for gram producers and dashboard.
Usage:
    %[1]s [globalflags] auth COMMAND [flags]

COMMAND:
    callback: Handles the authentication callback.
    login: Proxies to auth login through speakeasy oidc.
    switch-scopes: Switches the authentication scope to a different organization.
    logout: Logs out the current user by clearing their session.
    register: Register a new org for a user with their session information.
    info: Provides information about the current authentication status.

Additional help:
    %[1]s auth COMMAND --help
`, os.Args[0])
}
func authCallbackUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth callback -code STRING

Handles the authentication callback.
    -code STRING: 

Example:
    %[1]s auth callback --code "Non vel provident."
`, os.Args[0])
}

func authLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth login

Proxies to auth login through speakeasy oidc.

Example:
    %[1]s auth login
`, os.Args[0])
}

func authSwitchScopesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth switch-scopes -organization-id STRING -project-id STRING -session-token STRING

Switches the authentication scope to a different organization.
    -organization-id STRING: 
    -project-id STRING: 
    -session-token STRING: 

Example:
    %[1]s auth switch-scopes --organization-id "Quisquam non tempore mollitia ut magni voluptas." --project-id "Porro enim." --session-token "Incidunt ut."
`, os.Args[0])
}

func authLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth logout -session-token STRING

Logs out the current user by clearing their session.
    -session-token STRING: 

Example:
    %[1]s auth logout --session-token "Ex atque iure aut commodi ullam iusto."
`, os.Args[0])
}

func authRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth register -body JSON -session-token STRING

Register a new org for a user with their session information.
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s auth register --body '{
      "org_name": "Repellat ut quae nostrum quo eos eaque."
   }' --session-token "Ipsa quod illo."
`, os.Args[0])
}

func authInfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth info -session-token STRING

Provides information about the current authentication status.
    -session-token STRING: 

Example:
    %[1]s auth info --session-token "Saepe ut reiciendis ut alias."
`, os.Args[0])
}

// chatUsage displays the usage of the chat command and its subcommands.
func chatUsage() {
	fmt.Fprintf(os.Stderr, `Managed chats for gram AI consumers.
Usage:
    %[1]s [globalflags] chat COMMAND [flags]

COMMAND:
    list-chats: List all chats for a project
    load-chat: Load a chat by its ID
    credit-usage: Load a chat by its ID

Additional help:
    %[1]s chat COMMAND --help
`, os.Args[0])
}
func chatListChatsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat list-chats -session-token STRING -project-slug-input STRING

List all chats for a project
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s chat list-chats --session-token "Aut consequatur aut debitis illo eaque exercitationem." --project-slug-input "Et ut."
`, os.Args[0])
}

func chatLoadChatUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat load-chat -id STRING -session-token STRING -project-slug-input STRING

Load a chat by its ID
    -id STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s chat load-chat --id "Praesentium ducimus illum omnis ullam praesentium." --session-token "Exercitationem corporis aut." --project-slug-input "Sint autem id laborum sequi."
`, os.Args[0])
}

func chatCreditUsageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat credit-usage -session-token STRING -project-slug-input STRING

Load a chat by its ID
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s chat credit-usage --session-token "Fugiat repudiandae laboriosam voluptates." --project-slug-input "Possimus eos fuga ratione voluptatem et aspernatur."
`, os.Args[0])
}

// deploymentsUsage displays the usage of the deployments command and its
// subcommands.
func deploymentsUsage() {
	fmt.Fprintf(os.Stderr, `Manages deployments of tools from upstream sources.
Usage:
    %[1]s [globalflags] deployments COMMAND [flags]

COMMAND:
    get-deployment: Get a deployment by its ID.
    get-latest-deployment: Get the latest deployment for a project.
    create-deployment: Create a deployment to load tool definitions.
    evolve: Create a new deployment with additional or updated tool sources.
    redeploy: Redeploys an existing deployment.
    list-deployments: List all deployments in descending order of creation.
    get-deployment-logs: Get logs for a deployment.

Additional help:
    %[1]s deployments COMMAND --help
`, os.Args[0])
}
func deploymentsGetDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments get-deployment -id STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

Get a deployment by its ID.
    -id STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments get-deployment --id "Eveniet magnam voluptates facere sed rerum repellat." --apikey-token "Voluptatem quasi et." --session-token "Maiores dolorum odit." --project-slug-input "Ratione dolore odio corporis aliquid quis."
`, os.Args[0])
}

func deploymentsGetLatestDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments get-latest-deployment -apikey-token STRING -session-token STRING -project-slug-input STRING

Get the latest deployment for a project.
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments get-latest-deployment --apikey-token "Non architecto." --session-token "Velit iure et corrupti quia quis." --project-slug-input "Qui est repudiandae sint placeat sed explicabo."
`, os.Args[0])
}

func deploymentsCreateDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments create-deployment -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING -idempotency-key STRING

Create a deployment to load tool definitions.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 
    -idempotency-key STRING: 

Example:
    %[1]s deployments create-deployment --body '{
      "external_id": "bc5f4a555e933e6861d12edba4c2d87ef6caf8e6",
      "external_url": "Repudiandae ipsa velit atque et architecto nisi.",
      "github_pr": "1234",
      "github_repo": "speakeasyapi/gram",
      "github_sha": "f33e693e9e12552043bc0ec5c37f1b8a9e076161",
      "openapiv3_assets": [
         {
            "asset_id": "Magni vel autem voluptas officiis repellendus autem.",
            "name": "Minima sit numquam similique fugiat.",
            "slug": "0cb"
         },
         {
            "asset_id": "Magni vel autem voluptas officiis repellendus autem.",
            "name": "Minima sit numquam similique fugiat.",
            "slug": "0cb"
         }
      ],
      "packages": [
         {
            "name": "Quibusdam qui animi illum nisi voluptatum.",
            "version": "Architecto qui aut."
         },
         {
            "name": "Quibusdam qui animi illum nisi voluptatum.",
            "version": "Architecto qui aut."
         },
         {
            "name": "Quibusdam qui animi illum nisi voluptatum.",
            "version": "Architecto qui aut."
         },
         {
            "name": "Quibusdam qui animi illum nisi voluptatum.",
            "version": "Architecto qui aut."
         }
      ]
   }' --apikey-token "Sit est ducimus voluptatem nam." --session-token "Nulla vitae et maiores et atque." --project-slug-input "Ea et autem et." --idempotency-key "01jqq0ajmb4qh9eppz48dejr2m"
`, os.Args[0])
}

func deploymentsEvolveUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments evolve -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Create a new deployment with additional or updated tool sources.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments evolve --body '{
      "deployment_id": "Ut voluptas qui eligendi.",
      "exclude_openapiv3_assets": [
         "Earum sed nisi voluptatem.",
         "Eum ea.",
         "Ea qui repudiandae nesciunt dolor nostrum."
      ],
      "exclude_packages": [
         "Error dolor.",
         "Et non.",
         "Et dolorem quibusdam.",
         "Velit officiis molestiae nulla aut corporis laboriosam."
      ],
      "upsert_openapiv3_assets": [
         {
            "asset_id": "Magni vel autem voluptas officiis repellendus autem.",
            "name": "Minima sit numquam similique fugiat.",
            "slug": "0cb"
         },
         {
            "asset_id": "Magni vel autem voluptas officiis repellendus autem.",
            "name": "Minima sit numquam similique fugiat.",
            "slug": "0cb"
         },
         {
            "asset_id": "Magni vel autem voluptas officiis repellendus autem.",
            "name": "Minima sit numquam similique fugiat.",
            "slug": "0cb"
         }
      ],
      "upsert_packages": [
         {
            "name": "Maiores quisquam impedit ipsam.",
            "version": "Consectetur perspiciatis hic quidem."
         },
         {
            "name": "Maiores quisquam impedit ipsam.",
            "version": "Consectetur perspiciatis hic quidem."
         },
         {
            "name": "Maiores quisquam impedit ipsam.",
            "version": "Consectetur perspiciatis hic quidem."
         },
         {
            "name": "Maiores quisquam impedit ipsam.",
            "version": "Consectetur perspiciatis hic quidem."
         }
      ]
   }' --apikey-token "Ea est." --session-token "A autem quia qui architecto." --project-slug-input "Qui nisi aut."
`, os.Args[0])
}

func deploymentsRedeployUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments redeploy -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Redeploys an existing deployment.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments redeploy --body '{
      "deployment_id": "Laboriosam accusamus quisquam."
   }' --apikey-token "Quae et sit laborum officiis consectetur velit." --session-token "Nobis laboriosam ut voluptatem dolorem expedita." --project-slug-input "Qui in suscipit quibusdam."
`, os.Args[0])
}

func deploymentsListDeploymentsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments list-deployments -cursor STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

List all deployments in descending order of creation.
    -cursor STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments list-deployments --cursor "Molestiae non." --apikey-token "Modi ipsa iusto corrupti officia asperiores et." --session-token "Vel autem voluptatem." --project-slug-input "Reiciendis labore."
`, os.Args[0])
}

func deploymentsGetDeploymentLogsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments get-deployment-logs -deployment-id STRING -cursor STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

Get logs for a deployment.
    -deployment-id STRING: 
    -cursor STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments get-deployment-logs --deployment-id "Facilis recusandae dolor." --cursor "Dicta voluptas." --apikey-token "Iure dolor quae sed iste est." --session-token "Voluptas neque deleniti." --project-slug-input "Laudantium saepe dolorem fugit reiciendis corporis numquam."
`, os.Args[0])
}

// domainsUsage displays the usage of the domains command and its subcommands.
func domainsUsage() {
	fmt.Fprintf(os.Stderr, `Manage custom domains for gram.
Usage:
    %[1]s [globalflags] domains COMMAND [flags]

COMMAND:
    get-domain: Get the custom domain for a project
    create-domain: Create a custom domain for a organization
    delete-domain: Delete a custom domain

Additional help:
    %[1]s domains COMMAND --help
`, os.Args[0])
}
func domainsGetDomainUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] domains get-domain -session-token STRING -project-slug-input STRING

Get the custom domain for a project
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s domains get-domain --session-token "Id sit." --project-slug-input "Praesentium illo assumenda sequi quis eius."
`, os.Args[0])
}

func domainsCreateDomainUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] domains create-domain -body JSON -session-token STRING -project-slug-input STRING

Create a custom domain for a organization
    -body JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s domains create-domain --body '{
      "domain": "Cumque qui laboriosam vel."
   }' --session-token "Provident laborum debitis suscipit ipsa quo dolorem." --project-slug-input "Necessitatibus ducimus recusandae."
`, os.Args[0])
}

func domainsDeleteDomainUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] domains delete-domain -session-token STRING -project-slug-input STRING

Delete a custom domain
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s domains delete-domain --session-token "Sint quam voluptatum nisi." --project-slug-input "Aut distinctio quo sunt velit aut."
`, os.Args[0])
}

// environmentsUsage displays the usage of the environments command and its
// subcommands.
func environmentsUsage() {
	fmt.Fprintf(os.Stderr, `Managing toolset environments.
Usage:
    %[1]s [globalflags] environments COMMAND [flags]

COMMAND:
    create-environment: Create a new environment
    list-environments: List all environments for an organization
    update-environment: Update an environment
    delete-environment: Delete an environment

Additional help:
    %[1]s environments COMMAND --help
`, os.Args[0])
}
func environmentsCreateEnvironmentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments create-environment -body JSON -session-token STRING -project-slug-input STRING

Create a new environment
    -body JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments create-environment --body '{
      "description": "Voluptatem at cum vel.",
      "entries": [
         {
            "name": "At repellendus est.",
            "value": "Accusantium est dolor sit."
         },
         {
            "name": "At repellendus est.",
            "value": "Accusantium est dolor sit."
         },
         {
            "name": "At repellendus est.",
            "value": "Accusantium est dolor sit."
         },
         {
            "name": "At repellendus est.",
            "value": "Accusantium est dolor sit."
         }
      ],
      "name": "Quam exercitationem molestiae.",
      "organization_id": "Consequuntur necessitatibus non quaerat."
   }' --session-token "Consequuntur error suscipit optio sunt eum." --project-slug-input "Harum sapiente."
`, os.Args[0])
}

func environmentsListEnvironmentsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments list-environments -session-token STRING -project-slug-input STRING

List all environments for an organization
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments list-environments --session-token "Et pariatur qui." --project-slug-input "Dolores culpa iusto voluptatem."
`, os.Args[0])
}

func environmentsUpdateEnvironmentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments update-environment -body JSON -slug STRING -session-token STRING -project-slug-input STRING

Update an environment
    -body JSON: 
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments update-environment --body '{
      "description": "Odit sunt assumenda vero incidunt cumque optio.",
      "entries_to_remove": [
         "Itaque totam ut aut molestiae et voluptate.",
         "Odio nesciunt ut aut id."
      ],
      "entries_to_update": [
         {
            "name": "At repellendus est.",
            "value": "Accusantium est dolor sit."
         },
         {
            "name": "At repellendus est.",
            "value": "Accusantium est dolor sit."
         },
         {
            "name": "At repellendus est.",
            "value": "Accusantium est dolor sit."
         },
         {
            "name": "At repellendus est.",
            "value": "Accusantium est dolor sit."
         }
      ],
      "name": "Sed officia ipsa."
   }' --slug "md7" --session-token "Velit et aliquam et." --project-slug-input "Vitae placeat accusamus id ut nulla."
`, os.Args[0])
}

func environmentsDeleteEnvironmentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments delete-environment -slug STRING -session-token STRING -project-slug-input STRING

Delete an environment
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments delete-environment --slug "0zl" --session-token "Est qui commodi." --project-slug-input "Et et culpa veniam eos optio."
`, os.Args[0])
}

// instancesUsage displays the usage of the instances command and its
// subcommands.
func instancesUsage() {
	fmt.Fprintf(os.Stderr, `Consumer APIs for interacting with all relevant data for an instance of a toolset and environment.
Usage:
    %[1]s [globalflags] instances COMMAND [flags]

COMMAND:
    get-instance: Load all relevant data for an instance of a toolset and environment

Additional help:
    %[1]s instances COMMAND --help
`, os.Args[0])
}
func instancesGetInstanceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] instances get-instance -toolset-slug STRING -environment-slug STRING -session-token STRING -project-slug-input STRING -apikey-token STRING

Load all relevant data for an instance of a toolset and environment
    -toolset-slug STRING: 
    -environment-slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 
    -apikey-token STRING: 

Example:
    %[1]s instances get-instance --toolset-slug "tgg" --environment-slug "8if" --session-token "Omnis cumque." --project-slug-input "Perferendis temporibus." --apikey-token "Nihil voluptas dolor voluptas."
`, os.Args[0])
}

// integrationsUsage displays the usage of the integrations command and its
// subcommands.
func integrationsUsage() {
	fmt.Fprintf(os.Stderr, `Explore third-party tools in Gram.
Usage:
    %[1]s [globalflags] integrations COMMAND [flags]

COMMAND:
    get: Get a third-party integration by ID or name.
    list: List available third-party integrations.

Additional help:
    %[1]s integrations COMMAND --help
`, os.Args[0])
}
func integrationsGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] integrations get -id STRING -name STRING -session-token STRING -project-slug-input STRING

Get a third-party integration by ID or name.
    -id STRING: 
    -name STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s integrations get --id "Voluptatem omnis aut." --name "Quia aperiam incidunt qui tempore earum dignissimos." --session-token "Numquam in voluptatibus." --project-slug-input "Temporibus eaque a quos perferendis sed aliquid."
`, os.Args[0])
}

func integrationsListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] integrations list -keywords JSON -session-token STRING -project-slug-input STRING

List available third-party integrations.
    -keywords JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s integrations list --keywords '[
      "mui",
      "nrm",
      "ts8"
   ]' --session-token "Eum nobis laudantium nam quas." --project-slug-input "Sed quia sed quas excepturi rerum rerum."
`, os.Args[0])
}

// keysUsage displays the usage of the keys command and its subcommands.
func keysUsage() {
	fmt.Fprintf(os.Stderr, `Managing system api keys.
Usage:
    %[1]s [globalflags] keys COMMAND [flags]

COMMAND:
    create-key: Create a new api key
    list-keys: List all api keys for an organization
    revoke-key: Revoke a api key

Additional help:
    %[1]s keys COMMAND --help
`, os.Args[0])
}
func keysCreateKeyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] keys create-key -body JSON -session-token STRING

Create a new api key
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s keys create-key --body '{
      "name": "Quia modi ipsam earum aut unde alias.",
      "scopes": [
         "Non ad libero repellat.",
         "Et laborum quasi et ut numquam sed."
      ]
   }' --session-token "Blanditiis itaque vel dolorum."
`, os.Args[0])
}

func keysListKeysUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] keys list-keys -session-token STRING

List all api keys for an organization
    -session-token STRING: 

Example:
    %[1]s keys list-keys --session-token "Sapiente quia."
`, os.Args[0])
}

func keysRevokeKeyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] keys revoke-key -id STRING -session-token STRING

Revoke a api key
    -id STRING: 
    -session-token STRING: 

Example:
    %[1]s keys revoke-key --id "Enim nemo enim sit minus excepturi esse." --session-token "Asperiores veritatis molestiae maxime placeat."
`, os.Args[0])
}

// packagesUsage displays the usage of the packages command and its subcommands.
func packagesUsage() {
	fmt.Fprintf(os.Stderr, `Manages packages in Gram.
Usage:
    %[1]s [globalflags] packages COMMAND [flags]

COMMAND:
    create-package: Create a new package for a project.
    update-package: Update package details.
    list-packages: List all packages for a project.
    list-versions: List published versions of a package.
    publish: Publish a new version of a package.

Additional help:
    %[1]s packages COMMAND --help
`, os.Args[0])
}
func packagesCreatePackageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages create-package -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Create a new package for a project.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s packages create-package --body '{
      "description": "pbi",
      "image_asset_id": "rrt",
      "keywords": [
         "In harum adipisci.",
         "Vel ut debitis veritatis aliquam porro.",
         "Provident voluptatem porro at nisi est."
      ],
      "name": "h4p",
      "summary": "2ms",
      "title": "j3q",
      "url": "dum"
   }' --apikey-token "Voluptas perspiciatis deleniti eius." --session-token "Est qui ipsum hic dolores qui." --project-slug-input "Voluptas beatae perspiciatis quod."
`, os.Args[0])
}

func packagesUpdatePackageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages update-package -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Update package details.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s packages update-package --body '{
      "description": "8c0",
      "id": "9m9",
      "image_asset_id": "p1f",
      "keywords": [
         "Rerum voluptatem.",
         "Similique qui est consectetur.",
         "Quae saepe quaerat."
      ],
      "summary": "fmg",
      "title": "cac",
      "url": "v8r"
   }' --apikey-token "Eius occaecati." --session-token "Quam quas." --project-slug-input "Sapiente eum ut perferendis nihil."
`, os.Args[0])
}

func packagesListPackagesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages list-packages -apikey-token STRING -session-token STRING -project-slug-input STRING

List all packages for a project.
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s packages list-packages --apikey-token "Ut itaque alias laudantium quidem aperiam reprehenderit." --session-token "Culpa voluptate qui molestiae quisquam est." --project-slug-input "Esse quos."
`, os.Args[0])
}

func packagesListVersionsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages list-versions -name STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

List published versions of a package.
    -name STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s packages list-versions --name "Et impedit quod soluta voluptatibus." --apikey-token "Aliquid adipisci." --session-token "Provident deleniti." --project-slug-input "Quia omnis aut veniam."
`, os.Args[0])
}

func packagesPublishUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages publish -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Publish a new version of a package.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s packages publish --body '{
      "deployment_id": "Velit repellendus cum ad.",
      "name": "Sit nam voluptate quis excepturi facere et.",
      "version": "Dolores molestiae omnis at.",
      "visibility": "public"
   }' --apikey-token "Et amet voluptatibus laborum et delectus." --session-token "Nemo veniam doloribus officia." --project-slug-input "Veritatis facilis asperiores et."
`, os.Args[0])
}

// projectsUsage displays the usage of the projects command and its subcommands.
func projectsUsage() {
	fmt.Fprintf(os.Stderr, `Manages projects in Gram.
Usage:
    %[1]s [globalflags] projects COMMAND [flags]

COMMAND:
    create-project: Create a new project.
    list-projects: List all projects for an organization.

Additional help:
    %[1]s projects COMMAND --help
`, os.Args[0])
}
func projectsCreateProjectUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] projects create-project -body JSON -apikey-token STRING -session-token STRING

Create a new project.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 

Example:
    %[1]s projects create-project --body '{
      "name": "jzc",
      "organization_id": "Doloribus iste maxime molestiae."
   }' --apikey-token "Inventore corporis et aut porro." --session-token "Voluptate illo expedita quis dolore."
`, os.Args[0])
}

func projectsListProjectsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] projects list-projects -organization-id STRING -apikey-token STRING -session-token STRING

List all projects for an organization.
    -organization-id STRING: 
    -apikey-token STRING: 
    -session-token STRING: 

Example:
    %[1]s projects list-projects --organization-id "Enim voluptatem eligendi esse tempora temporibus." --apikey-token "Consequatur aperiam ut eius cupiditate commodi voluptates." --session-token "Quae culpa."
`, os.Args[0])
}

// slackUsage displays the usage of the slack command and its subcommands.
func slackUsage() {
	fmt.Fprintf(os.Stderr, `Auth and interactions for the Gram Slack App.
Usage:
    %[1]s [globalflags] slack COMMAND [flags]

COMMAND:
    callback: Handles the authentication callback.
    login: Proxies to auth login through speakeasy oidc.
    get-slack-connection: get slack connection for an organization and project.
    update-slack-connection: update slack connection for an organization and project.
    delete-slack-connection: delete slack connection for an organization and project.

Additional help:
    %[1]s slack COMMAND --help
`, os.Args[0])
}
func slackCallbackUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] slack callback -state STRING -code STRING

Handles the authentication callback.
    -state STRING: 
    -code STRING: 

Example:
    %[1]s slack callback --state "Maiores optio voluptatem at in dolor." --code "Et quisquam et ut dolorum voluptate."
`, os.Args[0])
}

func slackLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] slack login -project-slug STRING -return-url STRING -session-token STRING

Proxies to auth login through speakeasy oidc.
    -project-slug STRING: 
    -return-url STRING: 
    -session-token STRING: 

Example:
    %[1]s slack login --project-slug "Quia similique." --return-url "In est ut voluptatem libero quisquam est." --session-token "Autem eos at ut."
`, os.Args[0])
}

func slackGetSlackConnectionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] slack get-slack-connection -session-token STRING -project-slug-input STRING

get slack connection for an organization and project.
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s slack get-slack-connection --session-token "Et rerum ratione eaque debitis eum." --project-slug-input "Qui repellat rerum sed."
`, os.Args[0])
}

func slackUpdateSlackConnectionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] slack update-slack-connection -body JSON -session-token STRING -project-slug-input STRING

update slack connection for an organization and project.
    -body JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s slack update-slack-connection --body '{
      "default_toolset_slug": "Id aliquam non sit veniam ut."
   }' --session-token "Cupiditate voluptatem quo impedit omnis." --project-slug-input "Odit veritatis doloremque."
`, os.Args[0])
}

func slackDeleteSlackConnectionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] slack delete-slack-connection -session-token STRING -project-slug-input STRING

delete slack connection for an organization and project.
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s slack delete-slack-connection --session-token "Quidem dolores dignissimos aut." --project-slug-input "Culpa illum reiciendis qui error et."
`, os.Args[0])
}

// templatesUsage displays the usage of the templates command and its
// subcommands.
func templatesUsage() {
	fmt.Fprintf(os.Stderr, `Manages re-usable prompt templates and higher-order tools for a project.
Usage:
    %[1]s [globalflags] templates COMMAND [flags]

COMMAND:
    create-template: Create a new prompt template.
    update-template: Update a prompt template.
    get-template: Get prompt template by its ID or name.
    list-templates: List available prompt template.
    delete-template: Delete prompt template by its ID or name.
    render-template-by-id: Render a prompt template by ID with provided input data.
    render-template: Render a prompt template directly with all template fields provided.

Additional help:
    %[1]s templates COMMAND --help
`, os.Args[0])
}
func templatesCreateTemplateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] templates create-template -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Create a new prompt template.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s templates create-template --body '{
      "arguments": "{\"name\":\"example\",\"email\":\"mail@example.com\"}",
      "description": "Sit est veniam hic.",
      "engine": "mustache",
      "kind": "higher_order_tool",
      "name": "fsg",
      "prompt": "Eaque quam.",
      "tools_hint": [
         "Ea nemo sunt aut qui reiciendis culpa.",
         "Aliquam ad labore dolor aut quam voluptatum.",
         "Iusto est dicta nihil."
      ]
   }' --apikey-token "Debitis ab consequatur error." --session-token "Ut vel debitis est aperiam." --project-slug-input "Voluptate et esse eum dolore."
`, os.Args[0])
}

func templatesUpdateTemplateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] templates update-template -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Update a prompt template.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s templates update-template --body '{
      "arguments": "{\"name\":\"example\",\"email\":\"mail@example.com\"}",
      "description": "Rerum dolores nisi quo.",
      "engine": "mustache",
      "id": "Qui minima voluptatem ullam nam.",
      "kind": "prompt",
      "prompt": "Exercitationem quia.",
      "tools_hint": [
         "Dicta vel cum provident ut ut vel.",
         "Sed enim voluptates et.",
         "Et repudiandae porro veniam."
      ]
   }' --apikey-token "Magni non eum consequatur tenetur necessitatibus." --session-token "Est unde." --project-slug-input "Animi officiis inventore facere et eaque odio."
`, os.Args[0])
}

func templatesGetTemplateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] templates get-template -id STRING -name STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

Get prompt template by its ID or name.
    -id STRING: 
    -name STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s templates get-template --id "Occaecati et qui non qui sunt." --name "Hic molestiae eligendi atque accusantium sed." --apikey-token "Natus tempora sit enim fugiat." --session-token "Qui minima asperiores occaecati." --project-slug-input "Laboriosam natus ab fugiat voluptates in qui."
`, os.Args[0])
}

func templatesListTemplatesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] templates list-templates -apikey-token STRING -session-token STRING -project-slug-input STRING

List available prompt template.
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s templates list-templates --apikey-token "Sint alias soluta doloremque voluptatum." --session-token "Expedita quae unde ab omnis similique et." --project-slug-input "Quae facere eos."
`, os.Args[0])
}

func templatesDeleteTemplateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] templates delete-template -id STRING -name STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

Delete prompt template by its ID or name.
    -id STRING: 
    -name STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s templates delete-template --id "Eos iusto." --name "Excepturi voluptatem sit in quod iste." --apikey-token "Facilis maiores distinctio." --session-token "Omnis quae enim et dicta voluptatem." --project-slug-input "Amet dolorem vel."
`, os.Args[0])
}

func templatesRenderTemplateByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] templates render-template-by-id -body JSON -id STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

Render a prompt template by ID with provided input data.
    -body JSON: 
    -id STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s templates render-template-by-id --body '{
      "arguments": {
         "Qui aut enim sit aut magni eveniet.": "Qui est mollitia."
      }
   }' --id "Reiciendis voluptatem quas laborum sint." --apikey-token "Ullam ut sapiente sapiente quia." --session-token "Non earum." --project-slug-input "Quidem architecto ut commodi natus."
`, os.Args[0])
}

func templatesRenderTemplateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] templates render-template -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Render a prompt template directly with all template fields provided.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s templates render-template --body '{
      "arguments": {
         "Alias nulla alias similique temporibus delectus.": "Qui aliquam.",
         "Quibusdam quae ex labore ut optio.": "Dicta velit laborum hic aut.",
         "Quis ratione repudiandae voluptas eligendi suscipit.": "Ea adipisci consequatur."
      },
      "engine": "mustache",
      "kind": "prompt",
      "prompt": "Alias minus veniam consectetur omnis vel est."
   }' --apikey-token "Assumenda exercitationem qui." --session-token "Quo expedita iure earum atque alias non." --project-slug-input "Aut accusantium sapiente."
`, os.Args[0])
}

// toolsUsage displays the usage of the tools command and its subcommands.
func toolsUsage() {
	fmt.Fprintf(os.Stderr, `Dashboard API for interacting with tools.
Usage:
    %[1]s [globalflags] tools COMMAND [flags]

COMMAND:
    list-tools: List all tools for a project

Additional help:
    %[1]s tools COMMAND --help
`, os.Args[0])
}
func toolsListToolsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tools list-tools -cursor STRING -limit INT32 -deployment-id STRING -session-token STRING -project-slug-input STRING

List all tools for a project
    -cursor STRING: 
    -limit INT32: 
    -deployment-id STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s tools list-tools --cursor "Qui dolores accusantium soluta qui." --limit 1215217659 --deployment-id "Qui ea aut ex." --session-token "Laboriosam iusto repellat fugit nesciunt saepe enim." --project-slug-input "Saepe eos sint voluptatem fuga."
`, os.Args[0])
}

// toolsetsUsage displays the usage of the toolsets command and its subcommands.
func toolsetsUsage() {
	fmt.Fprintf(os.Stderr, `Managed toolsets for gram AI consumers.
Usage:
    %[1]s [globalflags] toolsets COMMAND [flags]

COMMAND:
    create-toolset: Create a new toolset with associated tools
    list-toolsets: List all toolsets for a project
    update-toolset: Update a toolset's properties including name, description, and HTTP tools
    delete-toolset: Delete a toolset by its ID
    get-toolset: Get detailed information about a toolset including full HTTP tool definitions
    check-mcp-slug-availability: Check if a MCP slug is available
    add-externaloauth-server: Associate an external OAuth server with a toolset
    removeoauth-server: Remove OAuth server association from a toolset

Additional help:
    %[1]s toolsets COMMAND --help
`, os.Args[0])
}
func toolsetsCreateToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets create-toolset -body JSON -session-token STRING -project-slug-input STRING

Create a new toolset with associated tools
    -body JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets create-toolset --body '{
      "default_environment_slug": "aez",
      "description": "Pariatur omnis.",
      "http_tool_names": [
         "Officiis maxime id qui sed sed.",
         "Velit eligendi tempora.",
         "Culpa molestiae eos omnis omnis sunt nesciunt.",
         "Atque dolor dignissimos maiores qui officiis aut."
      ],
      "name": "Nesciunt quia voluptatem."
   }' --session-token "Nulla voluptas ut repellendus iure sed voluptate." --project-slug-input "Inventore ab fugiat quo velit."
`, os.Args[0])
}

func toolsetsListToolsetsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets list-toolsets -session-token STRING -project-slug-input STRING

List all toolsets for a project
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets list-toolsets --session-token "Velit praesentium enim." --project-slug-input "Totam accusamus delectus qui non."
`, os.Args[0])
}

func toolsetsUpdateToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets update-toolset -body JSON -slug STRING -session-token STRING -project-slug-input STRING

Update a toolset's properties including name, description, and HTTP tools
    -body JSON: 
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets update-toolset --body '{
      "custom_domain_id": "Quia alias deserunt aperiam.",
      "default_environment_slug": "6qz",
      "description": "Et debitis.",
      "http_tool_names": [
         "Rerum dicta qui.",
         "Ab quis neque ab.",
         "Aut similique.",
         "Repellendus iste."
      ],
      "mcp_is_public": false,
      "mcp_slug": "uos",
      "name": "Voluptatem omnis quas commodi suscipit ut dignissimos.",
      "prompt_template_names": [
         "Itaque facere et at commodi maiores.",
         "Et vel ea sint ut in quasi.",
         "Omnis molestiae."
      ]
   }' --slug "nty" --session-token "Quis accusamus distinctio modi nobis in et." --project-slug-input "Veniam laboriosam est dolorem corporis qui."
`, os.Args[0])
}

func toolsetsDeleteToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets delete-toolset -slug STRING -session-token STRING -project-slug-input STRING

Delete a toolset by its ID
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets delete-toolset --slug "wea" --session-token "Minima sequi porro iste excepturi perspiciatis autem." --project-slug-input "Sapiente odio nesciunt inventore."
`, os.Args[0])
}

func toolsetsGetToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets get-toolset -slug STRING -session-token STRING -project-slug-input STRING

Get detailed information about a toolset including full HTTP tool definitions
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets get-toolset --slug "fet" --session-token "Commodi vitae et consequatur doloremque sequi." --project-slug-input "Omnis eaque ut libero repellat incidunt odit."
`, os.Args[0])
}

func toolsetsCheckMCPSlugAvailabilityUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets check-mcp-slug-availability -slug STRING -session-token STRING -project-slug-input STRING

Check if a MCP slug is available
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets check-mcp-slug-availability --slug "yru" --session-token "Facilis alias pariatur voluptas dolores suscipit rem." --project-slug-input "Molestiae sed quia modi quis."
`, os.Args[0])
}

func toolsetsAddExternalOAuthServerUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets add-externaloauth-server -body JSON -slug STRING -session-token STRING -project-slug-input STRING

Associate an external OAuth server with a toolset
    -body JSON: 
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets add-externaloauth-server --body '{
      "external_oauth_server": {
         "metadata": "Ut sed ex vero mollitia quaerat fugiat.",
         "slug": "mgi"
      }
   }' --slug "xbv" --session-token "Aspernatur occaecati." --project-slug-input "Ea dolor."
`, os.Args[0])
}

func toolsetsRemoveOAuthServerUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets removeoauth-server -slug STRING -session-token STRING -project-slug-input STRING

Remove OAuth server association from a toolset
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets removeoauth-server --slug "1zi" --session-token "Accusantium est cum earum eum amet." --project-slug-input "Sit et ut animi dolores ullam eum."
`, os.Args[0])
}

// usageUsage displays the usage of the usage command and its subcommands.
func usageUsage() {
	fmt.Fprintf(os.Stderr, `Read usage for gram.
Usage:
    %[1]s [globalflags] usage COMMAND [flags]

COMMAND:
    get-period-usage: Get the usage for a project for a given period
    get-usage-tiers: Get the usage tiers
    create-customer-session: Create a customer session for the user
    create-checkout: Create a checkout link for upgrading to the business plan

Additional help:
    %[1]s usage COMMAND --help
`, os.Args[0])
}
func usageGetPeriodUsageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] usage get-period-usage -session-token STRING -project-slug-input STRING

Get the usage for a project for a given period
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s usage get-period-usage --session-token "Omnis commodi quasi debitis." --project-slug-input "Architecto quaerat eaque et consequatur pariatur aut."
`, os.Args[0])
}

func usageGetUsageTiersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] usage get-usage-tiers

Get the usage tiers

Example:
    %[1]s usage get-usage-tiers
`, os.Args[0])
}

func usageCreateCustomerSessionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] usage create-customer-session -session-token STRING -project-slug-input STRING

Create a customer session for the user
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s usage create-customer-session --session-token "Corporis exercitationem tempora at repellendus." --project-slug-input "Inventore enim tempora."
`, os.Args[0])
}

func usageCreateCheckoutUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] usage create-checkout -session-token STRING -project-slug-input STRING

Create a checkout link for upgrading to the business plan
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s usage create-checkout --session-token "Repellendus aspernatur ad amet repellat quia." --project-slug-input "Et nihil."
`, os.Args[0])
}

// variationsUsage displays the usage of the variations command and its
// subcommands.
func variationsUsage() {
	fmt.Fprintf(os.Stderr, `Manage variations of tools.
Usage:
    %[1]s [globalflags] variations COMMAND [flags]

COMMAND:
    upsert-global: Create or update a globally defined tool variation.
    delete-global: Create or update a globally defined tool variation.
    list-global: List globally defined tool variations.

Additional help:
    %[1]s variations COMMAND --help
`, os.Args[0])
}
func variationsUpsertGlobalUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] variations upsert-global -body JSON -session-token STRING -apikey-token STRING -project-slug-input STRING

Create or update a globally defined tool variation.
    -body JSON: 
    -session-token STRING: 
    -apikey-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s variations upsert-global --body '{
      "confirm": "always",
      "confirm_prompt": "Rerum ut.",
      "description": "Rerum et.",
      "name": "Non nemo rerum.",
      "src_tool_name": "Animi velit impedit.",
      "summarizer": "Quia eaque animi mollitia ex odit quas.",
      "summary": "Quos minus ea minus cupiditate dignissimos repudiandae.",
      "tags": [
         "Ut fugiat.",
         "Ut est dicta aut quo tempora harum.",
         "Aspernatur asperiores enim repellendus.",
         "Fugiat porro nihil quo assumenda nostrum voluptas."
      ]
   }' --session-token "Ipsa cum esse sed dolor in." --apikey-token "Quia debitis inventore eum." --project-slug-input "Et itaque rerum officia dolores."
`, os.Args[0])
}

func variationsDeleteGlobalUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] variations delete-global -variation-id STRING -session-token STRING -apikey-token STRING -project-slug-input STRING

Create or update a globally defined tool variation.
    -variation-id STRING: 
    -session-token STRING: 
    -apikey-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s variations delete-global --variation-id "Autem ipsam totam libero." --session-token "Optio porro itaque." --apikey-token "Sint architecto saepe odit rerum." --project-slug-input "Odit non est enim perspiciatis."
`, os.Args[0])
}

func variationsListGlobalUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] variations list-global -session-token STRING -apikey-token STRING -project-slug-input STRING

List globally defined tool variations.
    -session-token STRING: 
    -apikey-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s variations list-global --session-token "Doloribus id quos blanditiis iure quae." --apikey-token "Maxime ullam voluptate porro." --project-slug-input "Dolorem quia quia officia sed."
`, os.Args[0])
}
