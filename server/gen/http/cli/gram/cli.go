// Code generated by goa v3.22.2, DO NOT EDIT.
//
// gram HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	aboutc "github.com/speakeasy-api/gram/server/gen/http/about/client"
	assetsc "github.com/speakeasy-api/gram/server/gen/http/assets/client"
	authc "github.com/speakeasy-api/gram/server/gen/http/auth/client"
	chatc "github.com/speakeasy-api/gram/server/gen/http/chat/client"
	deploymentsc "github.com/speakeasy-api/gram/server/gen/http/deployments/client"
	domainsc "github.com/speakeasy-api/gram/server/gen/http/domains/client"
	environmentsc "github.com/speakeasy-api/gram/server/gen/http/environments/client"
	instancesc "github.com/speakeasy-api/gram/server/gen/http/instances/client"
	integrationsc "github.com/speakeasy-api/gram/server/gen/http/integrations/client"
	keysc "github.com/speakeasy-api/gram/server/gen/http/keys/client"
	packagesc "github.com/speakeasy-api/gram/server/gen/http/packages/client"
	projectsc "github.com/speakeasy-api/gram/server/gen/http/projects/client"
	slackc "github.com/speakeasy-api/gram/server/gen/http/slack/client"
	templatesc "github.com/speakeasy-api/gram/server/gen/http/templates/client"
	toolsc "github.com/speakeasy-api/gram/server/gen/http/tools/client"
	toolsetsc "github.com/speakeasy-api/gram/server/gen/http/toolsets/client"
	usagec "github.com/speakeasy-api/gram/server/gen/http/usage/client"
	variationsc "github.com/speakeasy-api/gram/server/gen/http/variations/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() []string {
	return []string{
		"about openapi",
		"assets (serve-image|upload-image|upload-functions|upload-open-ap-iv3|serve-open-ap-iv3|list-assets)",
		"auth (callback|login|switch-scopes|logout|register|info)",
		"chat (list-chats|load-chat|credit-usage)",
		"deployments (get-deployment|get-latest-deployment|create-deployment|evolve|redeploy|list-deployments|get-deployment-logs)",
		"domains (get-domain|create-domain|delete-domain)",
		"environments (create-environment|list-environments|update-environment|delete-environment)",
		"instances get-instance",
		"integrations (get|list)",
		"keys (create-key|list-keys|revoke-key)",
		"packages (create-package|update-package|list-packages|list-versions|publish)",
		"projects (create-project|list-projects|set-logo)",
		"slack (callback|login|get-slack-connection|update-slack-connection|delete-slack-connection)",
		"templates (create-template|update-template|get-template|list-templates|delete-template|render-template-by-id|render-template)",
		"tools list-tools",
		"toolsets (create-toolset|list-toolsets|update-toolset|delete-toolset|get-toolset|check-mcp-slug-availability|add-externaloauth-server|removeoauth-server)",
		"usage (get-period-usage|get-usage-tiers|create-customer-session|create-checkout)",
		"variations (upsert-global|delete-global|list-global)",
	}
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` about openapi` + "\n" +
		os.Args[0] + ` assets serve-image --id "Id aliquam culpa quis repudiandae." --session-token "Quibusdam voluptatem nulla nesciunt qui sapiente." --apikey-token "Vero modi et."` + "\n" +
		os.Args[0] + ` auth callback --code "Voluptatem praesentium omnis corporis ex tenetur."` + "\n" +
		os.Args[0] + ` chat list-chats --session-token "Id voluptatum repellat ut voluptatem suscipit neque." --project-slug-input "Quo minima laboriosam ipsam."` + "\n" +
		os.Args[0] + ` deployments get-deployment --id "Praesentium rerum." --apikey-token "Sit illum eum odio minima eaque laborum." --session-token "Accusantium aliquam explicabo commodi inventore." --project-slug-input "Voluptatem dignissimos ut vel similique qui hic."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		aboutFlags = flag.NewFlagSet("about", flag.ContinueOnError)

		aboutOpenapiFlags = flag.NewFlagSet("openapi", flag.ExitOnError)

		assetsFlags = flag.NewFlagSet("assets", flag.ContinueOnError)

		assetsServeImageFlags            = flag.NewFlagSet("serve-image", flag.ExitOnError)
		assetsServeImageIDFlag           = assetsServeImageFlags.String("id", "REQUIRED", "")
		assetsServeImageSessionTokenFlag = assetsServeImageFlags.String("session-token", "", "")
		assetsServeImageApikeyTokenFlag  = assetsServeImageFlags.String("apikey-token", "", "")

		assetsUploadImageFlags                = flag.NewFlagSet("upload-image", flag.ExitOnError)
		assetsUploadImageContentTypeFlag      = assetsUploadImageFlags.String("content-type", "REQUIRED", "")
		assetsUploadImageContentLengthFlag    = assetsUploadImageFlags.String("content-length", "REQUIRED", "")
		assetsUploadImageApikeyTokenFlag      = assetsUploadImageFlags.String("apikey-token", "", "")
		assetsUploadImageProjectSlugInputFlag = assetsUploadImageFlags.String("project-slug-input", "", "")
		assetsUploadImageSessionTokenFlag     = assetsUploadImageFlags.String("session-token", "", "")
		assetsUploadImageStreamFlag           = assetsUploadImageFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		assetsUploadFunctionsFlags                = flag.NewFlagSet("upload-functions", flag.ExitOnError)
		assetsUploadFunctionsContentTypeFlag      = assetsUploadFunctionsFlags.String("content-type", "REQUIRED", "")
		assetsUploadFunctionsContentLengthFlag    = assetsUploadFunctionsFlags.String("content-length", "REQUIRED", "")
		assetsUploadFunctionsApikeyTokenFlag      = assetsUploadFunctionsFlags.String("apikey-token", "", "")
		assetsUploadFunctionsProjectSlugInputFlag = assetsUploadFunctionsFlags.String("project-slug-input", "", "")
		assetsUploadFunctionsSessionTokenFlag     = assetsUploadFunctionsFlags.String("session-token", "", "")
		assetsUploadFunctionsStreamFlag           = assetsUploadFunctionsFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		assetsUploadOpenAPIv3Flags                = flag.NewFlagSet("upload-open-ap-iv3", flag.ExitOnError)
		assetsUploadOpenAPIv3ContentTypeFlag      = assetsUploadOpenAPIv3Flags.String("content-type", "REQUIRED", "")
		assetsUploadOpenAPIv3ContentLengthFlag    = assetsUploadOpenAPIv3Flags.String("content-length", "REQUIRED", "")
		assetsUploadOpenAPIv3ApikeyTokenFlag      = assetsUploadOpenAPIv3Flags.String("apikey-token", "", "")
		assetsUploadOpenAPIv3ProjectSlugInputFlag = assetsUploadOpenAPIv3Flags.String("project-slug-input", "", "")
		assetsUploadOpenAPIv3SessionTokenFlag     = assetsUploadOpenAPIv3Flags.String("session-token", "", "")
		assetsUploadOpenAPIv3StreamFlag           = assetsUploadOpenAPIv3Flags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		assetsServeOpenAPIv3Flags            = flag.NewFlagSet("serve-open-ap-iv3", flag.ExitOnError)
		assetsServeOpenAPIv3IDFlag           = assetsServeOpenAPIv3Flags.String("id", "REQUIRED", "")
		assetsServeOpenAPIv3ProjectIDFlag    = assetsServeOpenAPIv3Flags.String("project-id", "REQUIRED", "")
		assetsServeOpenAPIv3ApikeyTokenFlag  = assetsServeOpenAPIv3Flags.String("apikey-token", "", "")
		assetsServeOpenAPIv3SessionTokenFlag = assetsServeOpenAPIv3Flags.String("session-token", "", "")

		assetsListAssetsFlags                = flag.NewFlagSet("list-assets", flag.ExitOnError)
		assetsListAssetsSessionTokenFlag     = assetsListAssetsFlags.String("session-token", "", "")
		assetsListAssetsProjectSlugInputFlag = assetsListAssetsFlags.String("project-slug-input", "", "")
		assetsListAssetsApikeyTokenFlag      = assetsListAssetsFlags.String("apikey-token", "", "")

		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authCallbackFlags    = flag.NewFlagSet("callback", flag.ExitOnError)
		authCallbackCodeFlag = authCallbackFlags.String("code", "REQUIRED", "")

		authLoginFlags = flag.NewFlagSet("login", flag.ExitOnError)

		authSwitchScopesFlags              = flag.NewFlagSet("switch-scopes", flag.ExitOnError)
		authSwitchScopesOrganizationIDFlag = authSwitchScopesFlags.String("organization-id", "", "")
		authSwitchScopesProjectIDFlag      = authSwitchScopesFlags.String("project-id", "", "")
		authSwitchScopesSessionTokenFlag   = authSwitchScopesFlags.String("session-token", "", "")

		authLogoutFlags            = flag.NewFlagSet("logout", flag.ExitOnError)
		authLogoutSessionTokenFlag = authLogoutFlags.String("session-token", "", "")

		authRegisterFlags            = flag.NewFlagSet("register", flag.ExitOnError)
		authRegisterBodyFlag         = authRegisterFlags.String("body", "REQUIRED", "")
		authRegisterSessionTokenFlag = authRegisterFlags.String("session-token", "", "")

		authInfoFlags            = flag.NewFlagSet("info", flag.ExitOnError)
		authInfoSessionTokenFlag = authInfoFlags.String("session-token", "", "")

		chatFlags = flag.NewFlagSet("chat", flag.ContinueOnError)

		chatListChatsFlags                = flag.NewFlagSet("list-chats", flag.ExitOnError)
		chatListChatsSessionTokenFlag     = chatListChatsFlags.String("session-token", "", "")
		chatListChatsProjectSlugInputFlag = chatListChatsFlags.String("project-slug-input", "", "")

		chatLoadChatFlags                = flag.NewFlagSet("load-chat", flag.ExitOnError)
		chatLoadChatIDFlag               = chatLoadChatFlags.String("id", "REQUIRED", "")
		chatLoadChatSessionTokenFlag     = chatLoadChatFlags.String("session-token", "", "")
		chatLoadChatProjectSlugInputFlag = chatLoadChatFlags.String("project-slug-input", "", "")

		chatCreditUsageFlags                = flag.NewFlagSet("credit-usage", flag.ExitOnError)
		chatCreditUsageSessionTokenFlag     = chatCreditUsageFlags.String("session-token", "", "")
		chatCreditUsageProjectSlugInputFlag = chatCreditUsageFlags.String("project-slug-input", "", "")

		deploymentsFlags = flag.NewFlagSet("deployments", flag.ContinueOnError)

		deploymentsGetDeploymentFlags                = flag.NewFlagSet("get-deployment", flag.ExitOnError)
		deploymentsGetDeploymentIDFlag               = deploymentsGetDeploymentFlags.String("id", "REQUIRED", "")
		deploymentsGetDeploymentApikeyTokenFlag      = deploymentsGetDeploymentFlags.String("apikey-token", "", "")
		deploymentsGetDeploymentSessionTokenFlag     = deploymentsGetDeploymentFlags.String("session-token", "", "")
		deploymentsGetDeploymentProjectSlugInputFlag = deploymentsGetDeploymentFlags.String("project-slug-input", "", "")

		deploymentsGetLatestDeploymentFlags                = flag.NewFlagSet("get-latest-deployment", flag.ExitOnError)
		deploymentsGetLatestDeploymentApikeyTokenFlag      = deploymentsGetLatestDeploymentFlags.String("apikey-token", "", "")
		deploymentsGetLatestDeploymentSessionTokenFlag     = deploymentsGetLatestDeploymentFlags.String("session-token", "", "")
		deploymentsGetLatestDeploymentProjectSlugInputFlag = deploymentsGetLatestDeploymentFlags.String("project-slug-input", "", "")

		deploymentsCreateDeploymentFlags                = flag.NewFlagSet("create-deployment", flag.ExitOnError)
		deploymentsCreateDeploymentBodyFlag             = deploymentsCreateDeploymentFlags.String("body", "REQUIRED", "")
		deploymentsCreateDeploymentApikeyTokenFlag      = deploymentsCreateDeploymentFlags.String("apikey-token", "", "")
		deploymentsCreateDeploymentSessionTokenFlag     = deploymentsCreateDeploymentFlags.String("session-token", "", "")
		deploymentsCreateDeploymentProjectSlugInputFlag = deploymentsCreateDeploymentFlags.String("project-slug-input", "", "")
		deploymentsCreateDeploymentIdempotencyKeyFlag   = deploymentsCreateDeploymentFlags.String("idempotency-key", "REQUIRED", "")

		deploymentsEvolveFlags                = flag.NewFlagSet("evolve", flag.ExitOnError)
		deploymentsEvolveBodyFlag             = deploymentsEvolveFlags.String("body", "REQUIRED", "")
		deploymentsEvolveApikeyTokenFlag      = deploymentsEvolveFlags.String("apikey-token", "", "")
		deploymentsEvolveSessionTokenFlag     = deploymentsEvolveFlags.String("session-token", "", "")
		deploymentsEvolveProjectSlugInputFlag = deploymentsEvolveFlags.String("project-slug-input", "", "")

		deploymentsRedeployFlags                = flag.NewFlagSet("redeploy", flag.ExitOnError)
		deploymentsRedeployBodyFlag             = deploymentsRedeployFlags.String("body", "REQUIRED", "")
		deploymentsRedeployApikeyTokenFlag      = deploymentsRedeployFlags.String("apikey-token", "", "")
		deploymentsRedeploySessionTokenFlag     = deploymentsRedeployFlags.String("session-token", "", "")
		deploymentsRedeployProjectSlugInputFlag = deploymentsRedeployFlags.String("project-slug-input", "", "")

		deploymentsListDeploymentsFlags                = flag.NewFlagSet("list-deployments", flag.ExitOnError)
		deploymentsListDeploymentsCursorFlag           = deploymentsListDeploymentsFlags.String("cursor", "", "")
		deploymentsListDeploymentsApikeyTokenFlag      = deploymentsListDeploymentsFlags.String("apikey-token", "", "")
		deploymentsListDeploymentsSessionTokenFlag     = deploymentsListDeploymentsFlags.String("session-token", "", "")
		deploymentsListDeploymentsProjectSlugInputFlag = deploymentsListDeploymentsFlags.String("project-slug-input", "", "")

		deploymentsGetDeploymentLogsFlags                = flag.NewFlagSet("get-deployment-logs", flag.ExitOnError)
		deploymentsGetDeploymentLogsDeploymentIDFlag     = deploymentsGetDeploymentLogsFlags.String("deployment-id", "REQUIRED", "")
		deploymentsGetDeploymentLogsCursorFlag           = deploymentsGetDeploymentLogsFlags.String("cursor", "", "")
		deploymentsGetDeploymentLogsApikeyTokenFlag      = deploymentsGetDeploymentLogsFlags.String("apikey-token", "", "")
		deploymentsGetDeploymentLogsSessionTokenFlag     = deploymentsGetDeploymentLogsFlags.String("session-token", "", "")
		deploymentsGetDeploymentLogsProjectSlugInputFlag = deploymentsGetDeploymentLogsFlags.String("project-slug-input", "", "")

		domainsFlags = flag.NewFlagSet("domains", flag.ContinueOnError)

		domainsGetDomainFlags                = flag.NewFlagSet("get-domain", flag.ExitOnError)
		domainsGetDomainSessionTokenFlag     = domainsGetDomainFlags.String("session-token", "", "")
		domainsGetDomainProjectSlugInputFlag = domainsGetDomainFlags.String("project-slug-input", "", "")

		domainsCreateDomainFlags                = flag.NewFlagSet("create-domain", flag.ExitOnError)
		domainsCreateDomainBodyFlag             = domainsCreateDomainFlags.String("body", "REQUIRED", "")
		domainsCreateDomainSessionTokenFlag     = domainsCreateDomainFlags.String("session-token", "", "")
		domainsCreateDomainProjectSlugInputFlag = domainsCreateDomainFlags.String("project-slug-input", "", "")

		domainsDeleteDomainFlags                = flag.NewFlagSet("delete-domain", flag.ExitOnError)
		domainsDeleteDomainSessionTokenFlag     = domainsDeleteDomainFlags.String("session-token", "", "")
		domainsDeleteDomainProjectSlugInputFlag = domainsDeleteDomainFlags.String("project-slug-input", "", "")

		environmentsFlags = flag.NewFlagSet("environments", flag.ContinueOnError)

		environmentsCreateEnvironmentFlags                = flag.NewFlagSet("create-environment", flag.ExitOnError)
		environmentsCreateEnvironmentBodyFlag             = environmentsCreateEnvironmentFlags.String("body", "REQUIRED", "")
		environmentsCreateEnvironmentSessionTokenFlag     = environmentsCreateEnvironmentFlags.String("session-token", "", "")
		environmentsCreateEnvironmentProjectSlugInputFlag = environmentsCreateEnvironmentFlags.String("project-slug-input", "", "")

		environmentsListEnvironmentsFlags                = flag.NewFlagSet("list-environments", flag.ExitOnError)
		environmentsListEnvironmentsSessionTokenFlag     = environmentsListEnvironmentsFlags.String("session-token", "", "")
		environmentsListEnvironmentsProjectSlugInputFlag = environmentsListEnvironmentsFlags.String("project-slug-input", "", "")

		environmentsUpdateEnvironmentFlags                = flag.NewFlagSet("update-environment", flag.ExitOnError)
		environmentsUpdateEnvironmentBodyFlag             = environmentsUpdateEnvironmentFlags.String("body", "REQUIRED", "")
		environmentsUpdateEnvironmentSlugFlag             = environmentsUpdateEnvironmentFlags.String("slug", "REQUIRED", "")
		environmentsUpdateEnvironmentSessionTokenFlag     = environmentsUpdateEnvironmentFlags.String("session-token", "", "")
		environmentsUpdateEnvironmentProjectSlugInputFlag = environmentsUpdateEnvironmentFlags.String("project-slug-input", "", "")

		environmentsDeleteEnvironmentFlags                = flag.NewFlagSet("delete-environment", flag.ExitOnError)
		environmentsDeleteEnvironmentSlugFlag             = environmentsDeleteEnvironmentFlags.String("slug", "REQUIRED", "")
		environmentsDeleteEnvironmentSessionTokenFlag     = environmentsDeleteEnvironmentFlags.String("session-token", "", "")
		environmentsDeleteEnvironmentProjectSlugInputFlag = environmentsDeleteEnvironmentFlags.String("project-slug-input", "", "")

		instancesFlags = flag.NewFlagSet("instances", flag.ContinueOnError)

		instancesGetInstanceFlags                = flag.NewFlagSet("get-instance", flag.ExitOnError)
		instancesGetInstanceToolsetSlugFlag      = instancesGetInstanceFlags.String("toolset-slug", "REQUIRED", "")
		instancesGetInstanceEnvironmentSlugFlag  = instancesGetInstanceFlags.String("environment-slug", "", "")
		instancesGetInstanceSessionTokenFlag     = instancesGetInstanceFlags.String("session-token", "", "")
		instancesGetInstanceProjectSlugInputFlag = instancesGetInstanceFlags.String("project-slug-input", "", "")
		instancesGetInstanceApikeyTokenFlag      = instancesGetInstanceFlags.String("apikey-token", "", "")

		integrationsFlags = flag.NewFlagSet("integrations", flag.ContinueOnError)

		integrationsGetFlags                = flag.NewFlagSet("get", flag.ExitOnError)
		integrationsGetIDFlag               = integrationsGetFlags.String("id", "", "")
		integrationsGetNameFlag             = integrationsGetFlags.String("name", "", "")
		integrationsGetSessionTokenFlag     = integrationsGetFlags.String("session-token", "", "")
		integrationsGetProjectSlugInputFlag = integrationsGetFlags.String("project-slug-input", "", "")

		integrationsListFlags                = flag.NewFlagSet("list", flag.ExitOnError)
		integrationsListKeywordsFlag         = integrationsListFlags.String("keywords", "", "")
		integrationsListSessionTokenFlag     = integrationsListFlags.String("session-token", "", "")
		integrationsListProjectSlugInputFlag = integrationsListFlags.String("project-slug-input", "", "")

		keysFlags = flag.NewFlagSet("keys", flag.ContinueOnError)

		keysCreateKeyFlags            = flag.NewFlagSet("create-key", flag.ExitOnError)
		keysCreateKeyBodyFlag         = keysCreateKeyFlags.String("body", "REQUIRED", "")
		keysCreateKeySessionTokenFlag = keysCreateKeyFlags.String("session-token", "", "")

		keysListKeysFlags            = flag.NewFlagSet("list-keys", flag.ExitOnError)
		keysListKeysSessionTokenFlag = keysListKeysFlags.String("session-token", "", "")

		keysRevokeKeyFlags            = flag.NewFlagSet("revoke-key", flag.ExitOnError)
		keysRevokeKeyIDFlag           = keysRevokeKeyFlags.String("id", "REQUIRED", "")
		keysRevokeKeySessionTokenFlag = keysRevokeKeyFlags.String("session-token", "", "")

		packagesFlags = flag.NewFlagSet("packages", flag.ContinueOnError)

		packagesCreatePackageFlags                = flag.NewFlagSet("create-package", flag.ExitOnError)
		packagesCreatePackageBodyFlag             = packagesCreatePackageFlags.String("body", "REQUIRED", "")
		packagesCreatePackageApikeyTokenFlag      = packagesCreatePackageFlags.String("apikey-token", "", "")
		packagesCreatePackageSessionTokenFlag     = packagesCreatePackageFlags.String("session-token", "", "")
		packagesCreatePackageProjectSlugInputFlag = packagesCreatePackageFlags.String("project-slug-input", "", "")

		packagesUpdatePackageFlags                = flag.NewFlagSet("update-package", flag.ExitOnError)
		packagesUpdatePackageBodyFlag             = packagesUpdatePackageFlags.String("body", "REQUIRED", "")
		packagesUpdatePackageApikeyTokenFlag      = packagesUpdatePackageFlags.String("apikey-token", "", "")
		packagesUpdatePackageSessionTokenFlag     = packagesUpdatePackageFlags.String("session-token", "", "")
		packagesUpdatePackageProjectSlugInputFlag = packagesUpdatePackageFlags.String("project-slug-input", "", "")

		packagesListPackagesFlags                = flag.NewFlagSet("list-packages", flag.ExitOnError)
		packagesListPackagesApikeyTokenFlag      = packagesListPackagesFlags.String("apikey-token", "", "")
		packagesListPackagesSessionTokenFlag     = packagesListPackagesFlags.String("session-token", "", "")
		packagesListPackagesProjectSlugInputFlag = packagesListPackagesFlags.String("project-slug-input", "", "")

		packagesListVersionsFlags                = flag.NewFlagSet("list-versions", flag.ExitOnError)
		packagesListVersionsNameFlag             = packagesListVersionsFlags.String("name", "REQUIRED", "")
		packagesListVersionsApikeyTokenFlag      = packagesListVersionsFlags.String("apikey-token", "", "")
		packagesListVersionsSessionTokenFlag     = packagesListVersionsFlags.String("session-token", "", "")
		packagesListVersionsProjectSlugInputFlag = packagesListVersionsFlags.String("project-slug-input", "", "")

		packagesPublishFlags                = flag.NewFlagSet("publish", flag.ExitOnError)
		packagesPublishBodyFlag             = packagesPublishFlags.String("body", "REQUIRED", "")
		packagesPublishApikeyTokenFlag      = packagesPublishFlags.String("apikey-token", "", "")
		packagesPublishSessionTokenFlag     = packagesPublishFlags.String("session-token", "", "")
		packagesPublishProjectSlugInputFlag = packagesPublishFlags.String("project-slug-input", "", "")

		projectsFlags = flag.NewFlagSet("projects", flag.ContinueOnError)

		projectsCreateProjectFlags            = flag.NewFlagSet("create-project", flag.ExitOnError)
		projectsCreateProjectBodyFlag         = projectsCreateProjectFlags.String("body", "REQUIRED", "")
		projectsCreateProjectApikeyTokenFlag  = projectsCreateProjectFlags.String("apikey-token", "", "")
		projectsCreateProjectSessionTokenFlag = projectsCreateProjectFlags.String("session-token", "", "")

		projectsListProjectsFlags              = flag.NewFlagSet("list-projects", flag.ExitOnError)
		projectsListProjectsOrganizationIDFlag = projectsListProjectsFlags.String("organization-id", "REQUIRED", "")
		projectsListProjectsApikeyTokenFlag    = projectsListProjectsFlags.String("apikey-token", "", "")
		projectsListProjectsSessionTokenFlag   = projectsListProjectsFlags.String("session-token", "", "")

		projectsSetLogoFlags                = flag.NewFlagSet("set-logo", flag.ExitOnError)
		projectsSetLogoBodyFlag             = projectsSetLogoFlags.String("body", "REQUIRED", "")
		projectsSetLogoApikeyTokenFlag      = projectsSetLogoFlags.String("apikey-token", "", "")
		projectsSetLogoSessionTokenFlag     = projectsSetLogoFlags.String("session-token", "", "")
		projectsSetLogoProjectSlugInputFlag = projectsSetLogoFlags.String("project-slug-input", "", "")

		slackFlags = flag.NewFlagSet("slack", flag.ContinueOnError)

		slackCallbackFlags     = flag.NewFlagSet("callback", flag.ExitOnError)
		slackCallbackStateFlag = slackCallbackFlags.String("state", "REQUIRED", "")
		slackCallbackCodeFlag  = slackCallbackFlags.String("code", "REQUIRED", "")

		slackLoginFlags            = flag.NewFlagSet("login", flag.ExitOnError)
		slackLoginProjectSlugFlag  = slackLoginFlags.String("project-slug", "REQUIRED", "")
		slackLoginReturnURLFlag    = slackLoginFlags.String("return-url", "", "")
		slackLoginSessionTokenFlag = slackLoginFlags.String("session-token", "", "")

		slackGetSlackConnectionFlags                = flag.NewFlagSet("get-slack-connection", flag.ExitOnError)
		slackGetSlackConnectionSessionTokenFlag     = slackGetSlackConnectionFlags.String("session-token", "", "")
		slackGetSlackConnectionProjectSlugInputFlag = slackGetSlackConnectionFlags.String("project-slug-input", "", "")

		slackUpdateSlackConnectionFlags                = flag.NewFlagSet("update-slack-connection", flag.ExitOnError)
		slackUpdateSlackConnectionBodyFlag             = slackUpdateSlackConnectionFlags.String("body", "REQUIRED", "")
		slackUpdateSlackConnectionSessionTokenFlag     = slackUpdateSlackConnectionFlags.String("session-token", "", "")
		slackUpdateSlackConnectionProjectSlugInputFlag = slackUpdateSlackConnectionFlags.String("project-slug-input", "", "")

		slackDeleteSlackConnectionFlags                = flag.NewFlagSet("delete-slack-connection", flag.ExitOnError)
		slackDeleteSlackConnectionSessionTokenFlag     = slackDeleteSlackConnectionFlags.String("session-token", "", "")
		slackDeleteSlackConnectionProjectSlugInputFlag = slackDeleteSlackConnectionFlags.String("project-slug-input", "", "")

		templatesFlags = flag.NewFlagSet("templates", flag.ContinueOnError)

		templatesCreateTemplateFlags                = flag.NewFlagSet("create-template", flag.ExitOnError)
		templatesCreateTemplateBodyFlag             = templatesCreateTemplateFlags.String("body", "REQUIRED", "")
		templatesCreateTemplateApikeyTokenFlag      = templatesCreateTemplateFlags.String("apikey-token", "", "")
		templatesCreateTemplateSessionTokenFlag     = templatesCreateTemplateFlags.String("session-token", "", "")
		templatesCreateTemplateProjectSlugInputFlag = templatesCreateTemplateFlags.String("project-slug-input", "", "")

		templatesUpdateTemplateFlags                = flag.NewFlagSet("update-template", flag.ExitOnError)
		templatesUpdateTemplateBodyFlag             = templatesUpdateTemplateFlags.String("body", "REQUIRED", "")
		templatesUpdateTemplateApikeyTokenFlag      = templatesUpdateTemplateFlags.String("apikey-token", "", "")
		templatesUpdateTemplateSessionTokenFlag     = templatesUpdateTemplateFlags.String("session-token", "", "")
		templatesUpdateTemplateProjectSlugInputFlag = templatesUpdateTemplateFlags.String("project-slug-input", "", "")

		templatesGetTemplateFlags                = flag.NewFlagSet("get-template", flag.ExitOnError)
		templatesGetTemplateIDFlag               = templatesGetTemplateFlags.String("id", "", "")
		templatesGetTemplateNameFlag             = templatesGetTemplateFlags.String("name", "", "")
		templatesGetTemplateApikeyTokenFlag      = templatesGetTemplateFlags.String("apikey-token", "", "")
		templatesGetTemplateSessionTokenFlag     = templatesGetTemplateFlags.String("session-token", "", "")
		templatesGetTemplateProjectSlugInputFlag = templatesGetTemplateFlags.String("project-slug-input", "", "")

		templatesListTemplatesFlags                = flag.NewFlagSet("list-templates", flag.ExitOnError)
		templatesListTemplatesApikeyTokenFlag      = templatesListTemplatesFlags.String("apikey-token", "", "")
		templatesListTemplatesSessionTokenFlag     = templatesListTemplatesFlags.String("session-token", "", "")
		templatesListTemplatesProjectSlugInputFlag = templatesListTemplatesFlags.String("project-slug-input", "", "")

		templatesDeleteTemplateFlags                = flag.NewFlagSet("delete-template", flag.ExitOnError)
		templatesDeleteTemplateIDFlag               = templatesDeleteTemplateFlags.String("id", "", "")
		templatesDeleteTemplateNameFlag             = templatesDeleteTemplateFlags.String("name", "", "")
		templatesDeleteTemplateApikeyTokenFlag      = templatesDeleteTemplateFlags.String("apikey-token", "", "")
		templatesDeleteTemplateSessionTokenFlag     = templatesDeleteTemplateFlags.String("session-token", "", "")
		templatesDeleteTemplateProjectSlugInputFlag = templatesDeleteTemplateFlags.String("project-slug-input", "", "")

		templatesRenderTemplateByIDFlags                = flag.NewFlagSet("render-template-by-id", flag.ExitOnError)
		templatesRenderTemplateByIDBodyFlag             = templatesRenderTemplateByIDFlags.String("body", "REQUIRED", "")
		templatesRenderTemplateByIDIDFlag               = templatesRenderTemplateByIDFlags.String("id", "REQUIRED", "")
		templatesRenderTemplateByIDApikeyTokenFlag      = templatesRenderTemplateByIDFlags.String("apikey-token", "", "")
		templatesRenderTemplateByIDSessionTokenFlag     = templatesRenderTemplateByIDFlags.String("session-token", "", "")
		templatesRenderTemplateByIDProjectSlugInputFlag = templatesRenderTemplateByIDFlags.String("project-slug-input", "", "")

		templatesRenderTemplateFlags                = flag.NewFlagSet("render-template", flag.ExitOnError)
		templatesRenderTemplateBodyFlag             = templatesRenderTemplateFlags.String("body", "REQUIRED", "")
		templatesRenderTemplateApikeyTokenFlag      = templatesRenderTemplateFlags.String("apikey-token", "", "")
		templatesRenderTemplateSessionTokenFlag     = templatesRenderTemplateFlags.String("session-token", "", "")
		templatesRenderTemplateProjectSlugInputFlag = templatesRenderTemplateFlags.String("project-slug-input", "", "")

		toolsFlags = flag.NewFlagSet("tools", flag.ContinueOnError)

		toolsListToolsFlags                = flag.NewFlagSet("list-tools", flag.ExitOnError)
		toolsListToolsCursorFlag           = toolsListToolsFlags.String("cursor", "", "")
		toolsListToolsLimitFlag            = toolsListToolsFlags.String("limit", "", "")
		toolsListToolsDeploymentIDFlag     = toolsListToolsFlags.String("deployment-id", "", "")
		toolsListToolsSessionTokenFlag     = toolsListToolsFlags.String("session-token", "", "")
		toolsListToolsProjectSlugInputFlag = toolsListToolsFlags.String("project-slug-input", "", "")

		toolsetsFlags = flag.NewFlagSet("toolsets", flag.ContinueOnError)

		toolsetsCreateToolsetFlags                = flag.NewFlagSet("create-toolset", flag.ExitOnError)
		toolsetsCreateToolsetBodyFlag             = toolsetsCreateToolsetFlags.String("body", "REQUIRED", "")
		toolsetsCreateToolsetSessionTokenFlag     = toolsetsCreateToolsetFlags.String("session-token", "", "")
		toolsetsCreateToolsetProjectSlugInputFlag = toolsetsCreateToolsetFlags.String("project-slug-input", "", "")

		toolsetsListToolsetsFlags                = flag.NewFlagSet("list-toolsets", flag.ExitOnError)
		toolsetsListToolsetsSessionTokenFlag     = toolsetsListToolsetsFlags.String("session-token", "", "")
		toolsetsListToolsetsProjectSlugInputFlag = toolsetsListToolsetsFlags.String("project-slug-input", "", "")

		toolsetsUpdateToolsetFlags                = flag.NewFlagSet("update-toolset", flag.ExitOnError)
		toolsetsUpdateToolsetBodyFlag             = toolsetsUpdateToolsetFlags.String("body", "REQUIRED", "")
		toolsetsUpdateToolsetSlugFlag             = toolsetsUpdateToolsetFlags.String("slug", "REQUIRED", "")
		toolsetsUpdateToolsetSessionTokenFlag     = toolsetsUpdateToolsetFlags.String("session-token", "", "")
		toolsetsUpdateToolsetProjectSlugInputFlag = toolsetsUpdateToolsetFlags.String("project-slug-input", "", "")

		toolsetsDeleteToolsetFlags                = flag.NewFlagSet("delete-toolset", flag.ExitOnError)
		toolsetsDeleteToolsetSlugFlag             = toolsetsDeleteToolsetFlags.String("slug", "REQUIRED", "")
		toolsetsDeleteToolsetSessionTokenFlag     = toolsetsDeleteToolsetFlags.String("session-token", "", "")
		toolsetsDeleteToolsetProjectSlugInputFlag = toolsetsDeleteToolsetFlags.String("project-slug-input", "", "")

		toolsetsGetToolsetFlags                = flag.NewFlagSet("get-toolset", flag.ExitOnError)
		toolsetsGetToolsetSlugFlag             = toolsetsGetToolsetFlags.String("slug", "REQUIRED", "")
		toolsetsGetToolsetSessionTokenFlag     = toolsetsGetToolsetFlags.String("session-token", "", "")
		toolsetsGetToolsetProjectSlugInputFlag = toolsetsGetToolsetFlags.String("project-slug-input", "", "")

		toolsetsCheckMCPSlugAvailabilityFlags                = flag.NewFlagSet("check-mcp-slug-availability", flag.ExitOnError)
		toolsetsCheckMCPSlugAvailabilitySlugFlag             = toolsetsCheckMCPSlugAvailabilityFlags.String("slug", "REQUIRED", "")
		toolsetsCheckMCPSlugAvailabilitySessionTokenFlag     = toolsetsCheckMCPSlugAvailabilityFlags.String("session-token", "", "")
		toolsetsCheckMCPSlugAvailabilityProjectSlugInputFlag = toolsetsCheckMCPSlugAvailabilityFlags.String("project-slug-input", "", "")

		toolsetsAddExternalOAuthServerFlags                = flag.NewFlagSet("add-externaloauth-server", flag.ExitOnError)
		toolsetsAddExternalOAuthServerBodyFlag             = toolsetsAddExternalOAuthServerFlags.String("body", "REQUIRED", "")
		toolsetsAddExternalOAuthServerSlugFlag             = toolsetsAddExternalOAuthServerFlags.String("slug", "REQUIRED", "")
		toolsetsAddExternalOAuthServerSessionTokenFlag     = toolsetsAddExternalOAuthServerFlags.String("session-token", "", "")
		toolsetsAddExternalOAuthServerProjectSlugInputFlag = toolsetsAddExternalOAuthServerFlags.String("project-slug-input", "", "")

		toolsetsRemoveOAuthServerFlags                = flag.NewFlagSet("removeoauth-server", flag.ExitOnError)
		toolsetsRemoveOAuthServerSlugFlag             = toolsetsRemoveOAuthServerFlags.String("slug", "REQUIRED", "")
		toolsetsRemoveOAuthServerSessionTokenFlag     = toolsetsRemoveOAuthServerFlags.String("session-token", "", "")
		toolsetsRemoveOAuthServerProjectSlugInputFlag = toolsetsRemoveOAuthServerFlags.String("project-slug-input", "", "")

		usageFlags = flag.NewFlagSet("usage", flag.ContinueOnError)

		usageGetPeriodUsageFlags                = flag.NewFlagSet("get-period-usage", flag.ExitOnError)
		usageGetPeriodUsageSessionTokenFlag     = usageGetPeriodUsageFlags.String("session-token", "", "")
		usageGetPeriodUsageProjectSlugInputFlag = usageGetPeriodUsageFlags.String("project-slug-input", "", "")

		usageGetUsageTiersFlags = flag.NewFlagSet("get-usage-tiers", flag.ExitOnError)

		usageCreateCustomerSessionFlags                = flag.NewFlagSet("create-customer-session", flag.ExitOnError)
		usageCreateCustomerSessionSessionTokenFlag     = usageCreateCustomerSessionFlags.String("session-token", "", "")
		usageCreateCustomerSessionProjectSlugInputFlag = usageCreateCustomerSessionFlags.String("project-slug-input", "", "")

		usageCreateCheckoutFlags                = flag.NewFlagSet("create-checkout", flag.ExitOnError)
		usageCreateCheckoutSessionTokenFlag     = usageCreateCheckoutFlags.String("session-token", "", "")
		usageCreateCheckoutProjectSlugInputFlag = usageCreateCheckoutFlags.String("project-slug-input", "", "")

		variationsFlags = flag.NewFlagSet("variations", flag.ContinueOnError)

		variationsUpsertGlobalFlags                = flag.NewFlagSet("upsert-global", flag.ExitOnError)
		variationsUpsertGlobalBodyFlag             = variationsUpsertGlobalFlags.String("body", "REQUIRED", "")
		variationsUpsertGlobalSessionTokenFlag     = variationsUpsertGlobalFlags.String("session-token", "", "")
		variationsUpsertGlobalApikeyTokenFlag      = variationsUpsertGlobalFlags.String("apikey-token", "", "")
		variationsUpsertGlobalProjectSlugInputFlag = variationsUpsertGlobalFlags.String("project-slug-input", "", "")

		variationsDeleteGlobalFlags                = flag.NewFlagSet("delete-global", flag.ExitOnError)
		variationsDeleteGlobalVariationIDFlag      = variationsDeleteGlobalFlags.String("variation-id", "REQUIRED", "")
		variationsDeleteGlobalSessionTokenFlag     = variationsDeleteGlobalFlags.String("session-token", "", "")
		variationsDeleteGlobalApikeyTokenFlag      = variationsDeleteGlobalFlags.String("apikey-token", "", "")
		variationsDeleteGlobalProjectSlugInputFlag = variationsDeleteGlobalFlags.String("project-slug-input", "", "")

		variationsListGlobalFlags                = flag.NewFlagSet("list-global", flag.ExitOnError)
		variationsListGlobalSessionTokenFlag     = variationsListGlobalFlags.String("session-token", "", "")
		variationsListGlobalApikeyTokenFlag      = variationsListGlobalFlags.String("apikey-token", "", "")
		variationsListGlobalProjectSlugInputFlag = variationsListGlobalFlags.String("project-slug-input", "", "")
	)
	aboutFlags.Usage = aboutUsage
	aboutOpenapiFlags.Usage = aboutOpenapiUsage

	assetsFlags.Usage = assetsUsage
	assetsServeImageFlags.Usage = assetsServeImageUsage
	assetsUploadImageFlags.Usage = assetsUploadImageUsage
	assetsUploadFunctionsFlags.Usage = assetsUploadFunctionsUsage
	assetsUploadOpenAPIv3Flags.Usage = assetsUploadOpenAPIv3Usage
	assetsServeOpenAPIv3Flags.Usage = assetsServeOpenAPIv3Usage
	assetsListAssetsFlags.Usage = assetsListAssetsUsage

	authFlags.Usage = authUsage
	authCallbackFlags.Usage = authCallbackUsage
	authLoginFlags.Usage = authLoginUsage
	authSwitchScopesFlags.Usage = authSwitchScopesUsage
	authLogoutFlags.Usage = authLogoutUsage
	authRegisterFlags.Usage = authRegisterUsage
	authInfoFlags.Usage = authInfoUsage

	chatFlags.Usage = chatUsage
	chatListChatsFlags.Usage = chatListChatsUsage
	chatLoadChatFlags.Usage = chatLoadChatUsage
	chatCreditUsageFlags.Usage = chatCreditUsageUsage

	deploymentsFlags.Usage = deploymentsUsage
	deploymentsGetDeploymentFlags.Usage = deploymentsGetDeploymentUsage
	deploymentsGetLatestDeploymentFlags.Usage = deploymentsGetLatestDeploymentUsage
	deploymentsCreateDeploymentFlags.Usage = deploymentsCreateDeploymentUsage
	deploymentsEvolveFlags.Usage = deploymentsEvolveUsage
	deploymentsRedeployFlags.Usage = deploymentsRedeployUsage
	deploymentsListDeploymentsFlags.Usage = deploymentsListDeploymentsUsage
	deploymentsGetDeploymentLogsFlags.Usage = deploymentsGetDeploymentLogsUsage

	domainsFlags.Usage = domainsUsage
	domainsGetDomainFlags.Usage = domainsGetDomainUsage
	domainsCreateDomainFlags.Usage = domainsCreateDomainUsage
	domainsDeleteDomainFlags.Usage = domainsDeleteDomainUsage

	environmentsFlags.Usage = environmentsUsage
	environmentsCreateEnvironmentFlags.Usage = environmentsCreateEnvironmentUsage
	environmentsListEnvironmentsFlags.Usage = environmentsListEnvironmentsUsage
	environmentsUpdateEnvironmentFlags.Usage = environmentsUpdateEnvironmentUsage
	environmentsDeleteEnvironmentFlags.Usage = environmentsDeleteEnvironmentUsage

	instancesFlags.Usage = instancesUsage
	instancesGetInstanceFlags.Usage = instancesGetInstanceUsage

	integrationsFlags.Usage = integrationsUsage
	integrationsGetFlags.Usage = integrationsGetUsage
	integrationsListFlags.Usage = integrationsListUsage

	keysFlags.Usage = keysUsage
	keysCreateKeyFlags.Usage = keysCreateKeyUsage
	keysListKeysFlags.Usage = keysListKeysUsage
	keysRevokeKeyFlags.Usage = keysRevokeKeyUsage

	packagesFlags.Usage = packagesUsage
	packagesCreatePackageFlags.Usage = packagesCreatePackageUsage
	packagesUpdatePackageFlags.Usage = packagesUpdatePackageUsage
	packagesListPackagesFlags.Usage = packagesListPackagesUsage
	packagesListVersionsFlags.Usage = packagesListVersionsUsage
	packagesPublishFlags.Usage = packagesPublishUsage

	projectsFlags.Usage = projectsUsage
	projectsCreateProjectFlags.Usage = projectsCreateProjectUsage
	projectsListProjectsFlags.Usage = projectsListProjectsUsage
	projectsSetLogoFlags.Usage = projectsSetLogoUsage

	slackFlags.Usage = slackUsage
	slackCallbackFlags.Usage = slackCallbackUsage
	slackLoginFlags.Usage = slackLoginUsage
	slackGetSlackConnectionFlags.Usage = slackGetSlackConnectionUsage
	slackUpdateSlackConnectionFlags.Usage = slackUpdateSlackConnectionUsage
	slackDeleteSlackConnectionFlags.Usage = slackDeleteSlackConnectionUsage

	templatesFlags.Usage = templatesUsage
	templatesCreateTemplateFlags.Usage = templatesCreateTemplateUsage
	templatesUpdateTemplateFlags.Usage = templatesUpdateTemplateUsage
	templatesGetTemplateFlags.Usage = templatesGetTemplateUsage
	templatesListTemplatesFlags.Usage = templatesListTemplatesUsage
	templatesDeleteTemplateFlags.Usage = templatesDeleteTemplateUsage
	templatesRenderTemplateByIDFlags.Usage = templatesRenderTemplateByIDUsage
	templatesRenderTemplateFlags.Usage = templatesRenderTemplateUsage

	toolsFlags.Usage = toolsUsage
	toolsListToolsFlags.Usage = toolsListToolsUsage

	toolsetsFlags.Usage = toolsetsUsage
	toolsetsCreateToolsetFlags.Usage = toolsetsCreateToolsetUsage
	toolsetsListToolsetsFlags.Usage = toolsetsListToolsetsUsage
	toolsetsUpdateToolsetFlags.Usage = toolsetsUpdateToolsetUsage
	toolsetsDeleteToolsetFlags.Usage = toolsetsDeleteToolsetUsage
	toolsetsGetToolsetFlags.Usage = toolsetsGetToolsetUsage
	toolsetsCheckMCPSlugAvailabilityFlags.Usage = toolsetsCheckMCPSlugAvailabilityUsage
	toolsetsAddExternalOAuthServerFlags.Usage = toolsetsAddExternalOAuthServerUsage
	toolsetsRemoveOAuthServerFlags.Usage = toolsetsRemoveOAuthServerUsage

	usageFlags.Usage = usageUsage
	usageGetPeriodUsageFlags.Usage = usageGetPeriodUsageUsage
	usageGetUsageTiersFlags.Usage = usageGetUsageTiersUsage
	usageCreateCustomerSessionFlags.Usage = usageCreateCustomerSessionUsage
	usageCreateCheckoutFlags.Usage = usageCreateCheckoutUsage

	variationsFlags.Usage = variationsUsage
	variationsUpsertGlobalFlags.Usage = variationsUpsertGlobalUsage
	variationsDeleteGlobalFlags.Usage = variationsDeleteGlobalUsage
	variationsListGlobalFlags.Usage = variationsListGlobalUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "about":
			svcf = aboutFlags
		case "assets":
			svcf = assetsFlags
		case "auth":
			svcf = authFlags
		case "chat":
			svcf = chatFlags
		case "deployments":
			svcf = deploymentsFlags
		case "domains":
			svcf = domainsFlags
		case "environments":
			svcf = environmentsFlags
		case "instances":
			svcf = instancesFlags
		case "integrations":
			svcf = integrationsFlags
		case "keys":
			svcf = keysFlags
		case "packages":
			svcf = packagesFlags
		case "projects":
			svcf = projectsFlags
		case "slack":
			svcf = slackFlags
		case "templates":
			svcf = templatesFlags
		case "tools":
			svcf = toolsFlags
		case "toolsets":
			svcf = toolsetsFlags
		case "usage":
			svcf = usageFlags
		case "variations":
			svcf = variationsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "about":
			switch epn {
			case "openapi":
				epf = aboutOpenapiFlags

			}

		case "assets":
			switch epn {
			case "serve-image":
				epf = assetsServeImageFlags

			case "upload-image":
				epf = assetsUploadImageFlags

			case "upload-functions":
				epf = assetsUploadFunctionsFlags

			case "upload-open-ap-iv3":
				epf = assetsUploadOpenAPIv3Flags

			case "serve-open-ap-iv3":
				epf = assetsServeOpenAPIv3Flags

			case "list-assets":
				epf = assetsListAssetsFlags

			}

		case "auth":
			switch epn {
			case "callback":
				epf = authCallbackFlags

			case "login":
				epf = authLoginFlags

			case "switch-scopes":
				epf = authSwitchScopesFlags

			case "logout":
				epf = authLogoutFlags

			case "register":
				epf = authRegisterFlags

			case "info":
				epf = authInfoFlags

			}

		case "chat":
			switch epn {
			case "list-chats":
				epf = chatListChatsFlags

			case "load-chat":
				epf = chatLoadChatFlags

			case "credit-usage":
				epf = chatCreditUsageFlags

			}

		case "deployments":
			switch epn {
			case "get-deployment":
				epf = deploymentsGetDeploymentFlags

			case "get-latest-deployment":
				epf = deploymentsGetLatestDeploymentFlags

			case "create-deployment":
				epf = deploymentsCreateDeploymentFlags

			case "evolve":
				epf = deploymentsEvolveFlags

			case "redeploy":
				epf = deploymentsRedeployFlags

			case "list-deployments":
				epf = deploymentsListDeploymentsFlags

			case "get-deployment-logs":
				epf = deploymentsGetDeploymentLogsFlags

			}

		case "domains":
			switch epn {
			case "get-domain":
				epf = domainsGetDomainFlags

			case "create-domain":
				epf = domainsCreateDomainFlags

			case "delete-domain":
				epf = domainsDeleteDomainFlags

			}

		case "environments":
			switch epn {
			case "create-environment":
				epf = environmentsCreateEnvironmentFlags

			case "list-environments":
				epf = environmentsListEnvironmentsFlags

			case "update-environment":
				epf = environmentsUpdateEnvironmentFlags

			case "delete-environment":
				epf = environmentsDeleteEnvironmentFlags

			}

		case "instances":
			switch epn {
			case "get-instance":
				epf = instancesGetInstanceFlags

			}

		case "integrations":
			switch epn {
			case "get":
				epf = integrationsGetFlags

			case "list":
				epf = integrationsListFlags

			}

		case "keys":
			switch epn {
			case "create-key":
				epf = keysCreateKeyFlags

			case "list-keys":
				epf = keysListKeysFlags

			case "revoke-key":
				epf = keysRevokeKeyFlags

			}

		case "packages":
			switch epn {
			case "create-package":
				epf = packagesCreatePackageFlags

			case "update-package":
				epf = packagesUpdatePackageFlags

			case "list-packages":
				epf = packagesListPackagesFlags

			case "list-versions":
				epf = packagesListVersionsFlags

			case "publish":
				epf = packagesPublishFlags

			}

		case "projects":
			switch epn {
			case "create-project":
				epf = projectsCreateProjectFlags

			case "list-projects":
				epf = projectsListProjectsFlags

			case "set-logo":
				epf = projectsSetLogoFlags

			}

		case "slack":
			switch epn {
			case "callback":
				epf = slackCallbackFlags

			case "login":
				epf = slackLoginFlags

			case "get-slack-connection":
				epf = slackGetSlackConnectionFlags

			case "update-slack-connection":
				epf = slackUpdateSlackConnectionFlags

			case "delete-slack-connection":
				epf = slackDeleteSlackConnectionFlags

			}

		case "templates":
			switch epn {
			case "create-template":
				epf = templatesCreateTemplateFlags

			case "update-template":
				epf = templatesUpdateTemplateFlags

			case "get-template":
				epf = templatesGetTemplateFlags

			case "list-templates":
				epf = templatesListTemplatesFlags

			case "delete-template":
				epf = templatesDeleteTemplateFlags

			case "render-template-by-id":
				epf = templatesRenderTemplateByIDFlags

			case "render-template":
				epf = templatesRenderTemplateFlags

			}

		case "tools":
			switch epn {
			case "list-tools":
				epf = toolsListToolsFlags

			}

		case "toolsets":
			switch epn {
			case "create-toolset":
				epf = toolsetsCreateToolsetFlags

			case "list-toolsets":
				epf = toolsetsListToolsetsFlags

			case "update-toolset":
				epf = toolsetsUpdateToolsetFlags

			case "delete-toolset":
				epf = toolsetsDeleteToolsetFlags

			case "get-toolset":
				epf = toolsetsGetToolsetFlags

			case "check-mcp-slug-availability":
				epf = toolsetsCheckMCPSlugAvailabilityFlags

			case "add-externaloauth-server":
				epf = toolsetsAddExternalOAuthServerFlags

			case "removeoauth-server":
				epf = toolsetsRemoveOAuthServerFlags

			}

		case "usage":
			switch epn {
			case "get-period-usage":
				epf = usageGetPeriodUsageFlags

			case "get-usage-tiers":
				epf = usageGetUsageTiersFlags

			case "create-customer-session":
				epf = usageCreateCustomerSessionFlags

			case "create-checkout":
				epf = usageCreateCheckoutFlags

			}

		case "variations":
			switch epn {
			case "upsert-global":
				epf = variationsUpsertGlobalFlags

			case "delete-global":
				epf = variationsDeleteGlobalFlags

			case "list-global":
				epf = variationsListGlobalFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "about":
			c := aboutc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "openapi":
				endpoint = c.Openapi()
			}
		case "assets":
			c := assetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "serve-image":
				endpoint = c.ServeImage()
				data, err = assetsc.BuildServeImagePayload(*assetsServeImageIDFlag, *assetsServeImageSessionTokenFlag, *assetsServeImageApikeyTokenFlag)
			case "upload-image":
				endpoint = c.UploadImage()
				data, err = assetsc.BuildUploadImagePayload(*assetsUploadImageContentTypeFlag, *assetsUploadImageContentLengthFlag, *assetsUploadImageApikeyTokenFlag, *assetsUploadImageProjectSlugInputFlag, *assetsUploadImageSessionTokenFlag)
				if err == nil {
					data, err = assetsc.BuildUploadImageStreamPayload(data, *assetsUploadImageStreamFlag)
				}
			case "upload-functions":
				endpoint = c.UploadFunctions()
				data, err = assetsc.BuildUploadFunctionsPayload(*assetsUploadFunctionsContentTypeFlag, *assetsUploadFunctionsContentLengthFlag, *assetsUploadFunctionsApikeyTokenFlag, *assetsUploadFunctionsProjectSlugInputFlag, *assetsUploadFunctionsSessionTokenFlag)
				if err == nil {
					data, err = assetsc.BuildUploadFunctionsStreamPayload(data, *assetsUploadFunctionsStreamFlag)
				}
			case "upload-open-ap-iv3":
				endpoint = c.UploadOpenAPIv3()
				data, err = assetsc.BuildUploadOpenAPIv3Payload(*assetsUploadOpenAPIv3ContentTypeFlag, *assetsUploadOpenAPIv3ContentLengthFlag, *assetsUploadOpenAPIv3ApikeyTokenFlag, *assetsUploadOpenAPIv3ProjectSlugInputFlag, *assetsUploadOpenAPIv3SessionTokenFlag)
				if err == nil {
					data, err = assetsc.BuildUploadOpenAPIv3StreamPayload(data, *assetsUploadOpenAPIv3StreamFlag)
				}
			case "serve-open-ap-iv3":
				endpoint = c.ServeOpenAPIv3()
				data, err = assetsc.BuildServeOpenAPIv3Payload(*assetsServeOpenAPIv3IDFlag, *assetsServeOpenAPIv3ProjectIDFlag, *assetsServeOpenAPIv3ApikeyTokenFlag, *assetsServeOpenAPIv3SessionTokenFlag)
			case "list-assets":
				endpoint = c.ListAssets()
				data, err = assetsc.BuildListAssetsPayload(*assetsListAssetsSessionTokenFlag, *assetsListAssetsProjectSlugInputFlag, *assetsListAssetsApikeyTokenFlag)
			}
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "callback":
				endpoint = c.Callback()
				data, err = authc.BuildCallbackPayload(*authCallbackCodeFlag)
			case "login":
				endpoint = c.Login()
			case "switch-scopes":
				endpoint = c.SwitchScopes()
				data, err = authc.BuildSwitchScopesPayload(*authSwitchScopesOrganizationIDFlag, *authSwitchScopesProjectIDFlag, *authSwitchScopesSessionTokenFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = authc.BuildLogoutPayload(*authLogoutSessionTokenFlag)
			case "register":
				endpoint = c.Register()
				data, err = authc.BuildRegisterPayload(*authRegisterBodyFlag, *authRegisterSessionTokenFlag)
			case "info":
				endpoint = c.Info()
				data, err = authc.BuildInfoPayload(*authInfoSessionTokenFlag)
			}
		case "chat":
			c := chatc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-chats":
				endpoint = c.ListChats()
				data, err = chatc.BuildListChatsPayload(*chatListChatsSessionTokenFlag, *chatListChatsProjectSlugInputFlag)
			case "load-chat":
				endpoint = c.LoadChat()
				data, err = chatc.BuildLoadChatPayload(*chatLoadChatIDFlag, *chatLoadChatSessionTokenFlag, *chatLoadChatProjectSlugInputFlag)
			case "credit-usage":
				endpoint = c.CreditUsage()
				data, err = chatc.BuildCreditUsagePayload(*chatCreditUsageSessionTokenFlag, *chatCreditUsageProjectSlugInputFlag)
			}
		case "deployments":
			c := deploymentsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-deployment":
				endpoint = c.GetDeployment()
				data, err = deploymentsc.BuildGetDeploymentPayload(*deploymentsGetDeploymentIDFlag, *deploymentsGetDeploymentApikeyTokenFlag, *deploymentsGetDeploymentSessionTokenFlag, *deploymentsGetDeploymentProjectSlugInputFlag)
			case "get-latest-deployment":
				endpoint = c.GetLatestDeployment()
				data, err = deploymentsc.BuildGetLatestDeploymentPayload(*deploymentsGetLatestDeploymentApikeyTokenFlag, *deploymentsGetLatestDeploymentSessionTokenFlag, *deploymentsGetLatestDeploymentProjectSlugInputFlag)
			case "create-deployment":
				endpoint = c.CreateDeployment()
				data, err = deploymentsc.BuildCreateDeploymentPayload(*deploymentsCreateDeploymentBodyFlag, *deploymentsCreateDeploymentApikeyTokenFlag, *deploymentsCreateDeploymentSessionTokenFlag, *deploymentsCreateDeploymentProjectSlugInputFlag, *deploymentsCreateDeploymentIdempotencyKeyFlag)
			case "evolve":
				endpoint = c.Evolve()
				data, err = deploymentsc.BuildEvolvePayload(*deploymentsEvolveBodyFlag, *deploymentsEvolveApikeyTokenFlag, *deploymentsEvolveSessionTokenFlag, *deploymentsEvolveProjectSlugInputFlag)
			case "redeploy":
				endpoint = c.Redeploy()
				data, err = deploymentsc.BuildRedeployPayload(*deploymentsRedeployBodyFlag, *deploymentsRedeployApikeyTokenFlag, *deploymentsRedeploySessionTokenFlag, *deploymentsRedeployProjectSlugInputFlag)
			case "list-deployments":
				endpoint = c.ListDeployments()
				data, err = deploymentsc.BuildListDeploymentsPayload(*deploymentsListDeploymentsCursorFlag, *deploymentsListDeploymentsApikeyTokenFlag, *deploymentsListDeploymentsSessionTokenFlag, *deploymentsListDeploymentsProjectSlugInputFlag)
			case "get-deployment-logs":
				endpoint = c.GetDeploymentLogs()
				data, err = deploymentsc.BuildGetDeploymentLogsPayload(*deploymentsGetDeploymentLogsDeploymentIDFlag, *deploymentsGetDeploymentLogsCursorFlag, *deploymentsGetDeploymentLogsApikeyTokenFlag, *deploymentsGetDeploymentLogsSessionTokenFlag, *deploymentsGetDeploymentLogsProjectSlugInputFlag)
			}
		case "domains":
			c := domainsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-domain":
				endpoint = c.GetDomain()
				data, err = domainsc.BuildGetDomainPayload(*domainsGetDomainSessionTokenFlag, *domainsGetDomainProjectSlugInputFlag)
			case "create-domain":
				endpoint = c.CreateDomain()
				data, err = domainsc.BuildCreateDomainPayload(*domainsCreateDomainBodyFlag, *domainsCreateDomainSessionTokenFlag, *domainsCreateDomainProjectSlugInputFlag)
			case "delete-domain":
				endpoint = c.DeleteDomain()
				data, err = domainsc.BuildDeleteDomainPayload(*domainsDeleteDomainSessionTokenFlag, *domainsDeleteDomainProjectSlugInputFlag)
			}
		case "environments":
			c := environmentsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-environment":
				endpoint = c.CreateEnvironment()
				data, err = environmentsc.BuildCreateEnvironmentPayload(*environmentsCreateEnvironmentBodyFlag, *environmentsCreateEnvironmentSessionTokenFlag, *environmentsCreateEnvironmentProjectSlugInputFlag)
			case "list-environments":
				endpoint = c.ListEnvironments()
				data, err = environmentsc.BuildListEnvironmentsPayload(*environmentsListEnvironmentsSessionTokenFlag, *environmentsListEnvironmentsProjectSlugInputFlag)
			case "update-environment":
				endpoint = c.UpdateEnvironment()
				data, err = environmentsc.BuildUpdateEnvironmentPayload(*environmentsUpdateEnvironmentBodyFlag, *environmentsUpdateEnvironmentSlugFlag, *environmentsUpdateEnvironmentSessionTokenFlag, *environmentsUpdateEnvironmentProjectSlugInputFlag)
			case "delete-environment":
				endpoint = c.DeleteEnvironment()
				data, err = environmentsc.BuildDeleteEnvironmentPayload(*environmentsDeleteEnvironmentSlugFlag, *environmentsDeleteEnvironmentSessionTokenFlag, *environmentsDeleteEnvironmentProjectSlugInputFlag)
			}
		case "instances":
			c := instancesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-instance":
				endpoint = c.GetInstance()
				data, err = instancesc.BuildGetInstancePayload(*instancesGetInstanceToolsetSlugFlag, *instancesGetInstanceEnvironmentSlugFlag, *instancesGetInstanceSessionTokenFlag, *instancesGetInstanceProjectSlugInputFlag, *instancesGetInstanceApikeyTokenFlag)
			}
		case "integrations":
			c := integrationsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = integrationsc.BuildGetPayload(*integrationsGetIDFlag, *integrationsGetNameFlag, *integrationsGetSessionTokenFlag, *integrationsGetProjectSlugInputFlag)
			case "list":
				endpoint = c.List()
				data, err = integrationsc.BuildListPayload(*integrationsListKeywordsFlag, *integrationsListSessionTokenFlag, *integrationsListProjectSlugInputFlag)
			}
		case "keys":
			c := keysc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-key":
				endpoint = c.CreateKey()
				data, err = keysc.BuildCreateKeyPayload(*keysCreateKeyBodyFlag, *keysCreateKeySessionTokenFlag)
			case "list-keys":
				endpoint = c.ListKeys()
				data, err = keysc.BuildListKeysPayload(*keysListKeysSessionTokenFlag)
			case "revoke-key":
				endpoint = c.RevokeKey()
				data, err = keysc.BuildRevokeKeyPayload(*keysRevokeKeyIDFlag, *keysRevokeKeySessionTokenFlag)
			}
		case "packages":
			c := packagesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-package":
				endpoint = c.CreatePackage()
				data, err = packagesc.BuildCreatePackagePayload(*packagesCreatePackageBodyFlag, *packagesCreatePackageApikeyTokenFlag, *packagesCreatePackageSessionTokenFlag, *packagesCreatePackageProjectSlugInputFlag)
			case "update-package":
				endpoint = c.UpdatePackage()
				data, err = packagesc.BuildUpdatePackagePayload(*packagesUpdatePackageBodyFlag, *packagesUpdatePackageApikeyTokenFlag, *packagesUpdatePackageSessionTokenFlag, *packagesUpdatePackageProjectSlugInputFlag)
			case "list-packages":
				endpoint = c.ListPackages()
				data, err = packagesc.BuildListPackagesPayload(*packagesListPackagesApikeyTokenFlag, *packagesListPackagesSessionTokenFlag, *packagesListPackagesProjectSlugInputFlag)
			case "list-versions":
				endpoint = c.ListVersions()
				data, err = packagesc.BuildListVersionsPayload(*packagesListVersionsNameFlag, *packagesListVersionsApikeyTokenFlag, *packagesListVersionsSessionTokenFlag, *packagesListVersionsProjectSlugInputFlag)
			case "publish":
				endpoint = c.Publish()
				data, err = packagesc.BuildPublishPayload(*packagesPublishBodyFlag, *packagesPublishApikeyTokenFlag, *packagesPublishSessionTokenFlag, *packagesPublishProjectSlugInputFlag)
			}
		case "projects":
			c := projectsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-project":
				endpoint = c.CreateProject()
				data, err = projectsc.BuildCreateProjectPayload(*projectsCreateProjectBodyFlag, *projectsCreateProjectApikeyTokenFlag, *projectsCreateProjectSessionTokenFlag)
			case "list-projects":
				endpoint = c.ListProjects()
				data, err = projectsc.BuildListProjectsPayload(*projectsListProjectsOrganizationIDFlag, *projectsListProjectsApikeyTokenFlag, *projectsListProjectsSessionTokenFlag)
			case "set-logo":
				endpoint = c.SetLogo()
				data, err = projectsc.BuildSetLogoPayload(*projectsSetLogoBodyFlag, *projectsSetLogoApikeyTokenFlag, *projectsSetLogoSessionTokenFlag, *projectsSetLogoProjectSlugInputFlag)
			}
		case "slack":
			c := slackc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "callback":
				endpoint = c.Callback()
				data, err = slackc.BuildCallbackPayload(*slackCallbackStateFlag, *slackCallbackCodeFlag)
			case "login":
				endpoint = c.Login()
				data, err = slackc.BuildLoginPayload(*slackLoginProjectSlugFlag, *slackLoginReturnURLFlag, *slackLoginSessionTokenFlag)
			case "get-slack-connection":
				endpoint = c.GetSlackConnection()
				data, err = slackc.BuildGetSlackConnectionPayload(*slackGetSlackConnectionSessionTokenFlag, *slackGetSlackConnectionProjectSlugInputFlag)
			case "update-slack-connection":
				endpoint = c.UpdateSlackConnection()
				data, err = slackc.BuildUpdateSlackConnectionPayload(*slackUpdateSlackConnectionBodyFlag, *slackUpdateSlackConnectionSessionTokenFlag, *slackUpdateSlackConnectionProjectSlugInputFlag)
			case "delete-slack-connection":
				endpoint = c.DeleteSlackConnection()
				data, err = slackc.BuildDeleteSlackConnectionPayload(*slackDeleteSlackConnectionSessionTokenFlag, *slackDeleteSlackConnectionProjectSlugInputFlag)
			}
		case "templates":
			c := templatesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-template":
				endpoint = c.CreateTemplate()
				data, err = templatesc.BuildCreateTemplatePayload(*templatesCreateTemplateBodyFlag, *templatesCreateTemplateApikeyTokenFlag, *templatesCreateTemplateSessionTokenFlag, *templatesCreateTemplateProjectSlugInputFlag)
			case "update-template":
				endpoint = c.UpdateTemplate()
				data, err = templatesc.BuildUpdateTemplatePayload(*templatesUpdateTemplateBodyFlag, *templatesUpdateTemplateApikeyTokenFlag, *templatesUpdateTemplateSessionTokenFlag, *templatesUpdateTemplateProjectSlugInputFlag)
			case "get-template":
				endpoint = c.GetTemplate()
				data, err = templatesc.BuildGetTemplatePayload(*templatesGetTemplateIDFlag, *templatesGetTemplateNameFlag, *templatesGetTemplateApikeyTokenFlag, *templatesGetTemplateSessionTokenFlag, *templatesGetTemplateProjectSlugInputFlag)
			case "list-templates":
				endpoint = c.ListTemplates()
				data, err = templatesc.BuildListTemplatesPayload(*templatesListTemplatesApikeyTokenFlag, *templatesListTemplatesSessionTokenFlag, *templatesListTemplatesProjectSlugInputFlag)
			case "delete-template":
				endpoint = c.DeleteTemplate()
				data, err = templatesc.BuildDeleteTemplatePayload(*templatesDeleteTemplateIDFlag, *templatesDeleteTemplateNameFlag, *templatesDeleteTemplateApikeyTokenFlag, *templatesDeleteTemplateSessionTokenFlag, *templatesDeleteTemplateProjectSlugInputFlag)
			case "render-template-by-id":
				endpoint = c.RenderTemplateByID()
				data, err = templatesc.BuildRenderTemplateByIDPayload(*templatesRenderTemplateByIDBodyFlag, *templatesRenderTemplateByIDIDFlag, *templatesRenderTemplateByIDApikeyTokenFlag, *templatesRenderTemplateByIDSessionTokenFlag, *templatesRenderTemplateByIDProjectSlugInputFlag)
			case "render-template":
				endpoint = c.RenderTemplate()
				data, err = templatesc.BuildRenderTemplatePayload(*templatesRenderTemplateBodyFlag, *templatesRenderTemplateApikeyTokenFlag, *templatesRenderTemplateSessionTokenFlag, *templatesRenderTemplateProjectSlugInputFlag)
			}
		case "tools":
			c := toolsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-tools":
				endpoint = c.ListTools()
				data, err = toolsc.BuildListToolsPayload(*toolsListToolsCursorFlag, *toolsListToolsLimitFlag, *toolsListToolsDeploymentIDFlag, *toolsListToolsSessionTokenFlag, *toolsListToolsProjectSlugInputFlag)
			}
		case "toolsets":
			c := toolsetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-toolset":
				endpoint = c.CreateToolset()
				data, err = toolsetsc.BuildCreateToolsetPayload(*toolsetsCreateToolsetBodyFlag, *toolsetsCreateToolsetSessionTokenFlag, *toolsetsCreateToolsetProjectSlugInputFlag)
			case "list-toolsets":
				endpoint = c.ListToolsets()
				data, err = toolsetsc.BuildListToolsetsPayload(*toolsetsListToolsetsSessionTokenFlag, *toolsetsListToolsetsProjectSlugInputFlag)
			case "update-toolset":
				endpoint = c.UpdateToolset()
				data, err = toolsetsc.BuildUpdateToolsetPayload(*toolsetsUpdateToolsetBodyFlag, *toolsetsUpdateToolsetSlugFlag, *toolsetsUpdateToolsetSessionTokenFlag, *toolsetsUpdateToolsetProjectSlugInputFlag)
			case "delete-toolset":
				endpoint = c.DeleteToolset()
				data, err = toolsetsc.BuildDeleteToolsetPayload(*toolsetsDeleteToolsetSlugFlag, *toolsetsDeleteToolsetSessionTokenFlag, *toolsetsDeleteToolsetProjectSlugInputFlag)
			case "get-toolset":
				endpoint = c.GetToolset()
				data, err = toolsetsc.BuildGetToolsetPayload(*toolsetsGetToolsetSlugFlag, *toolsetsGetToolsetSessionTokenFlag, *toolsetsGetToolsetProjectSlugInputFlag)
			case "check-mcp-slug-availability":
				endpoint = c.CheckMCPSlugAvailability()
				data, err = toolsetsc.BuildCheckMCPSlugAvailabilityPayload(*toolsetsCheckMCPSlugAvailabilitySlugFlag, *toolsetsCheckMCPSlugAvailabilitySessionTokenFlag, *toolsetsCheckMCPSlugAvailabilityProjectSlugInputFlag)
			case "add-externaloauth-server":
				endpoint = c.AddExternalOAuthServer()
				data, err = toolsetsc.BuildAddExternalOAuthServerPayload(*toolsetsAddExternalOAuthServerBodyFlag, *toolsetsAddExternalOAuthServerSlugFlag, *toolsetsAddExternalOAuthServerSessionTokenFlag, *toolsetsAddExternalOAuthServerProjectSlugInputFlag)
			case "removeoauth-server":
				endpoint = c.RemoveOAuthServer()
				data, err = toolsetsc.BuildRemoveOAuthServerPayload(*toolsetsRemoveOAuthServerSlugFlag, *toolsetsRemoveOAuthServerSessionTokenFlag, *toolsetsRemoveOAuthServerProjectSlugInputFlag)
			}
		case "usage":
			c := usagec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-period-usage":
				endpoint = c.GetPeriodUsage()
				data, err = usagec.BuildGetPeriodUsagePayload(*usageGetPeriodUsageSessionTokenFlag, *usageGetPeriodUsageProjectSlugInputFlag)
			case "get-usage-tiers":
				endpoint = c.GetUsageTiers()
			case "create-customer-session":
				endpoint = c.CreateCustomerSession()
				data, err = usagec.BuildCreateCustomerSessionPayload(*usageCreateCustomerSessionSessionTokenFlag, *usageCreateCustomerSessionProjectSlugInputFlag)
			case "create-checkout":
				endpoint = c.CreateCheckout()
				data, err = usagec.BuildCreateCheckoutPayload(*usageCreateCheckoutSessionTokenFlag, *usageCreateCheckoutProjectSlugInputFlag)
			}
		case "variations":
			c := variationsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "upsert-global":
				endpoint = c.UpsertGlobal()
				data, err = variationsc.BuildUpsertGlobalPayload(*variationsUpsertGlobalBodyFlag, *variationsUpsertGlobalSessionTokenFlag, *variationsUpsertGlobalApikeyTokenFlag, *variationsUpsertGlobalProjectSlugInputFlag)
			case "delete-global":
				endpoint = c.DeleteGlobal()
				data, err = variationsc.BuildDeleteGlobalPayload(*variationsDeleteGlobalVariationIDFlag, *variationsDeleteGlobalSessionTokenFlag, *variationsDeleteGlobalApikeyTokenFlag, *variationsDeleteGlobalProjectSlugInputFlag)
			case "list-global":
				endpoint = c.ListGlobal()
				data, err = variationsc.BuildListGlobalPayload(*variationsListGlobalSessionTokenFlag, *variationsListGlobalApikeyTokenFlag, *variationsListGlobalProjectSlugInputFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// aboutUsage displays the usage of the about command and its subcommands.
func aboutUsage() {
	fmt.Fprintln(os.Stderr, `Information about the Gram platform and its components.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] about COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    openapi: The OpenAPI description of the Gram API.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s about COMMAND --help\n", os.Args[0])
}
func aboutOpenapiUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] about openapi", os.Args[0])
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `The OpenAPI description of the Gram API.`)

	// Flags list

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `about openapi`)
}

// assetsUsage displays the usage of the assets command and its subcommands.
func assetsUsage() {
	fmt.Fprintln(os.Stderr, `Manages assets used by Gram projects.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] assets COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    serve-image: Serve an image from Gram.`)
	fmt.Fprintln(os.Stderr, `    upload-image: Upload an image to Gram.`)
	fmt.Fprintln(os.Stderr, `    upload-functions: Upload functions to Gram.`)
	fmt.Fprintln(os.Stderr, `    upload-open-ap-iv3: Upload an OpenAPI v3 document to Gram.`)
	fmt.Fprintln(os.Stderr, `    serve-open-ap-iv3: Serve an OpenAPIv3 asset from Gram.`)
	fmt.Fprintln(os.Stderr, `    list-assets: List all assets for a project.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s assets COMMAND --help\n", os.Args[0])
}
func assetsServeImageUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] assets serve-image", os.Args[0])
	fmt.Fprint(os.Stderr, " -id STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Serve an image from Gram.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -id STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `assets serve-image --id "Id aliquam culpa quis repudiandae." --session-token "Quibusdam voluptatem nulla nesciunt qui sapiente." --apikey-token "Vero modi et."`)
}

func assetsUploadImageUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] assets upload-image", os.Args[0])
	fmt.Fprint(os.Stderr, " -content-type STRING")
	fmt.Fprint(os.Stderr, " -content-length INT64")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -stream STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Upload an image to Gram.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -content-type STRING: `)
	fmt.Fprintln(os.Stderr, `    -content-length INT64: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -stream STRING: path to file containing the streamed request body`)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `assets upload-image --content-type "Temporibus voluptas sunt sunt." --content-length 7430994806038517016 --apikey-token "Aut ut placeat dolor maiores accusantium." --project-slug-input "Velit voluptate maxime ducimus expedita." --session-token "Dolorem sit magnam voluptas illum dolor laborum." --stream "goa.png"`)
}

func assetsUploadFunctionsUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] assets upload-functions", os.Args[0])
	fmt.Fprint(os.Stderr, " -content-type STRING")
	fmt.Fprint(os.Stderr, " -content-length INT64")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -stream STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Upload functions to Gram.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -content-type STRING: `)
	fmt.Fprintln(os.Stderr, `    -content-length INT64: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -stream STRING: path to file containing the streamed request body`)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `assets upload-functions --content-type "Odio aut dignissimos voluptatem est quaerat rerum." --content-length 2932588482119170699 --apikey-token "Veniam sint." --project-slug-input "Recusandae et eum." --session-token "Praesentium voluptate voluptas perferendis enim rerum." --stream "goa.png"`)
}

func assetsUploadOpenAPIv3Usage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] assets upload-open-ap-iv3", os.Args[0])
	fmt.Fprint(os.Stderr, " -content-type STRING")
	fmt.Fprint(os.Stderr, " -content-length INT64")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -stream STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Upload an OpenAPI v3 document to Gram.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -content-type STRING: `)
	fmt.Fprintln(os.Stderr, `    -content-length INT64: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -stream STRING: path to file containing the streamed request body`)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `assets upload-open-ap-iv3 --content-type "At omnis quidem et sed odit." --content-length 3099711254228402050 --apikey-token "Doloribus harum voluptas tenetur aperiam odit accusantium." --project-slug-input "Tenetur sed." --session-token "Odit sint autem animi voluptatum." --stream "goa.png"`)
}

func assetsServeOpenAPIv3Usage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] assets serve-open-ap-iv3", os.Args[0])
	fmt.Fprint(os.Stderr, " -id STRING")
	fmt.Fprint(os.Stderr, " -project-id STRING")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Serve an OpenAPIv3 asset from Gram.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -id STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-id STRING: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `assets serve-open-ap-iv3 --id "Et soluta illum quod." --project-id "Natus eaque." --apikey-token "Veritatis nihil illo repellendus quisquam." --session-token "Sit ut autem sapiente illo."`)
}

func assetsListAssetsUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] assets list-assets", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List all assets for a project.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `assets list-assets --session-token "Velit architecto odit." --project-slug-input "Exercitationem ut quisquam." --apikey-token "Tempore mollitia ut magni voluptas culpa."`)
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintln(os.Stderr, `Managed auth for gram producers and dashboard.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] auth COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    callback: Handles the authentication callback.`)
	fmt.Fprintln(os.Stderr, `    login: Proxies to auth login through speakeasy oidc.`)
	fmt.Fprintln(os.Stderr, `    switch-scopes: Switches the authentication scope to a different organization.`)
	fmt.Fprintln(os.Stderr, `    logout: Logs out the current user by clearing their session.`)
	fmt.Fprintln(os.Stderr, `    register: Register a new org for a user with their session information.`)
	fmt.Fprintln(os.Stderr, `    info: Provides information about the current authentication status.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s auth COMMAND --help\n", os.Args[0])
}
func authCallbackUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] auth callback", os.Args[0])
	fmt.Fprint(os.Stderr, " -code STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Handles the authentication callback.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -code STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `auth callback --code "Voluptatem praesentium omnis corporis ex tenetur."`)
}

func authLoginUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] auth login", os.Args[0])
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Proxies to auth login through speakeasy oidc.`)

	// Flags list

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `auth login`)
}

func authSwitchScopesUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] auth switch-scopes", os.Args[0])
	fmt.Fprint(os.Stderr, " -organization-id STRING")
	fmt.Fprint(os.Stderr, " -project-id STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Switches the authentication scope to a different organization.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -organization-id STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-id STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `auth switch-scopes --organization-id "Omnis aut est." --project-id "Vitae ducimus consequatur." --session-token "Est saepe ut reiciendis ut."`)
}

func authLogoutUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] auth logout", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Logs out the current user by clearing their session.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `auth logout --session-token "Officia adipisci est eius ullam."`)
}

func authRegisterUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] auth register", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Register a new org for a user with their session information.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `auth register --body '{
      "org_name": "Facilis rem dolor consectetur assumenda atque tempora."
   }' --session-token "Tempore iste perspiciatis."`)
}

func authInfoUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] auth info", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Provides information about the current authentication status.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `auth info --session-token "Tempore earum illum incidunt officia."`)
}

// chatUsage displays the usage of the chat command and its subcommands.
func chatUsage() {
	fmt.Fprintln(os.Stderr, `Managed chats for gram AI consumers.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] chat COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    list-chats: List all chats for a project`)
	fmt.Fprintln(os.Stderr, `    load-chat: Load a chat by its ID`)
	fmt.Fprintln(os.Stderr, `    credit-usage: Load a chat by its ID`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s chat COMMAND --help\n", os.Args[0])
}
func chatListChatsUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] chat list-chats", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List all chats for a project`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `chat list-chats --session-token "Id voluptatum repellat ut voluptatem suscipit neque." --project-slug-input "Quo minima laboriosam ipsam."`)
}

func chatLoadChatUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] chat load-chat", os.Args[0])
	fmt.Fprint(os.Stderr, " -id STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Load a chat by its ID`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -id STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `chat load-chat --id "Occaecati ratione quia rerum distinctio voluptas." --session-token "Suscipit et qui." --project-slug-input "Error ipsa harum necessitatibus."`)
}

func chatCreditUsageUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] chat credit-usage", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Load a chat by its ID`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `chat credit-usage --session-token "Debitis voluptatum et repellendus." --project-slug-input "Sunt voluptatem."`)
}

// deploymentsUsage displays the usage of the deployments command and its
// subcommands.
func deploymentsUsage() {
	fmt.Fprintln(os.Stderr, `Manages deployments of tools from upstream sources.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] deployments COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    get-deployment: Get a deployment by its ID.`)
	fmt.Fprintln(os.Stderr, `    get-latest-deployment: Get the latest deployment for a project.`)
	fmt.Fprintln(os.Stderr, `    create-deployment: Create a deployment to load tool definitions.`)
	fmt.Fprintln(os.Stderr, `    evolve: Create a new deployment with additional or updated tool sources.`)
	fmt.Fprintln(os.Stderr, `    redeploy: Redeploys an existing deployment.`)
	fmt.Fprintln(os.Stderr, `    list-deployments: List all deployments in descending order of creation.`)
	fmt.Fprintln(os.Stderr, `    get-deployment-logs: Get logs for a deployment.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s deployments COMMAND --help\n", os.Args[0])
}
func deploymentsGetDeploymentUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] deployments get-deployment", os.Args[0])
	fmt.Fprint(os.Stderr, " -id STRING")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Get a deployment by its ID.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -id STRING: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `deployments get-deployment --id "Praesentium rerum." --apikey-token "Sit illum eum odio minima eaque laborum." --session-token "Accusantium aliquam explicabo commodi inventore." --project-slug-input "Voluptatem dignissimos ut vel similique qui hic."`)
}

func deploymentsGetLatestDeploymentUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] deployments get-latest-deployment", os.Args[0])
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Get the latest deployment for a project.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `deployments get-latest-deployment --apikey-token "Possimus id doloremque optio aliquam." --session-token "Voluptatum autem debitis repudiandae ipsa velit." --project-slug-input "Et architecto nisi et quis."`)
}

func deploymentsCreateDeploymentUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] deployments create-deployment", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprint(os.Stderr, " -idempotency-key STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create a deployment to load tool definitions.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)
	fmt.Fprintln(os.Stderr, `    -idempotency-key STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `deployments create-deployment --body '{
      "external_id": "bc5f4a555e933e6861d12edba4c2d87ef6caf8e6",
      "external_url": "Dolorem quibusdam animi.",
      "github_pr": "1234",
      "github_repo": "speakeasyapi/gram",
      "github_sha": "f33e693e9e12552043bc0ec5c37f1b8a9e076161",
      "openapiv3_assets": [
         {
            "asset_id": "Molestiae nulla aut.",
            "name": "Laboriosam iusto ea est et.",
            "slug": "15w"
         },
         {
            "asset_id": "Molestiae nulla aut.",
            "name": "Laboriosam iusto ea est et.",
            "slug": "15w"
         }
      ],
      "packages": [
         {
            "name": "Qui nisi aut.",
            "version": "Totam adipisci id ratione ut ex."
         },
         {
            "name": "Qui nisi aut.",
            "version": "Totam adipisci id ratione ut ex."
         },
         {
            "name": "Qui nisi aut.",
            "version": "Totam adipisci id ratione ut ex."
         }
      ]
   }' --apikey-token "Fuga et sunt tempora qui et aliquam." --session-token "Ipsam asperiores." --project-slug-input "Impedit inventore voluptatem laboriosam neque." --idempotency-key "01jqq0ajmb4qh9eppz48dejr2m"`)
}

func deploymentsEvolveUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] deployments evolve", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create a new deployment with additional or updated tool sources.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `deployments evolve --body '{
      "deployment_id": "Et tempora.",
      "exclude_openapiv3_assets": [
         "Fugiat sed aut dolor ad ut.",
         "Magnam rerum."
      ],
      "exclude_packages": [
         "Est molestiae.",
         "Possimus modi ipsa iusto corrupti officia asperiores.",
         "Beatae vel autem voluptatem aliquid reiciendis."
      ],
      "upsert_openapiv3_assets": [
         {
            "asset_id": "Molestiae nulla aut.",
            "name": "Laboriosam iusto ea est et.",
            "slug": "15w"
         },
         {
            "asset_id": "Molestiae nulla aut.",
            "name": "Laboriosam iusto ea est et.",
            "slug": "15w"
         }
      ],
      "upsert_packages": [
         {
            "name": "Velit aspernatur occaecati ea illum et eum.",
            "version": "Blanditiis officia corporis."
         },
         {
            "name": "Velit aspernatur occaecati ea illum et eum.",
            "version": "Blanditiis officia corporis."
         }
      ]
   }' --apikey-token "Nemo soluta ipsam provident." --session-token "Vitae in dolorem." --project-slug-input "Tempore quisquam."`)
}

func deploymentsRedeployUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] deployments redeploy", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Redeploys an existing deployment.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `deployments redeploy --body '{
      "deployment_id": "Et ipsa."
   }' --apikey-token "Est ipsam occaecati accusamus harum qui deleniti." --session-token "Qui cumque eius voluptatem qui dolorem soluta." --project-slug-input "Quo ea."`)
}

func deploymentsListDeploymentsUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] deployments list-deployments", os.Args[0])
	fmt.Fprint(os.Stderr, " -cursor STRING")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List all deployments in descending order of creation.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -cursor STRING: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `deployments list-deployments --cursor "Veritatis esse eos fuga natus facilis illo." --apikey-token "Recusandae dolor perferendis dicta voluptas ut." --session-token "Dolor quae." --project-slug-input "Iste est esse voluptas."`)
}

func deploymentsGetDeploymentLogsUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] deployments get-deployment-logs", os.Args[0])
	fmt.Fprint(os.Stderr, " -deployment-id STRING")
	fmt.Fprint(os.Stderr, " -cursor STRING")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Get logs for a deployment.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -deployment-id STRING: `)
	fmt.Fprintln(os.Stderr, `    -cursor STRING: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `deployments get-deployment-logs --deployment-id "Consequatur ea nam." --cursor "Et mollitia illum aperiam." --apikey-token "Alias nostrum enim id repudiandae." --session-token "Quibusdam quia et et dolor et." --project-slug-input "Inventore sunt."`)
}

// domainsUsage displays the usage of the domains command and its subcommands.
func domainsUsage() {
	fmt.Fprintln(os.Stderr, `Manage custom domains for gram.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] domains COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    get-domain: Get the custom domain for a project`)
	fmt.Fprintln(os.Stderr, `    create-domain: Create a custom domain for a organization`)
	fmt.Fprintln(os.Stderr, `    delete-domain: Delete a custom domain`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s domains COMMAND --help\n", os.Args[0])
}
func domainsGetDomainUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] domains get-domain", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Get the custom domain for a project`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `domains get-domain --session-token "Odit officia velit occaecati autem est itaque." --project-slug-input "Veniam explicabo et est aut cumque alias."`)
}

func domainsCreateDomainUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] domains create-domain", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create a custom domain for a organization`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `domains create-domain --body '{
      "domain": "Quam deleniti occaecati."
   }' --session-token "Autem non dolor minima." --project-slug-input "Enim aliquam quia debitis odio ex."`)
}

func domainsDeleteDomainUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] domains delete-domain", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Delete a custom domain`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `domains delete-domain --session-token "Aut animi ut nulla." --project-slug-input "Ut aut."`)
}

// environmentsUsage displays the usage of the environments command and its
// subcommands.
func environmentsUsage() {
	fmt.Fprintln(os.Stderr, `Managing toolset environments.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] environments COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    create-environment: Create a new environment`)
	fmt.Fprintln(os.Stderr, `    list-environments: List all environments for an organization`)
	fmt.Fprintln(os.Stderr, `    update-environment: Update an environment`)
	fmt.Fprintln(os.Stderr, `    delete-environment: Delete an environment`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s environments COMMAND --help\n", os.Args[0])
}
func environmentsCreateEnvironmentUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] environments create-environment", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create a new environment`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `environments create-environment --body '{
      "description": "Quidem sint illum ut blanditiis.",
      "entries": [
         {
            "name": "Facilis dolor vitae exercitationem.",
            "value": "Aut suscipit."
         },
         {
            "name": "Facilis dolor vitae exercitationem.",
            "value": "Aut suscipit."
         },
         {
            "name": "Facilis dolor vitae exercitationem.",
            "value": "Aut suscipit."
         }
      ],
      "name": "Enim accusantium nisi est enim.",
      "organization_id": "Sed doloremque et perspiciatis rerum aliquam id."
   }' --session-token "Numquam exercitationem earum vel." --project-slug-input "Culpa beatae cupiditate."`)
}

func environmentsListEnvironmentsUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] environments list-environments", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List all environments for an organization`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `environments list-environments --session-token "Aut qui reprehenderit." --project-slug-input "Sed in ea."`)
}

func environmentsUpdateEnvironmentUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] environments update-environment", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -slug STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Update an environment`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -slug STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `environments update-environment --body '{
      "description": "Accusamus illum aut quo voluptas.",
      "entries_to_remove": [
         "Commodi sint.",
         "Et ea qui.",
         "Praesentium est amet doloremque iste temporibus omnis.",
         "Voluptas quam aut qui."
      ],
      "entries_to_update": [
         {
            "name": "Facilis dolor vitae exercitationem.",
            "value": "Aut suscipit."
         },
         {
            "name": "Facilis dolor vitae exercitationem.",
            "value": "Aut suscipit."
         }
      ],
      "name": "Culpa nobis fuga quibusdam maxime eum natus."
   }' --slug "qpx" --session-token "Sed voluptatum aspernatur voluptatem alias laudantium ut." --project-slug-input "Est et."`)
}

func environmentsDeleteEnvironmentUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] environments delete-environment", os.Args[0])
	fmt.Fprint(os.Stderr, " -slug STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Delete an environment`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -slug STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `environments delete-environment --slug "evo" --session-token "Ad vitae ut." --project-slug-input "Molestiae repellat aperiam sed dolorem."`)
}

// instancesUsage displays the usage of the instances command and its
// subcommands.
func instancesUsage() {
	fmt.Fprintln(os.Stderr, `Consumer APIs for interacting with all relevant data for an instance of a toolset and environment.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] instances COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    get-instance: Load all relevant data for an instance of a toolset and environment`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s instances COMMAND --help\n", os.Args[0])
}
func instancesGetInstanceUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] instances get-instance", os.Args[0])
	fmt.Fprint(os.Stderr, " -toolset-slug STRING")
	fmt.Fprint(os.Stderr, " -environment-slug STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Load all relevant data for an instance of a toolset and environment`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -toolset-slug STRING: `)
	fmt.Fprintln(os.Stderr, `    -environment-slug STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `instances get-instance --toolset-slug "03x" --environment-slug "ai5" --session-token "Ipsum qui." --project-slug-input "Quisquam nam dolorum." --apikey-token "Dolorem incidunt voluptatibus sunt."`)
}

// integrationsUsage displays the usage of the integrations command and its
// subcommands.
func integrationsUsage() {
	fmt.Fprintln(os.Stderr, `Explore third-party tools in Gram.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] integrations COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    get: Get a third-party integration by ID or name.`)
	fmt.Fprintln(os.Stderr, `    list: List available third-party integrations.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s integrations COMMAND --help\n", os.Args[0])
}
func integrationsGetUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] integrations get", os.Args[0])
	fmt.Fprint(os.Stderr, " -id STRING")
	fmt.Fprint(os.Stderr, " -name STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Get a third-party integration by ID or name.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -id STRING: `)
	fmt.Fprintln(os.Stderr, `    -name STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `integrations get --id "Dignissimos voluptate aut quia nobis." --name "Facilis omnis et distinctio culpa et." --session-token "Tenetur debitis doloribus provident eligendi facere." --project-slug-input "Fuga esse omnis quos atque."`)
}

func integrationsListUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] integrations list", os.Args[0])
	fmt.Fprint(os.Stderr, " -keywords JSON")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List available third-party integrations.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -keywords JSON: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `integrations list --keywords '[
      "he9",
      "8ed",
      "9cz"
   ]' --session-token "Qui tempore." --project-slug-input "Mollitia pariatur vitae assumenda voluptate."`)
}

// keysUsage displays the usage of the keys command and its subcommands.
func keysUsage() {
	fmt.Fprintln(os.Stderr, `Managing system api keys.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] keys COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    create-key: Create a new api key`)
	fmt.Fprintln(os.Stderr, `    list-keys: List all api keys for an organization`)
	fmt.Fprintln(os.Stderr, `    revoke-key: Revoke a api key`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s keys COMMAND --help\n", os.Args[0])
}
func keysCreateKeyUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] keys create-key", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create a new api key`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `keys create-key --body '{
      "name": "Aliquam reiciendis.",
      "scopes": [
         "Ut asperiores suscipit illum delectus sit.",
         "Debitis aliquam ut corporis.",
         "Repudiandae quidem est quaerat facere eaque doloribus."
      ]
   }' --session-token "Nihil delectus impedit enim repellat reprehenderit."`)
}

func keysListKeysUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] keys list-keys", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List all api keys for an organization`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `keys list-keys --session-token "Libero numquam animi ut."`)
}

func keysRevokeKeyUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] keys revoke-key", os.Args[0])
	fmt.Fprint(os.Stderr, " -id STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Revoke a api key`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -id STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `keys revoke-key --id "Illum ea." --session-token "Accusamus nihil porro fugiat ut."`)
}

// packagesUsage displays the usage of the packages command and its subcommands.
func packagesUsage() {
	fmt.Fprintln(os.Stderr, `Manages packages in Gram.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] packages COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    create-package: Create a new package for a project.`)
	fmt.Fprintln(os.Stderr, `    update-package: Update package details.`)
	fmt.Fprintln(os.Stderr, `    list-packages: List all packages for a project.`)
	fmt.Fprintln(os.Stderr, `    list-versions: List published versions of a package.`)
	fmt.Fprintln(os.Stderr, `    publish: Publish a new version of a package.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s packages COMMAND --help\n", os.Args[0])
}
func packagesCreatePackageUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] packages create-package", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create a new package for a project.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `packages create-package --body '{
      "description": "58f",
      "image_asset_id": "j63",
      "keywords": [
         "Aut ab ullam architecto saepe et.",
         "Amet qui odit consectetur aut dolores enim.",
         "Dolore blanditiis amet quia et ex."
      ],
      "name": "c2e",
      "summary": "dbw",
      "title": "tlw",
      "url": "vjo"
   }' --apikey-token "Exercitationem fuga et est atque." --session-token "Voluptas incidunt quam nam." --project-slug-input "Molestias consequuntur deserunt debitis qui eaque quia."`)
}

func packagesUpdatePackageUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] packages update-package", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Update package details.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `packages update-package --body '{
      "description": "p06",
      "id": "9vj",
      "image_asset_id": "538",
      "keywords": [
         "Ex dolorem itaque fugiat nihil deserunt magni.",
         "Est dolorem.",
         "Dignissimos et occaecati atque rerum."
      ],
      "summary": "01x",
      "title": "sg3",
      "url": "yd5"
   }' --apikey-token "Nulla ut necessitatibus." --session-token "Ratione fugit." --project-slug-input "Ut magni et debitis perferendis blanditiis."`)
}

func packagesListPackagesUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] packages list-packages", os.Args[0])
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List all packages for a project.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `packages list-packages --apikey-token "Dolore repellendus." --session-token "Dicta autem aut quo cupiditate sit commodi." --project-slug-input "Velit neque qui ratione."`)
}

func packagesListVersionsUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] packages list-versions", os.Args[0])
	fmt.Fprint(os.Stderr, " -name STRING")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List published versions of a package.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -name STRING: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `packages list-versions --name "Voluptatibus laborum et." --apikey-token "Voluptatem nemo veniam doloribus officia." --session-token "Veritatis facilis asperiores et." --project-slug-input "Illo maxime voluptates."`)
}

func packagesPublishUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] packages publish", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Publish a new version of a package.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `packages publish --body '{
      "deployment_id": "Modi nihil repudiandae accusantium modi.",
      "name": "Sit et suscipit ipsum eos.",
      "version": "Ut eos aliquid eaque eum.",
      "visibility": "private"
   }' --apikey-token "Consectetur omnis explicabo sed." --session-token "Asperiores laudantium commodi inventore a nobis impedit." --project-slug-input "Est velit delectus qui et est."`)
}

// projectsUsage displays the usage of the projects command and its subcommands.
func projectsUsage() {
	fmt.Fprintln(os.Stderr, `Manages projects in Gram.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] projects COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    create-project: Create a new project.`)
	fmt.Fprintln(os.Stderr, `    list-projects: List all projects for an organization.`)
	fmt.Fprintln(os.Stderr, `    set-logo: Uploads a logo for a project.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s projects COMMAND --help\n", os.Args[0])
}
func projectsCreateProjectUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] projects create-project", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create a new project.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `projects create-project --body '{
      "name": "ck7",
      "organization_id": "Nulla non qui."
   }' --apikey-token "Ea tempore." --session-token "Voluptatum aut minima debitis quisquam similique."`)
}

func projectsListProjectsUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] projects list-projects", os.Args[0])
	fmt.Fprint(os.Stderr, " -organization-id STRING")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List all projects for an organization.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -organization-id STRING: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `projects list-projects --organization-id "Eaque debitis eum ad qui." --apikey-token "Rerum sed architecto et temporibus in officia." --session-token "Culpa modi ut voluptatem."`)
}

func projectsSetLogoUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] projects set-logo", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Uploads a logo for a project.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `projects set-logo --body '{
      "asset_id": "Fugiat possimus."
   }' --apikey-token "Amet consectetur nulla autem et." --session-token "Odio numquam et sint maxime ut." --project-slug-input "Officiis iste sapiente omnis."`)
}

// slackUsage displays the usage of the slack command and its subcommands.
func slackUsage() {
	fmt.Fprintln(os.Stderr, `Auth and interactions for the Gram Slack App.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] slack COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    callback: Handles the authentication callback.`)
	fmt.Fprintln(os.Stderr, `    login: Proxies to auth login through speakeasy oidc.`)
	fmt.Fprintln(os.Stderr, `    get-slack-connection: get slack connection for an organization and project.`)
	fmt.Fprintln(os.Stderr, `    update-slack-connection: update slack connection for an organization and project.`)
	fmt.Fprintln(os.Stderr, `    delete-slack-connection: delete slack connection for an organization and project.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s slack COMMAND --help\n", os.Args[0])
}
func slackCallbackUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] slack callback", os.Args[0])
	fmt.Fprint(os.Stderr, " -state STRING")
	fmt.Fprint(os.Stderr, " -code STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Handles the authentication callback.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -state STRING: `)
	fmt.Fprintln(os.Stderr, `    -code STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `slack callback --state "Consequatur facilis aut." --code "Voluptate sit qui."`)
}

func slackLoginUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] slack login", os.Args[0])
	fmt.Fprint(os.Stderr, " -project-slug STRING")
	fmt.Fprint(os.Stderr, " -return-url STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Proxies to auth login through speakeasy oidc.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -project-slug STRING: `)
	fmt.Fprintln(os.Stderr, `    -return-url STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `slack login --project-slug "Exercitationem velit repellat autem." --return-url "Fugiat ipsam enim." --session-token "Enim et."`)
}

func slackGetSlackConnectionUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] slack get-slack-connection", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `get slack connection for an organization and project.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `slack get-slack-connection --session-token "Aut harum nobis atque voluptas nulla." --project-slug-input "Et et."`)
}

func slackUpdateSlackConnectionUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] slack update-slack-connection", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `update slack connection for an organization and project.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `slack update-slack-connection --body '{
      "default_toolset_slug": "Error et soluta enim."
   }' --session-token "Nobis facilis atque cumque perferendis accusantium." --project-slug-input "Vel est vel quibusdam excepturi at placeat."`)
}

func slackDeleteSlackConnectionUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] slack delete-slack-connection", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `delete slack connection for an organization and project.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `slack delete-slack-connection --session-token "Quo suscipit animi aut dignissimos sequi." --project-slug-input "Voluptatem a aut placeat occaecati."`)
}

// templatesUsage displays the usage of the templates command and its
// subcommands.
func templatesUsage() {
	fmt.Fprintln(os.Stderr, `Manages re-usable prompt templates and higher-order tools for a project.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] templates COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    create-template: Create a new prompt template.`)
	fmt.Fprintln(os.Stderr, `    update-template: Update a prompt template.`)
	fmt.Fprintln(os.Stderr, `    get-template: Get prompt template by its ID or name.`)
	fmt.Fprintln(os.Stderr, `    list-templates: List available prompt template.`)
	fmt.Fprintln(os.Stderr, `    delete-template: Delete prompt template by its ID or name.`)
	fmt.Fprintln(os.Stderr, `    render-template-by-id: Render a prompt template by ID with provided input data.`)
	fmt.Fprintln(os.Stderr, `    render-template: Render a prompt template directly with all template fields provided.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s templates COMMAND --help\n", os.Args[0])
}
func templatesCreateTemplateUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] templates create-template", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create a new prompt template.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `templates create-template --body '{
      "arguments": "{\"name\":\"example\",\"email\":\"mail@example.com\"}",
      "description": "Velit sint.",
      "engine": "mustache",
      "kind": "higher_order_tool",
      "name": "er5",
      "prompt": "Quasi ex qui rerum.",
      "tools_hint": [
         "Rem aut et explicabo ut.",
         "Sequi deserunt reiciendis vero aut.",
         "Occaecati et qui non qui sunt."
      ]
   }' --apikey-token "Hic molestiae eligendi atque accusantium sed." --session-token "Natus tempora sit enim fugiat." --project-slug-input "Qui minima asperiores occaecati."`)
}

func templatesUpdateTemplateUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] templates update-template", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Update a prompt template.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `templates update-template --body '{
      "arguments": "{\"name\":\"example\",\"email\":\"mail@example.com\"}",
      "description": "Expedita quae unde ab omnis similique et.",
      "engine": "mustache",
      "id": "Consequatur qui nam placeat sunt magni maxime.",
      "kind": "higher_order_tool",
      "prompt": "Sint alias soluta doloremque voluptatum.",
      "tools_hint": [
         "Consequuntur eveniet et.",
         "Sunt repellendus cum dolorum id expedita.",
         "Sed dolores perferendis ut."
      ]
   }' --apikey-token "Quod labore eos odio et." --session-token "Perferendis sint." --project-slug-input "Cumque magnam."`)
}

func templatesGetTemplateUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] templates get-template", os.Args[0])
	fmt.Fprint(os.Stderr, " -id STRING")
	fmt.Fprint(os.Stderr, " -name STRING")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Get prompt template by its ID or name.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -id STRING: `)
	fmt.Fprintln(os.Stderr, `    -name STRING: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `templates get-template --id "Architecto ut commodi natus ipsa delectus repudiandae." --name "Cum debitis quia sit." --apikey-token "Omnis enim officia." --session-token "Quibusdam perspiciatis veniam quasi dolorem molestiae et." --project-slug-input "Enim odio reprehenderit."`)
}

func templatesListTemplatesUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] templates list-templates", os.Args[0])
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List available prompt template.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `templates list-templates --apikey-token "Quibusdam quae ex labore ut optio." --session-token "Dicta velit laborum hic aut." --project-slug-input "Alias nulla alias similique temporibus delectus."`)
}

func templatesDeleteTemplateUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] templates delete-template", os.Args[0])
	fmt.Fprint(os.Stderr, " -id STRING")
	fmt.Fprint(os.Stderr, " -name STRING")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Delete prompt template by its ID or name.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -id STRING: `)
	fmt.Fprintln(os.Stderr, `    -name STRING: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `templates delete-template --id "Nostrum excepturi libero et aperiam." --name "Aspernatur laboriosam vero accusantium illum ut." --apikey-token "Quis velit quas sit qui sapiente et." --session-token "Sit porro dolor." --project-slug-input "Rerum qui dolores accusantium soluta qui quia."`)
}

func templatesRenderTemplateByIDUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] templates render-template-by-id", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -id STRING")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Render a prompt template by ID with provided input data.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -id STRING: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `templates render-template-by-id --body '{
      "arguments": {
         "Non et sunt modi est.": "Amet numquam excepturi.",
         "Placeat totam et.": "Quia et necessitatibus.",
         "Ut ipsa accusantium corrupti dolores nemo nesciunt.": "Voluptatem incidunt pariatur omnis illum et officiis."
      }
   }' --id "Id qui sed sed qui velit eligendi." --apikey-token "Quis culpa molestiae eos." --session-token "Omnis sunt nesciunt impedit atque dolor dignissimos." --project-slug-input "Qui officiis aut tenetur quis pariatur ipsum."`)
}

func templatesRenderTemplateUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] templates render-template", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Render a prompt template directly with all template fields provided.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `templates render-template --body '{
      "arguments": {
         "Sed cumque quo expedita laborum nulla.": "Aut laboriosam tempora et facilis impedit."
      },
      "engine": "mustache",
      "kind": "prompt",
      "prompt": "Ullam at magnam."
   }' --apikey-token "Voluptas pariatur error." --session-token "Quia est voluptas." --project-slug-input "Voluptatem molestias dolore ducimus reiciendis sed nostrum."`)
}

// toolsUsage displays the usage of the tools command and its subcommands.
func toolsUsage() {
	fmt.Fprintln(os.Stderr, `Dashboard API for interacting with tools.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] tools COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    list-tools: List all tools for a project`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s tools COMMAND --help\n", os.Args[0])
}
func toolsListToolsUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] tools list-tools", os.Args[0])
	fmt.Fprint(os.Stderr, " -cursor STRING")
	fmt.Fprint(os.Stderr, " -limit INT32")
	fmt.Fprint(os.Stderr, " -deployment-id STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List all tools for a project`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -cursor STRING: `)
	fmt.Fprintln(os.Stderr, `    -limit INT32: `)
	fmt.Fprintln(os.Stderr, `    -deployment-id STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `tools list-tools --cursor "Expedita ex omnis accusantium velit." --limit 158702552 --deployment-id "Dolores unde nobis ut at rem facilis." --session-token "Et iste sint unde perspiciatis." --project-slug-input "Aut et aliquam."`)
}

// toolsetsUsage displays the usage of the toolsets command and its subcommands.
func toolsetsUsage() {
	fmt.Fprintln(os.Stderr, `Managed toolsets for gram AI consumers.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] toolsets COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    create-toolset: Create a new toolset with associated tools`)
	fmt.Fprintln(os.Stderr, `    list-toolsets: List all toolsets for a project`)
	fmt.Fprintln(os.Stderr, `    update-toolset: Update a toolset's properties including name, description, and HTTP tools`)
	fmt.Fprintln(os.Stderr, `    delete-toolset: Delete a toolset by its ID`)
	fmt.Fprintln(os.Stderr, `    get-toolset: Get detailed information about a toolset including full HTTP tool definitions`)
	fmt.Fprintln(os.Stderr, `    check-mcp-slug-availability: Check if a MCP slug is available`)
	fmt.Fprintln(os.Stderr, `    add-externaloauth-server: Associate an external OAuth server with a toolset`)
	fmt.Fprintln(os.Stderr, `    removeoauth-server: Remove OAuth server association from a toolset`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s toolsets COMMAND --help\n", os.Args[0])
}
func toolsetsCreateToolsetUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] toolsets create-toolset", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create a new toolset with associated tools`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `toolsets create-toolset --body '{
      "default_environment_slug": "okx",
      "description": "Velit eligendi et cumque animi.",
      "http_tool_names": [
         "Qui praesentium numquam quisquam quisquam et.",
         "Maxime voluptate hic quia eius et vel.",
         "Quis repudiandae ipsam."
      ],
      "name": "Quis nostrum unde reiciendis."
   }' --session-token "Pariatur velit." --project-slug-input "Odio architecto nihil veritatis libero et."`)
}

func toolsetsListToolsetsUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] toolsets list-toolsets", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List all toolsets for a project`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `toolsets list-toolsets --session-token "Minima quis." --project-slug-input "Similique ullam sit rerum quas."`)
}

func toolsetsUpdateToolsetUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] toolsets update-toolset", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -slug STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Update a toolset's properties including name, description, and HTTP tools`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -slug STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `toolsets update-toolset --body '{
      "custom_domain_id": "Illum sunt.",
      "default_environment_slug": "f9t",
      "description": "Et recusandae eius.",
      "http_tool_names": [
         "Eos et libero animi.",
         "Omnis veniam similique.",
         "Atque autem."
      ],
      "mcp_enabled": false,
      "mcp_is_public": false,
      "mcp_slug": "3zv",
      "name": "Dolores pariatur doloribus.",
      "prompt_template_names": [
         "Odit amet beatae impedit id dolores molestiae.",
         "Rerum voluptatem ad ea.",
         "Et eius et.",
         "Nesciunt quam."
      ]
   }' --slug "b8s" --session-token "Nihil voluptatem unde culpa dolorem minima sequi." --project-slug-input "Iste excepturi perspiciatis."`)
}

func toolsetsDeleteToolsetUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] toolsets delete-toolset", os.Args[0])
	fmt.Fprint(os.Stderr, " -slug STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Delete a toolset by its ID`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -slug STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `toolsets delete-toolset --slug "0lc" --session-token "Enim dolorem voluptatem facilis asperiores magnam." --project-slug-input "Facere illum."`)
}

func toolsetsGetToolsetUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] toolsets get-toolset", os.Args[0])
	fmt.Fprint(os.Stderr, " -slug STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Get detailed information about a toolset including full HTTP tool definitions`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -slug STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `toolsets get-toolset --slug "8hd" --session-token "Libero omnis voluptatum nihil vel labore officiis." --project-slug-input "Facilis alias pariatur voluptas dolores suscipit rem."`)
}

func toolsetsCheckMCPSlugAvailabilityUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] toolsets check-mcp-slug-availability", os.Args[0])
	fmt.Fprint(os.Stderr, " -slug STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Check if a MCP slug is available`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -slug STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `toolsets check-mcp-slug-availability --slug "cep" --session-token "Dolorem corporis asperiores omnis." --project-slug-input "Corrupti beatae dolore dignissimos officiis assumenda."`)
}

func toolsetsAddExternalOAuthServerUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] toolsets add-externaloauth-server", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -slug STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Associate an external OAuth server with a toolset`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -slug STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `toolsets add-externaloauth-server --body '{
      "external_oauth_server": {
         "metadata": "Deserunt eaque nostrum impedit ut et ut.",
         "slug": "q1j"
      }
   }' --slug "hjz" --session-token "Amet quasi sit et ut animi dolores." --project-slug-input "Eum sequi qui sint."`)
}

func toolsetsRemoveOAuthServerUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] toolsets removeoauth-server", os.Args[0])
	fmt.Fprint(os.Stderr, " -slug STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Remove OAuth server association from a toolset`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -slug STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `toolsets removeoauth-server --slug "14o" --session-token "Architecto quaerat eaque et consequatur pariatur aut." --project-slug-input "Atque sed fugiat."`)
}

// usageUsage displays the usage of the usage command and its subcommands.
func usageUsage() {
	fmt.Fprintln(os.Stderr, `Read usage for gram.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] usage COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    get-period-usage: Get the usage for a project for a given period`)
	fmt.Fprintln(os.Stderr, `    get-usage-tiers: Get the usage tiers`)
	fmt.Fprintln(os.Stderr, `    create-customer-session: Create a customer session for the user`)
	fmt.Fprintln(os.Stderr, `    create-checkout: Create a checkout link for upgrading to the business plan`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s usage COMMAND --help\n", os.Args[0])
}
func usageGetPeriodUsageUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] usage get-period-usage", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Get the usage for a project for a given period`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `usage get-period-usage --session-token "Tempora harum." --project-slug-input "Aspernatur asperiores enim repellendus."`)
}

func usageGetUsageTiersUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] usage get-usage-tiers", os.Args[0])
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Get the usage tiers`)

	// Flags list

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `usage get-usage-tiers`)
}

func usageCreateCustomerSessionUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] usage create-customer-session", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create a customer session for the user`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `usage create-customer-session --session-token "Officia sed." --project-slug-input "Illo voluptatem aliquid expedita debitis et occaecati."`)
}

func usageCreateCheckoutUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] usage create-checkout", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create a checkout link for upgrading to the business plan`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `usage create-checkout --session-token "Accusantium blanditiis reprehenderit." --project-slug-input "Rerum temporibus et officiis nihil aut voluptate."`)
}

// variationsUsage displays the usage of the variations command and its
// subcommands.
func variationsUsage() {
	fmt.Fprintln(os.Stderr, `Manage variations of tools.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] variations COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    upsert-global: Create or update a globally defined tool variation.`)
	fmt.Fprintln(os.Stderr, `    delete-global: Create or update a globally defined tool variation.`)
	fmt.Fprintln(os.Stderr, `    list-global: List globally defined tool variations.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s variations COMMAND --help\n", os.Args[0])
}
func variationsUpsertGlobalUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] variations upsert-global", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create or update a globally defined tool variation.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `variations upsert-global --body '{
      "confirm": "never",
      "confirm_prompt": "Consectetur dolorem.",
      "description": "Aperiam dolores.",
      "name": "Excepturi voluptatem quis unde.",
      "src_tool_name": "Tempore at.",
      "summarizer": "Sequi minus molestiae ad reprehenderit sint.",
      "summary": "Sint error ea saepe.",
      "tags": [
         "Consequatur quis reprehenderit commodi.",
         "Sunt quasi ut fugiat aperiam qui maxime."
      ]
   }' --session-token "Aut earum qui odit illum blanditiis ea." --apikey-token "Voluptatum aliquid similique." --project-slug-input "Voluptas ex aperiam ut."`)
}

func variationsDeleteGlobalUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] variations delete-global", os.Args[0])
	fmt.Fprint(os.Stderr, " -variation-id STRING")
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create or update a globally defined tool variation.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -variation-id STRING: `)
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `variations delete-global --variation-id "Ut ea illum qui." --session-token "Eius nobis dicta ratione et." --apikey-token "Nam illum impedit." --project-slug-input "Et magnam consectetur saepe sed libero."`)
}

func variationsListGlobalUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] variations list-global", os.Args[0])
	fmt.Fprint(os.Stderr, " -session-token STRING")
	fmt.Fprint(os.Stderr, " -apikey-token STRING")
	fmt.Fprint(os.Stderr, " -project-slug-input STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `List globally defined tool variations.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -session-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -apikey-token STRING: `)
	fmt.Fprintln(os.Stderr, `    -project-slug-input STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `variations list-global --session-token "Dolores at." --apikey-token "Cumque dolor molestiae aliquid." --project-slug-input "Magni et laborum consequatur omnis."`)
}
