// Code generated by goa v3.22.2, DO NOT EDIT.
//
// templates HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	templates "github.com/speakeasy-api/gram/server/gen/templates"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateTemplateRequest instantiates a HTTP request object with method
// and path set to call the "templates" service "createTemplate" endpoint
func (c *Client) BuildCreateTemplateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateTemplateTemplatesPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("templates", "createTemplate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateTemplateRequest returns an encoder for requests sent to the
// templates createTemplate server.
func EncodeCreateTemplateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*templates.CreateTemplatePayload)
		if !ok {
			return goahttp.ErrInvalidType("templates", "createTemplate", "*templates.CreateTemplatePayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewCreateTemplateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("templates", "createTemplate", err)
		}
		return nil
	}
}

// DecodeCreateTemplateResponse returns a decoder for responses returned by the
// templates createTemplate endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateTemplateResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeCreateTemplateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateTemplateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "createTemplate", err)
			}
			err = ValidateCreateTemplateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "createTemplate", err)
			}
			res := NewCreateTemplateCreatePromptTemplateResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CreateTemplateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "createTemplate", err)
			}
			err = ValidateCreateTemplateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "createTemplate", err)
			}
			return nil, NewCreateTemplateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CreateTemplateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "createTemplate", err)
			}
			err = ValidateCreateTemplateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "createTemplate", err)
			}
			return nil, NewCreateTemplateForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CreateTemplateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "createTemplate", err)
			}
			err = ValidateCreateTemplateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "createTemplate", err)
			}
			return nil, NewCreateTemplateBadRequest(&body)
		case http.StatusNotFound:
			var (
				body CreateTemplateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "createTemplate", err)
			}
			err = ValidateCreateTemplateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "createTemplate", err)
			}
			return nil, NewCreateTemplateNotFound(&body)
		case http.StatusConflict:
			var (
				body CreateTemplateConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "createTemplate", err)
			}
			err = ValidateCreateTemplateConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "createTemplate", err)
			}
			return nil, NewCreateTemplateConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body CreateTemplateUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "createTemplate", err)
			}
			err = ValidateCreateTemplateUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "createTemplate", err)
			}
			return nil, NewCreateTemplateUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body CreateTemplateInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "createTemplate", err)
			}
			err = ValidateCreateTemplateInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "createTemplate", err)
			}
			return nil, NewCreateTemplateInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body CreateTemplateInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("templates", "createTemplate", err)
				}
				err = ValidateCreateTemplateInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("templates", "createTemplate", err)
				}
				return nil, NewCreateTemplateInvariantViolation(&body)
			case "unexpected":
				var (
					body CreateTemplateUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("templates", "createTemplate", err)
				}
				err = ValidateCreateTemplateUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("templates", "createTemplate", err)
				}
				return nil, NewCreateTemplateUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("templates", "createTemplate", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body CreateTemplateGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "createTemplate", err)
			}
			err = ValidateCreateTemplateGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "createTemplate", err)
			}
			return nil, NewCreateTemplateGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("templates", "createTemplate", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateTemplateRequest instantiates a HTTP request object with method
// and path set to call the "templates" service "updateTemplate" endpoint
func (c *Client) BuildUpdateTemplateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateTemplateTemplatesPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("templates", "updateTemplate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateTemplateRequest returns an encoder for requests sent to the
// templates updateTemplate server.
func EncodeUpdateTemplateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*templates.UpdateTemplatePayload)
		if !ok {
			return goahttp.ErrInvalidType("templates", "updateTemplate", "*templates.UpdateTemplatePayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewUpdateTemplateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("templates", "updateTemplate", err)
		}
		return nil
	}
}

// DecodeUpdateTemplateResponse returns a decoder for responses returned by the
// templates updateTemplate endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdateTemplateResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeUpdateTemplateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateTemplateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "updateTemplate", err)
			}
			err = ValidateUpdateTemplateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "updateTemplate", err)
			}
			res := NewUpdateTemplateUpdatePromptTemplateResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateTemplateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "updateTemplate", err)
			}
			err = ValidateUpdateTemplateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "updateTemplate", err)
			}
			return nil, NewUpdateTemplateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UpdateTemplateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "updateTemplate", err)
			}
			err = ValidateUpdateTemplateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "updateTemplate", err)
			}
			return nil, NewUpdateTemplateForbidden(&body)
		case http.StatusBadRequest:
			var (
				body UpdateTemplateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "updateTemplate", err)
			}
			err = ValidateUpdateTemplateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "updateTemplate", err)
			}
			return nil, NewUpdateTemplateBadRequest(&body)
		case http.StatusNotFound:
			var (
				body UpdateTemplateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "updateTemplate", err)
			}
			err = ValidateUpdateTemplateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "updateTemplate", err)
			}
			return nil, NewUpdateTemplateNotFound(&body)
		case http.StatusConflict:
			var (
				body UpdateTemplateConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "updateTemplate", err)
			}
			err = ValidateUpdateTemplateConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "updateTemplate", err)
			}
			return nil, NewUpdateTemplateConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body UpdateTemplateUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "updateTemplate", err)
			}
			err = ValidateUpdateTemplateUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "updateTemplate", err)
			}
			return nil, NewUpdateTemplateUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body UpdateTemplateInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "updateTemplate", err)
			}
			err = ValidateUpdateTemplateInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "updateTemplate", err)
			}
			return nil, NewUpdateTemplateInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body UpdateTemplateInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("templates", "updateTemplate", err)
				}
				err = ValidateUpdateTemplateInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("templates", "updateTemplate", err)
				}
				return nil, NewUpdateTemplateInvariantViolation(&body)
			case "unexpected":
				var (
					body UpdateTemplateUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("templates", "updateTemplate", err)
				}
				err = ValidateUpdateTemplateUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("templates", "updateTemplate", err)
				}
				return nil, NewUpdateTemplateUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("templates", "updateTemplate", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body UpdateTemplateGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "updateTemplate", err)
			}
			err = ValidateUpdateTemplateGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "updateTemplate", err)
			}
			return nil, NewUpdateTemplateGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("templates", "updateTemplate", resp.StatusCode, string(body))
		}
	}
}

// BuildGetTemplateRequest instantiates a HTTP request object with method and
// path set to call the "templates" service "getTemplate" endpoint
func (c *Client) BuildGetTemplateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetTemplateTemplatesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("templates", "getTemplate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetTemplateRequest returns an encoder for requests sent to the
// templates getTemplate server.
func EncodeGetTemplateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*templates.GetTemplatePayload)
		if !ok {
			return goahttp.ErrInvalidType("templates", "getTemplate", "*templates.GetTemplatePayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		if p.ID != nil {
			values.Add("id", *p.ID)
		}
		if p.Name != nil {
			values.Add("name", *p.Name)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetTemplateResponse returns a decoder for responses returned by the
// templates getTemplate endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetTemplateResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeGetTemplateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetTemplateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "getTemplate", err)
			}
			err = ValidateGetTemplateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "getTemplate", err)
			}
			res := NewGetTemplateGetPromptTemplateResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetTemplateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "getTemplate", err)
			}
			err = ValidateGetTemplateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "getTemplate", err)
			}
			return nil, NewGetTemplateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetTemplateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "getTemplate", err)
			}
			err = ValidateGetTemplateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "getTemplate", err)
			}
			return nil, NewGetTemplateForbidden(&body)
		case http.StatusBadRequest:
			var (
				body GetTemplateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "getTemplate", err)
			}
			err = ValidateGetTemplateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "getTemplate", err)
			}
			return nil, NewGetTemplateBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetTemplateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "getTemplate", err)
			}
			err = ValidateGetTemplateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "getTemplate", err)
			}
			return nil, NewGetTemplateNotFound(&body)
		case http.StatusConflict:
			var (
				body GetTemplateConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "getTemplate", err)
			}
			err = ValidateGetTemplateConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "getTemplate", err)
			}
			return nil, NewGetTemplateConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body GetTemplateUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "getTemplate", err)
			}
			err = ValidateGetTemplateUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "getTemplate", err)
			}
			return nil, NewGetTemplateUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body GetTemplateInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "getTemplate", err)
			}
			err = ValidateGetTemplateInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "getTemplate", err)
			}
			return nil, NewGetTemplateInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body GetTemplateInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("templates", "getTemplate", err)
				}
				err = ValidateGetTemplateInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("templates", "getTemplate", err)
				}
				return nil, NewGetTemplateInvariantViolation(&body)
			case "unexpected":
				var (
					body GetTemplateUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("templates", "getTemplate", err)
				}
				err = ValidateGetTemplateUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("templates", "getTemplate", err)
				}
				return nil, NewGetTemplateUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("templates", "getTemplate", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body GetTemplateGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "getTemplate", err)
			}
			err = ValidateGetTemplateGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "getTemplate", err)
			}
			return nil, NewGetTemplateGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("templates", "getTemplate", resp.StatusCode, string(body))
		}
	}
}

// BuildListTemplatesRequest instantiates a HTTP request object with method and
// path set to call the "templates" service "listTemplates" endpoint
func (c *Client) BuildListTemplatesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListTemplatesTemplatesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("templates", "listTemplates", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListTemplatesRequest returns an encoder for requests sent to the
// templates listTemplates server.
func EncodeListTemplatesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*templates.ListTemplatesPayload)
		if !ok {
			return goahttp.ErrInvalidType("templates", "listTemplates", "*templates.ListTemplatesPayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		return nil
	}
}

// DecodeListTemplatesResponse returns a decoder for responses returned by the
// templates listTemplates endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListTemplatesResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeListTemplatesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListTemplatesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "listTemplates", err)
			}
			err = ValidateListTemplatesResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "listTemplates", err)
			}
			res := NewListTemplatesListPromptTemplatesResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListTemplatesUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "listTemplates", err)
			}
			err = ValidateListTemplatesUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "listTemplates", err)
			}
			return nil, NewListTemplatesUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListTemplatesForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "listTemplates", err)
			}
			err = ValidateListTemplatesForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "listTemplates", err)
			}
			return nil, NewListTemplatesForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ListTemplatesBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "listTemplates", err)
			}
			err = ValidateListTemplatesBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "listTemplates", err)
			}
			return nil, NewListTemplatesBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ListTemplatesNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "listTemplates", err)
			}
			err = ValidateListTemplatesNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "listTemplates", err)
			}
			return nil, NewListTemplatesNotFound(&body)
		case http.StatusConflict:
			var (
				body ListTemplatesConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "listTemplates", err)
			}
			err = ValidateListTemplatesConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "listTemplates", err)
			}
			return nil, NewListTemplatesConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ListTemplatesUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "listTemplates", err)
			}
			err = ValidateListTemplatesUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "listTemplates", err)
			}
			return nil, NewListTemplatesUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ListTemplatesInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "listTemplates", err)
			}
			err = ValidateListTemplatesInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "listTemplates", err)
			}
			return nil, NewListTemplatesInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ListTemplatesInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("templates", "listTemplates", err)
				}
				err = ValidateListTemplatesInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("templates", "listTemplates", err)
				}
				return nil, NewListTemplatesInvariantViolation(&body)
			case "unexpected":
				var (
					body ListTemplatesUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("templates", "listTemplates", err)
				}
				err = ValidateListTemplatesUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("templates", "listTemplates", err)
				}
				return nil, NewListTemplatesUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("templates", "listTemplates", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ListTemplatesGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "listTemplates", err)
			}
			err = ValidateListTemplatesGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "listTemplates", err)
			}
			return nil, NewListTemplatesGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("templates", "listTemplates", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteTemplateRequest instantiates a HTTP request object with method
// and path set to call the "templates" service "deleteTemplate" endpoint
func (c *Client) BuildDeleteTemplateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteTemplateTemplatesPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("templates", "deleteTemplate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteTemplateRequest returns an encoder for requests sent to the
// templates deleteTemplate server.
func EncodeDeleteTemplateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*templates.DeleteTemplatePayload)
		if !ok {
			return goahttp.ErrInvalidType("templates", "deleteTemplate", "*templates.DeleteTemplatePayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		if p.ID != nil {
			values.Add("id", *p.ID)
		}
		if p.Name != nil {
			values.Add("name", *p.Name)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDeleteTemplateResponse returns a decoder for responses returned by the
// templates deleteTemplate endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteTemplateResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeDeleteTemplateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body DeleteTemplateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "deleteTemplate", err)
			}
			err = ValidateDeleteTemplateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "deleteTemplate", err)
			}
			return nil, NewDeleteTemplateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteTemplateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "deleteTemplate", err)
			}
			err = ValidateDeleteTemplateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "deleteTemplate", err)
			}
			return nil, NewDeleteTemplateForbidden(&body)
		case http.StatusBadRequest:
			var (
				body DeleteTemplateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "deleteTemplate", err)
			}
			err = ValidateDeleteTemplateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "deleteTemplate", err)
			}
			return nil, NewDeleteTemplateBadRequest(&body)
		case http.StatusNotFound:
			var (
				body DeleteTemplateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "deleteTemplate", err)
			}
			err = ValidateDeleteTemplateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "deleteTemplate", err)
			}
			return nil, NewDeleteTemplateNotFound(&body)
		case http.StatusConflict:
			var (
				body DeleteTemplateConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "deleteTemplate", err)
			}
			err = ValidateDeleteTemplateConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "deleteTemplate", err)
			}
			return nil, NewDeleteTemplateConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body DeleteTemplateUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "deleteTemplate", err)
			}
			err = ValidateDeleteTemplateUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "deleteTemplate", err)
			}
			return nil, NewDeleteTemplateUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body DeleteTemplateInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "deleteTemplate", err)
			}
			err = ValidateDeleteTemplateInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "deleteTemplate", err)
			}
			return nil, NewDeleteTemplateInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body DeleteTemplateInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("templates", "deleteTemplate", err)
				}
				err = ValidateDeleteTemplateInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("templates", "deleteTemplate", err)
				}
				return nil, NewDeleteTemplateInvariantViolation(&body)
			case "unexpected":
				var (
					body DeleteTemplateUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("templates", "deleteTemplate", err)
				}
				err = ValidateDeleteTemplateUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("templates", "deleteTemplate", err)
				}
				return nil, NewDeleteTemplateUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("templates", "deleteTemplate", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body DeleteTemplateGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "deleteTemplate", err)
			}
			err = ValidateDeleteTemplateGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "deleteTemplate", err)
			}
			return nil, NewDeleteTemplateGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("templates", "deleteTemplate", resp.StatusCode, string(body))
		}
	}
}

// BuildRenderTemplateByIDRequest instantiates a HTTP request object with
// method and path set to call the "templates" service "renderTemplateByID"
// endpoint
func (c *Client) BuildRenderTemplateByIDRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RenderTemplateByIDTemplatesPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("templates", "renderTemplateByID", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRenderTemplateByIDRequest returns an encoder for requests sent to the
// templates renderTemplateByID server.
func EncodeRenderTemplateByIDRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*templates.RenderTemplateByIDPayload)
		if !ok {
			return goahttp.ErrInvalidType("templates", "renderTemplateByID", "*templates.RenderTemplateByIDPayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("id", p.ID)
		req.URL.RawQuery = values.Encode()
		body := NewRenderTemplateByIDRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("templates", "renderTemplateByID", err)
		}
		return nil
	}
}

// DecodeRenderTemplateByIDResponse returns a decoder for responses returned by
// the templates renderTemplateByID endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeRenderTemplateByIDResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeRenderTemplateByIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RenderTemplateByIDResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplateByID", err)
			}
			err = ValidateRenderTemplateByIDResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplateByID", err)
			}
			res := NewRenderTemplateByIDRenderTemplateResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body RenderTemplateByIDUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplateByID", err)
			}
			err = ValidateRenderTemplateByIDUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplateByID", err)
			}
			return nil, NewRenderTemplateByIDUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body RenderTemplateByIDForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplateByID", err)
			}
			err = ValidateRenderTemplateByIDForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplateByID", err)
			}
			return nil, NewRenderTemplateByIDForbidden(&body)
		case http.StatusBadRequest:
			var (
				body RenderTemplateByIDBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplateByID", err)
			}
			err = ValidateRenderTemplateByIDBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplateByID", err)
			}
			return nil, NewRenderTemplateByIDBadRequest(&body)
		case http.StatusNotFound:
			var (
				body RenderTemplateByIDNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplateByID", err)
			}
			err = ValidateRenderTemplateByIDNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplateByID", err)
			}
			return nil, NewRenderTemplateByIDNotFound(&body)
		case http.StatusConflict:
			var (
				body RenderTemplateByIDConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplateByID", err)
			}
			err = ValidateRenderTemplateByIDConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplateByID", err)
			}
			return nil, NewRenderTemplateByIDConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body RenderTemplateByIDUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplateByID", err)
			}
			err = ValidateRenderTemplateByIDUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplateByID", err)
			}
			return nil, NewRenderTemplateByIDUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body RenderTemplateByIDInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplateByID", err)
			}
			err = ValidateRenderTemplateByIDInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplateByID", err)
			}
			return nil, NewRenderTemplateByIDInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body RenderTemplateByIDInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("templates", "renderTemplateByID", err)
				}
				err = ValidateRenderTemplateByIDInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("templates", "renderTemplateByID", err)
				}
				return nil, NewRenderTemplateByIDInvariantViolation(&body)
			case "unexpected":
				var (
					body RenderTemplateByIDUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("templates", "renderTemplateByID", err)
				}
				err = ValidateRenderTemplateByIDUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("templates", "renderTemplateByID", err)
				}
				return nil, NewRenderTemplateByIDUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("templates", "renderTemplateByID", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body RenderTemplateByIDGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplateByID", err)
			}
			err = ValidateRenderTemplateByIDGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplateByID", err)
			}
			return nil, NewRenderTemplateByIDGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("templates", "renderTemplateByID", resp.StatusCode, string(body))
		}
	}
}

// BuildRenderTemplateRequest instantiates a HTTP request object with method
// and path set to call the "templates" service "renderTemplate" endpoint
func (c *Client) BuildRenderTemplateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RenderTemplateTemplatesPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("templates", "renderTemplate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRenderTemplateRequest returns an encoder for requests sent to the
// templates renderTemplate server.
func EncodeRenderTemplateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*templates.RenderTemplatePayload)
		if !ok {
			return goahttp.ErrInvalidType("templates", "renderTemplate", "*templates.RenderTemplatePayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewRenderTemplateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("templates", "renderTemplate", err)
		}
		return nil
	}
}

// DecodeRenderTemplateResponse returns a decoder for responses returned by the
// templates renderTemplate endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeRenderTemplateResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeRenderTemplateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RenderTemplateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplate", err)
			}
			err = ValidateRenderTemplateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplate", err)
			}
			res := NewRenderTemplateResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body RenderTemplateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplate", err)
			}
			err = ValidateRenderTemplateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplate", err)
			}
			return nil, NewRenderTemplateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body RenderTemplateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplate", err)
			}
			err = ValidateRenderTemplateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplate", err)
			}
			return nil, NewRenderTemplateForbidden(&body)
		case http.StatusBadRequest:
			var (
				body RenderTemplateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplate", err)
			}
			err = ValidateRenderTemplateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplate", err)
			}
			return nil, NewRenderTemplateBadRequest(&body)
		case http.StatusNotFound:
			var (
				body RenderTemplateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplate", err)
			}
			err = ValidateRenderTemplateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplate", err)
			}
			return nil, NewRenderTemplateNotFound(&body)
		case http.StatusConflict:
			var (
				body RenderTemplateConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplate", err)
			}
			err = ValidateRenderTemplateConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplate", err)
			}
			return nil, NewRenderTemplateConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body RenderTemplateUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplate", err)
			}
			err = ValidateRenderTemplateUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplate", err)
			}
			return nil, NewRenderTemplateUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body RenderTemplateInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplate", err)
			}
			err = ValidateRenderTemplateInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplate", err)
			}
			return nil, NewRenderTemplateInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body RenderTemplateInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("templates", "renderTemplate", err)
				}
				err = ValidateRenderTemplateInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("templates", "renderTemplate", err)
				}
				return nil, NewRenderTemplateInvariantViolation(&body)
			case "unexpected":
				var (
					body RenderTemplateUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("templates", "renderTemplate", err)
				}
				err = ValidateRenderTemplateUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("templates", "renderTemplate", err)
				}
				return nil, NewRenderTemplateUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("templates", "renderTemplate", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body RenderTemplateGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("templates", "renderTemplate", err)
			}
			err = ValidateRenderTemplateGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("templates", "renderTemplate", err)
			}
			return nil, NewRenderTemplateGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("templates", "renderTemplate", resp.StatusCode, string(body))
		}
	}
}

// unmarshalPromptTemplateResponseBodyToTypesPromptTemplate builds a value of
// type *types.PromptTemplate from a value of type *PromptTemplateResponseBody.
func unmarshalPromptTemplateResponseBodyToTypesPromptTemplate(v *PromptTemplateResponseBody) *types.PromptTemplate {
	res := &types.PromptTemplate{
		ID:            *v.ID,
		HistoryID:     *v.HistoryID,
		PredecessorID: v.PredecessorID,
		Name:          types.Slug(*v.Name),
		Prompt:        *v.Prompt,
		Description:   v.Description,
		Arguments:     v.Arguments,
		Engine:        *v.Engine,
		Kind:          *v.Kind,
		CreatedAt:     *v.CreatedAt,
		UpdatedAt:     *v.UpdatedAt,
	}
	res.ToolsHint = make([]string, len(v.ToolsHint))
	for i, val := range v.ToolsHint {
		res.ToolsHint[i] = val
	}

	return res
}
