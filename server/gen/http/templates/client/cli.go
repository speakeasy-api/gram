// Code generated by goa v3.22.3, DO NOT EDIT.
//
// templates HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	templates "github.com/speakeasy-api/gram/server/gen/templates"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateTemplatePayload builds the payload for the templates
// createTemplate endpoint from CLI flags.
func BuildCreateTemplatePayload(templatesCreateTemplateBody string, templatesCreateTemplateApikeyToken string, templatesCreateTemplateSessionToken string, templatesCreateTemplateProjectSlugInput string) (*templates.CreateTemplatePayload, error) {
	var err error
	var body CreateTemplateRequestBody
	{
		err = json.Unmarshal([]byte(templatesCreateTemplateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"arguments\": \"{\\\"name\\\":\\\"example\\\",\\\"email\\\":\\\"mail@example.com\\\"}\",\n      \"description\": \"Ea dolorem repudiandae et.\",\n      \"engine\": \"mustache\",\n      \"kind\": \"prompt\",\n      \"name\": \"uwm\",\n      \"prompt\": \"Cumque tenetur eum iusto et architecto cumque.\",\n      \"tools_hint\": [\n         \"Ut quia eveniet culpa qui voluptatem.\",\n         \"Delectus ut sed.\",\n         \"Fugit voluptatem reiciendis cupiditate dolores fuga.\"\n      ]\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.name", body.Name, "^[a-z0-9_-]{1,128}$"))
		if utf8.RuneCountInString(body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 40, false))
		}
		if body.Arguments != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.arguments", *body.Arguments, goa.FormatJSON))
		}
		if !(body.Engine == "mustache") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.engine", body.Engine, []any{"mustache"}))
		}
		if !(body.Kind == "prompt" || body.Kind == "higher_order_tool") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", body.Kind, []any{"prompt", "higher_order_tool"}))
		}
		if len(body.ToolsHint) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tools_hint", body.ToolsHint, len(body.ToolsHint), 20, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var apikeyToken *string
	{
		if templatesCreateTemplateApikeyToken != "" {
			apikeyToken = &templatesCreateTemplateApikeyToken
		}
	}
	var sessionToken *string
	{
		if templatesCreateTemplateSessionToken != "" {
			sessionToken = &templatesCreateTemplateSessionToken
		}
	}
	var projectSlugInput *string
	{
		if templatesCreateTemplateProjectSlugInput != "" {
			projectSlugInput = &templatesCreateTemplateProjectSlugInput
		}
	}
	v := &templates.CreateTemplatePayload{
		Name:        types.Slug(body.Name),
		Prompt:      body.Prompt,
		Description: body.Description,
		Arguments:   body.Arguments,
		Engine:      body.Engine,
		Kind:        body.Kind,
	}
	if body.ToolsHint != nil {
		v.ToolsHint = make([]string, len(body.ToolsHint))
		for i, val := range body.ToolsHint {
			v.ToolsHint[i] = val
		}
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildUpdateTemplatePayload builds the payload for the templates
// updateTemplate endpoint from CLI flags.
func BuildUpdateTemplatePayload(templatesUpdateTemplateBody string, templatesUpdateTemplateApikeyToken string, templatesUpdateTemplateSessionToken string, templatesUpdateTemplateProjectSlugInput string) (*templates.UpdateTemplatePayload, error) {
	var err error
	var body UpdateTemplateRequestBody
	{
		err = json.Unmarshal([]byte(templatesUpdateTemplateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"arguments\": \"{\\\"name\\\":\\\"example\\\",\\\"email\\\":\\\"mail@example.com\\\"}\",\n      \"description\": \"Nisi quis pariatur.\",\n      \"engine\": \"mustache\",\n      \"id\": \"Consectetur veniam corrupti neque.\",\n      \"kind\": \"higher_order_tool\",\n      \"prompt\": \"Deserunt provident nam tempore veritatis occaecati.\",\n      \"tools_hint\": [\n         \"Quo alias.\",\n         \"Libero odio rerum at quasi.\",\n         \"Rem quos ut sed.\"\n      ]\n   }'")
		}
		if body.Arguments != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.arguments", *body.Arguments, goa.FormatJSON))
		}
		if body.Engine != nil {
			if !(*body.Engine == "mustache") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.engine", *body.Engine, []any{"mustache"}))
			}
		}
		if body.Kind != nil {
			if !(*body.Kind == "prompt" || *body.Kind == "higher_order_tool") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", *body.Kind, []any{"prompt", "higher_order_tool"}))
			}
		}
		if len(body.ToolsHint) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tools_hint", body.ToolsHint, len(body.ToolsHint), 20, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var apikeyToken *string
	{
		if templatesUpdateTemplateApikeyToken != "" {
			apikeyToken = &templatesUpdateTemplateApikeyToken
		}
	}
	var sessionToken *string
	{
		if templatesUpdateTemplateSessionToken != "" {
			sessionToken = &templatesUpdateTemplateSessionToken
		}
	}
	var projectSlugInput *string
	{
		if templatesUpdateTemplateProjectSlugInput != "" {
			projectSlugInput = &templatesUpdateTemplateProjectSlugInput
		}
	}
	v := &templates.UpdateTemplatePayload{
		ID:          body.ID,
		Prompt:      body.Prompt,
		Description: body.Description,
		Arguments:   body.Arguments,
		Engine:      body.Engine,
		Kind:        body.Kind,
	}
	if body.ToolsHint != nil {
		v.ToolsHint = make([]string, len(body.ToolsHint))
		for i, val := range body.ToolsHint {
			v.ToolsHint[i] = val
		}
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildGetTemplatePayload builds the payload for the templates getTemplate
// endpoint from CLI flags.
func BuildGetTemplatePayload(templatesGetTemplateID string, templatesGetTemplateName string, templatesGetTemplateApikeyToken string, templatesGetTemplateSessionToken string, templatesGetTemplateProjectSlugInput string) (*templates.GetTemplatePayload, error) {
	var id *string
	{
		if templatesGetTemplateID != "" {
			id = &templatesGetTemplateID
		}
	}
	var name *string
	{
		if templatesGetTemplateName != "" {
			name = &templatesGetTemplateName
		}
	}
	var apikeyToken *string
	{
		if templatesGetTemplateApikeyToken != "" {
			apikeyToken = &templatesGetTemplateApikeyToken
		}
	}
	var sessionToken *string
	{
		if templatesGetTemplateSessionToken != "" {
			sessionToken = &templatesGetTemplateSessionToken
		}
	}
	var projectSlugInput *string
	{
		if templatesGetTemplateProjectSlugInput != "" {
			projectSlugInput = &templatesGetTemplateProjectSlugInput
		}
	}
	v := &templates.GetTemplatePayload{}
	v.ID = id
	v.Name = name
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildListTemplatesPayload builds the payload for the templates listTemplates
// endpoint from CLI flags.
func BuildListTemplatesPayload(templatesListTemplatesApikeyToken string, templatesListTemplatesSessionToken string, templatesListTemplatesProjectSlugInput string) (*templates.ListTemplatesPayload, error) {
	var apikeyToken *string
	{
		if templatesListTemplatesApikeyToken != "" {
			apikeyToken = &templatesListTemplatesApikeyToken
		}
	}
	var sessionToken *string
	{
		if templatesListTemplatesSessionToken != "" {
			sessionToken = &templatesListTemplatesSessionToken
		}
	}
	var projectSlugInput *string
	{
		if templatesListTemplatesProjectSlugInput != "" {
			projectSlugInput = &templatesListTemplatesProjectSlugInput
		}
	}
	v := &templates.ListTemplatesPayload{}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildDeleteTemplatePayload builds the payload for the templates
// deleteTemplate endpoint from CLI flags.
func BuildDeleteTemplatePayload(templatesDeleteTemplateID string, templatesDeleteTemplateName string, templatesDeleteTemplateApikeyToken string, templatesDeleteTemplateSessionToken string, templatesDeleteTemplateProjectSlugInput string) (*templates.DeleteTemplatePayload, error) {
	var id *string
	{
		if templatesDeleteTemplateID != "" {
			id = &templatesDeleteTemplateID
		}
	}
	var name *string
	{
		if templatesDeleteTemplateName != "" {
			name = &templatesDeleteTemplateName
		}
	}
	var apikeyToken *string
	{
		if templatesDeleteTemplateApikeyToken != "" {
			apikeyToken = &templatesDeleteTemplateApikeyToken
		}
	}
	var sessionToken *string
	{
		if templatesDeleteTemplateSessionToken != "" {
			sessionToken = &templatesDeleteTemplateSessionToken
		}
	}
	var projectSlugInput *string
	{
		if templatesDeleteTemplateProjectSlugInput != "" {
			projectSlugInput = &templatesDeleteTemplateProjectSlugInput
		}
	}
	v := &templates.DeleteTemplatePayload{}
	v.ID = id
	v.Name = name
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildRenderTemplateByIDPayload builds the payload for the templates
// renderTemplateByID endpoint from CLI flags.
func BuildRenderTemplateByIDPayload(templatesRenderTemplateByIDBody string, templatesRenderTemplateByIDID string, templatesRenderTemplateByIDApikeyToken string, templatesRenderTemplateByIDSessionToken string, templatesRenderTemplateByIDProjectSlugInput string) (*templates.RenderTemplateByIDPayload, error) {
	var err error
	var body RenderTemplateByIDRequestBody
	{
		err = json.Unmarshal([]byte(templatesRenderTemplateByIDBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"arguments\": {\n         \"Labore deserunt eaque nostrum impedit ut et.\": \"Accusantium est cum earum eum amet.\",\n         \"Sit et ut animi dolores ullam eum.\": \"Qui sint ex illum illo sint et.\"\n      }\n   }'")
		}
		if body.Arguments == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("arguments", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = templatesRenderTemplateByIDID
	}
	var apikeyToken *string
	{
		if templatesRenderTemplateByIDApikeyToken != "" {
			apikeyToken = &templatesRenderTemplateByIDApikeyToken
		}
	}
	var sessionToken *string
	{
		if templatesRenderTemplateByIDSessionToken != "" {
			sessionToken = &templatesRenderTemplateByIDSessionToken
		}
	}
	var projectSlugInput *string
	{
		if templatesRenderTemplateByIDProjectSlugInput != "" {
			projectSlugInput = &templatesRenderTemplateByIDProjectSlugInput
		}
	}
	v := &templates.RenderTemplateByIDPayload{}
	if body.Arguments != nil {
		v.Arguments = make(map[string]any, len(body.Arguments))
		for key, val := range body.Arguments {
			tk := key
			tv := val
			v.Arguments[tk] = tv
		}
	}
	v.ID = id
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildRenderTemplatePayload builds the payload for the templates
// renderTemplate endpoint from CLI flags.
func BuildRenderTemplatePayload(templatesRenderTemplateBody string, templatesRenderTemplateApikeyToken string, templatesRenderTemplateSessionToken string, templatesRenderTemplateProjectSlugInput string) (*templates.RenderTemplatePayload, error) {
	var err error
	var body RenderTemplateRequestBody
	{
		err = json.Unmarshal([]byte(templatesRenderTemplateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"arguments\": {\n         \"Debitis velit ab illo.\": \"Totam odit esse.\",\n         \"Fugiat rerum dicta.\": \"Odio voluptatem.\",\n         \"Reprehenderit ut asperiores tempora vel consequuntur et.\": \"Vel vel iure commodi mollitia.\"\n      },\n      \"engine\": \"mustache\",\n      \"kind\": \"higher_order_tool\",\n      \"prompt\": \"Qui aliquid libero eius fugiat.\"\n   }'")
		}
		if body.Arguments == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("arguments", "body"))
		}
		if !(body.Engine == "mustache") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.engine", body.Engine, []any{"mustache"}))
		}
		if !(body.Kind == "prompt" || body.Kind == "higher_order_tool") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", body.Kind, []any{"prompt", "higher_order_tool"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var apikeyToken *string
	{
		if templatesRenderTemplateApikeyToken != "" {
			apikeyToken = &templatesRenderTemplateApikeyToken
		}
	}
	var sessionToken *string
	{
		if templatesRenderTemplateSessionToken != "" {
			sessionToken = &templatesRenderTemplateSessionToken
		}
	}
	var projectSlugInput *string
	{
		if templatesRenderTemplateProjectSlugInput != "" {
			projectSlugInput = &templatesRenderTemplateProjectSlugInput
		}
	}
	v := &templates.RenderTemplatePayload{
		Prompt: body.Prompt,
		Engine: body.Engine,
		Kind:   body.Kind,
	}
	if body.Arguments != nil {
		v.Arguments = make(map[string]any, len(body.Arguments))
		for key, val := range body.Arguments {
			tk := key
			tv := val
			v.Arguments[tk] = tv
		}
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}
