// Code generated by goa v3.22.2, DO NOT EDIT.
//
// templates HTTP server
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	"context"
	"net/http"

	templates "github.com/speakeasy-api/gram/server/gen/templates"
	otelhttp "go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the templates service endpoint HTTP handlers.
type Server struct {
	Mounts             []*MountPoint
	CreateTemplate     http.Handler
	UpdateTemplate     http.Handler
	GetTemplate        http.Handler
	ListTemplates      http.Handler
	DeleteTemplate     http.Handler
	RenderTemplateByID http.Handler
	RenderTemplate     http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the templates service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *templates.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreateTemplate", "POST", "/rpc/templates.create"},
			{"UpdateTemplate", "POST", "/rpc/templates.update"},
			{"GetTemplate", "GET", "/rpc/templates.get"},
			{"ListTemplates", "GET", "/rpc/templates.list"},
			{"DeleteTemplate", "DELETE", "/rpc/templates.delete"},
			{"RenderTemplateByID", "POST", "/rpc/templates.render"},
			{"RenderTemplate", "POST", "/rpc/templates.renderDirect"},
		},
		CreateTemplate:     NewCreateTemplateHandler(e.CreateTemplate, mux, decoder, encoder, errhandler, formatter),
		UpdateTemplate:     NewUpdateTemplateHandler(e.UpdateTemplate, mux, decoder, encoder, errhandler, formatter),
		GetTemplate:        NewGetTemplateHandler(e.GetTemplate, mux, decoder, encoder, errhandler, formatter),
		ListTemplates:      NewListTemplatesHandler(e.ListTemplates, mux, decoder, encoder, errhandler, formatter),
		DeleteTemplate:     NewDeleteTemplateHandler(e.DeleteTemplate, mux, decoder, encoder, errhandler, formatter),
		RenderTemplateByID: NewRenderTemplateByIDHandler(e.RenderTemplateByID, mux, decoder, encoder, errhandler, formatter),
		RenderTemplate:     NewRenderTemplateHandler(e.RenderTemplate, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "templates" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateTemplate = m(s.CreateTemplate)
	s.UpdateTemplate = m(s.UpdateTemplate)
	s.GetTemplate = m(s.GetTemplate)
	s.ListTemplates = m(s.ListTemplates)
	s.DeleteTemplate = m(s.DeleteTemplate)
	s.RenderTemplateByID = m(s.RenderTemplateByID)
	s.RenderTemplate = m(s.RenderTemplate)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return templates.MethodNames[:] }

// Mount configures the mux to serve the templates endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateTemplateHandler(mux, h.CreateTemplate)
	MountUpdateTemplateHandler(mux, h.UpdateTemplate)
	MountGetTemplateHandler(mux, h.GetTemplate)
	MountListTemplatesHandler(mux, h.ListTemplates)
	MountDeleteTemplateHandler(mux, h.DeleteTemplate)
	MountRenderTemplateByIDHandler(mux, h.RenderTemplateByID)
	MountRenderTemplateHandler(mux, h.RenderTemplate)
}

// Mount configures the mux to serve the templates endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateTemplateHandler configures the mux to serve the "templates"
// service "createTemplate" endpoint.
func MountCreateTemplateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/templates.create", otelhttp.WithRouteTag("/rpc/templates.create", f).ServeHTTP)
}

// NewCreateTemplateHandler creates a HTTP handler which loads the HTTP request
// and calls the "templates" service "createTemplate" endpoint.
func NewCreateTemplateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateTemplateRequest(mux, decoder)
		encodeResponse = EncodeCreateTemplateResponse(encoder)
		encodeError    = EncodeCreateTemplateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createTemplate")
		ctx = context.WithValue(ctx, goa.ServiceKey, "templates")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountUpdateTemplateHandler configures the mux to serve the "templates"
// service "updateTemplate" endpoint.
func MountUpdateTemplateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/templates.update", otelhttp.WithRouteTag("/rpc/templates.update", f).ServeHTTP)
}

// NewUpdateTemplateHandler creates a HTTP handler which loads the HTTP request
// and calls the "templates" service "updateTemplate" endpoint.
func NewUpdateTemplateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateTemplateRequest(mux, decoder)
		encodeResponse = EncodeUpdateTemplateResponse(encoder)
		encodeError    = EncodeUpdateTemplateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateTemplate")
		ctx = context.WithValue(ctx, goa.ServiceKey, "templates")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountGetTemplateHandler configures the mux to serve the "templates" service
// "getTemplate" endpoint.
func MountGetTemplateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/rpc/templates.get", otelhttp.WithRouteTag("/rpc/templates.get", f).ServeHTTP)
}

// NewGetTemplateHandler creates a HTTP handler which loads the HTTP request
// and calls the "templates" service "getTemplate" endpoint.
func NewGetTemplateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetTemplateRequest(mux, decoder)
		encodeResponse = EncodeGetTemplateResponse(encoder)
		encodeError    = EncodeGetTemplateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getTemplate")
		ctx = context.WithValue(ctx, goa.ServiceKey, "templates")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountListTemplatesHandler configures the mux to serve the "templates"
// service "listTemplates" endpoint.
func MountListTemplatesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/rpc/templates.list", otelhttp.WithRouteTag("/rpc/templates.list", f).ServeHTTP)
}

// NewListTemplatesHandler creates a HTTP handler which loads the HTTP request
// and calls the "templates" service "listTemplates" endpoint.
func NewListTemplatesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListTemplatesRequest(mux, decoder)
		encodeResponse = EncodeListTemplatesResponse(encoder)
		encodeError    = EncodeListTemplatesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listTemplates")
		ctx = context.WithValue(ctx, goa.ServiceKey, "templates")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountDeleteTemplateHandler configures the mux to serve the "templates"
// service "deleteTemplate" endpoint.
func MountDeleteTemplateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/rpc/templates.delete", otelhttp.WithRouteTag("/rpc/templates.delete", f).ServeHTTP)
}

// NewDeleteTemplateHandler creates a HTTP handler which loads the HTTP request
// and calls the "templates" service "deleteTemplate" endpoint.
func NewDeleteTemplateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteTemplateRequest(mux, decoder)
		encodeResponse = EncodeDeleteTemplateResponse(encoder)
		encodeError    = EncodeDeleteTemplateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteTemplate")
		ctx = context.WithValue(ctx, goa.ServiceKey, "templates")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountRenderTemplateByIDHandler configures the mux to serve the "templates"
// service "renderTemplateByID" endpoint.
func MountRenderTemplateByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/templates.render", otelhttp.WithRouteTag("/rpc/templates.render", f).ServeHTTP)
}

// NewRenderTemplateByIDHandler creates a HTTP handler which loads the HTTP
// request and calls the "templates" service "renderTemplateByID" endpoint.
func NewRenderTemplateByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRenderTemplateByIDRequest(mux, decoder)
		encodeResponse = EncodeRenderTemplateByIDResponse(encoder)
		encodeError    = EncodeRenderTemplateByIDError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "renderTemplateByID")
		ctx = context.WithValue(ctx, goa.ServiceKey, "templates")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountRenderTemplateHandler configures the mux to serve the "templates"
// service "renderTemplate" endpoint.
func MountRenderTemplateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/templates.renderDirect", otelhttp.WithRouteTag("/rpc/templates.renderDirect", f).ServeHTTP)
}

// NewRenderTemplateHandler creates a HTTP handler which loads the HTTP request
// and calls the "templates" service "renderTemplate" endpoint.
func NewRenderTemplateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRenderTemplateRequest(mux, decoder)
		encodeResponse = EncodeRenderTemplateResponse(encoder)
		encodeError    = EncodeRenderTemplateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "renderTemplate")
		ctx = context.WithValue(ctx, goa.ServiceKey, "templates")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}
