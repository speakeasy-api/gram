// Code generated by goa v3.22.2, DO NOT EDIT.
//
// templates HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	"unicode/utf8"

	templates "github.com/speakeasy-api/gram/server/gen/templates"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
)

// CreateTemplateRequestBody is the type of the "templates" service
// "createTemplate" endpoint HTTP request body.
type CreateTemplateRequestBody struct {
	// The name of the prompt template
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The template content
	Prompt *string `form:"prompt,omitempty" json:"prompt,omitempty" xml:"prompt,omitempty"`
	// The description of the prompt template
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The JSON Schema defining the placeholders found in the prompt template
	Arguments *string `form:"arguments,omitempty" json:"arguments,omitempty" xml:"arguments,omitempty"`
	// The template engine
	Engine *string `form:"engine,omitempty" json:"engine,omitempty" xml:"engine,omitempty"`
	// The kind of prompt the template is used for
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// The suggested tool names associated with the prompt template
	ToolsHint []string `form:"tools_hint,omitempty" json:"tools_hint,omitempty" xml:"tools_hint,omitempty"`
}

// UpdateTemplateRequestBody is the type of the "templates" service
// "updateTemplate" endpoint HTTP request body.
type UpdateTemplateRequestBody struct {
	// The ID of the prompt template to update
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The template content
	Prompt *string `form:"prompt,omitempty" json:"prompt,omitempty" xml:"prompt,omitempty"`
	// The description of the prompt template
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The JSON Schema defining the placeholders found in the prompt template
	Arguments *string `form:"arguments,omitempty" json:"arguments,omitempty" xml:"arguments,omitempty"`
	// The template engine
	Engine *string `form:"engine,omitempty" json:"engine,omitempty" xml:"engine,omitempty"`
	// The kind of prompt the template is used for
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// The suggested tool names associated with the prompt template
	ToolsHint []string `form:"tools_hint,omitempty" json:"tools_hint,omitempty" xml:"tools_hint,omitempty"`
}

// RenderTemplateByIDRequestBody is the type of the "templates" service
// "renderTemplateByID" endpoint HTTP request body.
type RenderTemplateByIDRequestBody struct {
	// The input data to render the template with
	Arguments map[string]any `form:"arguments,omitempty" json:"arguments,omitempty" xml:"arguments,omitempty"`
}

// RenderTemplateRequestBody is the type of the "templates" service
// "renderTemplate" endpoint HTTP request body.
type RenderTemplateRequestBody struct {
	// The template content to render
	Prompt *string `form:"prompt,omitempty" json:"prompt,omitempty" xml:"prompt,omitempty"`
	// The input data to render the template with
	Arguments map[string]any `form:"arguments,omitempty" json:"arguments,omitempty" xml:"arguments,omitempty"`
	// The template engine
	Engine *string `form:"engine,omitempty" json:"engine,omitempty" xml:"engine,omitempty"`
	// The kind of prompt the template is used for
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
}

// CreateTemplateResponseBody is the type of the "templates" service
// "createTemplate" endpoint HTTP response body.
type CreateTemplateResponseBody struct {
	// The created prompt template
	Template *PromptTemplateResponseBody `form:"template" json:"template" xml:"template"`
}

// UpdateTemplateResponseBody is the type of the "templates" service
// "updateTemplate" endpoint HTTP response body.
type UpdateTemplateResponseBody struct {
	// The updated prompt template
	Template *PromptTemplateResponseBody `form:"template" json:"template" xml:"template"`
}

// GetTemplateResponseBody is the type of the "templates" service "getTemplate"
// endpoint HTTP response body.
type GetTemplateResponseBody struct {
	// The created prompt template
	Template *PromptTemplateResponseBody `form:"template" json:"template" xml:"template"`
}

// ListTemplatesResponseBody is the type of the "templates" service
// "listTemplates" endpoint HTTP response body.
type ListTemplatesResponseBody struct {
	// The created prompt template
	Templates []*PromptTemplateResponseBody `form:"templates" json:"templates" xml:"templates"`
}

// RenderTemplateByIDResponseBody is the type of the "templates" service
// "renderTemplateByID" endpoint HTTP response body.
type RenderTemplateByIDResponseBody struct {
	// The rendered prompt
	Prompt string `form:"prompt" json:"prompt" xml:"prompt"`
}

// RenderTemplateResponseBody is the type of the "templates" service
// "renderTemplate" endpoint HTTP response body.
type RenderTemplateResponseBody struct {
	// The rendered prompt
	Prompt string `form:"prompt" json:"prompt" xml:"prompt"`
}

// CreateTemplateUnauthorizedResponseBody is the type of the "templates"
// service "createTemplate" endpoint HTTP response body for the "unauthorized"
// error.
type CreateTemplateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateTemplateForbiddenResponseBody is the type of the "templates" service
// "createTemplate" endpoint HTTP response body for the "forbidden" error.
type CreateTemplateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateTemplateBadRequestResponseBody is the type of the "templates" service
// "createTemplate" endpoint HTTP response body for the "bad_request" error.
type CreateTemplateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateTemplateNotFoundResponseBody is the type of the "templates" service
// "createTemplate" endpoint HTTP response body for the "not_found" error.
type CreateTemplateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateTemplateConflictResponseBody is the type of the "templates" service
// "createTemplate" endpoint HTTP response body for the "conflict" error.
type CreateTemplateConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateTemplateUnsupportedMediaResponseBody is the type of the "templates"
// service "createTemplate" endpoint HTTP response body for the
// "unsupported_media" error.
type CreateTemplateUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateTemplateInvalidResponseBody is the type of the "templates" service
// "createTemplate" endpoint HTTP response body for the "invalid" error.
type CreateTemplateInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateTemplateInvariantViolationResponseBody is the type of the "templates"
// service "createTemplate" endpoint HTTP response body for the
// "invariant_violation" error.
type CreateTemplateInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateTemplateUnexpectedResponseBody is the type of the "templates" service
// "createTemplate" endpoint HTTP response body for the "unexpected" error.
type CreateTemplateUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateTemplateGatewayErrorResponseBody is the type of the "templates"
// service "createTemplate" endpoint HTTP response body for the "gateway_error"
// error.
type CreateTemplateGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateTemplateUnauthorizedResponseBody is the type of the "templates"
// service "updateTemplate" endpoint HTTP response body for the "unauthorized"
// error.
type UpdateTemplateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateTemplateForbiddenResponseBody is the type of the "templates" service
// "updateTemplate" endpoint HTTP response body for the "forbidden" error.
type UpdateTemplateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateTemplateBadRequestResponseBody is the type of the "templates" service
// "updateTemplate" endpoint HTTP response body for the "bad_request" error.
type UpdateTemplateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateTemplateNotFoundResponseBody is the type of the "templates" service
// "updateTemplate" endpoint HTTP response body for the "not_found" error.
type UpdateTemplateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateTemplateConflictResponseBody is the type of the "templates" service
// "updateTemplate" endpoint HTTP response body for the "conflict" error.
type UpdateTemplateConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateTemplateUnsupportedMediaResponseBody is the type of the "templates"
// service "updateTemplate" endpoint HTTP response body for the
// "unsupported_media" error.
type UpdateTemplateUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateTemplateInvalidResponseBody is the type of the "templates" service
// "updateTemplate" endpoint HTTP response body for the "invalid" error.
type UpdateTemplateInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateTemplateInvariantViolationResponseBody is the type of the "templates"
// service "updateTemplate" endpoint HTTP response body for the
// "invariant_violation" error.
type UpdateTemplateInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateTemplateUnexpectedResponseBody is the type of the "templates" service
// "updateTemplate" endpoint HTTP response body for the "unexpected" error.
type UpdateTemplateUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateTemplateGatewayErrorResponseBody is the type of the "templates"
// service "updateTemplate" endpoint HTTP response body for the "gateway_error"
// error.
type UpdateTemplateGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetTemplateUnauthorizedResponseBody is the type of the "templates" service
// "getTemplate" endpoint HTTP response body for the "unauthorized" error.
type GetTemplateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetTemplateForbiddenResponseBody is the type of the "templates" service
// "getTemplate" endpoint HTTP response body for the "forbidden" error.
type GetTemplateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetTemplateBadRequestResponseBody is the type of the "templates" service
// "getTemplate" endpoint HTTP response body for the "bad_request" error.
type GetTemplateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetTemplateNotFoundResponseBody is the type of the "templates" service
// "getTemplate" endpoint HTTP response body for the "not_found" error.
type GetTemplateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetTemplateConflictResponseBody is the type of the "templates" service
// "getTemplate" endpoint HTTP response body for the "conflict" error.
type GetTemplateConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetTemplateUnsupportedMediaResponseBody is the type of the "templates"
// service "getTemplate" endpoint HTTP response body for the
// "unsupported_media" error.
type GetTemplateUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetTemplateInvalidResponseBody is the type of the "templates" service
// "getTemplate" endpoint HTTP response body for the "invalid" error.
type GetTemplateInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetTemplateInvariantViolationResponseBody is the type of the "templates"
// service "getTemplate" endpoint HTTP response body for the
// "invariant_violation" error.
type GetTemplateInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetTemplateUnexpectedResponseBody is the type of the "templates" service
// "getTemplate" endpoint HTTP response body for the "unexpected" error.
type GetTemplateUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetTemplateGatewayErrorResponseBody is the type of the "templates" service
// "getTemplate" endpoint HTTP response body for the "gateway_error" error.
type GetTemplateGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListTemplatesUnauthorizedResponseBody is the type of the "templates" service
// "listTemplates" endpoint HTTP response body for the "unauthorized" error.
type ListTemplatesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListTemplatesForbiddenResponseBody is the type of the "templates" service
// "listTemplates" endpoint HTTP response body for the "forbidden" error.
type ListTemplatesForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListTemplatesBadRequestResponseBody is the type of the "templates" service
// "listTemplates" endpoint HTTP response body for the "bad_request" error.
type ListTemplatesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListTemplatesNotFoundResponseBody is the type of the "templates" service
// "listTemplates" endpoint HTTP response body for the "not_found" error.
type ListTemplatesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListTemplatesConflictResponseBody is the type of the "templates" service
// "listTemplates" endpoint HTTP response body for the "conflict" error.
type ListTemplatesConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListTemplatesUnsupportedMediaResponseBody is the type of the "templates"
// service "listTemplates" endpoint HTTP response body for the
// "unsupported_media" error.
type ListTemplatesUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListTemplatesInvalidResponseBody is the type of the "templates" service
// "listTemplates" endpoint HTTP response body for the "invalid" error.
type ListTemplatesInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListTemplatesInvariantViolationResponseBody is the type of the "templates"
// service "listTemplates" endpoint HTTP response body for the
// "invariant_violation" error.
type ListTemplatesInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListTemplatesUnexpectedResponseBody is the type of the "templates" service
// "listTemplates" endpoint HTTP response body for the "unexpected" error.
type ListTemplatesUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListTemplatesGatewayErrorResponseBody is the type of the "templates" service
// "listTemplates" endpoint HTTP response body for the "gateway_error" error.
type ListTemplatesGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteTemplateUnauthorizedResponseBody is the type of the "templates"
// service "deleteTemplate" endpoint HTTP response body for the "unauthorized"
// error.
type DeleteTemplateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteTemplateForbiddenResponseBody is the type of the "templates" service
// "deleteTemplate" endpoint HTTP response body for the "forbidden" error.
type DeleteTemplateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteTemplateBadRequestResponseBody is the type of the "templates" service
// "deleteTemplate" endpoint HTTP response body for the "bad_request" error.
type DeleteTemplateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteTemplateNotFoundResponseBody is the type of the "templates" service
// "deleteTemplate" endpoint HTTP response body for the "not_found" error.
type DeleteTemplateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteTemplateConflictResponseBody is the type of the "templates" service
// "deleteTemplate" endpoint HTTP response body for the "conflict" error.
type DeleteTemplateConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteTemplateUnsupportedMediaResponseBody is the type of the "templates"
// service "deleteTemplate" endpoint HTTP response body for the
// "unsupported_media" error.
type DeleteTemplateUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteTemplateInvalidResponseBody is the type of the "templates" service
// "deleteTemplate" endpoint HTTP response body for the "invalid" error.
type DeleteTemplateInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteTemplateInvariantViolationResponseBody is the type of the "templates"
// service "deleteTemplate" endpoint HTTP response body for the
// "invariant_violation" error.
type DeleteTemplateInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteTemplateUnexpectedResponseBody is the type of the "templates" service
// "deleteTemplate" endpoint HTTP response body for the "unexpected" error.
type DeleteTemplateUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteTemplateGatewayErrorResponseBody is the type of the "templates"
// service "deleteTemplate" endpoint HTTP response body for the "gateway_error"
// error.
type DeleteTemplateGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateByIDUnauthorizedResponseBody is the type of the "templates"
// service "renderTemplateByID" endpoint HTTP response body for the
// "unauthorized" error.
type RenderTemplateByIDUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateByIDForbiddenResponseBody is the type of the "templates"
// service "renderTemplateByID" endpoint HTTP response body for the "forbidden"
// error.
type RenderTemplateByIDForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateByIDBadRequestResponseBody is the type of the "templates"
// service "renderTemplateByID" endpoint HTTP response body for the
// "bad_request" error.
type RenderTemplateByIDBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateByIDNotFoundResponseBody is the type of the "templates"
// service "renderTemplateByID" endpoint HTTP response body for the "not_found"
// error.
type RenderTemplateByIDNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateByIDConflictResponseBody is the type of the "templates"
// service "renderTemplateByID" endpoint HTTP response body for the "conflict"
// error.
type RenderTemplateByIDConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateByIDUnsupportedMediaResponseBody is the type of the
// "templates" service "renderTemplateByID" endpoint HTTP response body for the
// "unsupported_media" error.
type RenderTemplateByIDUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateByIDInvalidResponseBody is the type of the "templates" service
// "renderTemplateByID" endpoint HTTP response body for the "invalid" error.
type RenderTemplateByIDInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateByIDInvariantViolationResponseBody is the type of the
// "templates" service "renderTemplateByID" endpoint HTTP response body for the
// "invariant_violation" error.
type RenderTemplateByIDInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateByIDUnexpectedResponseBody is the type of the "templates"
// service "renderTemplateByID" endpoint HTTP response body for the
// "unexpected" error.
type RenderTemplateByIDUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateByIDGatewayErrorResponseBody is the type of the "templates"
// service "renderTemplateByID" endpoint HTTP response body for the
// "gateway_error" error.
type RenderTemplateByIDGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateUnauthorizedResponseBody is the type of the "templates"
// service "renderTemplate" endpoint HTTP response body for the "unauthorized"
// error.
type RenderTemplateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateForbiddenResponseBody is the type of the "templates" service
// "renderTemplate" endpoint HTTP response body for the "forbidden" error.
type RenderTemplateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateBadRequestResponseBody is the type of the "templates" service
// "renderTemplate" endpoint HTTP response body for the "bad_request" error.
type RenderTemplateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateNotFoundResponseBody is the type of the "templates" service
// "renderTemplate" endpoint HTTP response body for the "not_found" error.
type RenderTemplateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateConflictResponseBody is the type of the "templates" service
// "renderTemplate" endpoint HTTP response body for the "conflict" error.
type RenderTemplateConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateUnsupportedMediaResponseBody is the type of the "templates"
// service "renderTemplate" endpoint HTTP response body for the
// "unsupported_media" error.
type RenderTemplateUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateInvalidResponseBody is the type of the "templates" service
// "renderTemplate" endpoint HTTP response body for the "invalid" error.
type RenderTemplateInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateInvariantViolationResponseBody is the type of the "templates"
// service "renderTemplate" endpoint HTTP response body for the
// "invariant_violation" error.
type RenderTemplateInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateUnexpectedResponseBody is the type of the "templates" service
// "renderTemplate" endpoint HTTP response body for the "unexpected" error.
type RenderTemplateUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RenderTemplateGatewayErrorResponseBody is the type of the "templates"
// service "renderTemplate" endpoint HTTP response body for the "gateway_error"
// error.
type RenderTemplateGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PromptTemplateResponseBody is used to define fields on response body types.
type PromptTemplateResponseBody struct {
	// The ID of the prompt template
	ID string `form:"id" json:"id" xml:"id"`
	// The revision tree ID for the prompt template
	HistoryID string `form:"history_id" json:"history_id" xml:"history_id"`
	// The previous version of the prompt template to use as predecessor
	PredecessorID *string `form:"predecessor_id,omitempty" json:"predecessor_id,omitempty" xml:"predecessor_id,omitempty"`
	// The name of the prompt template
	Name string `form:"name" json:"name" xml:"name"`
	// The template content
	Prompt string `form:"prompt" json:"prompt" xml:"prompt"`
	// The description of the prompt template
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The JSON Schema defining the placeholders found in the prompt template
	Arguments *string `form:"arguments,omitempty" json:"arguments,omitempty" xml:"arguments,omitempty"`
	// The template engine
	Engine string `form:"engine" json:"engine" xml:"engine"`
	// The kind of prompt the template is used for
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// The suggested tool names associated with the prompt template
	ToolsHint []string `form:"tools_hint" json:"tools_hint" xml:"tools_hint"`
	// The creation date of the prompt template.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the prompt template.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewCreateTemplateResponseBody builds the HTTP response body from the result
// of the "createTemplate" endpoint of the "templates" service.
func NewCreateTemplateResponseBody(res *templates.CreatePromptTemplateResult) *CreateTemplateResponseBody {
	body := &CreateTemplateResponseBody{}
	if res.Template != nil {
		body.Template = marshalTypesPromptTemplateToPromptTemplateResponseBody(res.Template)
	}
	return body
}

// NewUpdateTemplateResponseBody builds the HTTP response body from the result
// of the "updateTemplate" endpoint of the "templates" service.
func NewUpdateTemplateResponseBody(res *templates.UpdatePromptTemplateResult) *UpdateTemplateResponseBody {
	body := &UpdateTemplateResponseBody{}
	if res.Template != nil {
		body.Template = marshalTypesPromptTemplateToPromptTemplateResponseBody(res.Template)
	}
	return body
}

// NewGetTemplateResponseBody builds the HTTP response body from the result of
// the "getTemplate" endpoint of the "templates" service.
func NewGetTemplateResponseBody(res *templates.GetPromptTemplateResult) *GetTemplateResponseBody {
	body := &GetTemplateResponseBody{}
	if res.Template != nil {
		body.Template = marshalTypesPromptTemplateToPromptTemplateResponseBody(res.Template)
	}
	return body
}

// NewListTemplatesResponseBody builds the HTTP response body from the result
// of the "listTemplates" endpoint of the "templates" service.
func NewListTemplatesResponseBody(res *templates.ListPromptTemplatesResult) *ListTemplatesResponseBody {
	body := &ListTemplatesResponseBody{}
	if res.Templates != nil {
		body.Templates = make([]*PromptTemplateResponseBody, len(res.Templates))
		for i, val := range res.Templates {
			body.Templates[i] = marshalTypesPromptTemplateToPromptTemplateResponseBody(val)
		}
	} else {
		body.Templates = []*PromptTemplateResponseBody{}
	}
	return body
}

// NewRenderTemplateByIDResponseBody builds the HTTP response body from the
// result of the "renderTemplateByID" endpoint of the "templates" service.
func NewRenderTemplateByIDResponseBody(res *templates.RenderTemplateResult) *RenderTemplateByIDResponseBody {
	body := &RenderTemplateByIDResponseBody{
		Prompt: res.Prompt,
	}
	return body
}

// NewRenderTemplateResponseBody builds the HTTP response body from the result
// of the "renderTemplate" endpoint of the "templates" service.
func NewRenderTemplateResponseBody(res *templates.RenderTemplateResult) *RenderTemplateResponseBody {
	body := &RenderTemplateResponseBody{
		Prompt: res.Prompt,
	}
	return body
}

// NewCreateTemplateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "createTemplate" endpoint of the "templates" service.
func NewCreateTemplateUnauthorizedResponseBody(res *goa.ServiceError) *CreateTemplateUnauthorizedResponseBody {
	body := &CreateTemplateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTemplateForbiddenResponseBody builds the HTTP response body from
// the result of the "createTemplate" endpoint of the "templates" service.
func NewCreateTemplateForbiddenResponseBody(res *goa.ServiceError) *CreateTemplateForbiddenResponseBody {
	body := &CreateTemplateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTemplateBadRequestResponseBody builds the HTTP response body from
// the result of the "createTemplate" endpoint of the "templates" service.
func NewCreateTemplateBadRequestResponseBody(res *goa.ServiceError) *CreateTemplateBadRequestResponseBody {
	body := &CreateTemplateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTemplateNotFoundResponseBody builds the HTTP response body from the
// result of the "createTemplate" endpoint of the "templates" service.
func NewCreateTemplateNotFoundResponseBody(res *goa.ServiceError) *CreateTemplateNotFoundResponseBody {
	body := &CreateTemplateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTemplateConflictResponseBody builds the HTTP response body from the
// result of the "createTemplate" endpoint of the "templates" service.
func NewCreateTemplateConflictResponseBody(res *goa.ServiceError) *CreateTemplateConflictResponseBody {
	body := &CreateTemplateConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTemplateUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "createTemplate" endpoint of the "templates" service.
func NewCreateTemplateUnsupportedMediaResponseBody(res *goa.ServiceError) *CreateTemplateUnsupportedMediaResponseBody {
	body := &CreateTemplateUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTemplateInvalidResponseBody builds the HTTP response body from the
// result of the "createTemplate" endpoint of the "templates" service.
func NewCreateTemplateInvalidResponseBody(res *goa.ServiceError) *CreateTemplateInvalidResponseBody {
	body := &CreateTemplateInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTemplateInvariantViolationResponseBody builds the HTTP response
// body from the result of the "createTemplate" endpoint of the "templates"
// service.
func NewCreateTemplateInvariantViolationResponseBody(res *goa.ServiceError) *CreateTemplateInvariantViolationResponseBody {
	body := &CreateTemplateInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTemplateUnexpectedResponseBody builds the HTTP response body from
// the result of the "createTemplate" endpoint of the "templates" service.
func NewCreateTemplateUnexpectedResponseBody(res *goa.ServiceError) *CreateTemplateUnexpectedResponseBody {
	body := &CreateTemplateUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTemplateGatewayErrorResponseBody builds the HTTP response body from
// the result of the "createTemplate" endpoint of the "templates" service.
func NewCreateTemplateGatewayErrorResponseBody(res *goa.ServiceError) *CreateTemplateGatewayErrorResponseBody {
	body := &CreateTemplateGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateTemplateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "updateTemplate" endpoint of the "templates" service.
func NewUpdateTemplateUnauthorizedResponseBody(res *goa.ServiceError) *UpdateTemplateUnauthorizedResponseBody {
	body := &UpdateTemplateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateTemplateForbiddenResponseBody builds the HTTP response body from
// the result of the "updateTemplate" endpoint of the "templates" service.
func NewUpdateTemplateForbiddenResponseBody(res *goa.ServiceError) *UpdateTemplateForbiddenResponseBody {
	body := &UpdateTemplateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateTemplateBadRequestResponseBody builds the HTTP response body from
// the result of the "updateTemplate" endpoint of the "templates" service.
func NewUpdateTemplateBadRequestResponseBody(res *goa.ServiceError) *UpdateTemplateBadRequestResponseBody {
	body := &UpdateTemplateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateTemplateNotFoundResponseBody builds the HTTP response body from the
// result of the "updateTemplate" endpoint of the "templates" service.
func NewUpdateTemplateNotFoundResponseBody(res *goa.ServiceError) *UpdateTemplateNotFoundResponseBody {
	body := &UpdateTemplateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateTemplateConflictResponseBody builds the HTTP response body from the
// result of the "updateTemplate" endpoint of the "templates" service.
func NewUpdateTemplateConflictResponseBody(res *goa.ServiceError) *UpdateTemplateConflictResponseBody {
	body := &UpdateTemplateConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateTemplateUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "updateTemplate" endpoint of the "templates" service.
func NewUpdateTemplateUnsupportedMediaResponseBody(res *goa.ServiceError) *UpdateTemplateUnsupportedMediaResponseBody {
	body := &UpdateTemplateUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateTemplateInvalidResponseBody builds the HTTP response body from the
// result of the "updateTemplate" endpoint of the "templates" service.
func NewUpdateTemplateInvalidResponseBody(res *goa.ServiceError) *UpdateTemplateInvalidResponseBody {
	body := &UpdateTemplateInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateTemplateInvariantViolationResponseBody builds the HTTP response
// body from the result of the "updateTemplate" endpoint of the "templates"
// service.
func NewUpdateTemplateInvariantViolationResponseBody(res *goa.ServiceError) *UpdateTemplateInvariantViolationResponseBody {
	body := &UpdateTemplateInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateTemplateUnexpectedResponseBody builds the HTTP response body from
// the result of the "updateTemplate" endpoint of the "templates" service.
func NewUpdateTemplateUnexpectedResponseBody(res *goa.ServiceError) *UpdateTemplateUnexpectedResponseBody {
	body := &UpdateTemplateUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateTemplateGatewayErrorResponseBody builds the HTTP response body from
// the result of the "updateTemplate" endpoint of the "templates" service.
func NewUpdateTemplateGatewayErrorResponseBody(res *goa.ServiceError) *UpdateTemplateGatewayErrorResponseBody {
	body := &UpdateTemplateGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetTemplateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "getTemplate" endpoint of the "templates" service.
func NewGetTemplateUnauthorizedResponseBody(res *goa.ServiceError) *GetTemplateUnauthorizedResponseBody {
	body := &GetTemplateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetTemplateForbiddenResponseBody builds the HTTP response body from the
// result of the "getTemplate" endpoint of the "templates" service.
func NewGetTemplateForbiddenResponseBody(res *goa.ServiceError) *GetTemplateForbiddenResponseBody {
	body := &GetTemplateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetTemplateBadRequestResponseBody builds the HTTP response body from the
// result of the "getTemplate" endpoint of the "templates" service.
func NewGetTemplateBadRequestResponseBody(res *goa.ServiceError) *GetTemplateBadRequestResponseBody {
	body := &GetTemplateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetTemplateNotFoundResponseBody builds the HTTP response body from the
// result of the "getTemplate" endpoint of the "templates" service.
func NewGetTemplateNotFoundResponseBody(res *goa.ServiceError) *GetTemplateNotFoundResponseBody {
	body := &GetTemplateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetTemplateConflictResponseBody builds the HTTP response body from the
// result of the "getTemplate" endpoint of the "templates" service.
func NewGetTemplateConflictResponseBody(res *goa.ServiceError) *GetTemplateConflictResponseBody {
	body := &GetTemplateConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetTemplateUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "getTemplate" endpoint of the "templates" service.
func NewGetTemplateUnsupportedMediaResponseBody(res *goa.ServiceError) *GetTemplateUnsupportedMediaResponseBody {
	body := &GetTemplateUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetTemplateInvalidResponseBody builds the HTTP response body from the
// result of the "getTemplate" endpoint of the "templates" service.
func NewGetTemplateInvalidResponseBody(res *goa.ServiceError) *GetTemplateInvalidResponseBody {
	body := &GetTemplateInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetTemplateInvariantViolationResponseBody builds the HTTP response body
// from the result of the "getTemplate" endpoint of the "templates" service.
func NewGetTemplateInvariantViolationResponseBody(res *goa.ServiceError) *GetTemplateInvariantViolationResponseBody {
	body := &GetTemplateInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetTemplateUnexpectedResponseBody builds the HTTP response body from the
// result of the "getTemplate" endpoint of the "templates" service.
func NewGetTemplateUnexpectedResponseBody(res *goa.ServiceError) *GetTemplateUnexpectedResponseBody {
	body := &GetTemplateUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetTemplateGatewayErrorResponseBody builds the HTTP response body from
// the result of the "getTemplate" endpoint of the "templates" service.
func NewGetTemplateGatewayErrorResponseBody(res *goa.ServiceError) *GetTemplateGatewayErrorResponseBody {
	body := &GetTemplateGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListTemplatesUnauthorizedResponseBody builds the HTTP response body from
// the result of the "listTemplates" endpoint of the "templates" service.
func NewListTemplatesUnauthorizedResponseBody(res *goa.ServiceError) *ListTemplatesUnauthorizedResponseBody {
	body := &ListTemplatesUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListTemplatesForbiddenResponseBody builds the HTTP response body from the
// result of the "listTemplates" endpoint of the "templates" service.
func NewListTemplatesForbiddenResponseBody(res *goa.ServiceError) *ListTemplatesForbiddenResponseBody {
	body := &ListTemplatesForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListTemplatesBadRequestResponseBody builds the HTTP response body from
// the result of the "listTemplates" endpoint of the "templates" service.
func NewListTemplatesBadRequestResponseBody(res *goa.ServiceError) *ListTemplatesBadRequestResponseBody {
	body := &ListTemplatesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListTemplatesNotFoundResponseBody builds the HTTP response body from the
// result of the "listTemplates" endpoint of the "templates" service.
func NewListTemplatesNotFoundResponseBody(res *goa.ServiceError) *ListTemplatesNotFoundResponseBody {
	body := &ListTemplatesNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListTemplatesConflictResponseBody builds the HTTP response body from the
// result of the "listTemplates" endpoint of the "templates" service.
func NewListTemplatesConflictResponseBody(res *goa.ServiceError) *ListTemplatesConflictResponseBody {
	body := &ListTemplatesConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListTemplatesUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "listTemplates" endpoint of the "templates" service.
func NewListTemplatesUnsupportedMediaResponseBody(res *goa.ServiceError) *ListTemplatesUnsupportedMediaResponseBody {
	body := &ListTemplatesUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListTemplatesInvalidResponseBody builds the HTTP response body from the
// result of the "listTemplates" endpoint of the "templates" service.
func NewListTemplatesInvalidResponseBody(res *goa.ServiceError) *ListTemplatesInvalidResponseBody {
	body := &ListTemplatesInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListTemplatesInvariantViolationResponseBody builds the HTTP response body
// from the result of the "listTemplates" endpoint of the "templates" service.
func NewListTemplatesInvariantViolationResponseBody(res *goa.ServiceError) *ListTemplatesInvariantViolationResponseBody {
	body := &ListTemplatesInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListTemplatesUnexpectedResponseBody builds the HTTP response body from
// the result of the "listTemplates" endpoint of the "templates" service.
func NewListTemplatesUnexpectedResponseBody(res *goa.ServiceError) *ListTemplatesUnexpectedResponseBody {
	body := &ListTemplatesUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListTemplatesGatewayErrorResponseBody builds the HTTP response body from
// the result of the "listTemplates" endpoint of the "templates" service.
func NewListTemplatesGatewayErrorResponseBody(res *goa.ServiceError) *ListTemplatesGatewayErrorResponseBody {
	body := &ListTemplatesGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteTemplateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "deleteTemplate" endpoint of the "templates" service.
func NewDeleteTemplateUnauthorizedResponseBody(res *goa.ServiceError) *DeleteTemplateUnauthorizedResponseBody {
	body := &DeleteTemplateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteTemplateForbiddenResponseBody builds the HTTP response body from
// the result of the "deleteTemplate" endpoint of the "templates" service.
func NewDeleteTemplateForbiddenResponseBody(res *goa.ServiceError) *DeleteTemplateForbiddenResponseBody {
	body := &DeleteTemplateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteTemplateBadRequestResponseBody builds the HTTP response body from
// the result of the "deleteTemplate" endpoint of the "templates" service.
func NewDeleteTemplateBadRequestResponseBody(res *goa.ServiceError) *DeleteTemplateBadRequestResponseBody {
	body := &DeleteTemplateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteTemplateNotFoundResponseBody builds the HTTP response body from the
// result of the "deleteTemplate" endpoint of the "templates" service.
func NewDeleteTemplateNotFoundResponseBody(res *goa.ServiceError) *DeleteTemplateNotFoundResponseBody {
	body := &DeleteTemplateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteTemplateConflictResponseBody builds the HTTP response body from the
// result of the "deleteTemplate" endpoint of the "templates" service.
func NewDeleteTemplateConflictResponseBody(res *goa.ServiceError) *DeleteTemplateConflictResponseBody {
	body := &DeleteTemplateConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteTemplateUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "deleteTemplate" endpoint of the "templates" service.
func NewDeleteTemplateUnsupportedMediaResponseBody(res *goa.ServiceError) *DeleteTemplateUnsupportedMediaResponseBody {
	body := &DeleteTemplateUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteTemplateInvalidResponseBody builds the HTTP response body from the
// result of the "deleteTemplate" endpoint of the "templates" service.
func NewDeleteTemplateInvalidResponseBody(res *goa.ServiceError) *DeleteTemplateInvalidResponseBody {
	body := &DeleteTemplateInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteTemplateInvariantViolationResponseBody builds the HTTP response
// body from the result of the "deleteTemplate" endpoint of the "templates"
// service.
func NewDeleteTemplateInvariantViolationResponseBody(res *goa.ServiceError) *DeleteTemplateInvariantViolationResponseBody {
	body := &DeleteTemplateInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteTemplateUnexpectedResponseBody builds the HTTP response body from
// the result of the "deleteTemplate" endpoint of the "templates" service.
func NewDeleteTemplateUnexpectedResponseBody(res *goa.ServiceError) *DeleteTemplateUnexpectedResponseBody {
	body := &DeleteTemplateUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteTemplateGatewayErrorResponseBody builds the HTTP response body from
// the result of the "deleteTemplate" endpoint of the "templates" service.
func NewDeleteTemplateGatewayErrorResponseBody(res *goa.ServiceError) *DeleteTemplateGatewayErrorResponseBody {
	body := &DeleteTemplateGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateByIDUnauthorizedResponseBody builds the HTTP response body
// from the result of the "renderTemplateByID" endpoint of the "templates"
// service.
func NewRenderTemplateByIDUnauthorizedResponseBody(res *goa.ServiceError) *RenderTemplateByIDUnauthorizedResponseBody {
	body := &RenderTemplateByIDUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateByIDForbiddenResponseBody builds the HTTP response body
// from the result of the "renderTemplateByID" endpoint of the "templates"
// service.
func NewRenderTemplateByIDForbiddenResponseBody(res *goa.ServiceError) *RenderTemplateByIDForbiddenResponseBody {
	body := &RenderTemplateByIDForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateByIDBadRequestResponseBody builds the HTTP response body
// from the result of the "renderTemplateByID" endpoint of the "templates"
// service.
func NewRenderTemplateByIDBadRequestResponseBody(res *goa.ServiceError) *RenderTemplateByIDBadRequestResponseBody {
	body := &RenderTemplateByIDBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateByIDNotFoundResponseBody builds the HTTP response body from
// the result of the "renderTemplateByID" endpoint of the "templates" service.
func NewRenderTemplateByIDNotFoundResponseBody(res *goa.ServiceError) *RenderTemplateByIDNotFoundResponseBody {
	body := &RenderTemplateByIDNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateByIDConflictResponseBody builds the HTTP response body from
// the result of the "renderTemplateByID" endpoint of the "templates" service.
func NewRenderTemplateByIDConflictResponseBody(res *goa.ServiceError) *RenderTemplateByIDConflictResponseBody {
	body := &RenderTemplateByIDConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateByIDUnsupportedMediaResponseBody builds the HTTP response
// body from the result of the "renderTemplateByID" endpoint of the "templates"
// service.
func NewRenderTemplateByIDUnsupportedMediaResponseBody(res *goa.ServiceError) *RenderTemplateByIDUnsupportedMediaResponseBody {
	body := &RenderTemplateByIDUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateByIDInvalidResponseBody builds the HTTP response body from
// the result of the "renderTemplateByID" endpoint of the "templates" service.
func NewRenderTemplateByIDInvalidResponseBody(res *goa.ServiceError) *RenderTemplateByIDInvalidResponseBody {
	body := &RenderTemplateByIDInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateByIDInvariantViolationResponseBody builds the HTTP response
// body from the result of the "renderTemplateByID" endpoint of the "templates"
// service.
func NewRenderTemplateByIDInvariantViolationResponseBody(res *goa.ServiceError) *RenderTemplateByIDInvariantViolationResponseBody {
	body := &RenderTemplateByIDInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateByIDUnexpectedResponseBody builds the HTTP response body
// from the result of the "renderTemplateByID" endpoint of the "templates"
// service.
func NewRenderTemplateByIDUnexpectedResponseBody(res *goa.ServiceError) *RenderTemplateByIDUnexpectedResponseBody {
	body := &RenderTemplateByIDUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateByIDGatewayErrorResponseBody builds the HTTP response body
// from the result of the "renderTemplateByID" endpoint of the "templates"
// service.
func NewRenderTemplateByIDGatewayErrorResponseBody(res *goa.ServiceError) *RenderTemplateByIDGatewayErrorResponseBody {
	body := &RenderTemplateByIDGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "renderTemplate" endpoint of the "templates" service.
func NewRenderTemplateUnauthorizedResponseBody(res *goa.ServiceError) *RenderTemplateUnauthorizedResponseBody {
	body := &RenderTemplateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateForbiddenResponseBody builds the HTTP response body from
// the result of the "renderTemplate" endpoint of the "templates" service.
func NewRenderTemplateForbiddenResponseBody(res *goa.ServiceError) *RenderTemplateForbiddenResponseBody {
	body := &RenderTemplateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateBadRequestResponseBody builds the HTTP response body from
// the result of the "renderTemplate" endpoint of the "templates" service.
func NewRenderTemplateBadRequestResponseBody(res *goa.ServiceError) *RenderTemplateBadRequestResponseBody {
	body := &RenderTemplateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateNotFoundResponseBody builds the HTTP response body from the
// result of the "renderTemplate" endpoint of the "templates" service.
func NewRenderTemplateNotFoundResponseBody(res *goa.ServiceError) *RenderTemplateNotFoundResponseBody {
	body := &RenderTemplateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateConflictResponseBody builds the HTTP response body from the
// result of the "renderTemplate" endpoint of the "templates" service.
func NewRenderTemplateConflictResponseBody(res *goa.ServiceError) *RenderTemplateConflictResponseBody {
	body := &RenderTemplateConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "renderTemplate" endpoint of the "templates" service.
func NewRenderTemplateUnsupportedMediaResponseBody(res *goa.ServiceError) *RenderTemplateUnsupportedMediaResponseBody {
	body := &RenderTemplateUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateInvalidResponseBody builds the HTTP response body from the
// result of the "renderTemplate" endpoint of the "templates" service.
func NewRenderTemplateInvalidResponseBody(res *goa.ServiceError) *RenderTemplateInvalidResponseBody {
	body := &RenderTemplateInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateInvariantViolationResponseBody builds the HTTP response
// body from the result of the "renderTemplate" endpoint of the "templates"
// service.
func NewRenderTemplateInvariantViolationResponseBody(res *goa.ServiceError) *RenderTemplateInvariantViolationResponseBody {
	body := &RenderTemplateInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateUnexpectedResponseBody builds the HTTP response body from
// the result of the "renderTemplate" endpoint of the "templates" service.
func NewRenderTemplateUnexpectedResponseBody(res *goa.ServiceError) *RenderTemplateUnexpectedResponseBody {
	body := &RenderTemplateUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRenderTemplateGatewayErrorResponseBody builds the HTTP response body from
// the result of the "renderTemplate" endpoint of the "templates" service.
func NewRenderTemplateGatewayErrorResponseBody(res *goa.ServiceError) *RenderTemplateGatewayErrorResponseBody {
	body := &RenderTemplateGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTemplatePayload builds a templates service createTemplate endpoint
// payload.
func NewCreateTemplatePayload(body *CreateTemplateRequestBody, apikeyToken *string, sessionToken *string, projectSlugInput *string) *templates.CreateTemplatePayload {
	v := &templates.CreateTemplatePayload{
		Name:        types.Slug(*body.Name),
		Prompt:      *body.Prompt,
		Description: body.Description,
		Arguments:   body.Arguments,
		Engine:      *body.Engine,
		Kind:        *body.Kind,
	}
	if body.ToolsHint != nil {
		v.ToolsHint = make([]string, len(body.ToolsHint))
		for i, val := range body.ToolsHint {
			v.ToolsHint[i] = val
		}
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewUpdateTemplatePayload builds a templates service updateTemplate endpoint
// payload.
func NewUpdateTemplatePayload(body *UpdateTemplateRequestBody, apikeyToken *string, sessionToken *string, projectSlugInput *string) *templates.UpdateTemplatePayload {
	v := &templates.UpdateTemplatePayload{
		ID:          *body.ID,
		Prompt:      body.Prompt,
		Description: body.Description,
		Arguments:   body.Arguments,
		Engine:      body.Engine,
		Kind:        body.Kind,
	}
	if body.ToolsHint != nil {
		v.ToolsHint = make([]string, len(body.ToolsHint))
		for i, val := range body.ToolsHint {
			v.ToolsHint[i] = val
		}
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewGetTemplatePayload builds a templates service getTemplate endpoint
// payload.
func NewGetTemplatePayload(id *string, name *string, apikeyToken *string, sessionToken *string, projectSlugInput *string) *templates.GetTemplatePayload {
	v := &templates.GetTemplatePayload{}
	v.ID = id
	v.Name = name
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewListTemplatesPayload builds a templates service listTemplates endpoint
// payload.
func NewListTemplatesPayload(apikeyToken *string, sessionToken *string, projectSlugInput *string) *templates.ListTemplatesPayload {
	v := &templates.ListTemplatesPayload{}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewDeleteTemplatePayload builds a templates service deleteTemplate endpoint
// payload.
func NewDeleteTemplatePayload(id *string, name *string, apikeyToken *string, sessionToken *string, projectSlugInput *string) *templates.DeleteTemplatePayload {
	v := &templates.DeleteTemplatePayload{}
	v.ID = id
	v.Name = name
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewRenderTemplateByIDPayload builds a templates service renderTemplateByID
// endpoint payload.
func NewRenderTemplateByIDPayload(body *RenderTemplateByIDRequestBody, id string, apikeyToken *string, sessionToken *string, projectSlugInput *string) *templates.RenderTemplateByIDPayload {
	v := &templates.RenderTemplateByIDPayload{}
	v.Arguments = make(map[string]any, len(body.Arguments))
	for key, val := range body.Arguments {
		tk := key
		tv := val
		v.Arguments[tk] = tv
	}
	v.ID = id
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewRenderTemplatePayload builds a templates service renderTemplate endpoint
// payload.
func NewRenderTemplatePayload(body *RenderTemplateRequestBody, apikeyToken *string, sessionToken *string, projectSlugInput *string) *templates.RenderTemplatePayload {
	v := &templates.RenderTemplatePayload{
		Prompt: *body.Prompt,
		Engine: *body.Engine,
		Kind:   *body.Kind,
	}
	v.Arguments = make(map[string]any, len(body.Arguments))
	for key, val := range body.Arguments {
		tk := key
		tv := val
		v.Arguments[tk] = tv
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// ValidateCreateTemplateRequestBody runs the validations defined on
// CreateTemplateRequestBody
func ValidateCreateTemplateRequestBody(body *CreateTemplateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Prompt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("prompt", "body"))
	}
	if body.Engine == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("engine", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.Name != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.name", *body.Name, "^[a-z0-9]+(?:[a-z0-9_-]*[a-z0-9])?$"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Arguments != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.arguments", *body.Arguments, goa.FormatJSON))
	}
	if body.Engine != nil {
		if !(*body.Engine == "mustache") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.engine", *body.Engine, []any{"mustache"}))
		}
	}
	if body.Kind != nil {
		if !(*body.Kind == "prompt" || *body.Kind == "higher_order_tool") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", *body.Kind, []any{"prompt", "higher_order_tool"}))
		}
	}
	if len(body.ToolsHint) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.tools_hint", body.ToolsHint, len(body.ToolsHint), 20, false))
	}
	return
}

// ValidateUpdateTemplateRequestBody runs the validations defined on
// UpdateTemplateRequestBody
func ValidateUpdateTemplateRequestBody(body *UpdateTemplateRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Arguments != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.arguments", *body.Arguments, goa.FormatJSON))
	}
	if body.Engine != nil {
		if !(*body.Engine == "mustache") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.engine", *body.Engine, []any{"mustache"}))
		}
	}
	if body.Kind != nil {
		if !(*body.Kind == "prompt" || *body.Kind == "higher_order_tool") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", *body.Kind, []any{"prompt", "higher_order_tool"}))
		}
	}
	if len(body.ToolsHint) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.tools_hint", body.ToolsHint, len(body.ToolsHint), 20, false))
	}
	return
}

// ValidateRenderTemplateByIDRequestBody runs the validations defined on
// RenderTemplateByIDRequestBody
func ValidateRenderTemplateByIDRequestBody(body *RenderTemplateByIDRequestBody) (err error) {
	if body.Arguments == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("arguments", "body"))
	}
	return
}

// ValidateRenderTemplateRequestBody runs the validations defined on
// RenderTemplateRequestBody
func ValidateRenderTemplateRequestBody(body *RenderTemplateRequestBody) (err error) {
	if body.Prompt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("prompt", "body"))
	}
	if body.Arguments == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("arguments", "body"))
	}
	if body.Engine == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("engine", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.Engine != nil {
		if !(*body.Engine == "mustache") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.engine", *body.Engine, []any{"mustache"}))
		}
	}
	if body.Kind != nil {
		if !(*body.Kind == "prompt" || *body.Kind == "higher_order_tool") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", *body.Kind, []any{"prompt", "higher_order_tool"}))
		}
	}
	return
}
