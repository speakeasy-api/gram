// Code generated by goa v3.22.2, DO NOT EDIT.
//
// integrations HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	integrations "github.com/speakeasy-api/gram/server/gen/integrations"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetPayload builds the payload for the integrations get endpoint from
// CLI flags.
func BuildGetPayload(integrationsGetID string, integrationsGetName string, integrationsGetSessionToken string, integrationsGetProjectSlugInput string) (*integrations.GetPayload, error) {
	var id *string
	{
		if integrationsGetID != "" {
			id = &integrationsGetID
		}
	}
	var name *string
	{
		if integrationsGetName != "" {
			name = &integrationsGetName
		}
	}
	var sessionToken *string
	{
		if integrationsGetSessionToken != "" {
			sessionToken = &integrationsGetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if integrationsGetProjectSlugInput != "" {
			projectSlugInput = &integrationsGetProjectSlugInput
		}
	}
	v := &integrations.GetPayload{}
	v.ID = id
	v.Name = name
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildListPayload builds the payload for the integrations list endpoint from
// CLI flags.
func BuildListPayload(integrationsListKeywords string, integrationsListSessionToken string, integrationsListProjectSlugInput string) (*integrations.ListPayload, error) {
	var err error
	var keywords []string
	{
		if integrationsListKeywords != "" {
			err = json.Unmarshal([]byte(integrationsListKeywords), &keywords)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for keywords, \nerror: %s, \nexample of valid JSON:\n%s", err, "'[\n      \"he9\",\n      \"8ed\",\n      \"9cz\"\n   ]'")
			}
			for _, e := range keywords {
				if utf8.RuneCountInString(e) > 20 {
					err = goa.MergeErrors(err, goa.InvalidLengthError("keywords[*]", e, utf8.RuneCountInString(e), 20, false))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var sessionToken *string
	{
		if integrationsListSessionToken != "" {
			sessionToken = &integrationsListSessionToken
		}
	}
	var projectSlugInput *string
	{
		if integrationsListProjectSlugInput != "" {
			projectSlugInput = &integrationsListProjectSlugInput
		}
	}
	v := &integrations.ListPayload{}
	v.Keywords = keywords
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}
