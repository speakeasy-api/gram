// Code generated by goa v3.22.2, DO NOT EDIT.
//
// projects HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	projects "github.com/speakeasy-api/gram/server/gen/projects"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateProjectRequest instantiates a HTTP request object with method and
// path set to call the "projects" service "createProject" endpoint
func (c *Client) BuildCreateProjectRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateProjectProjectsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("projects", "createProject", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateProjectRequest returns an encoder for requests sent to the
// projects createProject server.
func EncodeCreateProjectRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*projects.CreateProjectPayload)
		if !ok {
			return goahttp.ErrInvalidType("projects", "createProject", "*projects.CreateProjectPayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		body := NewCreateProjectRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("projects", "createProject", err)
		}
		return nil
	}
}

// DecodeCreateProjectResponse returns a decoder for responses returned by the
// projects createProject endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateProjectResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeCreateProjectResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateProjectResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "createProject", err)
			}
			err = ValidateCreateProjectResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "createProject", err)
			}
			res := NewCreateProjectResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CreateProjectUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "createProject", err)
			}
			err = ValidateCreateProjectUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "createProject", err)
			}
			return nil, NewCreateProjectUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CreateProjectForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "createProject", err)
			}
			err = ValidateCreateProjectForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "createProject", err)
			}
			return nil, NewCreateProjectForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CreateProjectBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "createProject", err)
			}
			err = ValidateCreateProjectBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "createProject", err)
			}
			return nil, NewCreateProjectBadRequest(&body)
		case http.StatusNotFound:
			var (
				body CreateProjectNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "createProject", err)
			}
			err = ValidateCreateProjectNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "createProject", err)
			}
			return nil, NewCreateProjectNotFound(&body)
		case http.StatusConflict:
			var (
				body CreateProjectConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "createProject", err)
			}
			err = ValidateCreateProjectConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "createProject", err)
			}
			return nil, NewCreateProjectConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body CreateProjectUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "createProject", err)
			}
			err = ValidateCreateProjectUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "createProject", err)
			}
			return nil, NewCreateProjectUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body CreateProjectInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "createProject", err)
			}
			err = ValidateCreateProjectInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "createProject", err)
			}
			return nil, NewCreateProjectInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body CreateProjectInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("projects", "createProject", err)
				}
				err = ValidateCreateProjectInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("projects", "createProject", err)
				}
				return nil, NewCreateProjectInvariantViolation(&body)
			case "unexpected":
				var (
					body CreateProjectUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("projects", "createProject", err)
				}
				err = ValidateCreateProjectUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("projects", "createProject", err)
				}
				return nil, NewCreateProjectUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("projects", "createProject", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body CreateProjectGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "createProject", err)
			}
			err = ValidateCreateProjectGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "createProject", err)
			}
			return nil, NewCreateProjectGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("projects", "createProject", resp.StatusCode, string(body))
		}
	}
}

// BuildListProjectsRequest instantiates a HTTP request object with method and
// path set to call the "projects" service "listProjects" endpoint
func (c *Client) BuildListProjectsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListProjectsProjectsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("projects", "listProjects", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListProjectsRequest returns an encoder for requests sent to the
// projects listProjects server.
func EncodeListProjectsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*projects.ListProjectsPayload)
		if !ok {
			return goahttp.ErrInvalidType("projects", "listProjects", "*projects.ListProjectsPayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		values := req.URL.Query()
		values.Add("organization_id", p.OrganizationID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListProjectsResponse returns a decoder for responses returned by the
// projects listProjects endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListProjectsResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeListProjectsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListProjectsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "listProjects", err)
			}
			err = ValidateListProjectsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "listProjects", err)
			}
			res := NewListProjectsResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListProjectsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "listProjects", err)
			}
			err = ValidateListProjectsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "listProjects", err)
			}
			return nil, NewListProjectsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListProjectsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "listProjects", err)
			}
			err = ValidateListProjectsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "listProjects", err)
			}
			return nil, NewListProjectsForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ListProjectsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "listProjects", err)
			}
			err = ValidateListProjectsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "listProjects", err)
			}
			return nil, NewListProjectsBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ListProjectsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "listProjects", err)
			}
			err = ValidateListProjectsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "listProjects", err)
			}
			return nil, NewListProjectsNotFound(&body)
		case http.StatusConflict:
			var (
				body ListProjectsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "listProjects", err)
			}
			err = ValidateListProjectsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "listProjects", err)
			}
			return nil, NewListProjectsConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ListProjectsUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "listProjects", err)
			}
			err = ValidateListProjectsUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "listProjects", err)
			}
			return nil, NewListProjectsUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ListProjectsInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "listProjects", err)
			}
			err = ValidateListProjectsInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "listProjects", err)
			}
			return nil, NewListProjectsInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ListProjectsInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("projects", "listProjects", err)
				}
				err = ValidateListProjectsInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("projects", "listProjects", err)
				}
				return nil, NewListProjectsInvariantViolation(&body)
			case "unexpected":
				var (
					body ListProjectsUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("projects", "listProjects", err)
				}
				err = ValidateListProjectsUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("projects", "listProjects", err)
				}
				return nil, NewListProjectsUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("projects", "listProjects", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ListProjectsGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "listProjects", err)
			}
			err = ValidateListProjectsGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "listProjects", err)
			}
			return nil, NewListProjectsGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("projects", "listProjects", resp.StatusCode, string(body))
		}
	}
}

// BuildSetLogoRequest instantiates a HTTP request object with method and path
// set to call the "projects" service "setLogo" endpoint
func (c *Client) BuildSetLogoRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SetLogoProjectsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("projects", "setLogo", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSetLogoRequest returns an encoder for requests sent to the projects
// setLogo server.
func EncodeSetLogoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*projects.SetLogoPayload)
		if !ok {
			return goahttp.ErrInvalidType("projects", "setLogo", "*projects.SetLogoPayload", v)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewSetLogoRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("projects", "setLogo", err)
		}
		return nil
	}
}

// DecodeSetLogoResponse returns a decoder for responses returned by the
// projects setLogo endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeSetLogoResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeSetLogoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SetLogoResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "setLogo", err)
			}
			err = ValidateSetLogoResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "setLogo", err)
			}
			res := NewSetLogoSetProjectLogoResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body SetLogoUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "setLogo", err)
			}
			err = ValidateSetLogoUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "setLogo", err)
			}
			return nil, NewSetLogoUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body SetLogoForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "setLogo", err)
			}
			err = ValidateSetLogoForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "setLogo", err)
			}
			return nil, NewSetLogoForbidden(&body)
		case http.StatusBadRequest:
			var (
				body SetLogoBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "setLogo", err)
			}
			err = ValidateSetLogoBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "setLogo", err)
			}
			return nil, NewSetLogoBadRequest(&body)
		case http.StatusNotFound:
			var (
				body SetLogoNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "setLogo", err)
			}
			err = ValidateSetLogoNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "setLogo", err)
			}
			return nil, NewSetLogoNotFound(&body)
		case http.StatusConflict:
			var (
				body SetLogoConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "setLogo", err)
			}
			err = ValidateSetLogoConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "setLogo", err)
			}
			return nil, NewSetLogoConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body SetLogoUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "setLogo", err)
			}
			err = ValidateSetLogoUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "setLogo", err)
			}
			return nil, NewSetLogoUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body SetLogoInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "setLogo", err)
			}
			err = ValidateSetLogoInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "setLogo", err)
			}
			return nil, NewSetLogoInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body SetLogoInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("projects", "setLogo", err)
				}
				err = ValidateSetLogoInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("projects", "setLogo", err)
				}
				return nil, NewSetLogoInvariantViolation(&body)
			case "unexpected":
				var (
					body SetLogoUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("projects", "setLogo", err)
				}
				err = ValidateSetLogoUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("projects", "setLogo", err)
				}
				return nil, NewSetLogoUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("projects", "setLogo", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body SetLogoGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "setLogo", err)
			}
			err = ValidateSetLogoGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "setLogo", err)
			}
			return nil, NewSetLogoGatewayError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("projects", "setLogo", resp.StatusCode, string(body))
		}
	}
}

// unmarshalProjectResponseBodyToProjectsProject builds a value of type
// *projects.Project from a value of type *ProjectResponseBody.
func unmarshalProjectResponseBodyToProjectsProject(v *ProjectResponseBody) *projects.Project {
	res := &projects.Project{
		ID:             *v.ID,
		Name:           *v.Name,
		Slug:           types.Slug(*v.Slug),
		OrganizationID: *v.OrganizationID,
		LogoAssetID:    v.LogoAssetID,
		CreatedAt:      *v.CreatedAt,
		UpdatedAt:      *v.UpdatedAt,
	}

	return res
}

// unmarshalProjectEntryResponseBodyToProjectsProjectEntry builds a value of
// type *projects.ProjectEntry from a value of type *ProjectEntryResponseBody.
func unmarshalProjectEntryResponseBodyToProjectsProjectEntry(v *ProjectEntryResponseBody) *projects.ProjectEntry {
	res := &projects.ProjectEntry{
		ID:   *v.ID,
		Name: *v.Name,
		Slug: types.Slug(*v.Slug),
	}

	return res
}
