// Code generated by goa v3.22.1, DO NOT EDIT.
//
// projects HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	projects "github.com/speakeasy-api/gram/server/gen/projects"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateProjectPayload builds the payload for the projects createProject
// endpoint from CLI flags.
func BuildCreateProjectPayload(projectsCreateProjectBody string, projectsCreateProjectApikeyToken string, projectsCreateProjectSessionToken string) (*projects.CreateProjectPayload, error) {
	var err error
	var body CreateProjectRequestBody
	{
		err = json.Unmarshal([]byte(projectsCreateProjectBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"z9p\",\n      \"organization_id\": \"Fugiat nihil deserunt magni earum est dolorem.\"\n   }'")
		}
		if utf8.RuneCountInString(body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 40, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var apikeyToken *string
	{
		if projectsCreateProjectApikeyToken != "" {
			apikeyToken = &projectsCreateProjectApikeyToken
		}
	}
	var sessionToken *string
	{
		if projectsCreateProjectSessionToken != "" {
			sessionToken = &projectsCreateProjectSessionToken
		}
	}
	v := &projects.CreateProjectPayload{
		OrganizationID: body.OrganizationID,
		Name:           body.Name,
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken

	return v, nil
}

// BuildListProjectsPayload builds the payload for the projects listProjects
// endpoint from CLI flags.
func BuildListProjectsPayload(projectsListProjectsOrganizationID string, projectsListProjectsSessionToken string, projectsListProjectsApikeyToken string) (*projects.ListProjectsPayload, error) {
	var organizationID string
	{
		organizationID = projectsListProjectsOrganizationID
	}
	var sessionToken *string
	{
		if projectsListProjectsSessionToken != "" {
			sessionToken = &projectsListProjectsSessionToken
		}
	}
	var apikeyToken *string
	{
		if projectsListProjectsApikeyToken != "" {
			apikeyToken = &projectsListProjectsApikeyToken
		}
	}
	v := &projects.ListProjectsPayload{}
	v.OrganizationID = organizationID
	v.SessionToken = sessionToken
	v.ApikeyToken = apikeyToken

	return v, nil
}
