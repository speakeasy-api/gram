// Code generated by goa v3.22.2, DO NOT EDIT.
//
// projects HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	"unicode/utf8"

	projects "github.com/speakeasy-api/gram/server/gen/projects"
	goa "goa.design/goa/v3/pkg"
)

// CreateProjectRequestBody is the type of the "projects" service
// "createProject" endpoint HTTP request body.
type CreateProjectRequestBody struct {
	// The ID of the organization to create the project in
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// SetLogoRequestBody is the type of the "projects" service "setLogo" endpoint
// HTTP request body.
type SetLogoRequestBody struct {
	// The ID of the asset
	AssetID *string `form:"asset_id,omitempty" json:"asset_id,omitempty" xml:"asset_id,omitempty"`
}

// CreateProjectResponseBody is the type of the "projects" service
// "createProject" endpoint HTTP response body.
type CreateProjectResponseBody struct {
	// The created project
	Project *ProjectResponseBody `form:"project" json:"project" xml:"project"`
}

// ListProjectsResponseBody is the type of the "projects" service
// "listProjects" endpoint HTTP response body.
type ListProjectsResponseBody struct {
	// The list of projects
	Projects []*ProjectEntryResponseBody `form:"projects" json:"projects" xml:"projects"`
}

// SetLogoResponseBody is the type of the "projects" service "setLogo" endpoint
// HTTP response body.
type SetLogoResponseBody struct {
	// The updated project with the new logo
	Project *ProjectResponseBody `form:"project" json:"project" xml:"project"`
}

// CreateProjectUnauthorizedResponseBody is the type of the "projects" service
// "createProject" endpoint HTTP response body for the "unauthorized" error.
type CreateProjectUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateProjectForbiddenResponseBody is the type of the "projects" service
// "createProject" endpoint HTTP response body for the "forbidden" error.
type CreateProjectForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateProjectBadRequestResponseBody is the type of the "projects" service
// "createProject" endpoint HTTP response body for the "bad_request" error.
type CreateProjectBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateProjectNotFoundResponseBody is the type of the "projects" service
// "createProject" endpoint HTTP response body for the "not_found" error.
type CreateProjectNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateProjectConflictResponseBody is the type of the "projects" service
// "createProject" endpoint HTTP response body for the "conflict" error.
type CreateProjectConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateProjectUnsupportedMediaResponseBody is the type of the "projects"
// service "createProject" endpoint HTTP response body for the
// "unsupported_media" error.
type CreateProjectUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateProjectInvalidResponseBody is the type of the "projects" service
// "createProject" endpoint HTTP response body for the "invalid" error.
type CreateProjectInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateProjectInvariantViolationResponseBody is the type of the "projects"
// service "createProject" endpoint HTTP response body for the
// "invariant_violation" error.
type CreateProjectInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateProjectUnexpectedResponseBody is the type of the "projects" service
// "createProject" endpoint HTTP response body for the "unexpected" error.
type CreateProjectUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateProjectGatewayErrorResponseBody is the type of the "projects" service
// "createProject" endpoint HTTP response body for the "gateway_error" error.
type CreateProjectGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListProjectsUnauthorizedResponseBody is the type of the "projects" service
// "listProjects" endpoint HTTP response body for the "unauthorized" error.
type ListProjectsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListProjectsForbiddenResponseBody is the type of the "projects" service
// "listProjects" endpoint HTTP response body for the "forbidden" error.
type ListProjectsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListProjectsBadRequestResponseBody is the type of the "projects" service
// "listProjects" endpoint HTTP response body for the "bad_request" error.
type ListProjectsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListProjectsNotFoundResponseBody is the type of the "projects" service
// "listProjects" endpoint HTTP response body for the "not_found" error.
type ListProjectsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListProjectsConflictResponseBody is the type of the "projects" service
// "listProjects" endpoint HTTP response body for the "conflict" error.
type ListProjectsConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListProjectsUnsupportedMediaResponseBody is the type of the "projects"
// service "listProjects" endpoint HTTP response body for the
// "unsupported_media" error.
type ListProjectsUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListProjectsInvalidResponseBody is the type of the "projects" service
// "listProjects" endpoint HTTP response body for the "invalid" error.
type ListProjectsInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListProjectsInvariantViolationResponseBody is the type of the "projects"
// service "listProjects" endpoint HTTP response body for the
// "invariant_violation" error.
type ListProjectsInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListProjectsUnexpectedResponseBody is the type of the "projects" service
// "listProjects" endpoint HTTP response body for the "unexpected" error.
type ListProjectsUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListProjectsGatewayErrorResponseBody is the type of the "projects" service
// "listProjects" endpoint HTTP response body for the "gateway_error" error.
type ListProjectsGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetLogoUnauthorizedResponseBody is the type of the "projects" service
// "setLogo" endpoint HTTP response body for the "unauthorized" error.
type SetLogoUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetLogoForbiddenResponseBody is the type of the "projects" service "setLogo"
// endpoint HTTP response body for the "forbidden" error.
type SetLogoForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetLogoBadRequestResponseBody is the type of the "projects" service
// "setLogo" endpoint HTTP response body for the "bad_request" error.
type SetLogoBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetLogoNotFoundResponseBody is the type of the "projects" service "setLogo"
// endpoint HTTP response body for the "not_found" error.
type SetLogoNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetLogoConflictResponseBody is the type of the "projects" service "setLogo"
// endpoint HTTP response body for the "conflict" error.
type SetLogoConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetLogoUnsupportedMediaResponseBody is the type of the "projects" service
// "setLogo" endpoint HTTP response body for the "unsupported_media" error.
type SetLogoUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetLogoInvalidResponseBody is the type of the "projects" service "setLogo"
// endpoint HTTP response body for the "invalid" error.
type SetLogoInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetLogoInvariantViolationResponseBody is the type of the "projects" service
// "setLogo" endpoint HTTP response body for the "invariant_violation" error.
type SetLogoInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetLogoUnexpectedResponseBody is the type of the "projects" service
// "setLogo" endpoint HTTP response body for the "unexpected" error.
type SetLogoUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetLogoGatewayErrorResponseBody is the type of the "projects" service
// "setLogo" endpoint HTTP response body for the "gateway_error" error.
type SetLogoGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	// The ID of the project
	ID string `form:"id" json:"id" xml:"id"`
	// The name of the project
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the project
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// The ID of the organization that owns the project
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The ID of the logo asset for the project
	LogoAssetID *string `form:"logo_asset_id,omitempty" json:"logo_asset_id,omitempty" xml:"logo_asset_id,omitempty"`
	// The creation date of the project.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the project.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ProjectEntryResponseBody is used to define fields on response body types.
type ProjectEntryResponseBody struct {
	// The ID of the project
	ID string `form:"id" json:"id" xml:"id"`
	// The name of the project
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the project
	Slug string `form:"slug" json:"slug" xml:"slug"`
}

// NewCreateProjectResponseBody builds the HTTP response body from the result
// of the "createProject" endpoint of the "projects" service.
func NewCreateProjectResponseBody(res *projects.CreateProjectResult) *CreateProjectResponseBody {
	body := &CreateProjectResponseBody{}
	if res.Project != nil {
		body.Project = marshalProjectsProjectToProjectResponseBody(res.Project)
	}
	return body
}

// NewListProjectsResponseBody builds the HTTP response body from the result of
// the "listProjects" endpoint of the "projects" service.
func NewListProjectsResponseBody(res *projects.ListProjectsResult) *ListProjectsResponseBody {
	body := &ListProjectsResponseBody{}
	if res.Projects != nil {
		body.Projects = make([]*ProjectEntryResponseBody, len(res.Projects))
		for i, val := range res.Projects {
			body.Projects[i] = marshalProjectsProjectEntryToProjectEntryResponseBody(val)
		}
	} else {
		body.Projects = []*ProjectEntryResponseBody{}
	}
	return body
}

// NewSetLogoResponseBody builds the HTTP response body from the result of the
// "setLogo" endpoint of the "projects" service.
func NewSetLogoResponseBody(res *projects.SetProjectLogoResult) *SetLogoResponseBody {
	body := &SetLogoResponseBody{}
	if res.Project != nil {
		body.Project = marshalProjectsProjectToProjectResponseBody(res.Project)
	}
	return body
}

// NewCreateProjectUnauthorizedResponseBody builds the HTTP response body from
// the result of the "createProject" endpoint of the "projects" service.
func NewCreateProjectUnauthorizedResponseBody(res *goa.ServiceError) *CreateProjectUnauthorizedResponseBody {
	body := &CreateProjectUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProjectForbiddenResponseBody builds the HTTP response body from the
// result of the "createProject" endpoint of the "projects" service.
func NewCreateProjectForbiddenResponseBody(res *goa.ServiceError) *CreateProjectForbiddenResponseBody {
	body := &CreateProjectForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProjectBadRequestResponseBody builds the HTTP response body from
// the result of the "createProject" endpoint of the "projects" service.
func NewCreateProjectBadRequestResponseBody(res *goa.ServiceError) *CreateProjectBadRequestResponseBody {
	body := &CreateProjectBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProjectNotFoundResponseBody builds the HTTP response body from the
// result of the "createProject" endpoint of the "projects" service.
func NewCreateProjectNotFoundResponseBody(res *goa.ServiceError) *CreateProjectNotFoundResponseBody {
	body := &CreateProjectNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProjectConflictResponseBody builds the HTTP response body from the
// result of the "createProject" endpoint of the "projects" service.
func NewCreateProjectConflictResponseBody(res *goa.ServiceError) *CreateProjectConflictResponseBody {
	body := &CreateProjectConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProjectUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "createProject" endpoint of the "projects" service.
func NewCreateProjectUnsupportedMediaResponseBody(res *goa.ServiceError) *CreateProjectUnsupportedMediaResponseBody {
	body := &CreateProjectUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProjectInvalidResponseBody builds the HTTP response body from the
// result of the "createProject" endpoint of the "projects" service.
func NewCreateProjectInvalidResponseBody(res *goa.ServiceError) *CreateProjectInvalidResponseBody {
	body := &CreateProjectInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProjectInvariantViolationResponseBody builds the HTTP response body
// from the result of the "createProject" endpoint of the "projects" service.
func NewCreateProjectInvariantViolationResponseBody(res *goa.ServiceError) *CreateProjectInvariantViolationResponseBody {
	body := &CreateProjectInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProjectUnexpectedResponseBody builds the HTTP response body from
// the result of the "createProject" endpoint of the "projects" service.
func NewCreateProjectUnexpectedResponseBody(res *goa.ServiceError) *CreateProjectUnexpectedResponseBody {
	body := &CreateProjectUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProjectGatewayErrorResponseBody builds the HTTP response body from
// the result of the "createProject" endpoint of the "projects" service.
func NewCreateProjectGatewayErrorResponseBody(res *goa.ServiceError) *CreateProjectGatewayErrorResponseBody {
	body := &CreateProjectGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListProjectsUnauthorizedResponseBody builds the HTTP response body from
// the result of the "listProjects" endpoint of the "projects" service.
func NewListProjectsUnauthorizedResponseBody(res *goa.ServiceError) *ListProjectsUnauthorizedResponseBody {
	body := &ListProjectsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListProjectsForbiddenResponseBody builds the HTTP response body from the
// result of the "listProjects" endpoint of the "projects" service.
func NewListProjectsForbiddenResponseBody(res *goa.ServiceError) *ListProjectsForbiddenResponseBody {
	body := &ListProjectsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListProjectsBadRequestResponseBody builds the HTTP response body from the
// result of the "listProjects" endpoint of the "projects" service.
func NewListProjectsBadRequestResponseBody(res *goa.ServiceError) *ListProjectsBadRequestResponseBody {
	body := &ListProjectsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListProjectsNotFoundResponseBody builds the HTTP response body from the
// result of the "listProjects" endpoint of the "projects" service.
func NewListProjectsNotFoundResponseBody(res *goa.ServiceError) *ListProjectsNotFoundResponseBody {
	body := &ListProjectsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListProjectsConflictResponseBody builds the HTTP response body from the
// result of the "listProjects" endpoint of the "projects" service.
func NewListProjectsConflictResponseBody(res *goa.ServiceError) *ListProjectsConflictResponseBody {
	body := &ListProjectsConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListProjectsUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "listProjects" endpoint of the "projects" service.
func NewListProjectsUnsupportedMediaResponseBody(res *goa.ServiceError) *ListProjectsUnsupportedMediaResponseBody {
	body := &ListProjectsUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListProjectsInvalidResponseBody builds the HTTP response body from the
// result of the "listProjects" endpoint of the "projects" service.
func NewListProjectsInvalidResponseBody(res *goa.ServiceError) *ListProjectsInvalidResponseBody {
	body := &ListProjectsInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListProjectsInvariantViolationResponseBody builds the HTTP response body
// from the result of the "listProjects" endpoint of the "projects" service.
func NewListProjectsInvariantViolationResponseBody(res *goa.ServiceError) *ListProjectsInvariantViolationResponseBody {
	body := &ListProjectsInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListProjectsUnexpectedResponseBody builds the HTTP response body from the
// result of the "listProjects" endpoint of the "projects" service.
func NewListProjectsUnexpectedResponseBody(res *goa.ServiceError) *ListProjectsUnexpectedResponseBody {
	body := &ListProjectsUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListProjectsGatewayErrorResponseBody builds the HTTP response body from
// the result of the "listProjects" endpoint of the "projects" service.
func NewListProjectsGatewayErrorResponseBody(res *goa.ServiceError) *ListProjectsGatewayErrorResponseBody {
	body := &ListProjectsGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetLogoUnauthorizedResponseBody builds the HTTP response body from the
// result of the "setLogo" endpoint of the "projects" service.
func NewSetLogoUnauthorizedResponseBody(res *goa.ServiceError) *SetLogoUnauthorizedResponseBody {
	body := &SetLogoUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetLogoForbiddenResponseBody builds the HTTP response body from the
// result of the "setLogo" endpoint of the "projects" service.
func NewSetLogoForbiddenResponseBody(res *goa.ServiceError) *SetLogoForbiddenResponseBody {
	body := &SetLogoForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetLogoBadRequestResponseBody builds the HTTP response body from the
// result of the "setLogo" endpoint of the "projects" service.
func NewSetLogoBadRequestResponseBody(res *goa.ServiceError) *SetLogoBadRequestResponseBody {
	body := &SetLogoBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetLogoNotFoundResponseBody builds the HTTP response body from the result
// of the "setLogo" endpoint of the "projects" service.
func NewSetLogoNotFoundResponseBody(res *goa.ServiceError) *SetLogoNotFoundResponseBody {
	body := &SetLogoNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetLogoConflictResponseBody builds the HTTP response body from the result
// of the "setLogo" endpoint of the "projects" service.
func NewSetLogoConflictResponseBody(res *goa.ServiceError) *SetLogoConflictResponseBody {
	body := &SetLogoConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetLogoUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "setLogo" endpoint of the "projects" service.
func NewSetLogoUnsupportedMediaResponseBody(res *goa.ServiceError) *SetLogoUnsupportedMediaResponseBody {
	body := &SetLogoUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetLogoInvalidResponseBody builds the HTTP response body from the result
// of the "setLogo" endpoint of the "projects" service.
func NewSetLogoInvalidResponseBody(res *goa.ServiceError) *SetLogoInvalidResponseBody {
	body := &SetLogoInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetLogoInvariantViolationResponseBody builds the HTTP response body from
// the result of the "setLogo" endpoint of the "projects" service.
func NewSetLogoInvariantViolationResponseBody(res *goa.ServiceError) *SetLogoInvariantViolationResponseBody {
	body := &SetLogoInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetLogoUnexpectedResponseBody builds the HTTP response body from the
// result of the "setLogo" endpoint of the "projects" service.
func NewSetLogoUnexpectedResponseBody(res *goa.ServiceError) *SetLogoUnexpectedResponseBody {
	body := &SetLogoUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetLogoGatewayErrorResponseBody builds the HTTP response body from the
// result of the "setLogo" endpoint of the "projects" service.
func NewSetLogoGatewayErrorResponseBody(res *goa.ServiceError) *SetLogoGatewayErrorResponseBody {
	body := &SetLogoGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProjectPayload builds a projects service createProject endpoint
// payload.
func NewCreateProjectPayload(body *CreateProjectRequestBody, apikeyToken *string, sessionToken *string) *projects.CreateProjectPayload {
	v := &projects.CreateProjectPayload{
		OrganizationID: *body.OrganizationID,
		Name:           *body.Name,
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken

	return v
}

// NewListProjectsPayload builds a projects service listProjects endpoint
// payload.
func NewListProjectsPayload(organizationID string, apikeyToken *string, sessionToken *string) *projects.ListProjectsPayload {
	v := &projects.ListProjectsPayload{}
	v.OrganizationID = organizationID
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken

	return v
}

// NewSetLogoPayload builds a projects service setLogo endpoint payload.
func NewSetLogoPayload(body *SetLogoRequestBody, apikeyToken *string, sessionToken *string, projectSlugInput *string) *projects.SetLogoPayload {
	v := &projects.SetLogoPayload{
		AssetID: *body.AssetID,
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// ValidateCreateProjectRequestBody runs the validations defined on
// CreateProjectRequestBody
func ValidateCreateProjectRequestBody(body *CreateProjectRequestBody) (err error) {
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	return
}

// ValidateSetLogoRequestBody runs the validations defined on SetLogoRequestBody
func ValidateSetLogoRequestBody(body *SetLogoRequestBody) (err error) {
	if body.AssetID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("asset_id", "body"))
	}
	return
}
